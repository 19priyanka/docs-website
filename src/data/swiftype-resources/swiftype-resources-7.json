{
  "/docs/apm/agents/python-agent/python-agent-api/settransactionname-python-agent-api": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.5122,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ". <em>Python</em> version 3.5 is supported only by <em>Python</em> <em>agent</em> versions 5.24.0.153 or lower. <em>Python</em> versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon Fast<em>API</em> Flask GraphQL gRPC Pylons Pyramid"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-25T01:12:48Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.353714,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.09942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/shutdownagent-python-agent-api": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.5122,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ". <em>Python</em> version 3.5 is supported only by <em>Python</em> <em>agent</em> versions 5.24.0.153 or lower. <em>Python</em> versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon Fast<em>API</em> Flask GraphQL gRPC Pylons Pyramid"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-25T01:12:48Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.353714,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.09942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/suppressapdexmetric-python-agent-api": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.51213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ". <em>Python</em> version 3.5 is supported only by <em>Python</em> <em>agent</em> versions 5.24.0.153 or lower. <em>Python</em> versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon Fast<em>API</em> Flask GraphQL gRPC Pylons Pyramid"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-25T01:12:48Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.35371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.09942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/suppresstransactiontrace-python-agent-api": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.51213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ". <em>Python</em> version 3.5 is supported only by <em>Python</em> <em>agent</em> versions 5.24.0.153 or lower. <em>Python</em> versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon Fast<em>API</em> Flask GraphQL gRPC Pylons Pyramid"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-25T01:12:48Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.35371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.09942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/webtransaction": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.51205,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ". <em>Python</em> version 3.5 is supported only by <em>Python</em> <em>agent</em> versions 5.24.0.153 or lower. <em>Python</em> versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon Fast<em>API</em> Flask GraphQL gRPC Pylons Pyramid"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-25T01:12:48Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.35371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.09942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/apm/agents/python-agent/python-agent-api/wsgiapplication-python-agent-api": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.51205,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ". <em>Python</em> version 3.5 is supported only by <em>Python</em> <em>agent</em> versions 5.24.0.153 or lower. <em>Python</em> versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon Fast<em>API</em> Flask GraphQL gRPC Pylons Pyramid"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-10-25T01:12:48Z",
      "updated_at": "2021-08-21T02:49:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error(). Description Records details of a Python exception as an error. By default, the Python agent only reports unhandled exceptions. Use record_exception to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the exception currently being handled will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When record_exception() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, record_exception will require no parameters. Parameter Description exc class object Optional and rarely used. The exception type of the exception being handled (a class object). One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. value int, string, other Optional and rarely used. The exception parameter. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. tb object Optional and rarely used. A traceback object that encapsulates the call stack at the point where the exception originally occurred. One of three values (exc, value, and tb) returned from sys.exc_info(). If you want to pass any of these parameters, all three must be set and and cannot be set to None. If you only pass one of these values, the call will not work. params dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. ignore_errors string Optional. Errors to ignore can be passed in the form module:class. Useful when certain types of exceptions should always be ignored and never recorded. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In large majority of cases, you won't need to pass any paramters. You would just call the following where you want to report an exception: newrelic.agent.record_exception() Copy Call with sys.exc_info() tuple and additional parameters An example of record_exception using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.record_exception(params={'my_special_exception': True}, ignore_errors=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.record_exception(ignore_errors=_ignore_errors) Copy If the exception is to be ignored, set the return value for the callable to True. Return False if the exception should never be ignored regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.35371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error(). Description Records details of a <em>Python</em> exception as an error. By default, the <em>Python</em> <em>agent</em> only reports unhandled"
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.09942,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent": [
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-25T01:19:59Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.76218,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-25T01:21:02Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.55478,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-10-25T01:19:04Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.56676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/cross-application-tracing": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-25T06:32:40Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.75037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-25T01:19:59Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.76216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-25T01:21:02Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.55478,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/monitor-non-web-scripts-worker-processes-tasks-functions": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-25T06:32:40Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.75037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-25T01:19:59Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.76216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-25T01:21:02Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.55478,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-25T06:32:40Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.75037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-25T01:21:02Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.55478,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-10-25T01:19:04Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.56676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-custom-metrics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-25T06:32:40Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.75037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-25T01:19:59Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.76216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-25T01:21:02Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.55478,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-25T06:32:40Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.75037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-25T01:19:59Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.76216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-25T01:21:02Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.55476,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-graphQL": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.56378,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-25T06:01:43Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.416016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> monitors your <em>Python</em> application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-24T23:06:32Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 72.28073,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-message-queues": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-25T06:32:40Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.75037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-25T01:19:59Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.76216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-25T01:21:02Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.55476,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-runtime-metrics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-25T06:32:40Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.75037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-25T01:19:59Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.76216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-10-25T01:19:04Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.56676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-tips-tricks": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-10-25T06:32:40Z",
      "updated_at": "2021-07-09T09:42:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.75037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-10-25T01:19:59Z",
      "updated_at": "2021-07-09T14:32:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.76216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2678596b8482e2fb5b5e1ab68f3d7baf83b3595e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2021-10-25T01:21:02Z",
      "updated_at": "2021-07-10T22:26:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.55476,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "60ea1e8864441f59e147abec"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/activate-application-warning-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-25T06:01:43Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.87372,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see the full list"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.56366,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-24T23:06:32Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.04717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/emulating-legacy-server-side-parameter-configuration-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-25T06:01:43Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.87372,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see the full list"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.56366,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-24T23:06:32Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.04717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/missing-information-when-using-ensurefuture-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-25T06:01:43Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.87364,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see the full list"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.56361,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-24T23:06:32Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.047165,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/no-data-appears-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-25T06:01:43Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.87364,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see the full list"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.56361,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-24T23:06:32Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.047165,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/python-agent-logging": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-25T06:01:43Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.87357,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see the full list"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.56355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-24T23:06:32Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.047165,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/testing-python-agent": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-25T06:01:43Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.87357,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see the full list"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.56355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-24T23:06:32Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.047165,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/troubleshooting-browser-instrumentation-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-25T06:01:43Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.87347,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see the full list"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.56349,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You"
      },
      "id": "61749d1864441fd01a5fd02d"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-10-24T23:06:32Z",
      "updated_at": "2021-09-14T05:57:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.047165,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-ajp-wsgi-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.0033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-cherrypy-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.0033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework": [
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "2f2944f2b60c89b711393131cc8ea0bd486c42ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2021-10-25T06:48:48Z",
      "updated_at": "2021-03-16T14:26:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.34633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Asyncpg</em>",
        "sections": "Using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips"
      },
      "id": "603e8a89196a6741a8a83df1"
    },
    {
      "sections": [
        "Django ASGI Mode",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Django ASGI Mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "1871aa8881deeeb349ea435d554846abc63aa3dd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/django-asgi-mode/",
      "published_at": "2021-10-25T17:44:50Z",
      "updated_at": "2021-03-11T01:23:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 6.0.0.154 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.43565,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our <em>Python</em>"
      },
      "id": "6043b84264441f9b98378f01"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "673e900c88bfaa4bd990a865caf8c0116f5affcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-10-25T06:16:07Z",
      "updated_at": "2021-10-23T23:39:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. If you don't have one already, create a New Relic account. It's free, forever. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.6, 3.7, 3.8, 3.9, and 3.10. Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python version 3.5 is supported only by Python agent versions 5.24.0.153 or lower. Python versions 2.7 and 3.6 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask GraphQL gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.10 October 04, 2021 October 12, 2021 3.11 October 03, 2022 November 2022 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.6 December 2021 Python agent versions released after March 2022 will not support Python 3.6. For more information, see our Python agent release notes. 2.7 January 1, 2020 TBD Connect the agent to other capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.56343,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual <em>instrumentation</em>, see Browser monitoring and the <em>Python</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure monitoring and APM <em>agents</em> on the same host, they automatically detect one another. You"
      },
      "id": "61749d1864441fd01a5fd02d"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-fastcgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.0033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-gunicorn-wsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.0033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-modwsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.0033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-paste": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.00328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-scgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.00328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-10-25T01:26:04Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.18066,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.00328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-uwsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.00328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-waitress-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.00328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-10-25T01:27:36Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.47884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.00328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-10-25T01:26:04Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.18065,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-10-25T01:26:20Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.40288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-10-25T01:27:37Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.00328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-10-25T01:26:04Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.18065,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/guide-using-ruby-agent-api": [
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-25T01:28:32Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.70026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.43895,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting",
        "For more help"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "711df6a6f072c451ca8a55a9316d8c13c083ada2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2021-10-25T01:28:31Z",
      "updated_at": "2021-07-21T19:10:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition. For more help Additional documentation resources include Apdex: Measuring user satisfaction (how Apdex is calculated).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.132385,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following family of <em>API</em> calls from any point within your transaction: NewRelic"
      },
      "id": "603eb738196a67db90a83dbd"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions": [
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-25T01:28:32Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.70016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.438896,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Third party instrumentation",
        "Contents",
        "Finding third-party extensions",
        "Extensions as gems",
        "Starting transactions",
        "add_transaction_tracer",
        "perform_action_with_newrelic_trace",
        "Nodes in transaction traces",
        "add_method_tracer",
        "Custom Datastores",
        "NewRelic::Agent::Datastores.trace",
        "NewRelic::Agent::Datastores.wrap",
        "NewRelic::Agent::Datastores.notice_sql",
        "Caution",
        "NewRelic::Agent::Datastores.notice_statement",
        "Testing your extension",
        "NewRelic::Agent.require_test_helper",
        "assert_metrics_recorded",
        "in_web_transaction/in_background_transaction",
        "with_config",
        "Tip",
        "Multiverse: Test against multiple gem versions"
      ],
      "title": "Third party instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "57bcc0d905afa6233b74207ec38808fdf5cc97ef",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/third-party-instrumentation/",
      "published_at": "2021-10-25T01:29:14Z",
      "updated_at": "2021-03-11T08:12:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document details how to instrument third-party gems with the Ruby agent, as well as some best practices for interacting with the agent. This is useful if you are using a gem that the Ruby agent does not instrument by default, or if you are a gem author who wants to add instrumentation for your library. Contents Finding third-party extensions Anyone can write a gem that builds on top of the Ruby agent. New Relic maintains a repository called extends_newrelic_rpm to track these extensions and to provide links to other gems that build the Ruby agent. These extensions are not supported by New Relic. New Relic gathers these links as a service to our customers. Issues with those gems should be reported to the respective projects on GitHub. Extensions as gems New Relic encourages third-party extensions to be maintained as gems, with one gem per instrumented library. For example, newrelic-redis provides instrumentation for the redis gem. Starting transactions If your library provides code which should be represented as a full transaction in New Relic (for example: a web request or background job that isn't instrumented by the Ruby agent), then use one of these mechanisms for starting a transaction. add_transaction_tracer The simplest way to get a transaction started is to call add_transaction_tracer on the method. This assumes that NewRelic::Agent::Instrumentation::ControllerInstrumentation is included in your class. class CustomBackgroundJob include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy perform_action_with_newrelic_trace Sometimes you need slightly more control over the transaction that New Relic generates. When that happens, you can use perform_action_with_newrelic_trace. Some of the parameters you can override include the transaction name and category (whether it's a web transaction or a background transaction). class CustomBackgroundJob include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction perform_action_with_newrelic_trace(:name => \"custom_name\", :category => :task) do # your work here... end end end Copy See the full documentation of perform_action_with_newrelic_trace for further information on parameters and usage. Nodes in transaction traces You may want to add timing information to New Relic about calls to a method, but it does not represent a full transaction. New Relic recommends adding a method tracer to accomplish this. add_method_tracer require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image # ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy The above example results in metrics being recorded for the name 'Custom/generate_image', as well as an entry in transaction traces that includes the method call. Custom Datastores The Ruby agent provides special functionality for recording calls to Datastores. These are intended to support both SQL and NoSQL databases, and provide a consistent interface for use by third-party gems. Metrics recorded via the NewRelic::Agent::Datastores module functions will show up in the Databases UI in New Relic. NewRelic::Agent::Datastores.trace trace is the simplest way to record Datastore for a method. class FauxDB def find # FauxDB lookup end NewRelic::Agent::Datastores.trace self, :find, \"FauxDB\" end Copy The first parameter is the class to instrument, the second the method to find, the third the datastore product name. An optional operation name can be included as the final parameter, otherwise the method name is used to represent the operation in metrics. Note that Datastore metrics recorded with this interface do not allow for adding a collection/table name. For that, see the wrap method below. NewRelic::Agent::Datastores.wrap wrap allows for recording Datastore metrics with additional collection/table information in the metric names. It also provides a callback for operations such as noticing slow statements. class FauxDB def find(table) NewRelic::Agent::Datastores.wrap(\"FauxDB\", \"find\", table) do # FauxDB lookup end end end Copy If you want to record additional information about your datastore call, you can use the optional callback parameter on wrap: class FauxDB def find(query) callback = Proc.new do |result, scoped_metric, elapsed| NewRelic::Agent::Datastores.notice_sql(query, scoped_metric, elapsed) end NewRelic::Agent::Datastores.wrap(\"FauxDB\", \"find\", \"items\", callback) do # execute query end end end Copy NewRelic::Agent::Datastores.notice_sql This helper method records slow SQL queries for presentation in transaction traces and slow SQL pages. SQL is filtered and obfuscated based on the user's settings. NewRelic::Agent::Datastores.notice_sql(query, scoped_metric, elapsed) Copy Non-SQL queries should never be sent through notice_sql.Use notice_statement instead. Caution New Relic's Transaction Tracing and Slow SQL features will attempt to apply obfuscation to the passed queries, but it is possible for a query format to be unsupported and result in exposing user information embedded within captured queries. NewRelic::Agent::Datastores.notice_statement This helper method records statements for slow datastore calls to transaction traces. These are not obfuscated. NewRelic::Agent::Datastores.notice_statement(statement, elapsed) Copy SQL queries should never be sent through notice_statement. Use notice_sql instead. Caution This method will properly ignore statements when the user has turned off capturing queries, but it is not able to obfuscate arbitrary data! Ensure all data passed to this method is safe to transmit to New Relic in order to prevent exposing user information embedded in captured queries. Testing your extension You can write automated tests when you author a gem that extends New Relic. The test helpers used by the agent itself are available to simplify some common testing tasks. NewRelic::Agent.require_test_helper The test methods documented in this section can be accessed by calling this from your test code (most commonly a test_helper.rb file) NewRelic::Agent.require_test_helper Copy assert_metrics_recorded This method is the primary way to ensure your expected metrics are recorded by the Ruby agent. refute_metrics_recorded is also available. In the simplest form, assert_metrics_recorded can be called like this: assert_metrics_recorded([\"MetricA\", \"MetricB\"]) Copy Metrics with specific values can be asserted via this syntax: assert_metrics_recorded('MetricA' => { :call_count => 1, :total_call_time => 1.0 }) Copy in_web_transaction/in_background_transaction These methods simulate running in web or background transaction. in_web_transaction do # Perform work to test behavior in transaction end Copy with_config Configuration of the agent can be changed for testing via with_config. It takes a hash which is applied to the other configuration values in agent. with_config(:enabled => false) do # Check what happens when agent's disabled end Copy Tip This method doesn't help for testing installation of instrumentation, as those config values are typically checked when instrumentation happens on require, and isn't influenced by the setting change in a test. Multiverse: Test against multiple gem versions If you need to test your extension against multiple gem versions, you can use Multiverse, a part of the Ruby agent's own testing code. For examples of Multiverse testing, see the suites directory in the agent files. To configure Multiverse for your own gem: Require tasks/multiverse in Rakefile. To enable the rake test:multiverse command, add the following to your Rakefile: require \"tasks/multiverse\" Copy Create the Multiverse test directory. Multiverse tests require a specific file layout. Create a directory named test/multiverse/YOUR_PROJECT with the following file locations: test/multiverse/YOUR_PROJECT test/multiverse/YOUR_PROJECT/Envfile test/multiverse/YOUR_PROJECT/config/newrelic.yml test/multiverse/YOUR_PROJECT/FILE_WITH_A_TEST.rb Copy Configure your Envfile. Use the Envfile to declare sets of gem dependencies for your Multiverse tests. For example, your Envfile might look like this: gemfile <-RB gem 'your-project', '~> 1.0.0' gem 'rack' gem 'newrelic_rpm' gem 'newrelic_your-project', path: '../../..' RB gemfile <-RB gem 'your-project', '~> 2.1.0' gem 'rack' gem 'newrelic_rpm' gem 'newrelic_your-project', path: '../../..' RB Copy Tip Include the gem lines for newrelic_rpm and rack to ensure your Multiverse tests work. Detect dependencies. If necessary, ensure your extension's instrumentation is loaded by running an additional dependency detection from your Multiverse tests: require 'newrelic/your-project' DependencyDetection.detect! class YourProjectTest > Minitest::Test end Copy To run your Multiverse tests against the gem dependencies in your Envfile: After setting up Multiverse for your gem, run rake test:multiverse to execute the tests in your directory.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.27184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "NewRelic::<em>Agent</em>::Datastores.trace",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "This document details how to instrument third-party gems with the <em>Ruby</em> <em>agent</em>, as well as some best practices for interacting with the <em>agent</em>. This is useful if you are using a gem that the <em>Ruby</em> <em>agent</em> does not instrument by default, or if you are a gem author who wants to add instrumentation for your"
      },
      "id": "604403e0e7b9d23d64579a05"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.438896,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting",
        "For more help"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "711df6a6f072c451ca8a55a9316d8c13c083ada2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2021-10-25T01:28:31Z",
      "updated_at": "2021-07-21T19:10:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition. For more help Additional documentation resources include Apdex: Measuring user satisfaction (how Apdex is calculated).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.132385,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following family of <em>API</em> calls from any point within your transaction: NewRelic"
      },
      "id": "603eb738196a67db90a83dbd"
    },
    {
      "sections": [
        "Third party instrumentation",
        "Contents",
        "Finding third-party extensions",
        "Extensions as gems",
        "Starting transactions",
        "add_transaction_tracer",
        "perform_action_with_newrelic_trace",
        "Nodes in transaction traces",
        "add_method_tracer",
        "Custom Datastores",
        "NewRelic::Agent::Datastores.trace",
        "NewRelic::Agent::Datastores.wrap",
        "NewRelic::Agent::Datastores.notice_sql",
        "Caution",
        "NewRelic::Agent::Datastores.notice_statement",
        "Testing your extension",
        "NewRelic::Agent.require_test_helper",
        "assert_metrics_recorded",
        "in_web_transaction/in_background_transaction",
        "with_config",
        "Tip",
        "Multiverse: Test against multiple gem versions"
      ],
      "title": "Third party instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "57bcc0d905afa6233b74207ec38808fdf5cc97ef",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/third-party-instrumentation/",
      "published_at": "2021-10-25T01:29:14Z",
      "updated_at": "2021-03-11T08:12:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document details how to instrument third-party gems with the Ruby agent, as well as some best practices for interacting with the agent. This is useful if you are using a gem that the Ruby agent does not instrument by default, or if you are a gem author who wants to add instrumentation for your library. Contents Finding third-party extensions Anyone can write a gem that builds on top of the Ruby agent. New Relic maintains a repository called extends_newrelic_rpm to track these extensions and to provide links to other gems that build the Ruby agent. These extensions are not supported by New Relic. New Relic gathers these links as a service to our customers. Issues with those gems should be reported to the respective projects on GitHub. Extensions as gems New Relic encourages third-party extensions to be maintained as gems, with one gem per instrumented library. For example, newrelic-redis provides instrumentation for the redis gem. Starting transactions If your library provides code which should be represented as a full transaction in New Relic (for example: a web request or background job that isn't instrumented by the Ruby agent), then use one of these mechanisms for starting a transaction. add_transaction_tracer The simplest way to get a transaction started is to call add_transaction_tracer on the method. This assumes that NewRelic::Agent::Instrumentation::ControllerInstrumentation is included in your class. class CustomBackgroundJob include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy perform_action_with_newrelic_trace Sometimes you need slightly more control over the transaction that New Relic generates. When that happens, you can use perform_action_with_newrelic_trace. Some of the parameters you can override include the transaction name and category (whether it's a web transaction or a background transaction). class CustomBackgroundJob include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction perform_action_with_newrelic_trace(:name => \"custom_name\", :category => :task) do # your work here... end end end Copy See the full documentation of perform_action_with_newrelic_trace for further information on parameters and usage. Nodes in transaction traces You may want to add timing information to New Relic about calls to a method, but it does not represent a full transaction. New Relic recommends adding a method tracer to accomplish this. add_method_tracer require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image # ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy The above example results in metrics being recorded for the name 'Custom/generate_image', as well as an entry in transaction traces that includes the method call. Custom Datastores The Ruby agent provides special functionality for recording calls to Datastores. These are intended to support both SQL and NoSQL databases, and provide a consistent interface for use by third-party gems. Metrics recorded via the NewRelic::Agent::Datastores module functions will show up in the Databases UI in New Relic. NewRelic::Agent::Datastores.trace trace is the simplest way to record Datastore for a method. class FauxDB def find # FauxDB lookup end NewRelic::Agent::Datastores.trace self, :find, \"FauxDB\" end Copy The first parameter is the class to instrument, the second the method to find, the third the datastore product name. An optional operation name can be included as the final parameter, otherwise the method name is used to represent the operation in metrics. Note that Datastore metrics recorded with this interface do not allow for adding a collection/table name. For that, see the wrap method below. NewRelic::Agent::Datastores.wrap wrap allows for recording Datastore metrics with additional collection/table information in the metric names. It also provides a callback for operations such as noticing slow statements. class FauxDB def find(table) NewRelic::Agent::Datastores.wrap(\"FauxDB\", \"find\", table) do # FauxDB lookup end end end Copy If you want to record additional information about your datastore call, you can use the optional callback parameter on wrap: class FauxDB def find(query) callback = Proc.new do |result, scoped_metric, elapsed| NewRelic::Agent::Datastores.notice_sql(query, scoped_metric, elapsed) end NewRelic::Agent::Datastores.wrap(\"FauxDB\", \"find\", \"items\", callback) do # execute query end end end Copy NewRelic::Agent::Datastores.notice_sql This helper method records slow SQL queries for presentation in transaction traces and slow SQL pages. SQL is filtered and obfuscated based on the user's settings. NewRelic::Agent::Datastores.notice_sql(query, scoped_metric, elapsed) Copy Non-SQL queries should never be sent through notice_sql.Use notice_statement instead. Caution New Relic's Transaction Tracing and Slow SQL features will attempt to apply obfuscation to the passed queries, but it is possible for a query format to be unsupported and result in exposing user information embedded within captured queries. NewRelic::Agent::Datastores.notice_statement This helper method records statements for slow datastore calls to transaction traces. These are not obfuscated. NewRelic::Agent::Datastores.notice_statement(statement, elapsed) Copy SQL queries should never be sent through notice_statement. Use notice_sql instead. Caution This method will properly ignore statements when the user has turned off capturing queries, but it is not able to obfuscate arbitrary data! Ensure all data passed to this method is safe to transmit to New Relic in order to prevent exposing user information embedded in captured queries. Testing your extension You can write automated tests when you author a gem that extends New Relic. The test helpers used by the agent itself are available to simplify some common testing tasks. NewRelic::Agent.require_test_helper The test methods documented in this section can be accessed by calling this from your test code (most commonly a test_helper.rb file) NewRelic::Agent.require_test_helper Copy assert_metrics_recorded This method is the primary way to ensure your expected metrics are recorded by the Ruby agent. refute_metrics_recorded is also available. In the simplest form, assert_metrics_recorded can be called like this: assert_metrics_recorded([\"MetricA\", \"MetricB\"]) Copy Metrics with specific values can be asserted via this syntax: assert_metrics_recorded('MetricA' => { :call_count => 1, :total_call_time => 1.0 }) Copy in_web_transaction/in_background_transaction These methods simulate running in web or background transaction. in_web_transaction do # Perform work to test behavior in transaction end Copy with_config Configuration of the agent can be changed for testing via with_config. It takes a hash which is applied to the other configuration values in agent. with_config(:enabled => false) do # Check what happens when agent's disabled end Copy Tip This method doesn't help for testing installation of instrumentation, as those config values are typically checked when instrumentation happens on require, and isn't influenced by the setting change in a test. Multiverse: Test against multiple gem versions If you need to test your extension against multiple gem versions, you can use Multiverse, a part of the Ruby agent's own testing code. For examples of Multiverse testing, see the suites directory in the agent files. To configure Multiverse for your own gem: Require tasks/multiverse in Rakefile. To enable the rake test:multiverse command, add the following to your Rakefile: require \"tasks/multiverse\" Copy Create the Multiverse test directory. Multiverse tests require a specific file layout. Create a directory named test/multiverse/YOUR_PROJECT with the following file locations: test/multiverse/YOUR_PROJECT test/multiverse/YOUR_PROJECT/Envfile test/multiverse/YOUR_PROJECT/config/newrelic.yml test/multiverse/YOUR_PROJECT/FILE_WITH_A_TEST.rb Copy Configure your Envfile. Use the Envfile to declare sets of gem dependencies for your Multiverse tests. For example, your Envfile might look like this: gemfile <-RB gem 'your-project', '~> 1.0.0' gem 'rack' gem 'newrelic_rpm' gem 'newrelic_your-project', path: '../../..' RB gemfile <-RB gem 'your-project', '~> 2.1.0' gem 'rack' gem 'newrelic_rpm' gem 'newrelic_your-project', path: '../../..' RB Copy Tip Include the gem lines for newrelic_rpm and rack to ensure your Multiverse tests work. Detect dependencies. If necessary, ensure your extension's instrumentation is loaded by running an additional dependency detection from your Multiverse tests: require 'newrelic/your-project' DependencyDetection.detect! class YourProjectTest > Minitest::Test end Copy To run your Multiverse tests against the gem dependencies in your Envfile: After setting up Multiverse for your gem, run rake test:multiverse to execute the tests in your directory.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.27184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "NewRelic::<em>Agent</em>::Datastores.trace",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "This document details how to instrument third-party gems with the <em>Ruby</em> <em>agent</em>, as well as some best practices for interacting with the <em>agent</em>. This is useful if you are using a gem that the <em>Ruby</em> <em>agent</em> does not instrument by default, or if you are a gem author who wants to add instrumentation for your"
      },
      "id": "604403e0e7b9d23d64579a05"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics": [
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-25T01:28:32Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.70007,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.43884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting",
        "For more help"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "711df6a6f072c451ca8a55a9316d8c13c083ada2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2021-10-25T01:28:31Z",
      "updated_at": "2021-07-21T19:10:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition. For more help Additional documentation resources include Apdex: Measuring user satisfaction (how Apdex is calculated).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.13238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following family of <em>API</em> calls from any point within your transaction: NewRelic"
      },
      "id": "603eb738196a67db90a83dbd"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic": [
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-25T01:28:32Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.70007,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.43884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting",
        "For more help"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "711df6a6f072c451ca8a55a9316d8c13c083ada2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2021-10-25T01:28:31Z",
      "updated_at": "2021-07-21T19:10:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition. For more help Additional documentation resources include Apdex: Measuring user satisfaction (how Apdex is calculated).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.13238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following family of <em>API</em> calls from any point within your transaction: NewRelic"
      },
      "id": "603eb738196a67db90a83dbd"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/third-party-instrumentation": [
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-25T01:28:32Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.70007,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.43884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting",
        "For more help"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "711df6a6f072c451ca8a55a9316d8c13c083ada2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2021-10-25T01:28:31Z",
      "updated_at": "2021-07-21T19:10:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition. For more help Additional documentation resources include Apdex: Measuring user satisfaction (how Apdex is calculated).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.13238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following family of <em>API</em> calls from any point within your transaction: NewRelic"
      },
      "id": "603eb738196a67db90a83dbd"
    }
  ],
  "/docs/apm/agents/ruby-agent/attributes/enable-disable-attributes-ruby": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34325,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "APM: Report custom events and attributes",
        "Data considerations",
        "Tip",
        "Record custom events and attributes",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Timestamps",
        "Limits and restricted characters",
        "Reserved words"
      ],
      "title": "APM: Report custom events and attributes",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Custom events"
      ],
      "external_id": "8731386e34fbced8d086795e273a1e2392b663ba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/data-apis/custom-data/custom-events/apm-report-custom-events-attributes/",
      "published_at": "2021-10-24T20:14:08Z",
      "updated_at": "2021-10-23T19:43:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have APM, you can report custom event data. You can then query and visualize your data in New Relic. Data considerations New Relic agents send event data to New Relic as part of the normal harvest cycle every five seconds for agent versions supporting real time streaming. Sending a lot of events can increase the memory overhead of the agent. New Relic enforces an upper limit of 833 custom events every 5 seconds. Additionally, posts greater than 1MB (10^6 bytes) in size will not be recorded, regardless of the custom event limit. You can also send custom events using the Event API (without need for APM). However, be aware that custom events sent with the agent APIs are not compatible with high security mode. Tip For more information, check out New Relic University’s tutorial Adding custom data with the APM agent API. Or, go directly to the full online course Custom data with APM. Record custom events and attributes You can add your own custom APM events and attributes, which you can then use for querying and charting. This is one of several ways to report custom data. To record a custom event, follow the procedures for your New Relic language agent. To add custom attributes to APM events, you must first enable them for your APM agent, and then make an API call to record the attribute. Follow the agent-specific custom attribute procedures. When creating your own custom events and attributes, follow data requirements for: Size limits Attribute types Reserved words C SDK To add a custom event to apps monitored by the C SDK, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For more information, see the Guide to using the C SDK API. You can then add custom attributes for your C SDK app. Go To add a custom event to apps monitored by the Go agent, use RecordCustomEvent. You can then add custom attributes for your Go app. Java Custom event collection is enabled by default in Java agent version 3.13.0 or higher. To send custom events, call recordCustomEvent. For example: Map<String, Object> eventAttributes = new HashMap<String, Object>(); NewRelic.getAgent().getInsights().recordCustomEvent(\"MyCustomEvent\", eventAttributes); Copy The first argument defines the name of your event type, and the second argument is a map with the attributes for your custom event. Event attributes must be strings or numbers. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Java agent via a configuration parameter in newrelic.yml. Specify the maximum number of events to record per minute as an integer. For example, if you want to send less than the default of 10000 events: custom_insights_events: max_samples_stored: 5000 Copy To disable custom events entirely, add the following to your newrelic.yml: custom_insights_events: enabled: false Copy You can then add custom attributes for your Java app. For Java agent versions prior to 4.1.0, use the following YAML configuration: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy .NET Custom event collection is enabled by default in .NET agent version 4.6.29.0 or higher. To send custom events, simply call RecordCustomEvent(). For example: var eventAttributes = new Dictionary<String, Object>(); NewRelic.Api.Agent.NewRelic.RecordCustomEvent('MyCustomEvent', eventAttributes); Copy The first argument defines the name of your event type, and the second argument is an IEnumerable with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your .NET app. You can turn off custom events entirely by setting customEvents.enabled to false in newrelic.config. Node.js Custom event collection is enabled by default in Node.js agent version 1.15.0 or higher. To send custom events, simply call the relevant API. For example: recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your Node.js app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.js. PHP Custom event collection is enabled by default in PHP agent version 4.18 or higher. To send custom events, simply call the relevant API function. For example: newrelic_record_custom_event(\"WidgetSale\", array(\"color\"=>\"red\", \"weight\"=>12.5)); Copy The first argument defines the name of your event type, and the second argument is an array with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. By default, the maximum number of custom events recorded per minute is 10,000. This setting cannot be changed. You can then add custom attributes for your PHP app. To disable custom events entirely, add newrelic.custom_insights_events.enabled = false to your newrelic.ini and restart the agent. Python Custom event collection is enabled by default in Python agent version 2.60.0.46 or higher. To send custom events, simply call the relevant API. For example: newrelic.agent. record_custom_event (event_type, params, application=None) Copy The event_type defines the name (or type) of the custom event. Attributes of the custom event should be passed in as a dictionary via the params keyword argument. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For limits and restrictions on event_type and params, see our documentation about limits and restricted characters and reserved words If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. You can then add custom attributes for your Python app. To disable custom events entirely, set custom_insights_events.enabled to False in your newrelic.ini configuration file. Ruby Custom event collection is enabled by default in Ruby agent version 3.9.8.273 or higher. To send custom events, simply call the relevant API. For example: ::NewRelic::Agent.record_custom_event('WidgetSale', color: 'red', weight: 12.5) Copy The first argument defines the name of your event type, and the second argument is a hash with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Ruby agent via a configuration parameter in newrelic.yml: Add custom_insights_events.max_samples_stored: to your configuration file. Specify the maximum number of events to record per minute as an integer. For example, if you want to be able to send up to 5000 events per minute, add: custom_insights_events.max_samples_stored: 5000 Copy You can then add custom attributes for your Ruby app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.yml. Timestamps You may not specify a timestamp on events that are collected and recorded via the agent. The agent will automatically assign a timestamp to events based on when they are recorded via the API. Limits and restricted characters See Custom event data requirements for size limits, data types, and naming syntax requirements. Reserved words Before creating custom attributes, review New Relic's list of reserved terms used by NRQL. Otherwise unexpected results may occur.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.66936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM: Report custom events and <em>attributes</em>",
        "sections": "APM: Report custom events and <em>attributes</em>",
        "body": " can then add custom <em>attributes</em> for your Python app. To disable custom events entirely, set custom_insights_events.enabled to False in your newrelic.ini configuration file. <em>Ruby</em> Custom event collection is enabled by default in <em>Ruby</em> <em>agent</em> version 3.9.8.273 or higher. To send custom events, simply"
      },
      "id": "609fa629e7b9d2fa8dc3eb04"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-25T01:28:32Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.33278,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    }
  ],
  "/docs/apm/agents/ruby-agent/attributes/ruby-agent-attributes": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34325,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "APM: Report custom events and attributes",
        "Data considerations",
        "Tip",
        "Record custom events and attributes",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Timestamps",
        "Limits and restricted characters",
        "Reserved words"
      ],
      "title": "APM: Report custom events and attributes",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Custom events"
      ],
      "external_id": "8731386e34fbced8d086795e273a1e2392b663ba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/data-apis/custom-data/custom-events/apm-report-custom-events-attributes/",
      "published_at": "2021-10-24T20:14:08Z",
      "updated_at": "2021-10-23T19:43:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have APM, you can report custom event data. You can then query and visualize your data in New Relic. Data considerations New Relic agents send event data to New Relic as part of the normal harvest cycle every five seconds for agent versions supporting real time streaming. Sending a lot of events can increase the memory overhead of the agent. New Relic enforces an upper limit of 833 custom events every 5 seconds. Additionally, posts greater than 1MB (10^6 bytes) in size will not be recorded, regardless of the custom event limit. You can also send custom events using the Event API (without need for APM). However, be aware that custom events sent with the agent APIs are not compatible with high security mode. Tip For more information, check out New Relic University’s tutorial Adding custom data with the APM agent API. Or, go directly to the full online course Custom data with APM. Record custom events and attributes You can add your own custom APM events and attributes, which you can then use for querying and charting. This is one of several ways to report custom data. To record a custom event, follow the procedures for your New Relic language agent. To add custom attributes to APM events, you must first enable them for your APM agent, and then make an API call to record the attribute. Follow the agent-specific custom attribute procedures. When creating your own custom events and attributes, follow data requirements for: Size limits Attribute types Reserved words C SDK To add a custom event to apps monitored by the C SDK, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For more information, see the Guide to using the C SDK API. You can then add custom attributes for your C SDK app. Go To add a custom event to apps monitored by the Go agent, use RecordCustomEvent. You can then add custom attributes for your Go app. Java Custom event collection is enabled by default in Java agent version 3.13.0 or higher. To send custom events, call recordCustomEvent. For example: Map<String, Object> eventAttributes = new HashMap<String, Object>(); NewRelic.getAgent().getInsights().recordCustomEvent(\"MyCustomEvent\", eventAttributes); Copy The first argument defines the name of your event type, and the second argument is a map with the attributes for your custom event. Event attributes must be strings or numbers. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Java agent via a configuration parameter in newrelic.yml. Specify the maximum number of events to record per minute as an integer. For example, if you want to send less than the default of 10000 events: custom_insights_events: max_samples_stored: 5000 Copy To disable custom events entirely, add the following to your newrelic.yml: custom_insights_events: enabled: false Copy You can then add custom attributes for your Java app. For Java agent versions prior to 4.1.0, use the following YAML configuration: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy .NET Custom event collection is enabled by default in .NET agent version 4.6.29.0 or higher. To send custom events, simply call RecordCustomEvent(). For example: var eventAttributes = new Dictionary<String, Object>(); NewRelic.Api.Agent.NewRelic.RecordCustomEvent('MyCustomEvent', eventAttributes); Copy The first argument defines the name of your event type, and the second argument is an IEnumerable with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your .NET app. You can turn off custom events entirely by setting customEvents.enabled to false in newrelic.config. Node.js Custom event collection is enabled by default in Node.js agent version 1.15.0 or higher. To send custom events, simply call the relevant API. For example: recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your Node.js app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.js. PHP Custom event collection is enabled by default in PHP agent version 4.18 or higher. To send custom events, simply call the relevant API function. For example: newrelic_record_custom_event(\"WidgetSale\", array(\"color\"=>\"red\", \"weight\"=>12.5)); Copy The first argument defines the name of your event type, and the second argument is an array with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. By default, the maximum number of custom events recorded per minute is 10,000. This setting cannot be changed. You can then add custom attributes for your PHP app. To disable custom events entirely, add newrelic.custom_insights_events.enabled = false to your newrelic.ini and restart the agent. Python Custom event collection is enabled by default in Python agent version 2.60.0.46 or higher. To send custom events, simply call the relevant API. For example: newrelic.agent. record_custom_event (event_type, params, application=None) Copy The event_type defines the name (or type) of the custom event. Attributes of the custom event should be passed in as a dictionary via the params keyword argument. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For limits and restrictions on event_type and params, see our documentation about limits and restricted characters and reserved words If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. You can then add custom attributes for your Python app. To disable custom events entirely, set custom_insights_events.enabled to False in your newrelic.ini configuration file. Ruby Custom event collection is enabled by default in Ruby agent version 3.9.8.273 or higher. To send custom events, simply call the relevant API. For example: ::NewRelic::Agent.record_custom_event('WidgetSale', color: 'red', weight: 12.5) Copy The first argument defines the name of your event type, and the second argument is a hash with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Ruby agent via a configuration parameter in newrelic.yml: Add custom_insights_events.max_samples_stored: to your configuration file. Specify the maximum number of events to record per minute as an integer. For example, if you want to be able to send up to 5000 events per minute, add: custom_insights_events.max_samples_stored: 5000 Copy You can then add custom attributes for your Ruby app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.yml. Timestamps You may not specify a timestamp on events that are collected and recorded via the agent. The agent will automatically assign a timestamp to events based on when they are recorded via the API. Limits and restricted characters See Custom event data requirements for size limits, data types, and naming syntax requirements. Reserved words Before creating custom attributes, review New Relic's list of reserved terms used by NRQL. Otherwise unexpected results may occur.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.66936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM: Report custom events and <em>attributes</em>",
        "sections": "APM: Report custom events and <em>attributes</em>",
        "body": " can then add custom <em>attributes</em> for your Python app. To disable custom events entirely, set custom_insights_events.enabled to False in your newrelic.ini configuration file. <em>Ruby</em> Custom event collection is enabled by default in <em>Ruby</em> <em>agent</em> version 3.9.8.273 or higher. To send custom events, simply"
      },
      "id": "609fa629e7b9d2fa8dc3eb04"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-25T01:28:32Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.33278,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    }
  ],
  "/docs/apm/agents/ruby-agent/attributes/ruby-attribute-examples": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.3432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "APM: Report custom events and attributes",
        "Data considerations",
        "Tip",
        "Record custom events and attributes",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Timestamps",
        "Limits and restricted characters",
        "Reserved words"
      ],
      "title": "APM: Report custom events and attributes",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Custom events"
      ],
      "external_id": "8731386e34fbced8d086795e273a1e2392b663ba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/data-apis/custom-data/custom-events/apm-report-custom-events-attributes/",
      "published_at": "2021-10-24T20:14:08Z",
      "updated_at": "2021-10-23T19:43:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have APM, you can report custom event data. You can then query and visualize your data in New Relic. Data considerations New Relic agents send event data to New Relic as part of the normal harvest cycle every five seconds for agent versions supporting real time streaming. Sending a lot of events can increase the memory overhead of the agent. New Relic enforces an upper limit of 833 custom events every 5 seconds. Additionally, posts greater than 1MB (10^6 bytes) in size will not be recorded, regardless of the custom event limit. You can also send custom events using the Event API (without need for APM). However, be aware that custom events sent with the agent APIs are not compatible with high security mode. Tip For more information, check out New Relic University’s tutorial Adding custom data with the APM agent API. Or, go directly to the full online course Custom data with APM. Record custom events and attributes You can add your own custom APM events and attributes, which you can then use for querying and charting. This is one of several ways to report custom data. To record a custom event, follow the procedures for your New Relic language agent. To add custom attributes to APM events, you must first enable them for your APM agent, and then make an API call to record the attribute. Follow the agent-specific custom attribute procedures. When creating your own custom events and attributes, follow data requirements for: Size limits Attribute types Reserved words C SDK To add a custom event to apps monitored by the C SDK, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For more information, see the Guide to using the C SDK API. You can then add custom attributes for your C SDK app. Go To add a custom event to apps monitored by the Go agent, use RecordCustomEvent. You can then add custom attributes for your Go app. Java Custom event collection is enabled by default in Java agent version 3.13.0 or higher. To send custom events, call recordCustomEvent. For example: Map<String, Object> eventAttributes = new HashMap<String, Object>(); NewRelic.getAgent().getInsights().recordCustomEvent(\"MyCustomEvent\", eventAttributes); Copy The first argument defines the name of your event type, and the second argument is a map with the attributes for your custom event. Event attributes must be strings or numbers. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Java agent via a configuration parameter in newrelic.yml. Specify the maximum number of events to record per minute as an integer. For example, if you want to send less than the default of 10000 events: custom_insights_events: max_samples_stored: 5000 Copy To disable custom events entirely, add the following to your newrelic.yml: custom_insights_events: enabled: false Copy You can then add custom attributes for your Java app. For Java agent versions prior to 4.1.0, use the following YAML configuration: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy .NET Custom event collection is enabled by default in .NET agent version 4.6.29.0 or higher. To send custom events, simply call RecordCustomEvent(). For example: var eventAttributes = new Dictionary<String, Object>(); NewRelic.Api.Agent.NewRelic.RecordCustomEvent('MyCustomEvent', eventAttributes); Copy The first argument defines the name of your event type, and the second argument is an IEnumerable with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your .NET app. You can turn off custom events entirely by setting customEvents.enabled to false in newrelic.config. Node.js Custom event collection is enabled by default in Node.js agent version 1.15.0 or higher. To send custom events, simply call the relevant API. For example: recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your Node.js app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.js. PHP Custom event collection is enabled by default in PHP agent version 4.18 or higher. To send custom events, simply call the relevant API function. For example: newrelic_record_custom_event(\"WidgetSale\", array(\"color\"=>\"red\", \"weight\"=>12.5)); Copy The first argument defines the name of your event type, and the second argument is an array with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. By default, the maximum number of custom events recorded per minute is 10,000. This setting cannot be changed. You can then add custom attributes for your PHP app. To disable custom events entirely, add newrelic.custom_insights_events.enabled = false to your newrelic.ini and restart the agent. Python Custom event collection is enabled by default in Python agent version 2.60.0.46 or higher. To send custom events, simply call the relevant API. For example: newrelic.agent. record_custom_event (event_type, params, application=None) Copy The event_type defines the name (or type) of the custom event. Attributes of the custom event should be passed in as a dictionary via the params keyword argument. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For limits and restrictions on event_type and params, see our documentation about limits and restricted characters and reserved words If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. You can then add custom attributes for your Python app. To disable custom events entirely, set custom_insights_events.enabled to False in your newrelic.ini configuration file. Ruby Custom event collection is enabled by default in Ruby agent version 3.9.8.273 or higher. To send custom events, simply call the relevant API. For example: ::NewRelic::Agent.record_custom_event('WidgetSale', color: 'red', weight: 12.5) Copy The first argument defines the name of your event type, and the second argument is a hash with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Ruby agent via a configuration parameter in newrelic.yml: Add custom_insights_events.max_samples_stored: to your configuration file. Specify the maximum number of events to record per minute as an integer. For example, if you want to be able to send up to 5000 events per minute, add: custom_insights_events.max_samples_stored: 5000 Copy You can then add custom attributes for your Ruby app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.yml. Timestamps You may not specify a timestamp on events that are collected and recorded via the agent. The agent will automatically assign a timestamp to events based on when they are recorded via the API. Limits and restricted characters See Custom event data requirements for size limits, data types, and naming syntax requirements. Reserved words Before creating custom attributes, review New Relic's list of reserved terms used by NRQL. Otherwise unexpected results may occur.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.669304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM: Report custom events and <em>attributes</em>",
        "sections": "APM: Report custom events and <em>attributes</em>",
        "body": " can then add custom <em>attributes</em> for your Python app. To disable custom events entirely, set custom_insights_events.enabled to False in your newrelic.ini configuration file. <em>Ruby</em> Custom event collection is enabled by default in <em>Ruby</em> <em>agent</em> version 3.9.8.273 or higher. To send custom events, simply"
      },
      "id": "609fa629e7b9d2fa8dc3eb04"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-25T01:28:32Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.33273,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    }
  ],
  "/docs/apm/agents/ruby-agent/background-jobs/delayedjob-instrumentation": [
    {
      "sections": [
        "Rake instrumentation",
        "Enable Rake support",
        "Remove newrelic-rake when appropriate",
        "Caution",
        "Capture Rake job arguments"
      ],
      "title": "Rake instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "d9f92b20388116f3ad38161c58ea8238e6243c71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/background-jobs/rake-instrumentation/",
      "published_at": "2021-10-24T22:25:15Z",
      "updated_at": "2021-03-16T07:58:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent has opt-in support for instrumenting Rake tasks. This requires: Rake version 10.0.0 or higher Ruby agent version 3.13.0 or higher To instrument Rake tasks, specify the tasks by name in your newrelic.yml file. Enable Rake support To instrument your app's Rake tasks, add the names of the target tasks to the rake.tasks element in your newrelic.yml file. The Ruby agent matches these names against your active tasks using string regex. Example: Instrumenting two Rake tasks For example, to instrument the Rake tasks deploy and deploy:all, add the following to your newrelic.yml file: rake: tasks: [\"deploy\", \"deploy:all\"] Copy Since task name matching is with regex, you can instrument all of your app's Rake tasks by using a wildcard regex like [\".+\"]. However, this will not include Rake tasks that are in your deny list by default from the autostart.blacklisted_rake_tasks configuration setting, such as db:migrate. To include any Rake tasks that are in your deny list by default, include them in your customized deny list. To ensure the tasks are instrumented before they run if you are using Rails but your Rake task does not require the Rails environment, add require 'tasks/newrelic' to the top of the Rake tasks. Remove newrelic-rake when appropriate The newrelic-rake third-party gem provides Rake instrumentation support as an add-on to the Ruby agent. If the agent detects newrelic-rake, it will not install the built-in Rake instrumentation, but it will record a log message like this at startup: INFO : Not installing New Relic supported Rake instrumentation because the third party newrelic-rake gem is present Copy Caution Removing the newrelic-rake gem in favor of the built-in instrumentation will change your transaction names. To preserve your existing transaction names, ignore the log message and do not uninstall the gem. To switch to New Relic's built-in Rake instrumentation and change your transaction names: Remove the newrelic-rake gem. Specify the tasks you want to instrument in your config file. Capture Rake job arguments By default Rake job arguments are not captured. To capture Rake job arguments, use: attributes.include: job.rake.* Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.17764,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Capture Rake <em>job</em> arguments",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> has opt-in support for instrumenting Rake tasks. This requires: Rake version 10.0.0 or higher <em>Ruby</em> <em>agent</em> version 3.13.0 or higher To instrument Rake tasks, specify the tasks by name in your newrelic.yml file. Enable Rake support To instrument your app&#x27;s Rake tasks, add"
      },
      "id": "603e9fea64441f1e104e8841"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.3432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/ruby-release-notes/ruby-agent-397266-0/",
      "sections": [
        "Ruby agent v3.9.7.266",
        "Notes"
      ],
      "published_at": "2021-10-25T02:23:56Z",
      "title": "Ruby agent v3.9.7.266",
      "updated_at": "2021-03-16T16:44:25Z",
      "type": "docs",
      "external_id": "b103d04b150b49929a74b949473d9bffc59f6296",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes Support for New Relic Synthetics The Ruby agent now gives you additional information for requests from New Relic Synthetics. More transaction traces and events give you a clearer look into how your application is performing around the world. For more details, see https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/getting-s... Support for multiple job per fork gems with Resque The resque-jobs-per-fork and resque-multi-job-forks gems alter Resque to fork every N jobs instead of every job. This previously caused issues for the Ruby agent, but those have been resolved. These gems are fully supported. Running Resque with the FORK_PER_JOB=false environment variable setting is also supported now. For more details on our Resque support, see https://docs.newrelic.com/docs/agents/ruby-agent/background-jobs/resque-... Support agent when starting Resque Pool from Rake task When running resque-pool with its provided rake tasks, the agent would not start up properly. Thanks Tiago Sousa for the fix! Fix for DelayedJob + Rails 4.x queue depth metrics The Ruby agent periodically records DelayedJob queuedepth as a metric, but this didn't work properly in Rails 4.x applications. This has been fixed. Thanks Jonathan del Strother for his help with the issue! Fix for failure in background transactions with rules.ignore_url_regexes The recently added feature for ignoring transactions via URL regexes caused errors for non-web transactions. This has been fixed. Rename the TransactionNamer.name method to TransactionNamer.name_for The internal TransactionNamer class had a class method called 'name', with a different signature than the existing Class#name method and could cause problems when trying to introspect instances of the class. Thanks to Dennis Taylor for contributing this fix!",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.97014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> v3.9.7.266",
        "sections": "<em>Ruby</em> <em>agent</em> v3.9.7.266",
        "body": ". These gems are fully supported. Running Resque with the FORK_PER_<em>JOB</em>=false environment variable setting is also supported now. For more details on our Resque support, see https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>ruby</em>-<em>agent</em>&#x2F;<em>background</em>-<em>jobs</em>&#x2F;resque-... Support <em>agent</em> when starting Resque Pool from Rake task When"
      },
      "id": "603eca8564441f63e14e8892"
    }
  ],
  "/docs/apm/agents/ruby-agent/background-jobs/monitor-ruby-background-processes": [
    {
      "sections": [
        "Rake instrumentation",
        "Enable Rake support",
        "Remove newrelic-rake when appropriate",
        "Caution",
        "Capture Rake job arguments"
      ],
      "title": "Rake instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "d9f92b20388116f3ad38161c58ea8238e6243c71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/background-jobs/rake-instrumentation/",
      "published_at": "2021-10-24T22:25:15Z",
      "updated_at": "2021-03-16T07:58:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent has opt-in support for instrumenting Rake tasks. This requires: Rake version 10.0.0 or higher Ruby agent version 3.13.0 or higher To instrument Rake tasks, specify the tasks by name in your newrelic.yml file. Enable Rake support To instrument your app's Rake tasks, add the names of the target tasks to the rake.tasks element in your newrelic.yml file. The Ruby agent matches these names against your active tasks using string regex. Example: Instrumenting two Rake tasks For example, to instrument the Rake tasks deploy and deploy:all, add the following to your newrelic.yml file: rake: tasks: [\"deploy\", \"deploy:all\"] Copy Since task name matching is with regex, you can instrument all of your app's Rake tasks by using a wildcard regex like [\".+\"]. However, this will not include Rake tasks that are in your deny list by default from the autostart.blacklisted_rake_tasks configuration setting, such as db:migrate. To include any Rake tasks that are in your deny list by default, include them in your customized deny list. To ensure the tasks are instrumented before they run if you are using Rails but your Rake task does not require the Rails environment, add require 'tasks/newrelic' to the top of the Rake tasks. Remove newrelic-rake when appropriate The newrelic-rake third-party gem provides Rake instrumentation support as an add-on to the Ruby agent. If the agent detects newrelic-rake, it will not install the built-in Rake instrumentation, but it will record a log message like this at startup: INFO : Not installing New Relic supported Rake instrumentation because the third party newrelic-rake gem is present Copy Caution Removing the newrelic-rake gem in favor of the built-in instrumentation will change your transaction names. To preserve your existing transaction names, ignore the log message and do not uninstall the gem. To switch to New Relic's built-in Rake instrumentation and change your transaction names: Remove the newrelic-rake gem. Specify the tasks you want to instrument in your config file. Capture Rake job arguments By default Rake job arguments are not captured. To capture Rake job arguments, use: attributes.include: job.rake.* Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.17764,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Capture Rake <em>job</em> arguments",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> has opt-in support for instrumenting Rake tasks. This requires: Rake version 10.0.0 or higher <em>Ruby</em> <em>agent</em> version 3.13.0 or higher To instrument Rake tasks, specify the tasks by name in your newrelic.yml file. Enable Rake support To instrument your app&#x27;s Rake tasks, add"
      },
      "id": "603e9fea64441f1e104e8841"
    },
    {
      "sections": [
        "Delayed::Job instrumentation",
        "Viewing background tasks",
        "Troubleshooting"
      ],
      "title": "Delayed::Job instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "3543ccf56a85c337526d3c2b3096a7527bfd55ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/background-jobs/delayedjob-instrumentation/",
      "published_at": "2021-10-24T21:04:19Z",
      "updated_at": "2021-03-16T06:26:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for the Delayed::Job library. No additional instrumentation is required. Viewing background tasks As long as the New Relic Ruby agent's gem or plugin is loaded before the Delayed::Job worker starts, all tasks will be monitored with the same level of detail as controller actions. To view the actions themselves: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. From the APM Transactions page, select Other transactions. Troubleshooting The Ruby agent depends on being able to identify that it is running under Delayed::Job in order to correctly set up instrumentation. To do this, it examines the script name (the $0 variable in Ruby) to see whether it ends with delayed_job. If you have renamed the script you use to start your delayed_job workers to something else, or if you have a custom script with a different name, you will need to explicitly tell the agent that you are using Delayed::Job by setting the NEW_RELIC_DISPATCHER environment variable to delayed_job when starting your Delayed::Job workers. For example: NEW_RELIC_DISPATCHER=delayed_job bundle exec ./script/my_custom_script Copy If it appears that jobs are not being monitored, review the newrelic_agent.log file generated when the worker starts up. It should indicate whether the agent detects Delayed and communicates with the server. If you do not find a log, or if you still cannot determine why the jobs do not appear, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.20132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delayed::<em>Job</em> instrumentation",
        "sections": "Delayed::<em>Job</em> instrumentation",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for the Delayed::<em>Job</em> library. No additional instrumentation is required. Viewing <em>background</em> tasks As long as the New Relic <em>Ruby</em> <em>agent</em>&#x27;s gem or plugin is loaded before the Delayed::<em>Job</em> worker starts, all tasks will be monitored with the same level"
      },
      "id": "603ebd11196a67ed98a83d81"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34314,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    }
  ],
  "/docs/apm/agents/ruby-agent/background-jobs/rake-instrumentation": [
    {
      "sections": [
        "Delayed::Job instrumentation",
        "Viewing background tasks",
        "Troubleshooting"
      ],
      "title": "Delayed::Job instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "3543ccf56a85c337526d3c2b3096a7527bfd55ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/background-jobs/delayedjob-instrumentation/",
      "published_at": "2021-10-24T21:04:19Z",
      "updated_at": "2021-03-16T06:26:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for the Delayed::Job library. No additional instrumentation is required. Viewing background tasks As long as the New Relic Ruby agent's gem or plugin is loaded before the Delayed::Job worker starts, all tasks will be monitored with the same level of detail as controller actions. To view the actions themselves: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. From the APM Transactions page, select Other transactions. Troubleshooting The Ruby agent depends on being able to identify that it is running under Delayed::Job in order to correctly set up instrumentation. To do this, it examines the script name (the $0 variable in Ruby) to see whether it ends with delayed_job. If you have renamed the script you use to start your delayed_job workers to something else, or if you have a custom script with a different name, you will need to explicitly tell the agent that you are using Delayed::Job by setting the NEW_RELIC_DISPATCHER environment variable to delayed_job when starting your Delayed::Job workers. For example: NEW_RELIC_DISPATCHER=delayed_job bundle exec ./script/my_custom_script Copy If it appears that jobs are not being monitored, review the newrelic_agent.log file generated when the worker starts up. It should indicate whether the agent detects Delayed and communicates with the server. If you do not find a log, or if you still cannot determine why the jobs do not appear, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.20132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delayed::<em>Job</em> instrumentation",
        "sections": "Delayed::<em>Job</em> instrumentation",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for the Delayed::<em>Job</em> library. No additional instrumentation is required. Viewing <em>background</em> tasks As long as the New Relic <em>Ruby</em> <em>agent</em>&#x27;s gem or plugin is loaded before the Delayed::<em>Job</em> worker starts, all tasks will be monitored with the same level"
      },
      "id": "603ebd11196a67ed98a83d81"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34314,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/ruby-release-notes/ruby-agent-397266-0/",
      "sections": [
        "Ruby agent v3.9.7.266",
        "Notes"
      ],
      "published_at": "2021-10-25T02:23:56Z",
      "title": "Ruby agent v3.9.7.266",
      "updated_at": "2021-03-16T16:44:25Z",
      "type": "docs",
      "external_id": "b103d04b150b49929a74b949473d9bffc59f6296",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes Support for New Relic Synthetics The Ruby agent now gives you additional information for requests from New Relic Synthetics. More transaction traces and events give you a clearer look into how your application is performing around the world. For more details, see https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/getting-s... Support for multiple job per fork gems with Resque The resque-jobs-per-fork and resque-multi-job-forks gems alter Resque to fork every N jobs instead of every job. This previously caused issues for the Ruby agent, but those have been resolved. These gems are fully supported. Running Resque with the FORK_PER_JOB=false environment variable setting is also supported now. For more details on our Resque support, see https://docs.newrelic.com/docs/agents/ruby-agent/background-jobs/resque-... Support agent when starting Resque Pool from Rake task When running resque-pool with its provided rake tasks, the agent would not start up properly. Thanks Tiago Sousa for the fix! Fix for DelayedJob + Rails 4.x queue depth metrics The Ruby agent periodically records DelayedJob queuedepth as a metric, but this didn't work properly in Rails 4.x applications. This has been fixed. Thanks Jonathan del Strother for his help with the issue! Fix for failure in background transactions with rules.ignore_url_regexes The recently added feature for ignoring transactions via URL regexes caused errors for non-web transactions. This has been fixed. Rename the TransactionNamer.name method to TransactionNamer.name_for The internal TransactionNamer class had a class method called 'name', with a different signature than the existing Class#name method and could cause problems when trying to introspect instances of the class. Thanks to Dennis Taylor for contributing this fix!",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.97014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> v3.9.7.266",
        "sections": "<em>Ruby</em> <em>agent</em> v3.9.7.266",
        "body": ". These gems are fully supported. Running Resque with the FORK_PER_<em>JOB</em>=false environment variable setting is also supported now. For more details on our Resque support, see https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>ruby</em>-<em>agent</em>&#x2F;<em>background</em>-<em>jobs</em>&#x2F;resque-... Support <em>agent</em> when starting Resque Pool from Rake task When"
      },
      "id": "603eca8564441f63e14e8892"
    }
  ],
  "/docs/apm/agents/ruby-agent/background-jobs/resque-instrumentation": [
    {
      "sections": [
        "Rake instrumentation",
        "Enable Rake support",
        "Remove newrelic-rake when appropriate",
        "Caution",
        "Capture Rake job arguments"
      ],
      "title": "Rake instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "d9f92b20388116f3ad38161c58ea8238e6243c71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/background-jobs/rake-instrumentation/",
      "published_at": "2021-10-24T22:25:15Z",
      "updated_at": "2021-03-16T07:58:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent has opt-in support for instrumenting Rake tasks. This requires: Rake version 10.0.0 or higher Ruby agent version 3.13.0 or higher To instrument Rake tasks, specify the tasks by name in your newrelic.yml file. Enable Rake support To instrument your app's Rake tasks, add the names of the target tasks to the rake.tasks element in your newrelic.yml file. The Ruby agent matches these names against your active tasks using string regex. Example: Instrumenting two Rake tasks For example, to instrument the Rake tasks deploy and deploy:all, add the following to your newrelic.yml file: rake: tasks: [\"deploy\", \"deploy:all\"] Copy Since task name matching is with regex, you can instrument all of your app's Rake tasks by using a wildcard regex like [\".+\"]. However, this will not include Rake tasks that are in your deny list by default from the autostart.blacklisted_rake_tasks configuration setting, such as db:migrate. To include any Rake tasks that are in your deny list by default, include them in your customized deny list. To ensure the tasks are instrumented before they run if you are using Rails but your Rake task does not require the Rails environment, add require 'tasks/newrelic' to the top of the Rake tasks. Remove newrelic-rake when appropriate The newrelic-rake third-party gem provides Rake instrumentation support as an add-on to the Ruby agent. If the agent detects newrelic-rake, it will not install the built-in Rake instrumentation, but it will record a log message like this at startup: INFO : Not installing New Relic supported Rake instrumentation because the third party newrelic-rake gem is present Copy Caution Removing the newrelic-rake gem in favor of the built-in instrumentation will change your transaction names. To preserve your existing transaction names, ignore the log message and do not uninstall the gem. To switch to New Relic's built-in Rake instrumentation and change your transaction names: Remove the newrelic-rake gem. Specify the tasks you want to instrument in your config file. Capture Rake job arguments By default Rake job arguments are not captured. To capture Rake job arguments, use: attributes.include: job.rake.* Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.17764,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Capture Rake <em>job</em> arguments",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> has opt-in support for instrumenting Rake tasks. This requires: Rake version 10.0.0 or higher <em>Ruby</em> <em>agent</em> version 3.13.0 or higher To instrument Rake tasks, specify the tasks by name in your newrelic.yml file. Enable Rake support To instrument your app&#x27;s Rake tasks, add"
      },
      "id": "603e9fea64441f1e104e8841"
    },
    {
      "sections": [
        "Delayed::Job instrumentation",
        "Viewing background tasks",
        "Troubleshooting"
      ],
      "title": "Delayed::Job instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "3543ccf56a85c337526d3c2b3096a7527bfd55ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/background-jobs/delayedjob-instrumentation/",
      "published_at": "2021-10-24T21:04:19Z",
      "updated_at": "2021-03-16T06:26:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for the Delayed::Job library. No additional instrumentation is required. Viewing background tasks As long as the New Relic Ruby agent's gem or plugin is loaded before the Delayed::Job worker starts, all tasks will be monitored with the same level of detail as controller actions. To view the actions themselves: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. From the APM Transactions page, select Other transactions. Troubleshooting The Ruby agent depends on being able to identify that it is running under Delayed::Job in order to correctly set up instrumentation. To do this, it examines the script name (the $0 variable in Ruby) to see whether it ends with delayed_job. If you have renamed the script you use to start your delayed_job workers to something else, or if you have a custom script with a different name, you will need to explicitly tell the agent that you are using Delayed::Job by setting the NEW_RELIC_DISPATCHER environment variable to delayed_job when starting your Delayed::Job workers. For example: NEW_RELIC_DISPATCHER=delayed_job bundle exec ./script/my_custom_script Copy If it appears that jobs are not being monitored, review the newrelic_agent.log file generated when the worker starts up. It should indicate whether the agent detects Delayed and communicates with the server. If you do not find a log, or if you still cannot determine why the jobs do not appear, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.20132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delayed::<em>Job</em> instrumentation",
        "sections": "Delayed::<em>Job</em> instrumentation",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for the Delayed::<em>Job</em> library. No additional instrumentation is required. Viewing <em>background</em> tasks As long as the New Relic <em>Ruby</em> <em>agent</em>&#x27;s gem or plugin is loaded before the Delayed::<em>Job</em> worker starts, all tasks will be monitored with the same level"
      },
      "id": "603ebd11196a67ed98a83d81"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34314,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    }
  ],
  "/docs/apm/agents/ruby-agent/background-jobs/sidekiq-instrumentation": [
    {
      "sections": [
        "Rake instrumentation",
        "Enable Rake support",
        "Remove newrelic-rake when appropriate",
        "Caution",
        "Capture Rake job arguments"
      ],
      "title": "Rake instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "d9f92b20388116f3ad38161c58ea8238e6243c71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/background-jobs/rake-instrumentation/",
      "published_at": "2021-10-24T22:25:15Z",
      "updated_at": "2021-03-16T07:58:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent has opt-in support for instrumenting Rake tasks. This requires: Rake version 10.0.0 or higher Ruby agent version 3.13.0 or higher To instrument Rake tasks, specify the tasks by name in your newrelic.yml file. Enable Rake support To instrument your app's Rake tasks, add the names of the target tasks to the rake.tasks element in your newrelic.yml file. The Ruby agent matches these names against your active tasks using string regex. Example: Instrumenting two Rake tasks For example, to instrument the Rake tasks deploy and deploy:all, add the following to your newrelic.yml file: rake: tasks: [\"deploy\", \"deploy:all\"] Copy Since task name matching is with regex, you can instrument all of your app's Rake tasks by using a wildcard regex like [\".+\"]. However, this will not include Rake tasks that are in your deny list by default from the autostart.blacklisted_rake_tasks configuration setting, such as db:migrate. To include any Rake tasks that are in your deny list by default, include them in your customized deny list. To ensure the tasks are instrumented before they run if you are using Rails but your Rake task does not require the Rails environment, add require 'tasks/newrelic' to the top of the Rake tasks. Remove newrelic-rake when appropriate The newrelic-rake third-party gem provides Rake instrumentation support as an add-on to the Ruby agent. If the agent detects newrelic-rake, it will not install the built-in Rake instrumentation, but it will record a log message like this at startup: INFO : Not installing New Relic supported Rake instrumentation because the third party newrelic-rake gem is present Copy Caution Removing the newrelic-rake gem in favor of the built-in instrumentation will change your transaction names. To preserve your existing transaction names, ignore the log message and do not uninstall the gem. To switch to New Relic's built-in Rake instrumentation and change your transaction names: Remove the newrelic-rake gem. Specify the tasks you want to instrument in your config file. Capture Rake job arguments By default Rake job arguments are not captured. To capture Rake job arguments, use: attributes.include: job.rake.* Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.17764,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Capture Rake <em>job</em> arguments",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> has opt-in support for instrumenting Rake tasks. This requires: Rake version 10.0.0 or higher <em>Ruby</em> <em>agent</em> version 3.13.0 or higher To instrument Rake tasks, specify the tasks by name in your newrelic.yml file. Enable Rake support To instrument your app&#x27;s Rake tasks, add"
      },
      "id": "603e9fea64441f1e104e8841"
    },
    {
      "sections": [
        "Delayed::Job instrumentation",
        "Viewing background tasks",
        "Troubleshooting"
      ],
      "title": "Delayed::Job instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "3543ccf56a85c337526d3c2b3096a7527bfd55ea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/background-jobs/delayedjob-instrumentation/",
      "published_at": "2021-10-24T21:04:19Z",
      "updated_at": "2021-03-16T06:26:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for the Delayed::Job library. No additional instrumentation is required. Viewing background tasks As long as the New Relic Ruby agent's gem or plugin is loaded before the Delayed::Job worker starts, all tasks will be monitored with the same level of detail as controller actions. To view the actions themselves: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. From the APM Transactions page, select Other transactions. Troubleshooting The Ruby agent depends on being able to identify that it is running under Delayed::Job in order to correctly set up instrumentation. To do this, it examines the script name (the $0 variable in Ruby) to see whether it ends with delayed_job. If you have renamed the script you use to start your delayed_job workers to something else, or if you have a custom script with a different name, you will need to explicitly tell the agent that you are using Delayed::Job by setting the NEW_RELIC_DISPATCHER environment variable to delayed_job when starting your Delayed::Job workers. For example: NEW_RELIC_DISPATCHER=delayed_job bundle exec ./script/my_custom_script Copy If it appears that jobs are not being monitored, review the newrelic_agent.log file generated when the worker starts up. It should indicate whether the agent detects Delayed and communicates with the server. If you do not find a log, or if you still cannot determine why the jobs do not appear, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.20132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delayed::<em>Job</em> instrumentation",
        "sections": "Delayed::<em>Job</em> instrumentation",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for the Delayed::<em>Job</em> library. No additional instrumentation is required. Viewing <em>background</em> tasks As long as the New Relic <em>Ruby</em> <em>agent</em>&#x27;s gem or plugin is loaded before the Delayed::<em>Job</em> worker starts, all tasks will be monitored with the same level"
      },
      "id": "603ebd11196a67ed98a83d81"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.343094,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    }
  ],
  "/docs/apm/agents/ruby-agent/configuration/connect-hosts-your-account": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.16959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": ". To deploy with native support for Sinatra or Rails: Follow New Relic&#x27;s standard procedures to install the gem, including your license key. Install the <em>Ruby</em> <em>agent</em> <em>configuration</em> file. Once the gem and <em>configuration</em> file have been installed, the <em>Ruby</em> <em>agent</em> can automatically monitor applications"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.950005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "-check that your <em>Ruby</em> <em>agent</em> <em>configuration</em> file (config&#x2F;newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the <em>Ruby</em> <em>agent</em>&#x27;s plugin folder (vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em>&#x2F;newrelic.yml). Look for new <em>configuration</em> options that are not in your config&#x2F;newrelic.yml file. Update"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "fa34ef9ebcf8904e3601568b15d53bfe825424f4",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2021-10-25T06:29:50Z",
      "updated_at": "2021-09-27T15:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.824875,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " tracing, you will need to update your <em>configuration</em>. Manual Rack instrumentation Earlier versions of the <em>Ruby</em> <em>agent</em> supported manually instrumenting Rack middlewares via the NewRelic::<em>Agent</em>::Instrumentation::Rack module. This instrumentation is deprecated in <em>Ruby</em> <em>agent</em> versions 3.9.0 or higher"
      },
      "id": "603ebc9ae7b9d2754a2a0810"
    }
  ],
  "/docs/apm/agents/ruby-agent/configuration/custom-ssl-certificates-ruby": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.16951,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": ". To deploy with native support for Sinatra or Rails: Follow New Relic&#x27;s standard procedures to install the gem, including your license key. Install the <em>Ruby</em> <em>agent</em> <em>configuration</em> file. Once the gem and <em>configuration</em> file have been installed, the <em>Ruby</em> <em>agent</em> can automatically monitor applications"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.95,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "-check that your <em>Ruby</em> <em>agent</em> <em>configuration</em> file (config&#x2F;newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the <em>Ruby</em> <em>agent</em>&#x27;s plugin folder (vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em>&#x2F;newrelic.yml). Look for new <em>configuration</em> options that are not in your config&#x2F;newrelic.yml file. Update"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "fa34ef9ebcf8904e3601568b15d53bfe825424f4",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2021-10-25T06:29:50Z",
      "updated_at": "2021-09-27T15:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.82487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " tracing, you will need to update your <em>configuration</em>. Manual Rack instrumentation Earlier versions of the <em>Ruby</em> <em>agent</em> supported manually instrumenting Rack middlewares via the NewRelic::<em>Agent</em>::Instrumentation::Rack module. This instrumentation is deprecated in <em>Ruby</em> <em>agent</em> versions 3.9.0 or higher"
      },
      "id": "603ebc9ae7b9d2754a2a0810"
    }
  ],
  "/docs/apm/agents/ruby-agent/configuration/ruby-agent-configuration": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.16951,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": ". To deploy with native support for Sinatra or Rails: Follow New Relic&#x27;s standard procedures to install the gem, including your license key. Install the <em>Ruby</em> <em>agent</em> <em>configuration</em> file. Once the gem and <em>configuration</em> file have been installed, the <em>Ruby</em> <em>agent</em> can automatically monitor applications"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.95,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "-check that your <em>Ruby</em> <em>agent</em> <em>configuration</em> file (config&#x2F;newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the <em>Ruby</em> <em>agent</em>&#x27;s plugin folder (vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em>&#x2F;newrelic.yml). Look for new <em>configuration</em> options that are not in your config&#x2F;newrelic.yml file. Update"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "fa34ef9ebcf8904e3601568b15d53bfe825424f4",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2021-10-25T06:29:50Z",
      "updated_at": "2021-09-27T15:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.82487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " tracing, you will need to update your <em>configuration</em>. Manual Rack instrumentation Earlier versions of the <em>Ruby</em> <em>agent</em> supported manually instrumenting Rack middlewares via the NewRelic::<em>Agent</em>::Instrumentation::Rack module. This instrumentation is deprecated in <em>Ruby</em> <em>agent</em> versions 3.9.0 or higher"
      },
      "id": "603ebc9ae7b9d2754a2a0810"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/cross-application-tracing-ruby": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34299,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.97321,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    },
    {
      "sections": [
        "Record deployments with the Ruby agent",
        "Assign an application name",
        "Record with the command line",
        "Record with Capistrano 3.x",
        "Record with Capistrano 2.x",
        "If agent was installed with New Relic gem",
        "If agent was installed as Rails plugin",
        "Customize your Capistrano configuration",
        "Override Capistrano settings",
        "Deploy to staging"
      ],
      "title": "Record deployments with the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "06c806cf9f3dc512c45fd672d220702f55a2944c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/record-deployments-ruby-agent/",
      "published_at": "2021-10-24T22:26:12Z",
      "updated_at": "2021-09-27T15:14:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the Ruby agent. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your production environment. You can also customize the rails_env variable for other environments, such as staging. Assign an application name To assign an application name: Download the latest version of the Ruby agent. Set the app_name in your newrelic.yml file to a meaningful name. This will assign instances in the given environment the label given by app_name when browsing your data in the New Relic user interface. The deployment upload script will use that label to associate an app with the deployment. Record with the command line If you installed the Ruby agent as a gem, you can record deployments directly by using the newrelic executable: newrelic deployments Copy Depending on your environment, you may need to run: $bundle exec newrelic deployment Copy You can use several optional values with newrelic. The description is short text. deployments [OPTIONS] [description] OPTIONS: -a, --appname=name Set the application name. Default is app_name setting in newrelic.yml -e, --environment=name Override the (RAILS|RUBY)_ENV setting -u, --user=USER Specify the user deploying. -r, --revision=REV Specify the revision being deployed -c, --changes Read in a change log from the standard input -h Print this help Copy When using the -c option, you can pipe the change log into the script. If not piping when using the -c option, select control-D to signify the end of file (EOF). Record with Capistrano 3.x The New Relic Ruby agent contains a Capistrano recipe that can record app deployments. After assigning your app name, edit your Capistrano files to communicate with the agent: At the top of your Capfile, add the following line: require 'new_relic/recipes' Copy In your deploy.rb file, include: after \"deploy:updated\", \"newrelic:notice_deployment\" Copy Record with Capistrano 2.x You can record Capistrano 2.x deployments with the New Relic agent: Tell Capistrano to load New Relic's recipes: If agent was installed with New Relic gem Add this at the top of your deploy.rb file: require 'new_relic/recipes' Copy If agent was installed as Rails plugin In your Capfile, add the following line above load deploy.rb (if it is not already there): Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) } Copy Add the following hooks to your deploy.rb file: # Notify New Relic of deployments. # This goes out even if the deploy fails, sadly. after \"deploy\", \"newrelic:notice_deployment\" after \"deploy:migrations\", \"newrelic:notice_deployment\" after \"deploy:cold\", \"newrelic:notice_deployment\" Copy The next time you run cap deploy, the agent notifies New Relic of the deployment, and all time series charts will show the deployment event. Customize your Capistrano configuration If Capistrano is running the deployment notification recipe on a remote build machine,the build machine must have your New Relic License key. You can either copy a valid newrelic.yml file to the build machine (possibly using a Capistrano Before Hook) or call set :newrelic_license_key, 'YOUR_LICENSE_KEY' in your Capistrano configuration. You can customize some deployment information by using Capistrano variables. If defined, these will override the defaults. These apply to both Capistrano 2 and 3. Capistrano 2 and 3 variables Description newrelic_appname The app where the deployment will appear. By default this comes from the definition in the newrelic.yml file for the given rails_env. If you set this value from the command line, you can only specify one application name. If you set this value in newrelic.yml, only the first application name will be used. newrelic_changelog The change log, which is determined by running the svn/git log command from the local working directory where the Capistrano command was issued. newrelic_desc Descriptive text that appears with the deployment. Default is empty. newrelic_license_key The New Relic license key to use. By default this comes from the definition in the newrelic.yml file for the given rails_env. This is not the same as your REST API key. newrelic_revision The revision recorded for the deployment. Recommendation: If you are using Subversion, consider including the tag or branch name in addition to the revision. newrelic_user The user to associate with the deployment. Override Capistrano settings In any version of Capistrano, you can override settings in your deploy.rb: set :newrelic_user, \"username\" Copy To override settings with Capistrano 2.x: From the command line: cap production deploy -Snewrelic_desc=\"Deploying beta Krakatau release\" Copy This example will prompt for content that will appear in the deployment's change log: set(:newrelic_changelog) do Capistrano::CLI.ui.ask \"Enter a summary of changes: \" end Copy Deploy to staging By default, the newrelic_rpm gem comes with Capistrano tasks to record all deployments in your production environment. If you have a separate staging application, you can change the rails_env variable setting so that staging deployments are recorded in the staging app instead of the production app. To identify deployments to your staging environment, use Capistrano or the command line. Deploy to staging Comments Capistrano multistage If you are using Capistrano multistage, add this line to config/deploy/staging.rb: set :rails_env, \"staging\" Copy Capistrano 2.x If you are using Capistrano 2.x, add this information from the command line: cap -s rails_env=staging deployment_task_name Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.30005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "sections": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the <em>Ruby</em> <em>agent</em>. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your"
      },
      "id": "603eb906196a671067a83df1"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/developer-mode": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34299,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Record deployments with the Ruby agent",
        "Assign an application name",
        "Record with the command line",
        "Record with Capistrano 3.x",
        "Record with Capistrano 2.x",
        "If agent was installed with New Relic gem",
        "If agent was installed as Rails plugin",
        "Customize your Capistrano configuration",
        "Override Capistrano settings",
        "Deploy to staging"
      ],
      "title": "Record deployments with the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "06c806cf9f3dc512c45fd672d220702f55a2944c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/record-deployments-ruby-agent/",
      "published_at": "2021-10-24T22:26:12Z",
      "updated_at": "2021-09-27T15:14:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the Ruby agent. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your production environment. You can also customize the rails_env variable for other environments, such as staging. Assign an application name To assign an application name: Download the latest version of the Ruby agent. Set the app_name in your newrelic.yml file to a meaningful name. This will assign instances in the given environment the label given by app_name when browsing your data in the New Relic user interface. The deployment upload script will use that label to associate an app with the deployment. Record with the command line If you installed the Ruby agent as a gem, you can record deployments directly by using the newrelic executable: newrelic deployments Copy Depending on your environment, you may need to run: $bundle exec newrelic deployment Copy You can use several optional values with newrelic. The description is short text. deployments [OPTIONS] [description] OPTIONS: -a, --appname=name Set the application name. Default is app_name setting in newrelic.yml -e, --environment=name Override the (RAILS|RUBY)_ENV setting -u, --user=USER Specify the user deploying. -r, --revision=REV Specify the revision being deployed -c, --changes Read in a change log from the standard input -h Print this help Copy When using the -c option, you can pipe the change log into the script. If not piping when using the -c option, select control-D to signify the end of file (EOF). Record with Capistrano 3.x The New Relic Ruby agent contains a Capistrano recipe that can record app deployments. After assigning your app name, edit your Capistrano files to communicate with the agent: At the top of your Capfile, add the following line: require 'new_relic/recipes' Copy In your deploy.rb file, include: after \"deploy:updated\", \"newrelic:notice_deployment\" Copy Record with Capistrano 2.x You can record Capistrano 2.x deployments with the New Relic agent: Tell Capistrano to load New Relic's recipes: If agent was installed with New Relic gem Add this at the top of your deploy.rb file: require 'new_relic/recipes' Copy If agent was installed as Rails plugin In your Capfile, add the following line above load deploy.rb (if it is not already there): Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) } Copy Add the following hooks to your deploy.rb file: # Notify New Relic of deployments. # This goes out even if the deploy fails, sadly. after \"deploy\", \"newrelic:notice_deployment\" after \"deploy:migrations\", \"newrelic:notice_deployment\" after \"deploy:cold\", \"newrelic:notice_deployment\" Copy The next time you run cap deploy, the agent notifies New Relic of the deployment, and all time series charts will show the deployment event. Customize your Capistrano configuration If Capistrano is running the deployment notification recipe on a remote build machine,the build machine must have your New Relic License key. You can either copy a valid newrelic.yml file to the build machine (possibly using a Capistrano Before Hook) or call set :newrelic_license_key, 'YOUR_LICENSE_KEY' in your Capistrano configuration. You can customize some deployment information by using Capistrano variables. If defined, these will override the defaults. These apply to both Capistrano 2 and 3. Capistrano 2 and 3 variables Description newrelic_appname The app where the deployment will appear. By default this comes from the definition in the newrelic.yml file for the given rails_env. If you set this value from the command line, you can only specify one application name. If you set this value in newrelic.yml, only the first application name will be used. newrelic_changelog The change log, which is determined by running the svn/git log command from the local working directory where the Capistrano command was issued. newrelic_desc Descriptive text that appears with the deployment. Default is empty. newrelic_license_key The New Relic license key to use. By default this comes from the definition in the newrelic.yml file for the given rails_env. This is not the same as your REST API key. newrelic_revision The revision recorded for the deployment. Recommendation: If you are using Subversion, consider including the tag or branch name in addition to the revision. newrelic_user The user to associate with the deployment. Override Capistrano settings In any version of Capistrano, you can override settings in your deploy.rb: set :newrelic_user, \"username\" Copy To override settings with Capistrano 2.x: From the command line: cap production deploy -Snewrelic_desc=\"Deploying beta Krakatau release\" Copy This example will prompt for content that will appear in the deployment's change log: set(:newrelic_changelog) do Capistrano::CLI.ui.ask \"Enter a summary of changes: \" end Copy Deploy to staging By default, the newrelic_rpm gem comes with Capistrano tasks to record all deployments in your production environment. If you have a separate staging application, you can change the rails_env variable setting so that staging deployments are recorded in the staging app instead of the production app. To identify deployments to your staging environment, use Capistrano or the command line. Deploy to staging Comments Capistrano multistage If you are using Capistrano multistage, add this line to config/deploy/staging.rb: set :rails_env, \"staging\" Copy Capistrano 2.x If you are using Capistrano 2.x, add this information from the command line: cap -s rails_env=staging deployment_task_name Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.30005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "sections": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the <em>Ruby</em> <em>agent</em>. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your"
      },
      "id": "603eb906196a671067a83df1"
    },
    {
      "sections": [
        "Browser monitoring and the Ruby agent",
        "Requirements",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "CSP Nonce support",
        "Troubleshooting",
        "Disable auto-instrumentation"
      ],
      "title": "Browser monitoring and the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "c7381e06d48fe877cdbcc935d51c88dd858d3673",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/new-relic-browser-ruby-agent/",
      "published_at": "2021-10-25T00:54:21Z",
      "updated_at": "2021-07-09T22:33:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Ruby agent, you can add browser monitoring agent instrumentation to your webpages either automatically or manually. To enable browser monitoring in the UI, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Ruby agent. Requirements Automatic browser instrumentation is supported for most recent versions of Rails: New Relic Ruby agent (version 3.0.1 or higher) For automatic instrumentation: Rails 2.3 or higher For manual instrumentation: Rails 2.0 to 2.2 Use auto-instrumentation Automatic instrumentation works with Rack, and requires Rails 2.3 or higher. Configure the agent to automatically instrument pages with end user monitoring scripts, by adding or editing the following flag in newrelic.yml. browser_monitoring: auto_instrument: true Copy This is the simplest way to monitor end users. The Ruby agent examines each page from your application and automatically injects the browser JavaScript in the header. Auto-instrumentation works for environments that support Rack. For performance reasons the agent scans only the first 50k of your application's response for the header instrumentation point. In cases where a X-UA-Compatible meta tag is present and the <head> tag is longer than 50k, auto-instrumentation will fail gracefully. Auto-instrumentation will look for an X-UA-Compatible meta tag and insert the JavaScript directly after it. If the auto-instrumentation cannot find an X-UA-Compatible meta tag, it will insert after the opening head tag, and failing that it will insert after the opening body tag. If any of these tags are wrapped in conditionals or comments, the automatic instrumentation will likely fail. If auto-instrumentation fails to correctly instrument your application’s pages, then you must manually instrument via agent API. Manually instrument via agent API If you are using Rails 2.1 to 2.2 or cannot use auto-instrumentation, you can still set up end user monitoring manually by including appropriate scripts in your pages. Use the New Relic Ruby agent's API to generate the script to be inserted into your pages. For example, to modify your application's template to call the agent, use: <head> <%= ::NewRelic::Agent.browser_timing_header rescue \"\" %> ... existing template code ... </head> Copy CSP Nonce support CSP Nonce usage in our browser instrumentation is supported in version 7.1.0+ of the Ruby agent. To use a nonce with the browser instrumentation, you must disable browser monitoring auto instrumentation and use the manual instrumentation via the agent API. You may now pass a nonce as an argument into the API method to allow the agent to insert the nonce into the browser instrumentation. For example, NewRelic::Agent.browser_timing_header(nonce). Troubleshooting If you do not see any browser data being reported, view the HTML source and confirm two blocks of script similar to this in your HTML head: <script type=\"text/javascript\">window.NREUM||(NREUM={});...</script> Copy If these are not present, check the auto-instrumentation settings or the placement of manual instrumentation in your template files. In versions of the Ruby agent prior to 3.7.0, <%=::NewRelic::Agent.browser_timing_footer rescue \"\" %> also needed to be called as close to the bottom of the document as possible. With 3.7.0, all the required script is included by browser_timing_header. browser_timing_footer returns an empty string for compatibility. Disable auto-instrumentation The default value of auto-instrument is true (even when unspecified). To disable auto-instrumentation, set this flag to false. To disable auto-instrumentation only for certain controllers or controller actions, use newrelic_ignore_enduser. Server-side instrumentation will be unaffected by this call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.70472,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Ruby</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With the <em>Ruby</em> <em>agent</em>, you can add browser monitoring <em>agent</em> instrumentation to your webpages either automatically or manually. To enable browser monitoring in the UI, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>Ruby</em> <em>agent</em>. Requirements"
      },
      "id": "603eb812e7b9d247a82a07dc"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/garbage-collection": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34299,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.97321,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    },
    {
      "sections": [
        "Record deployments with the Ruby agent",
        "Assign an application name",
        "Record with the command line",
        "Record with Capistrano 3.x",
        "Record with Capistrano 2.x",
        "If agent was installed with New Relic gem",
        "If agent was installed as Rails plugin",
        "Customize your Capistrano configuration",
        "Override Capistrano settings",
        "Deploy to staging"
      ],
      "title": "Record deployments with the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "06c806cf9f3dc512c45fd672d220702f55a2944c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/record-deployments-ruby-agent/",
      "published_at": "2021-10-24T22:26:12Z",
      "updated_at": "2021-09-27T15:14:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the Ruby agent. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your production environment. You can also customize the rails_env variable for other environments, such as staging. Assign an application name To assign an application name: Download the latest version of the Ruby agent. Set the app_name in your newrelic.yml file to a meaningful name. This will assign instances in the given environment the label given by app_name when browsing your data in the New Relic user interface. The deployment upload script will use that label to associate an app with the deployment. Record with the command line If you installed the Ruby agent as a gem, you can record deployments directly by using the newrelic executable: newrelic deployments Copy Depending on your environment, you may need to run: $bundle exec newrelic deployment Copy You can use several optional values with newrelic. The description is short text. deployments [OPTIONS] [description] OPTIONS: -a, --appname=name Set the application name. Default is app_name setting in newrelic.yml -e, --environment=name Override the (RAILS|RUBY)_ENV setting -u, --user=USER Specify the user deploying. -r, --revision=REV Specify the revision being deployed -c, --changes Read in a change log from the standard input -h Print this help Copy When using the -c option, you can pipe the change log into the script. If not piping when using the -c option, select control-D to signify the end of file (EOF). Record with Capistrano 3.x The New Relic Ruby agent contains a Capistrano recipe that can record app deployments. After assigning your app name, edit your Capistrano files to communicate with the agent: At the top of your Capfile, add the following line: require 'new_relic/recipes' Copy In your deploy.rb file, include: after \"deploy:updated\", \"newrelic:notice_deployment\" Copy Record with Capistrano 2.x You can record Capistrano 2.x deployments with the New Relic agent: Tell Capistrano to load New Relic's recipes: If agent was installed with New Relic gem Add this at the top of your deploy.rb file: require 'new_relic/recipes' Copy If agent was installed as Rails plugin In your Capfile, add the following line above load deploy.rb (if it is not already there): Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) } Copy Add the following hooks to your deploy.rb file: # Notify New Relic of deployments. # This goes out even if the deploy fails, sadly. after \"deploy\", \"newrelic:notice_deployment\" after \"deploy:migrations\", \"newrelic:notice_deployment\" after \"deploy:cold\", \"newrelic:notice_deployment\" Copy The next time you run cap deploy, the agent notifies New Relic of the deployment, and all time series charts will show the deployment event. Customize your Capistrano configuration If Capistrano is running the deployment notification recipe on a remote build machine,the build machine must have your New Relic License key. You can either copy a valid newrelic.yml file to the build machine (possibly using a Capistrano Before Hook) or call set :newrelic_license_key, 'YOUR_LICENSE_KEY' in your Capistrano configuration. You can customize some deployment information by using Capistrano variables. If defined, these will override the defaults. These apply to both Capistrano 2 and 3. Capistrano 2 and 3 variables Description newrelic_appname The app where the deployment will appear. By default this comes from the definition in the newrelic.yml file for the given rails_env. If you set this value from the command line, you can only specify one application name. If you set this value in newrelic.yml, only the first application name will be used. newrelic_changelog The change log, which is determined by running the svn/git log command from the local working directory where the Capistrano command was issued. newrelic_desc Descriptive text that appears with the deployment. Default is empty. newrelic_license_key The New Relic license key to use. By default this comes from the definition in the newrelic.yml file for the given rails_env. This is not the same as your REST API key. newrelic_revision The revision recorded for the deployment. Recommendation: If you are using Subversion, consider including the tag or branch name in addition to the revision. newrelic_user The user to associate with the deployment. Override Capistrano settings In any version of Capistrano, you can override settings in your deploy.rb: set :newrelic_user, \"username\" Copy To override settings with Capistrano 2.x: From the command line: cap production deploy -Snewrelic_desc=\"Deploying beta Krakatau release\" Copy This example will prompt for content that will appear in the deployment's change log: set(:newrelic_changelog) do Capistrano::CLI.ui.ask \"Enter a summary of changes: \" end Copy Deploy to staging By default, the newrelic_rpm gem comes with Capistrano tasks to record all deployments in your production environment. If you have a separate staging application, you can change the rails_env variable setting so that staging deployments are recorded in the staging app instead of the production app. To identify deployments to your staging environment, use Capistrano or the command line. Deploy to staging Comments Capistrano multistage If you are using Capistrano multistage, add this line to config/deploy/staging.rb: set :rails_env, \"staging\" Copy Capistrano 2.x If you are using Capistrano 2.x, add this information from the command line: cap -s rails_env=staging deployment_task_name Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.30005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "sections": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the <em>Ruby</em> <em>agent</em>. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your"
      },
      "id": "603eb906196a671067a83df1"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/http-client-tracing-ruby": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.342926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.973206,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    },
    {
      "sections": [
        "Record deployments with the Ruby agent",
        "Assign an application name",
        "Record with the command line",
        "Record with Capistrano 3.x",
        "Record with Capistrano 2.x",
        "If agent was installed with New Relic gem",
        "If agent was installed as Rails plugin",
        "Customize your Capistrano configuration",
        "Override Capistrano settings",
        "Deploy to staging"
      ],
      "title": "Record deployments with the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "06c806cf9f3dc512c45fd672d220702f55a2944c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/record-deployments-ruby-agent/",
      "published_at": "2021-10-24T22:26:12Z",
      "updated_at": "2021-09-27T15:14:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the Ruby agent. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your production environment. You can also customize the rails_env variable for other environments, such as staging. Assign an application name To assign an application name: Download the latest version of the Ruby agent. Set the app_name in your newrelic.yml file to a meaningful name. This will assign instances in the given environment the label given by app_name when browsing your data in the New Relic user interface. The deployment upload script will use that label to associate an app with the deployment. Record with the command line If you installed the Ruby agent as a gem, you can record deployments directly by using the newrelic executable: newrelic deployments Copy Depending on your environment, you may need to run: $bundle exec newrelic deployment Copy You can use several optional values with newrelic. The description is short text. deployments [OPTIONS] [description] OPTIONS: -a, --appname=name Set the application name. Default is app_name setting in newrelic.yml -e, --environment=name Override the (RAILS|RUBY)_ENV setting -u, --user=USER Specify the user deploying. -r, --revision=REV Specify the revision being deployed -c, --changes Read in a change log from the standard input -h Print this help Copy When using the -c option, you can pipe the change log into the script. If not piping when using the -c option, select control-D to signify the end of file (EOF). Record with Capistrano 3.x The New Relic Ruby agent contains a Capistrano recipe that can record app deployments. After assigning your app name, edit your Capistrano files to communicate with the agent: At the top of your Capfile, add the following line: require 'new_relic/recipes' Copy In your deploy.rb file, include: after \"deploy:updated\", \"newrelic:notice_deployment\" Copy Record with Capistrano 2.x You can record Capistrano 2.x deployments with the New Relic agent: Tell Capistrano to load New Relic's recipes: If agent was installed with New Relic gem Add this at the top of your deploy.rb file: require 'new_relic/recipes' Copy If agent was installed as Rails plugin In your Capfile, add the following line above load deploy.rb (if it is not already there): Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) } Copy Add the following hooks to your deploy.rb file: # Notify New Relic of deployments. # This goes out even if the deploy fails, sadly. after \"deploy\", \"newrelic:notice_deployment\" after \"deploy:migrations\", \"newrelic:notice_deployment\" after \"deploy:cold\", \"newrelic:notice_deployment\" Copy The next time you run cap deploy, the agent notifies New Relic of the deployment, and all time series charts will show the deployment event. Customize your Capistrano configuration If Capistrano is running the deployment notification recipe on a remote build machine,the build machine must have your New Relic License key. You can either copy a valid newrelic.yml file to the build machine (possibly using a Capistrano Before Hook) or call set :newrelic_license_key, 'YOUR_LICENSE_KEY' in your Capistrano configuration. You can customize some deployment information by using Capistrano variables. If defined, these will override the defaults. These apply to both Capistrano 2 and 3. Capistrano 2 and 3 variables Description newrelic_appname The app where the deployment will appear. By default this comes from the definition in the newrelic.yml file for the given rails_env. If you set this value from the command line, you can only specify one application name. If you set this value in newrelic.yml, only the first application name will be used. newrelic_changelog The change log, which is determined by running the svn/git log command from the local working directory where the Capistrano command was issued. newrelic_desc Descriptive text that appears with the deployment. Default is empty. newrelic_license_key The New Relic license key to use. By default this comes from the definition in the newrelic.yml file for the given rails_env. This is not the same as your REST API key. newrelic_revision The revision recorded for the deployment. Recommendation: If you are using Subversion, consider including the tag or branch name in addition to the revision. newrelic_user The user to associate with the deployment. Override Capistrano settings In any version of Capistrano, you can override settings in your deploy.rb: set :newrelic_user, \"username\" Copy To override settings with Capistrano 2.x: From the command line: cap production deploy -Snewrelic_desc=\"Deploying beta Krakatau release\" Copy This example will prompt for content that will appear in the deployment's change log: set(:newrelic_changelog) do Capistrano::CLI.ui.ask \"Enter a summary of changes: \" end Copy Deploy to staging By default, the newrelic_rpm gem comes with Capistrano tasks to record all deployments in your production environment. If you have a separate staging application, you can change the rails_env variable setting so that staging deployments are recorded in the staging app instead of the production app. To identify deployments to your staging environment, use Capistrano or the command line. Deploy to staging Comments Capistrano multistage If you are using Capistrano multistage, add this line to config/deploy/staging.rb: set :rails_env, \"staging\" Copy Capistrano 2.x If you are using Capistrano 2.x, add this information from the command line: cap -s rails_env=staging deployment_task_name Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.30004,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "sections": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the <em>Ruby</em> <em>agent</em>. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your"
      },
      "id": "603eb906196a671067a83df1"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/message-queues": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.342926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.973206,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    },
    {
      "sections": [
        "Record deployments with the Ruby agent",
        "Assign an application name",
        "Record with the command line",
        "Record with Capistrano 3.x",
        "Record with Capistrano 2.x",
        "If agent was installed with New Relic gem",
        "If agent was installed as Rails plugin",
        "Customize your Capistrano configuration",
        "Override Capistrano settings",
        "Deploy to staging"
      ],
      "title": "Record deployments with the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "06c806cf9f3dc512c45fd672d220702f55a2944c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/record-deployments-ruby-agent/",
      "published_at": "2021-10-24T22:26:12Z",
      "updated_at": "2021-09-27T15:14:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the Ruby agent. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your production environment. You can also customize the rails_env variable for other environments, such as staging. Assign an application name To assign an application name: Download the latest version of the Ruby agent. Set the app_name in your newrelic.yml file to a meaningful name. This will assign instances in the given environment the label given by app_name when browsing your data in the New Relic user interface. The deployment upload script will use that label to associate an app with the deployment. Record with the command line If you installed the Ruby agent as a gem, you can record deployments directly by using the newrelic executable: newrelic deployments Copy Depending on your environment, you may need to run: $bundle exec newrelic deployment Copy You can use several optional values with newrelic. The description is short text. deployments [OPTIONS] [description] OPTIONS: -a, --appname=name Set the application name. Default is app_name setting in newrelic.yml -e, --environment=name Override the (RAILS|RUBY)_ENV setting -u, --user=USER Specify the user deploying. -r, --revision=REV Specify the revision being deployed -c, --changes Read in a change log from the standard input -h Print this help Copy When using the -c option, you can pipe the change log into the script. If not piping when using the -c option, select control-D to signify the end of file (EOF). Record with Capistrano 3.x The New Relic Ruby agent contains a Capistrano recipe that can record app deployments. After assigning your app name, edit your Capistrano files to communicate with the agent: At the top of your Capfile, add the following line: require 'new_relic/recipes' Copy In your deploy.rb file, include: after \"deploy:updated\", \"newrelic:notice_deployment\" Copy Record with Capistrano 2.x You can record Capistrano 2.x deployments with the New Relic agent: Tell Capistrano to load New Relic's recipes: If agent was installed with New Relic gem Add this at the top of your deploy.rb file: require 'new_relic/recipes' Copy If agent was installed as Rails plugin In your Capfile, add the following line above load deploy.rb (if it is not already there): Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) } Copy Add the following hooks to your deploy.rb file: # Notify New Relic of deployments. # This goes out even if the deploy fails, sadly. after \"deploy\", \"newrelic:notice_deployment\" after \"deploy:migrations\", \"newrelic:notice_deployment\" after \"deploy:cold\", \"newrelic:notice_deployment\" Copy The next time you run cap deploy, the agent notifies New Relic of the deployment, and all time series charts will show the deployment event. Customize your Capistrano configuration If Capistrano is running the deployment notification recipe on a remote build machine,the build machine must have your New Relic License key. You can either copy a valid newrelic.yml file to the build machine (possibly using a Capistrano Before Hook) or call set :newrelic_license_key, 'YOUR_LICENSE_KEY' in your Capistrano configuration. You can customize some deployment information by using Capistrano variables. If defined, these will override the defaults. These apply to both Capistrano 2 and 3. Capistrano 2 and 3 variables Description newrelic_appname The app where the deployment will appear. By default this comes from the definition in the newrelic.yml file for the given rails_env. If you set this value from the command line, you can only specify one application name. If you set this value in newrelic.yml, only the first application name will be used. newrelic_changelog The change log, which is determined by running the svn/git log command from the local working directory where the Capistrano command was issued. newrelic_desc Descriptive text that appears with the deployment. Default is empty. newrelic_license_key The New Relic license key to use. By default this comes from the definition in the newrelic.yml file for the given rails_env. This is not the same as your REST API key. newrelic_revision The revision recorded for the deployment. Recommendation: If you are using Subversion, consider including the tag or branch name in addition to the revision. newrelic_user The user to associate with the deployment. Override Capistrano settings In any version of Capistrano, you can override settings in your deploy.rb: set :newrelic_user, \"username\" Copy To override settings with Capistrano 2.x: From the command line: cap production deploy -Snewrelic_desc=\"Deploying beta Krakatau release\" Copy This example will prompt for content that will appear in the deployment's change log: set(:newrelic_changelog) do Capistrano::CLI.ui.ask \"Enter a summary of changes: \" end Copy Deploy to staging By default, the newrelic_rpm gem comes with Capistrano tasks to record all deployments in your production environment. If you have a separate staging application, you can change the rails_env variable setting so that staging deployments are recorded in the staging app instead of the production app. To identify deployments to your staging environment, use Capistrano or the command line. Deploy to staging Comments Capistrano multistage If you are using Capistrano multistage, add this line to config/deploy/staging.rb: set :rails_env, \"staging\" Copy Capistrano 2.x If you are using Capistrano 2.x, add this information from the command line: cap -s rails_env=staging deployment_task_name Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.30004,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "sections": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the <em>Ruby</em> <em>agent</em>. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your"
      },
      "id": "603eb906196a671067a83df1"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/new-relic-browser-ruby-agent": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.973206,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    },
    {
      "sections": [
        "Record deployments with the Ruby agent",
        "Assign an application name",
        "Record with the command line",
        "Record with Capistrano 3.x",
        "Record with Capistrano 2.x",
        "If agent was installed with New Relic gem",
        "If agent was installed as Rails plugin",
        "Customize your Capistrano configuration",
        "Override Capistrano settings",
        "Deploy to staging"
      ],
      "title": "Record deployments with the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "06c806cf9f3dc512c45fd672d220702f55a2944c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/record-deployments-ruby-agent/",
      "published_at": "2021-10-24T22:26:12Z",
      "updated_at": "2021-09-27T15:14:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the Ruby agent. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your production environment. You can also customize the rails_env variable for other environments, such as staging. Assign an application name To assign an application name: Download the latest version of the Ruby agent. Set the app_name in your newrelic.yml file to a meaningful name. This will assign instances in the given environment the label given by app_name when browsing your data in the New Relic user interface. The deployment upload script will use that label to associate an app with the deployment. Record with the command line If you installed the Ruby agent as a gem, you can record deployments directly by using the newrelic executable: newrelic deployments Copy Depending on your environment, you may need to run: $bundle exec newrelic deployment Copy You can use several optional values with newrelic. The description is short text. deployments [OPTIONS] [description] OPTIONS: -a, --appname=name Set the application name. Default is app_name setting in newrelic.yml -e, --environment=name Override the (RAILS|RUBY)_ENV setting -u, --user=USER Specify the user deploying. -r, --revision=REV Specify the revision being deployed -c, --changes Read in a change log from the standard input -h Print this help Copy When using the -c option, you can pipe the change log into the script. If not piping when using the -c option, select control-D to signify the end of file (EOF). Record with Capistrano 3.x The New Relic Ruby agent contains a Capistrano recipe that can record app deployments. After assigning your app name, edit your Capistrano files to communicate with the agent: At the top of your Capfile, add the following line: require 'new_relic/recipes' Copy In your deploy.rb file, include: after \"deploy:updated\", \"newrelic:notice_deployment\" Copy Record with Capistrano 2.x You can record Capistrano 2.x deployments with the New Relic agent: Tell Capistrano to load New Relic's recipes: If agent was installed with New Relic gem Add this at the top of your deploy.rb file: require 'new_relic/recipes' Copy If agent was installed as Rails plugin In your Capfile, add the following line above load deploy.rb (if it is not already there): Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) } Copy Add the following hooks to your deploy.rb file: # Notify New Relic of deployments. # This goes out even if the deploy fails, sadly. after \"deploy\", \"newrelic:notice_deployment\" after \"deploy:migrations\", \"newrelic:notice_deployment\" after \"deploy:cold\", \"newrelic:notice_deployment\" Copy The next time you run cap deploy, the agent notifies New Relic of the deployment, and all time series charts will show the deployment event. Customize your Capistrano configuration If Capistrano is running the deployment notification recipe on a remote build machine,the build machine must have your New Relic License key. You can either copy a valid newrelic.yml file to the build machine (possibly using a Capistrano Before Hook) or call set :newrelic_license_key, 'YOUR_LICENSE_KEY' in your Capistrano configuration. You can customize some deployment information by using Capistrano variables. If defined, these will override the defaults. These apply to both Capistrano 2 and 3. Capistrano 2 and 3 variables Description newrelic_appname The app where the deployment will appear. By default this comes from the definition in the newrelic.yml file for the given rails_env. If you set this value from the command line, you can only specify one application name. If you set this value in newrelic.yml, only the first application name will be used. newrelic_changelog The change log, which is determined by running the svn/git log command from the local working directory where the Capistrano command was issued. newrelic_desc Descriptive text that appears with the deployment. Default is empty. newrelic_license_key The New Relic license key to use. By default this comes from the definition in the newrelic.yml file for the given rails_env. This is not the same as your REST API key. newrelic_revision The revision recorded for the deployment. Recommendation: If you are using Subversion, consider including the tag or branch name in addition to the revision. newrelic_user The user to associate with the deployment. Override Capistrano settings In any version of Capistrano, you can override settings in your deploy.rb: set :newrelic_user, \"username\" Copy To override settings with Capistrano 2.x: From the command line: cap production deploy -Snewrelic_desc=\"Deploying beta Krakatau release\" Copy This example will prompt for content that will appear in the deployment's change log: set(:newrelic_changelog) do Capistrano::CLI.ui.ask \"Enter a summary of changes: \" end Copy Deploy to staging By default, the newrelic_rpm gem comes with Capistrano tasks to record all deployments in your production environment. If you have a separate staging application, you can change the rails_env variable setting so that staging deployments are recorded in the staging app instead of the production app. To identify deployments to your staging environment, use Capistrano or the command line. Deploy to staging Comments Capistrano multistage If you are using Capistrano multistage, add this line to config/deploy/staging.rb: set :rails_env, \"staging\" Copy Capistrano 2.x If you are using Capistrano 2.x, add this information from the command line: cap -s rails_env=staging deployment_task_name Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.30003,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "sections": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the <em>Ruby</em> <em>agent</em>. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your"
      },
      "id": "603eb906196a671067a83df1"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/record-deployments-ruby-agent": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.973206,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    },
    {
      "sections": [
        "Browser monitoring and the Ruby agent",
        "Requirements",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "CSP Nonce support",
        "Troubleshooting",
        "Disable auto-instrumentation"
      ],
      "title": "Browser monitoring and the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "c7381e06d48fe877cdbcc935d51c88dd858d3673",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/new-relic-browser-ruby-agent/",
      "published_at": "2021-10-25T00:54:21Z",
      "updated_at": "2021-07-09T22:33:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Ruby agent, you can add browser monitoring agent instrumentation to your webpages either automatically or manually. To enable browser monitoring in the UI, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Ruby agent. Requirements Automatic browser instrumentation is supported for most recent versions of Rails: New Relic Ruby agent (version 3.0.1 or higher) For automatic instrumentation: Rails 2.3 or higher For manual instrumentation: Rails 2.0 to 2.2 Use auto-instrumentation Automatic instrumentation works with Rack, and requires Rails 2.3 or higher. Configure the agent to automatically instrument pages with end user monitoring scripts, by adding or editing the following flag in newrelic.yml. browser_monitoring: auto_instrument: true Copy This is the simplest way to monitor end users. The Ruby agent examines each page from your application and automatically injects the browser JavaScript in the header. Auto-instrumentation works for environments that support Rack. For performance reasons the agent scans only the first 50k of your application's response for the header instrumentation point. In cases where a X-UA-Compatible meta tag is present and the <head> tag is longer than 50k, auto-instrumentation will fail gracefully. Auto-instrumentation will look for an X-UA-Compatible meta tag and insert the JavaScript directly after it. If the auto-instrumentation cannot find an X-UA-Compatible meta tag, it will insert after the opening head tag, and failing that it will insert after the opening body tag. If any of these tags are wrapped in conditionals or comments, the automatic instrumentation will likely fail. If auto-instrumentation fails to correctly instrument your application’s pages, then you must manually instrument via agent API. Manually instrument via agent API If you are using Rails 2.1 to 2.2 or cannot use auto-instrumentation, you can still set up end user monitoring manually by including appropriate scripts in your pages. Use the New Relic Ruby agent's API to generate the script to be inserted into your pages. For example, to modify your application's template to call the agent, use: <head> <%= ::NewRelic::Agent.browser_timing_header rescue \"\" %> ... existing template code ... </head> Copy CSP Nonce support CSP Nonce usage in our browser instrumentation is supported in version 7.1.0+ of the Ruby agent. To use a nonce with the browser instrumentation, you must disable browser monitoring auto instrumentation and use the manual instrumentation via the agent API. You may now pass a nonce as an argument into the API method to allow the agent to insert the nonce into the browser instrumentation. For example, NewRelic::Agent.browser_timing_header(nonce). Troubleshooting If you do not see any browser data being reported, view the HTML source and confirm two blocks of script similar to this in your HTML head: <script type=\"text/javascript\">window.NREUM||(NREUM={});...</script> Copy If these are not present, check the auto-instrumentation settings or the placement of manual instrumentation in your template files. In versions of the Ruby agent prior to 3.7.0, <%=::NewRelic::Agent.browser_timing_footer rescue \"\" %> also needed to be called as close to the bottom of the document as possible. With 3.7.0, all the required script is included by browser_timing_header. browser_timing_footer returns an empty string for compatibility. Disable auto-instrumentation The default value of auto-instrument is true (even when unspecified). To disable auto-instrumentation, set this flag to false. To disable auto-instrumentation only for certain controllers or controller actions, use newrelic_ignore_enduser. Server-side instrumentation will be unaffected by this call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.70472,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Ruby</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With the <em>Ruby</em> <em>agent</em>, you can add browser monitoring <em>agent</em> instrumentation to your webpages either automatically or manually. To enable browser monitoring in the UI, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>Ruby</em> <em>agent</em>. Requirements"
      },
      "id": "603eb812e7b9d247a82a07dc"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/ruby-vm-measurements": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34282,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.9732,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    },
    {
      "sections": [
        "Record deployments with the Ruby agent",
        "Assign an application name",
        "Record with the command line",
        "Record with Capistrano 3.x",
        "Record with Capistrano 2.x",
        "If agent was installed with New Relic gem",
        "If agent was installed as Rails plugin",
        "Customize your Capistrano configuration",
        "Override Capistrano settings",
        "Deploy to staging"
      ],
      "title": "Record deployments with the Ruby agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "06c806cf9f3dc512c45fd672d220702f55a2944c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/record-deployments-ruby-agent/",
      "published_at": "2021-10-24T22:26:12Z",
      "updated_at": "2021-09-27T15:14:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the Ruby agent. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your production environment. You can also customize the rails_env variable for other environments, such as staging. Assign an application name To assign an application name: Download the latest version of the Ruby agent. Set the app_name in your newrelic.yml file to a meaningful name. This will assign instances in the given environment the label given by app_name when browsing your data in the New Relic user interface. The deployment upload script will use that label to associate an app with the deployment. Record with the command line If you installed the Ruby agent as a gem, you can record deployments directly by using the newrelic executable: newrelic deployments Copy Depending on your environment, you may need to run: $bundle exec newrelic deployment Copy You can use several optional values with newrelic. The description is short text. deployments [OPTIONS] [description] OPTIONS: -a, --appname=name Set the application name. Default is app_name setting in newrelic.yml -e, --environment=name Override the (RAILS|RUBY)_ENV setting -u, --user=USER Specify the user deploying. -r, --revision=REV Specify the revision being deployed -c, --changes Read in a change log from the standard input -h Print this help Copy When using the -c option, you can pipe the change log into the script. If not piping when using the -c option, select control-D to signify the end of file (EOF). Record with Capistrano 3.x The New Relic Ruby agent contains a Capistrano recipe that can record app deployments. After assigning your app name, edit your Capistrano files to communicate with the agent: At the top of your Capfile, add the following line: require 'new_relic/recipes' Copy In your deploy.rb file, include: after \"deploy:updated\", \"newrelic:notice_deployment\" Copy Record with Capistrano 2.x You can record Capistrano 2.x deployments with the New Relic agent: Tell Capistrano to load New Relic's recipes: If agent was installed with New Relic gem Add this at the top of your deploy.rb file: require 'new_relic/recipes' Copy If agent was installed as Rails plugin In your Capfile, add the following line above load deploy.rb (if it is not already there): Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) } Copy Add the following hooks to your deploy.rb file: # Notify New Relic of deployments. # This goes out even if the deploy fails, sadly. after \"deploy\", \"newrelic:notice_deployment\" after \"deploy:migrations\", \"newrelic:notice_deployment\" after \"deploy:cold\", \"newrelic:notice_deployment\" Copy The next time you run cap deploy, the agent notifies New Relic of the deployment, and all time series charts will show the deployment event. Customize your Capistrano configuration If Capistrano is running the deployment notification recipe on a remote build machine,the build machine must have your New Relic License key. You can either copy a valid newrelic.yml file to the build machine (possibly using a Capistrano Before Hook) or call set :newrelic_license_key, 'YOUR_LICENSE_KEY' in your Capistrano configuration. You can customize some deployment information by using Capistrano variables. If defined, these will override the defaults. These apply to both Capistrano 2 and 3. Capistrano 2 and 3 variables Description newrelic_appname The app where the deployment will appear. By default this comes from the definition in the newrelic.yml file for the given rails_env. If you set this value from the command line, you can only specify one application name. If you set this value in newrelic.yml, only the first application name will be used. newrelic_changelog The change log, which is determined by running the svn/git log command from the local working directory where the Capistrano command was issued. newrelic_desc Descriptive text that appears with the deployment. Default is empty. newrelic_license_key The New Relic license key to use. By default this comes from the definition in the newrelic.yml file for the given rails_env. This is not the same as your REST API key. newrelic_revision The revision recorded for the deployment. Recommendation: If you are using Subversion, consider including the tag or branch name in addition to the revision. newrelic_user The user to associate with the deployment. Override Capistrano settings In any version of Capistrano, you can override settings in your deploy.rb: set :newrelic_user, \"username\" Copy To override settings with Capistrano 2.x: From the command line: cap production deploy -Snewrelic_desc=\"Deploying beta Krakatau release\" Copy This example will prompt for content that will appear in the deployment's change log: set(:newrelic_changelog) do Capistrano::CLI.ui.ask \"Enter a summary of changes: \" end Copy Deploy to staging By default, the newrelic_rpm gem comes with Capistrano tasks to record all deployments in your production environment. If you have a separate staging application, you can change the rails_env variable setting so that staging deployments are recorded in the staging app instead of the production app. To identify deployments to your staging environment, use Capistrano or the command line. Deploy to staging Comments Capistrano multistage If you are using Capistrano multistage, add this line to config/deploy/staging.rb: set :rails_env, \"staging\" Copy Capistrano 2.x If you are using Capistrano 2.x, add this information from the command line: cap -s rails_env=staging deployment_task_name Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.300026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "sections": "Record deployments with the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> allows you to send information about application deployments by using the REST API or a Capistrano recipe (versions 2.x and 3.x) distributed with the <em>Ruby</em> <em>agent</em>. You can then view deployments in the New Relic UI. By default, all deployment information is recorded in your"
      },
      "id": "603eb906196a671067a83df1"
    }
  ],
  "/docs/apm/agents/ruby-agent/frameworks/metal-controller-instrumentation": [
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "fa34ef9ebcf8904e3601568b15d53bfe825424f4",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2021-10-25T06:29:50Z",
      "updated_at": "2021-09-27T15:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.37271,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "603ebc9ae7b9d2754a2a0810"
    },
    {
      "sections": [
        "Sinatra instrumentation",
        "Contents",
        "Getting started",
        "Middleware installation",
        "Ignoring routes",
        "Padrino",
        "Shotgun (not supported)"
      ],
      "title": "Sinatra instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "97ce5f5307e5c41049d2daf7c08d9eb741f27f47",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/sinatra-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-07-09T07:57:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Ruby agent works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked as separate actions. Contents Getting started To set up Sinatra: Install the latest newrelic_rpm gem. In your Sinatra app, immediately below the Sinatra require directive, add: require 'newrelic_rpm' Copy Set RACK_ENV to the environment corresponding to the configuration definitions in your newrelic.yml file; for example, development, staging, production, etc. Note: Developer mode only works with Rails. Middleware installation Ruby agent versions prior to 3.6.3 required manual addition of New Relic middlewares to enable certain features, such as cross application tracing and browser monitoring. For more information about required middlewares, see Rack middlewares, or upgrade to the most recent Ruby agent. Ignoring routes Ruby agent versions 3.6.3 or higher support ignoring certain routes, similar to what was previously available in Rails controller instrumentation. To specify these values, use the same style of routes that you use to define your Sinatra application. For example, to ignore a ping route in a Sinatra app, include the following code in the app: newrelic_ignore '/ping' get '/ping' do # ... end Copy If you want an entire application to be ignored (for example, in a mounted application), call newrelic_ignore without parameters: newrelic_ignore Copy Additionally, newrelic_ignore_apdex and newrelic_ignore_enduser are supported. The newrelic_ignore_apdex call will exclude a given route from consideration in overall Apdex calculations. The newrelic_ignore_enduser call will prevent automatic injection of the page load timing JavaScript when a route is rendered. Padrino Padrino is a framework built on top of Sinatra. Starting with Ruby agent version 3.6.3, New Relic's Sinatra instrumentation works with Padrino versions 0.10.x or higher. Shotgun (not supported) The New Relic Ruby agent will not work with shotgun. It cannot make a connection before the dispatcher process exits. Neither Developer mode nor Monitor mode will work.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.05466,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Sinatra <em>instrumentation</em>",
        "sections": "Sinatra <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "New Relic&#x27;s <em>Ruby</em> <em>agent</em> works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked"
      },
      "id": "603ebc9928ccbc1046eba786"
    },
    {
      "sections": [
        "Redis instrumentation",
        "Tip",
        "Interaction with newrelic-redis",
        "Important",
        "Capture Redis command arguments"
      ],
      "title": "Redis instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9923fcd7dd89191c620a9490fb89cd8ca4bf31e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/redis-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-03-16T08:03:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically instruments the Redis gem (gem version 3.0.0 or higher). After you install the agent and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart on the APM Summary page will show color-coded Redis information. Tip Redis instrumentation requires Ruby agent version 3.13.0 or higher. Interaction with newrelic-redis The third-party newrelic-redis gem provides Redis instrumentation support as an add-on to New Relic's Ruby agent. If the Ruby agent detects newrelic-redis, it will not install the built-in Redis instrumentation and will record a log message like this at startup: INFO : Not installing New Relic supported Redis instrumentation because the third party newrelic-redis gem is present Copy To use New Relic's built-in Redis instrumentation and view Redis information in the UI, remove the newrelic-redis gem. Important Removing the newrelic-redis gem in favor of the built-in instrumentation will change your transaction names. To preserve your existing transaction names, ignore the log message and do not uninstall the gem. Capture Redis command arguments By default, the Ruby agent only captures Redis command names. To capture Redis command arguments, use this configuration: transaction_tracer: record_redis_arguments: true Copy The agent limits the number of characters and arguments collected from each transaction trace node. The agent truncates items that exceed these limits.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.00722,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Redis <em>instrumentation</em>",
        "sections": "Redis <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically instruments the Redis <em>gem</em> (<em>gem</em> version 3.0.0 or higher). After you install the <em>agent</em> and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart"
      },
      "id": "603ed7a628ccbca064eba784"
    }
  ],
  "/docs/apm/agents/ruby-agent/frameworks/mongo-instrumentation": [
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "fa34ef9ebcf8904e3601568b15d53bfe825424f4",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2021-10-25T06:29:50Z",
      "updated_at": "2021-09-27T15:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.37271,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "603ebc9ae7b9d2754a2a0810"
    },
    {
      "sections": [
        "Sinatra instrumentation",
        "Contents",
        "Getting started",
        "Middleware installation",
        "Ignoring routes",
        "Padrino",
        "Shotgun (not supported)"
      ],
      "title": "Sinatra instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "97ce5f5307e5c41049d2daf7c08d9eb741f27f47",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/sinatra-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-07-09T07:57:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Ruby agent works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked as separate actions. Contents Getting started To set up Sinatra: Install the latest newrelic_rpm gem. In your Sinatra app, immediately below the Sinatra require directive, add: require 'newrelic_rpm' Copy Set RACK_ENV to the environment corresponding to the configuration definitions in your newrelic.yml file; for example, development, staging, production, etc. Note: Developer mode only works with Rails. Middleware installation Ruby agent versions prior to 3.6.3 required manual addition of New Relic middlewares to enable certain features, such as cross application tracing and browser monitoring. For more information about required middlewares, see Rack middlewares, or upgrade to the most recent Ruby agent. Ignoring routes Ruby agent versions 3.6.3 or higher support ignoring certain routes, similar to what was previously available in Rails controller instrumentation. To specify these values, use the same style of routes that you use to define your Sinatra application. For example, to ignore a ping route in a Sinatra app, include the following code in the app: newrelic_ignore '/ping' get '/ping' do # ... end Copy If you want an entire application to be ignored (for example, in a mounted application), call newrelic_ignore without parameters: newrelic_ignore Copy Additionally, newrelic_ignore_apdex and newrelic_ignore_enduser are supported. The newrelic_ignore_apdex call will exclude a given route from consideration in overall Apdex calculations. The newrelic_ignore_enduser call will prevent automatic injection of the page load timing JavaScript when a route is rendered. Padrino Padrino is a framework built on top of Sinatra. Starting with Ruby agent version 3.6.3, New Relic's Sinatra instrumentation works with Padrino versions 0.10.x or higher. Shotgun (not supported) The New Relic Ruby agent will not work with shotgun. It cannot make a connection before the dispatcher process exits. Neither Developer mode nor Monitor mode will work.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.05466,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Sinatra <em>instrumentation</em>",
        "sections": "Sinatra <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "New Relic&#x27;s <em>Ruby</em> <em>agent</em> works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked"
      },
      "id": "603ebc9928ccbc1046eba786"
    },
    {
      "sections": [
        "Redis instrumentation",
        "Tip",
        "Interaction with newrelic-redis",
        "Important",
        "Capture Redis command arguments"
      ],
      "title": "Redis instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9923fcd7dd89191c620a9490fb89cd8ca4bf31e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/redis-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-03-16T08:03:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically instruments the Redis gem (gem version 3.0.0 or higher). After you install the agent and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart on the APM Summary page will show color-coded Redis information. Tip Redis instrumentation requires Ruby agent version 3.13.0 or higher. Interaction with newrelic-redis The third-party newrelic-redis gem provides Redis instrumentation support as an add-on to New Relic's Ruby agent. If the Ruby agent detects newrelic-redis, it will not install the built-in Redis instrumentation and will record a log message like this at startup: INFO : Not installing New Relic supported Redis instrumentation because the third party newrelic-redis gem is present Copy To use New Relic's built-in Redis instrumentation and view Redis information in the UI, remove the newrelic-redis gem. Important Removing the newrelic-redis gem in favor of the built-in instrumentation will change your transaction names. To preserve your existing transaction names, ignore the log message and do not uninstall the gem. Capture Redis command arguments By default, the Ruby agent only captures Redis command names. To capture Redis command arguments, use this configuration: transaction_tracer: record_redis_arguments: true Copy The agent limits the number of characters and arguments collected from each transaction trace node. The agent truncates items that exceed these limits.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.00722,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Redis <em>instrumentation</em>",
        "sections": "Redis <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically instruments the Redis <em>gem</em> (<em>gem</em> version 3.0.0 or higher). After you install the <em>agent</em> and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart"
      },
      "id": "603ed7a628ccbca064eba784"
    }
  ],
  "/docs/apm/agents/ruby-agent/frameworks/rack-metal-support": [
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "fa34ef9ebcf8904e3601568b15d53bfe825424f4",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2021-10-25T06:29:50Z",
      "updated_at": "2021-09-27T15:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.3727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "603ebc9ae7b9d2754a2a0810"
    },
    {
      "sections": [
        "Sinatra instrumentation",
        "Contents",
        "Getting started",
        "Middleware installation",
        "Ignoring routes",
        "Padrino",
        "Shotgun (not supported)"
      ],
      "title": "Sinatra instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "97ce5f5307e5c41049d2daf7c08d9eb741f27f47",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/sinatra-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-07-09T07:57:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Ruby agent works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked as separate actions. Contents Getting started To set up Sinatra: Install the latest newrelic_rpm gem. In your Sinatra app, immediately below the Sinatra require directive, add: require 'newrelic_rpm' Copy Set RACK_ENV to the environment corresponding to the configuration definitions in your newrelic.yml file; for example, development, staging, production, etc. Note: Developer mode only works with Rails. Middleware installation Ruby agent versions prior to 3.6.3 required manual addition of New Relic middlewares to enable certain features, such as cross application tracing and browser monitoring. For more information about required middlewares, see Rack middlewares, or upgrade to the most recent Ruby agent. Ignoring routes Ruby agent versions 3.6.3 or higher support ignoring certain routes, similar to what was previously available in Rails controller instrumentation. To specify these values, use the same style of routes that you use to define your Sinatra application. For example, to ignore a ping route in a Sinatra app, include the following code in the app: newrelic_ignore '/ping' get '/ping' do # ... end Copy If you want an entire application to be ignored (for example, in a mounted application), call newrelic_ignore without parameters: newrelic_ignore Copy Additionally, newrelic_ignore_apdex and newrelic_ignore_enduser are supported. The newrelic_ignore_apdex call will exclude a given route from consideration in overall Apdex calculations. The newrelic_ignore_enduser call will prevent automatic injection of the page load timing JavaScript when a route is rendered. Padrino Padrino is a framework built on top of Sinatra. Starting with Ruby agent version 3.6.3, New Relic's Sinatra instrumentation works with Padrino versions 0.10.x or higher. Shotgun (not supported) The New Relic Ruby agent will not work with shotgun. It cannot make a connection before the dispatcher process exits. Neither Developer mode nor Monitor mode will work.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.05466,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Sinatra <em>instrumentation</em>",
        "sections": "Sinatra <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "New Relic&#x27;s <em>Ruby</em> <em>agent</em> works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked"
      },
      "id": "603ebc9928ccbc1046eba786"
    },
    {
      "sections": [
        "Redis instrumentation",
        "Tip",
        "Interaction with newrelic-redis",
        "Important",
        "Capture Redis command arguments"
      ],
      "title": "Redis instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9923fcd7dd89191c620a9490fb89cd8ca4bf31e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/redis-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-03-16T08:03:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically instruments the Redis gem (gem version 3.0.0 or higher). After you install the agent and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart on the APM Summary page will show color-coded Redis information. Tip Redis instrumentation requires Ruby agent version 3.13.0 or higher. Interaction with newrelic-redis The third-party newrelic-redis gem provides Redis instrumentation support as an add-on to New Relic's Ruby agent. If the Ruby agent detects newrelic-redis, it will not install the built-in Redis instrumentation and will record a log message like this at startup: INFO : Not installing New Relic supported Redis instrumentation because the third party newrelic-redis gem is present Copy To use New Relic's built-in Redis instrumentation and view Redis information in the UI, remove the newrelic-redis gem. Important Removing the newrelic-redis gem in favor of the built-in instrumentation will change your transaction names. To preserve your existing transaction names, ignore the log message and do not uninstall the gem. Capture Redis command arguments By default, the Ruby agent only captures Redis command names. To capture Redis command arguments, use this configuration: transaction_tracer: record_redis_arguments: true Copy The agent limits the number of characters and arguments collected from each transaction trace node. The agent truncates items that exceed these limits.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.00722,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Redis <em>instrumentation</em>",
        "sections": "Redis <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically instruments the Redis <em>gem</em> (<em>gem</em> version 3.0.0 or higher). After you install the <em>agent</em> and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart"
      },
      "id": "603ed7a628ccbca064eba784"
    }
  ],
  "/docs/apm/agents/ruby-agent/frameworks/sequel-instrumentation": [
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "fa34ef9ebcf8904e3601568b15d53bfe825424f4",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2021-10-25T06:29:50Z",
      "updated_at": "2021-09-27T15:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.3727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "603ebc9ae7b9d2754a2a0810"
    },
    {
      "sections": [
        "Sinatra instrumentation",
        "Contents",
        "Getting started",
        "Middleware installation",
        "Ignoring routes",
        "Padrino",
        "Shotgun (not supported)"
      ],
      "title": "Sinatra instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "97ce5f5307e5c41049d2daf7c08d9eb741f27f47",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/sinatra-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-07-09T07:57:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Ruby agent works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked as separate actions. Contents Getting started To set up Sinatra: Install the latest newrelic_rpm gem. In your Sinatra app, immediately below the Sinatra require directive, add: require 'newrelic_rpm' Copy Set RACK_ENV to the environment corresponding to the configuration definitions in your newrelic.yml file; for example, development, staging, production, etc. Note: Developer mode only works with Rails. Middleware installation Ruby agent versions prior to 3.6.3 required manual addition of New Relic middlewares to enable certain features, such as cross application tracing and browser monitoring. For more information about required middlewares, see Rack middlewares, or upgrade to the most recent Ruby agent. Ignoring routes Ruby agent versions 3.6.3 or higher support ignoring certain routes, similar to what was previously available in Rails controller instrumentation. To specify these values, use the same style of routes that you use to define your Sinatra application. For example, to ignore a ping route in a Sinatra app, include the following code in the app: newrelic_ignore '/ping' get '/ping' do # ... end Copy If you want an entire application to be ignored (for example, in a mounted application), call newrelic_ignore without parameters: newrelic_ignore Copy Additionally, newrelic_ignore_apdex and newrelic_ignore_enduser are supported. The newrelic_ignore_apdex call will exclude a given route from consideration in overall Apdex calculations. The newrelic_ignore_enduser call will prevent automatic injection of the page load timing JavaScript when a route is rendered. Padrino Padrino is a framework built on top of Sinatra. Starting with Ruby agent version 3.6.3, New Relic's Sinatra instrumentation works with Padrino versions 0.10.x or higher. Shotgun (not supported) The New Relic Ruby agent will not work with shotgun. It cannot make a connection before the dispatcher process exits. Neither Developer mode nor Monitor mode will work.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.05466,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Sinatra <em>instrumentation</em>",
        "sections": "Sinatra <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "New Relic&#x27;s <em>Ruby</em> <em>agent</em> works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked"
      },
      "id": "603ebc9928ccbc1046eba786"
    },
    {
      "sections": [
        "Redis instrumentation",
        "Tip",
        "Interaction with newrelic-redis",
        "Important",
        "Capture Redis command arguments"
      ],
      "title": "Redis instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9923fcd7dd89191c620a9490fb89cd8ca4bf31e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/redis-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-03-16T08:03:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically instruments the Redis gem (gem version 3.0.0 or higher). After you install the agent and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart on the APM Summary page will show color-coded Redis information. Tip Redis instrumentation requires Ruby agent version 3.13.0 or higher. Interaction with newrelic-redis The third-party newrelic-redis gem provides Redis instrumentation support as an add-on to New Relic's Ruby agent. If the Ruby agent detects newrelic-redis, it will not install the built-in Redis instrumentation and will record a log message like this at startup: INFO : Not installing New Relic supported Redis instrumentation because the third party newrelic-redis gem is present Copy To use New Relic's built-in Redis instrumentation and view Redis information in the UI, remove the newrelic-redis gem. Important Removing the newrelic-redis gem in favor of the built-in instrumentation will change your transaction names. To preserve your existing transaction names, ignore the log message and do not uninstall the gem. Capture Redis command arguments By default, the Ruby agent only captures Redis command names. To capture Redis command arguments, use this configuration: transaction_tracer: record_redis_arguments: true Copy The agent limits the number of characters and arguments collected from each transaction trace node. The agent truncates items that exceed these limits.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.00722,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Redis <em>instrumentation</em>",
        "sections": "Redis <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically instruments the Redis <em>gem</em> (<em>gem</em> version 3.0.0 or higher). After you install the <em>agent</em> and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart"
      },
      "id": "603ed7a628ccbca064eba784"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/apm-agent-security-ruby": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.43823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. <em>Get</em> New Relic <em>agent</em> troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and <em>start</em> a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent 7.x to 8.x migration guide",
        "Summary",
        "Changes to the add_method_tracer API method",
        "Metric name parameter accepts Procs; strings no longer interpolated",
        ":code_header and :code_footer parameters accept only Procs",
        "Call add_method_tracer once per method",
        "Tip",
        "Distributed Tracing is enabled by default",
        "Cross Application Tracing is deprecated",
        "Removed deprecated API methods and legacy instrumentation"
      ],
      "title": "Ruby agent 7.x to 8.x migration guide",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "34bc6e2440f16d254dd0bd39a99d99e7028ef541",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/getting-started/migration-8x-guide/",
      "published_at": "2021-10-25T06:28:01Z",
      "updated_at": "2021-09-27T15:05:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Summary This guide covers the major changes between the 7.x and 8.x series of the Ruby agent, issues that may be encountered while upgrading, and how to successfully migrate to version 8.x. The main changes include: Changes to the add_method_tracer API method Distributed Tracing is enabled by default Cross Application Tracing is deprecated Removed deprecated API methods and legacy instrumentation See the milestone for 8.0 for more information. Changes to the add_method_tracer API method Metric name parameter accepts Procs; strings no longer interpolated The second argument to add_method_tracer is the name of the metric used to record calls to the traced method. Previously, this string could include Ruby-style interpolation to allow for the metric name to include variables from the method receiver. For example: # old (<= 7.2) add_method_tracer :foo, ‘metric_#{args[0]}’ Copy As of 8.0, this string will no longer be interpolated. To preserve the behavior described above, pass a Proc instead: # new (8.0+) add_method_tracer :foo, -> (*args) { “metric_#{args[0]}” } # note the double-quotes Copy Note that the arity of the Proc passed to add_method_tracer should match the arity of the original traced method (or use a compatible splat). :code_header and :code_footer parameters accept only Procs Similar to metric names, the :code_header and :code_footer options to add_method_tracer were previously given as strings that would be interpolated in the context of the method receiver. In Ruby Agent 8.0, :code_header and :code_footer will only be invoked if given as Procs, as in the example above. Call add_method_tracer once per method Calling add_method_tracer multiple times on the same method will overwrite any previously defined method tracers for that method. There should be only one add_method_tracer line for each traced method. Previously, the agent allowed adding multiple metrics to the same method by invoking add_method_tracer once for each such metric. This can still be done, but the metric names need to be passed as the second argument of add_method_tracer as an array of strings or procs. # old add_method_tracer :foo, ‘metric1’ add_method_tracer :foo, ‘metric2’, push_scope: false add_method_tracer :foo, ‘metric3’, push_scope: false Copy # new add_method_tracer :foo, [‘metric1’, ‘metric2’, ‘metric3’] Copy Note that the first metric name will be created as a scoped metric unless push_scope: false is specified. The following named metrics will be unscoped. Each traced method may only have one scoped metric. Tip Older versions of Mocha can cause issues with the updated add_method_tracer. Mocha version 1.2.0 fixes this bug, so if after upgrading agent versions, you run into errors in your test suite such as: NoMethodError: super: no superclass method 'instance_method' for <ExampleClass> Copy and happen to have Mocha version < 1.2.0 installed, try increasing the Mocha version to 1.2.0 or above. We have only seen error this come up in a test environment calling Mocha methods. However, we recommend you verify the functionality of your application when troubleshooting. Distributed Tracing is enabled by default The default configuration option for distributed_tracing.enabled is set to true for versions 8.0 or higher. To disable distributed tracing, set this configuration option to false in your newrelic.yml. distributed_tracing: enabled: false Copy Cross Application Tracing is deprecated Cross Application Tracing is deprecated in 8.0 and will be removed in a future release. Tip Distributed tracing and cross application tracing cannot be used simultaneously. If both configuration options are enabled, then only distributed tracing is used. To continue using cross application tracing, settings for both distributed tracing and cross application tracing need to be updated in your newrelic.yml. cross_application_tracing: enabled: true distributed_tracing: enabled: false Copy Removed deprecated API methods and legacy instrumentation The following methods had been previously deprecated and are now removed. Removed Replacement disable_transaction_tracing API method disable_all_tracing or ignore_transaction API methods External.start_segment API method Tracer#start_external_request_segment API method Transaction.wrap API method Tracer#in_transaction API method Mongo < 2.1 instrumentation Upgrade to Mongo 2.1 or higher Excon < 0.19.0 instrumentation Upgrade to Excon 0.19.0 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.84265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> 7.x to 8.x migration guide",
        "sections": "<em>Ruby</em> <em>agent</em> 7.x to 8.x migration guide",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Summary This guide covers the major changes between the 7.x and 8.x series of the <em>Ruby</em> <em>agent</em>, issues that may be encountered while upgrading, and how to successfully migrate to version 8.x. The main changes include: Changes to the add_method_tracer API method Distributed Tracing is enabled"
      },
      "id": "61271c8428ccbc2c96f2615c"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-25T16:42:54Z",
      "updated_at": "2021-10-25T16:42:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher. Because modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.45238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP <em>agent</em> compatibility and requirements",
        "sections": "PHP <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic <em>agent</em>, <em>get</em> support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/introduction-new-relic-ruby": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.43823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. <em>Get</em> New Relic <em>agent</em> troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and <em>start</em> a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent 7.x to 8.x migration guide",
        "Summary",
        "Changes to the add_method_tracer API method",
        "Metric name parameter accepts Procs; strings no longer interpolated",
        ":code_header and :code_footer parameters accept only Procs",
        "Call add_method_tracer once per method",
        "Tip",
        "Distributed Tracing is enabled by default",
        "Cross Application Tracing is deprecated",
        "Removed deprecated API methods and legacy instrumentation"
      ],
      "title": "Ruby agent 7.x to 8.x migration guide",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "34bc6e2440f16d254dd0bd39a99d99e7028ef541",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/getting-started/migration-8x-guide/",
      "published_at": "2021-10-25T06:28:01Z",
      "updated_at": "2021-09-27T15:05:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Summary This guide covers the major changes between the 7.x and 8.x series of the Ruby agent, issues that may be encountered while upgrading, and how to successfully migrate to version 8.x. The main changes include: Changes to the add_method_tracer API method Distributed Tracing is enabled by default Cross Application Tracing is deprecated Removed deprecated API methods and legacy instrumentation See the milestone for 8.0 for more information. Changes to the add_method_tracer API method Metric name parameter accepts Procs; strings no longer interpolated The second argument to add_method_tracer is the name of the metric used to record calls to the traced method. Previously, this string could include Ruby-style interpolation to allow for the metric name to include variables from the method receiver. For example: # old (<= 7.2) add_method_tracer :foo, ‘metric_#{args[0]}’ Copy As of 8.0, this string will no longer be interpolated. To preserve the behavior described above, pass a Proc instead: # new (8.0+) add_method_tracer :foo, -> (*args) { “metric_#{args[0]}” } # note the double-quotes Copy Note that the arity of the Proc passed to add_method_tracer should match the arity of the original traced method (or use a compatible splat). :code_header and :code_footer parameters accept only Procs Similar to metric names, the :code_header and :code_footer options to add_method_tracer were previously given as strings that would be interpolated in the context of the method receiver. In Ruby Agent 8.0, :code_header and :code_footer will only be invoked if given as Procs, as in the example above. Call add_method_tracer once per method Calling add_method_tracer multiple times on the same method will overwrite any previously defined method tracers for that method. There should be only one add_method_tracer line for each traced method. Previously, the agent allowed adding multiple metrics to the same method by invoking add_method_tracer once for each such metric. This can still be done, but the metric names need to be passed as the second argument of add_method_tracer as an array of strings or procs. # old add_method_tracer :foo, ‘metric1’ add_method_tracer :foo, ‘metric2’, push_scope: false add_method_tracer :foo, ‘metric3’, push_scope: false Copy # new add_method_tracer :foo, [‘metric1’, ‘metric2’, ‘metric3’] Copy Note that the first metric name will be created as a scoped metric unless push_scope: false is specified. The following named metrics will be unscoped. Each traced method may only have one scoped metric. Tip Older versions of Mocha can cause issues with the updated add_method_tracer. Mocha version 1.2.0 fixes this bug, so if after upgrading agent versions, you run into errors in your test suite such as: NoMethodError: super: no superclass method 'instance_method' for <ExampleClass> Copy and happen to have Mocha version < 1.2.0 installed, try increasing the Mocha version to 1.2.0 or above. We have only seen error this come up in a test environment calling Mocha methods. However, we recommend you verify the functionality of your application when troubleshooting. Distributed Tracing is enabled by default The default configuration option for distributed_tracing.enabled is set to true for versions 8.0 or higher. To disable distributed tracing, set this configuration option to false in your newrelic.yml. distributed_tracing: enabled: false Copy Cross Application Tracing is deprecated Cross Application Tracing is deprecated in 8.0 and will be removed in a future release. Tip Distributed tracing and cross application tracing cannot be used simultaneously. If both configuration options are enabled, then only distributed tracing is used. To continue using cross application tracing, settings for both distributed tracing and cross application tracing need to be updated in your newrelic.yml. cross_application_tracing: enabled: true distributed_tracing: enabled: false Copy Removed deprecated API methods and legacy instrumentation The following methods had been previously deprecated and are now removed. Removed Replacement disable_transaction_tracing API method disable_all_tracing or ignore_transaction API methods External.start_segment API method Tracer#start_external_request_segment API method Transaction.wrap API method Tracer#in_transaction API method Mongo < 2.1 instrumentation Upgrade to Mongo 2.1 or higher Excon < 0.19.0 instrumentation Upgrade to Excon 0.19.0 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.84265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> 7.x to 8.x migration guide",
        "sections": "<em>Ruby</em> <em>agent</em> 7.x to 8.x migration guide",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Summary This guide covers the major changes between the 7.x and 8.x series of the <em>Ruby</em> <em>agent</em>, issues that may be encountered while upgrading, and how to successfully migrate to version 8.x. The main changes include: Changes to the add_method_tracer API method Distributed Tracing is enabled"
      },
      "id": "61271c8428ccbc2c96f2615c"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-25T16:42:54Z",
      "updated_at": "2021-10-25T16:42:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher. Because modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.45238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP <em>agent</em> compatibility and requirements",
        "sections": "PHP <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic <em>agent</em>, <em>get</em> support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/migration-7x-guide": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.43818,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. <em>Get</em> New Relic <em>agent</em> troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and <em>start</em> a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent 7.x to 8.x migration guide",
        "Summary",
        "Changes to the add_method_tracer API method",
        "Metric name parameter accepts Procs; strings no longer interpolated",
        ":code_header and :code_footer parameters accept only Procs",
        "Call add_method_tracer once per method",
        "Tip",
        "Distributed Tracing is enabled by default",
        "Cross Application Tracing is deprecated",
        "Removed deprecated API methods and legacy instrumentation"
      ],
      "title": "Ruby agent 7.x to 8.x migration guide",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "34bc6e2440f16d254dd0bd39a99d99e7028ef541",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/getting-started/migration-8x-guide/",
      "published_at": "2021-10-25T06:28:01Z",
      "updated_at": "2021-09-27T15:05:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Summary This guide covers the major changes between the 7.x and 8.x series of the Ruby agent, issues that may be encountered while upgrading, and how to successfully migrate to version 8.x. The main changes include: Changes to the add_method_tracer API method Distributed Tracing is enabled by default Cross Application Tracing is deprecated Removed deprecated API methods and legacy instrumentation See the milestone for 8.0 for more information. Changes to the add_method_tracer API method Metric name parameter accepts Procs; strings no longer interpolated The second argument to add_method_tracer is the name of the metric used to record calls to the traced method. Previously, this string could include Ruby-style interpolation to allow for the metric name to include variables from the method receiver. For example: # old (<= 7.2) add_method_tracer :foo, ‘metric_#{args[0]}’ Copy As of 8.0, this string will no longer be interpolated. To preserve the behavior described above, pass a Proc instead: # new (8.0+) add_method_tracer :foo, -> (*args) { “metric_#{args[0]}” } # note the double-quotes Copy Note that the arity of the Proc passed to add_method_tracer should match the arity of the original traced method (or use a compatible splat). :code_header and :code_footer parameters accept only Procs Similar to metric names, the :code_header and :code_footer options to add_method_tracer were previously given as strings that would be interpolated in the context of the method receiver. In Ruby Agent 8.0, :code_header and :code_footer will only be invoked if given as Procs, as in the example above. Call add_method_tracer once per method Calling add_method_tracer multiple times on the same method will overwrite any previously defined method tracers for that method. There should be only one add_method_tracer line for each traced method. Previously, the agent allowed adding multiple metrics to the same method by invoking add_method_tracer once for each such metric. This can still be done, but the metric names need to be passed as the second argument of add_method_tracer as an array of strings or procs. # old add_method_tracer :foo, ‘metric1’ add_method_tracer :foo, ‘metric2’, push_scope: false add_method_tracer :foo, ‘metric3’, push_scope: false Copy # new add_method_tracer :foo, [‘metric1’, ‘metric2’, ‘metric3’] Copy Note that the first metric name will be created as a scoped metric unless push_scope: false is specified. The following named metrics will be unscoped. Each traced method may only have one scoped metric. Tip Older versions of Mocha can cause issues with the updated add_method_tracer. Mocha version 1.2.0 fixes this bug, so if after upgrading agent versions, you run into errors in your test suite such as: NoMethodError: super: no superclass method 'instance_method' for <ExampleClass> Copy and happen to have Mocha version < 1.2.0 installed, try increasing the Mocha version to 1.2.0 or above. We have only seen error this come up in a test environment calling Mocha methods. However, we recommend you verify the functionality of your application when troubleshooting. Distributed Tracing is enabled by default The default configuration option for distributed_tracing.enabled is set to true for versions 8.0 or higher. To disable distributed tracing, set this configuration option to false in your newrelic.yml. distributed_tracing: enabled: false Copy Cross Application Tracing is deprecated Cross Application Tracing is deprecated in 8.0 and will be removed in a future release. Tip Distributed tracing and cross application tracing cannot be used simultaneously. If both configuration options are enabled, then only distributed tracing is used. To continue using cross application tracing, settings for both distributed tracing and cross application tracing need to be updated in your newrelic.yml. cross_application_tracing: enabled: true distributed_tracing: enabled: false Copy Removed deprecated API methods and legacy instrumentation The following methods had been previously deprecated and are now removed. Removed Replacement disable_transaction_tracing API method disable_all_tracing or ignore_transaction API methods External.start_segment API method Tracer#start_external_request_segment API method Transaction.wrap API method Tracer#in_transaction API method Mongo < 2.1 instrumentation Upgrade to Mongo 2.1 or higher Excon < 0.19.0 instrumentation Upgrade to Excon 0.19.0 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.84265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> 7.x to 8.x migration guide",
        "sections": "<em>Ruby</em> <em>agent</em> 7.x to 8.x migration guide",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Summary This guide covers the major changes between the 7.x and 8.x series of the <em>Ruby</em> <em>agent</em>, issues that may be encountered while upgrading, and how to successfully migrate to version 8.x. The main changes include: Changes to the add_method_tracer API method Distributed Tracing is enabled"
      },
      "id": "61271c8428ccbc2c96f2615c"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-25T16:42:54Z",
      "updated_at": "2021-10-25T16:42:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher. Because modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.4523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP <em>agent</em> compatibility and requirements",
        "sections": "PHP <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic <em>agent</em>, <em>get</em> support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/migration-8x-guide": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.43818,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. <em>Get</em> New Relic <em>agent</em> troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and <em>start</em> a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-25T16:42:54Z",
      "updated_at": "2021-10-25T16:42:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher. Because modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.4523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP <em>agent</em> compatibility and requirements",
        "sections": "PHP <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic <em>agent</em>, <em>get</em> support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic integrations",
        "Choose what's right for you",
        "Create your own solutions"
      ],
      "title": "Introduction to New Relic integrations",
      "type": "docs",
      "tags": [
        "Instrument everything",
        "Get started"
      ],
      "external_id": "9a44613b8a5ec0a9c9570b22c7d2f3ea726f2671",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/introduction-new-relic-integrations/",
      "published_at": "2021-10-25T15:15:14Z",
      "updated_at": "2021-10-24T00:59:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "We provide hundreds of solutions to get your data into New Relic so you can analyze the data in one place. They give you a steady flow of useful data to fix problems quickly, maintain complex systems, improve your code, and accelerate your digital transformation. You can bring in data from hundreds of applications, frameworks, services, operating systems, and other technologies. Our integrations gather the data, and the agents send it to New Relic. The solution you need may require you to install both an integration and an agent. In some cases, you can just install our agents that contain integrations, such as our APM agents. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to get you started. Choose what's right for you We offer a wide range of solutions so you can easily collect data across your environment. You may only need one of our solutions to get the data you need, or you can choose a variety of options to capture a broader range of data types. Go to New Relic Integrations to find solutions that fit your environment. Here is a sample of what you’ll find there: Application performance monitoring (APM): C, Go, Java, Node, .NET, PHP, Python, and Ruby Mobile apps: Android and iOS Browser monitoring: Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and Apple Safari Host monitoring: Linux and Microsoft Windows Cloud platform monitoring: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP) Core infrastructure services: Kubernetes, NGINX, MySQL, and more Open source telemetry integrations: Prometheus, Micrometer, OpenTelemetry, and more Create your own solutions If you are looking for custom options, we have tools to help you create your own: Use New Relic Flex to create lightweight monitoring solutions using infrastructure monitoring. Use New Relic Telemetry SDKs to build custom solutions for sending metrics, traces, and more. Build your own New Relic One applications that you can share with your colleagues, or edit open source applications in our catalog.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.436455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " integrations, such as our APM <em>agents</em>. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to <em>get</em> you <em>started</em>. Choose what&#x27;s right for you We offer a wide range of solutions so you can easily collect"
      },
      "id": "603e817f28ccbc4857eba798"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/new-relics-github-repository": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.438126,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. <em>Get</em> New Relic <em>agent</em> troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and <em>start</em> a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent 7.x to 8.x migration guide",
        "Summary",
        "Changes to the add_method_tracer API method",
        "Metric name parameter accepts Procs; strings no longer interpolated",
        ":code_header and :code_footer parameters accept only Procs",
        "Call add_method_tracer once per method",
        "Tip",
        "Distributed Tracing is enabled by default",
        "Cross Application Tracing is deprecated",
        "Removed deprecated API methods and legacy instrumentation"
      ],
      "title": "Ruby agent 7.x to 8.x migration guide",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "34bc6e2440f16d254dd0bd39a99d99e7028ef541",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/getting-started/migration-8x-guide/",
      "published_at": "2021-10-25T06:28:01Z",
      "updated_at": "2021-09-27T15:05:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Summary This guide covers the major changes between the 7.x and 8.x series of the Ruby agent, issues that may be encountered while upgrading, and how to successfully migrate to version 8.x. The main changes include: Changes to the add_method_tracer API method Distributed Tracing is enabled by default Cross Application Tracing is deprecated Removed deprecated API methods and legacy instrumentation See the milestone for 8.0 for more information. Changes to the add_method_tracer API method Metric name parameter accepts Procs; strings no longer interpolated The second argument to add_method_tracer is the name of the metric used to record calls to the traced method. Previously, this string could include Ruby-style interpolation to allow for the metric name to include variables from the method receiver. For example: # old (<= 7.2) add_method_tracer :foo, ‘metric_#{args[0]}’ Copy As of 8.0, this string will no longer be interpolated. To preserve the behavior described above, pass a Proc instead: # new (8.0+) add_method_tracer :foo, -> (*args) { “metric_#{args[0]}” } # note the double-quotes Copy Note that the arity of the Proc passed to add_method_tracer should match the arity of the original traced method (or use a compatible splat). :code_header and :code_footer parameters accept only Procs Similar to metric names, the :code_header and :code_footer options to add_method_tracer were previously given as strings that would be interpolated in the context of the method receiver. In Ruby Agent 8.0, :code_header and :code_footer will only be invoked if given as Procs, as in the example above. Call add_method_tracer once per method Calling add_method_tracer multiple times on the same method will overwrite any previously defined method tracers for that method. There should be only one add_method_tracer line for each traced method. Previously, the agent allowed adding multiple metrics to the same method by invoking add_method_tracer once for each such metric. This can still be done, but the metric names need to be passed as the second argument of add_method_tracer as an array of strings or procs. # old add_method_tracer :foo, ‘metric1’ add_method_tracer :foo, ‘metric2’, push_scope: false add_method_tracer :foo, ‘metric3’, push_scope: false Copy # new add_method_tracer :foo, [‘metric1’, ‘metric2’, ‘metric3’] Copy Note that the first metric name will be created as a scoped metric unless push_scope: false is specified. The following named metrics will be unscoped. Each traced method may only have one scoped metric. Tip Older versions of Mocha can cause issues with the updated add_method_tracer. Mocha version 1.2.0 fixes this bug, so if after upgrading agent versions, you run into errors in your test suite such as: NoMethodError: super: no superclass method 'instance_method' for <ExampleClass> Copy and happen to have Mocha version < 1.2.0 installed, try increasing the Mocha version to 1.2.0 or above. We have only seen error this come up in a test environment calling Mocha methods. However, we recommend you verify the functionality of your application when troubleshooting. Distributed Tracing is enabled by default The default configuration option for distributed_tracing.enabled is set to true for versions 8.0 or higher. To disable distributed tracing, set this configuration option to false in your newrelic.yml. distributed_tracing: enabled: false Copy Cross Application Tracing is deprecated Cross Application Tracing is deprecated in 8.0 and will be removed in a future release. Tip Distributed tracing and cross application tracing cannot be used simultaneously. If both configuration options are enabled, then only distributed tracing is used. To continue using cross application tracing, settings for both distributed tracing and cross application tracing need to be updated in your newrelic.yml. cross_application_tracing: enabled: true distributed_tracing: enabled: false Copy Removed deprecated API methods and legacy instrumentation The following methods had been previously deprecated and are now removed. Removed Replacement disable_transaction_tracing API method disable_all_tracing or ignore_transaction API methods External.start_segment API method Tracer#start_external_request_segment API method Transaction.wrap API method Tracer#in_transaction API method Mongo < 2.1 instrumentation Upgrade to Mongo 2.1 or higher Excon < 0.19.0 instrumentation Upgrade to Excon 0.19.0 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.842636,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> 7.x to 8.x migration guide",
        "sections": "<em>Ruby</em> <em>agent</em> 7.x to 8.x migration guide",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Summary This guide covers the major changes between the 7.x and 8.x series of the <em>Ruby</em> <em>agent</em>, issues that may be encountered while upgrading, and how to successfully migrate to version 8.x. The main changes include: Changes to the add_method_tracer API method Distributed Tracing is enabled"
      },
      "id": "61271c8428ccbc2c96f2615c"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-25T16:42:54Z",
      "updated_at": "2021-10-25T16:42:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher. Because modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.452225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP <em>agent</em> compatibility and requirements",
        "sections": "PHP <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic <em>agent</em>, <em>get</em> support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.438126,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. <em>Get</em> New Relic <em>agent</em> troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and <em>start</em> a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent 7.x to 8.x migration guide",
        "Summary",
        "Changes to the add_method_tracer API method",
        "Metric name parameter accepts Procs; strings no longer interpolated",
        ":code_header and :code_footer parameters accept only Procs",
        "Call add_method_tracer once per method",
        "Tip",
        "Distributed Tracing is enabled by default",
        "Cross Application Tracing is deprecated",
        "Removed deprecated API methods and legacy instrumentation"
      ],
      "title": "Ruby agent 7.x to 8.x migration guide",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "34bc6e2440f16d254dd0bd39a99d99e7028ef541",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/getting-started/migration-8x-guide/",
      "published_at": "2021-10-25T06:28:01Z",
      "updated_at": "2021-09-27T15:05:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Summary This guide covers the major changes between the 7.x and 8.x series of the Ruby agent, issues that may be encountered while upgrading, and how to successfully migrate to version 8.x. The main changes include: Changes to the add_method_tracer API method Distributed Tracing is enabled by default Cross Application Tracing is deprecated Removed deprecated API methods and legacy instrumentation See the milestone for 8.0 for more information. Changes to the add_method_tracer API method Metric name parameter accepts Procs; strings no longer interpolated The second argument to add_method_tracer is the name of the metric used to record calls to the traced method. Previously, this string could include Ruby-style interpolation to allow for the metric name to include variables from the method receiver. For example: # old (<= 7.2) add_method_tracer :foo, ‘metric_#{args[0]}’ Copy As of 8.0, this string will no longer be interpolated. To preserve the behavior described above, pass a Proc instead: # new (8.0+) add_method_tracer :foo, -> (*args) { “metric_#{args[0]}” } # note the double-quotes Copy Note that the arity of the Proc passed to add_method_tracer should match the arity of the original traced method (or use a compatible splat). :code_header and :code_footer parameters accept only Procs Similar to metric names, the :code_header and :code_footer options to add_method_tracer were previously given as strings that would be interpolated in the context of the method receiver. In Ruby Agent 8.0, :code_header and :code_footer will only be invoked if given as Procs, as in the example above. Call add_method_tracer once per method Calling add_method_tracer multiple times on the same method will overwrite any previously defined method tracers for that method. There should be only one add_method_tracer line for each traced method. Previously, the agent allowed adding multiple metrics to the same method by invoking add_method_tracer once for each such metric. This can still be done, but the metric names need to be passed as the second argument of add_method_tracer as an array of strings or procs. # old add_method_tracer :foo, ‘metric1’ add_method_tracer :foo, ‘metric2’, push_scope: false add_method_tracer :foo, ‘metric3’, push_scope: false Copy # new add_method_tracer :foo, [‘metric1’, ‘metric2’, ‘metric3’] Copy Note that the first metric name will be created as a scoped metric unless push_scope: false is specified. The following named metrics will be unscoped. Each traced method may only have one scoped metric. Tip Older versions of Mocha can cause issues with the updated add_method_tracer. Mocha version 1.2.0 fixes this bug, so if after upgrading agent versions, you run into errors in your test suite such as: NoMethodError: super: no superclass method 'instance_method' for <ExampleClass> Copy and happen to have Mocha version < 1.2.0 installed, try increasing the Mocha version to 1.2.0 or above. We have only seen error this come up in a test environment calling Mocha methods. However, we recommend you verify the functionality of your application when troubleshooting. Distributed Tracing is enabled by default The default configuration option for distributed_tracing.enabled is set to true for versions 8.0 or higher. To disable distributed tracing, set this configuration option to false in your newrelic.yml. distributed_tracing: enabled: false Copy Cross Application Tracing is deprecated Cross Application Tracing is deprecated in 8.0 and will be removed in a future release. Tip Distributed tracing and cross application tracing cannot be used simultaneously. If both configuration options are enabled, then only distributed tracing is used. To continue using cross application tracing, settings for both distributed tracing and cross application tracing need to be updated in your newrelic.yml. cross_application_tracing: enabled: true distributed_tracing: enabled: false Copy Removed deprecated API methods and legacy instrumentation The following methods had been previously deprecated and are now removed. Removed Replacement disable_transaction_tracing API method disable_all_tracing or ignore_transaction API methods External.start_segment API method Tracer#start_external_request_segment API method Transaction.wrap API method Tracer#in_transaction API method Mongo < 2.1 instrumentation Upgrade to Mongo 2.1 or higher Excon < 0.19.0 instrumentation Upgrade to Excon 0.19.0 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.842636,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> 7.x to 8.x migration guide",
        "sections": "<em>Ruby</em> <em>agent</em> 7.x to 8.x migration guide",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Summary This guide covers the major changes between the 7.x and 8.x series of the <em>Ruby</em> <em>agent</em>, issues that may be encountered while upgrading, and how to successfully migrate to version 8.x. The main changes include: Changes to the add_method_tracer API method Distributed Tracing is enabled"
      },
      "id": "61271c8428ccbc2c96f2615c"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-25T16:42:54Z",
      "updated_at": "2021-10-25T16:42:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher. Because modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.452225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP <em>agent</em> compatibility and requirements",
        "sections": "PHP <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic <em>agent</em>, <em>get</em> support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/ruby-agent/index": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.34256,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-25T01:28:32Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.3322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 79.18161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "These instructions are for installing the <em>Ruby</em> <em>agent</em> as a Rails plugin. For most use cases, you should instead install the <em>agent</em> gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the <em>Ruby</em> <em>agent</em> as a gem in order to have better control over versions"
      },
      "id": "603eb6f4196a67251da83d95"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment": [
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.35465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> <em>installation</em>: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> <em>installation</em>: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about <em>installation</em>, configuration, troubleshooting, and known issues) <em>Ruby</em> <em>agent</em> <em>installation</em> (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.069824,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Installation</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Charts, which involves an HTTP post of aggregate data. Tip The <em>Ruby</em> <em>agent</em>&#x27;s Production mode, which is on by default when the RAILS_ENV == &quot;production&quot; and RAILS_ENV == &quot;staging&quot;, does communicate with the New Relic site. For more information, see Security. <em>Installation</em> To install Developer mode"
      },
      "id": "603ebde128ccbc8391eba74a"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-25T01:28:32Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.3322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.38037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "<em>Install</em> New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.35465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> <em>installation</em>: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> <em>installation</em>: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about <em>installation</em>, configuration, troubleshooting, and known issues) <em>Ruby</em> <em>agent</em> <em>installation</em> (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.069824,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Installation</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Charts, which involves an HTTP post of aggregate data. Tip The <em>Ruby</em> <em>agent</em>&#x27;s Production mode, which is on by default when the RAILS_ENV == &quot;production&quot; and RAILS_ENV == &quot;staging&quot;, does communicate with the New Relic site. For more information, see Security. <em>Installation</em> To install Developer mode"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/ruby-agent-heroku": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.3803,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "<em>Install</em> New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.354645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> <em>installation</em>: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> <em>installation</em>: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about <em>installation</em>, configuration, troubleshooting, and known issues) <em>Ruby</em> <em>agent</em> <em>installation</em> (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Installation</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Charts, which involves an HTTP post of aggregate data. Tip The <em>Ruby</em> <em>agent</em>&#x27;s Production mode, which is on by default when the RAILS_ENV == &quot;production&quot; and RAILS_ENV == &quot;staging&quot;, does communicate with the New Relic site. For more information, see Security. <em>Installation</em> To install Developer mode"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.3803,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "<em>Install</em> New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Installation</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Charts, which involves an HTTP post of aggregate data. Tip The <em>Ruby</em> <em>agent</em>&#x27;s Production mode, which is on by default when the RAILS_ENV == &quot;production&quot; and RAILS_ENV == &quot;staging&quot;, does communicate with the New Relic site. For more information, see Security. <em>Installation</em> To install Developer mode"
      },
      "id": "603ebde128ccbc8391eba74a"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-25T01:28:32Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.33215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/uninstall-ruby-agent": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.38022,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "<em>Install</em> New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.35464,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> <em>installation</em>: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> <em>installation</em>: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about <em>installation</em>, configuration, troubleshooting, and known issues) <em>Ruby</em> <em>agent</em> <em>installation</em> (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06981,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Installation</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Charts, which involves an HTTP post of aggregate data. Tip The <em>Ruby</em> <em>agent</em>&#x27;s Production mode, which is on by default when the RAILS_ENV == &quot;production&quot; and RAILS_ENV == &quot;staging&quot;, does communicate with the New Relic site. For more information, see Security. <em>Installation</em> To install Developer mode"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/update-ruby-agent": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.38022,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "<em>Install</em> New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "With APM&#x27;s <em>Ruby</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.35464,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> <em>installation</em>: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> <em>installation</em>: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about <em>installation</em>, configuration, troubleshooting, and known issues) <em>Ruby</em> <em>agent</em> <em>installation</em> (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.06981,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Installation</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Charts, which involves an HTTP post of aggregate data. Tip The <em>Ruby</em> <em>agent</em>&#x27;s Production mode, which is on by default when the RAILS_ENV == &quot;production&quot; and RAILS_ENV == &quot;staging&quot;, does communicate with the New Relic site. For more information, see Security. <em>Installation</em> To install Developer mode"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/instrumented-gems/rack-middlewares": [
    {
      "sections": [
        "Sinatra instrumentation",
        "Contents",
        "Getting started",
        "Middleware installation",
        "Ignoring routes",
        "Padrino",
        "Shotgun (not supported)"
      ],
      "title": "Sinatra instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "97ce5f5307e5c41049d2daf7c08d9eb741f27f47",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/sinatra-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-07-09T07:57:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Ruby agent works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked as separate actions. Contents Getting started To set up Sinatra: Install the latest newrelic_rpm gem. In your Sinatra app, immediately below the Sinatra require directive, add: require 'newrelic_rpm' Copy Set RACK_ENV to the environment corresponding to the configuration definitions in your newrelic.yml file; for example, development, staging, production, etc. Note: Developer mode only works with Rails. Middleware installation Ruby agent versions prior to 3.6.3 required manual addition of New Relic middlewares to enable certain features, such as cross application tracing and browser monitoring. For more information about required middlewares, see Rack middlewares, or upgrade to the most recent Ruby agent. Ignoring routes Ruby agent versions 3.6.3 or higher support ignoring certain routes, similar to what was previously available in Rails controller instrumentation. To specify these values, use the same style of routes that you use to define your Sinatra application. For example, to ignore a ping route in a Sinatra app, include the following code in the app: newrelic_ignore '/ping' get '/ping' do # ... end Copy If you want an entire application to be ignored (for example, in a mounted application), call newrelic_ignore without parameters: newrelic_ignore Copy Additionally, newrelic_ignore_apdex and newrelic_ignore_enduser are supported. The newrelic_ignore_apdex call will exclude a given route from consideration in overall Apdex calculations. The newrelic_ignore_enduser call will prevent automatic injection of the page load timing JavaScript when a route is rendered. Padrino Padrino is a framework built on top of Sinatra. Starting with Ruby agent version 3.6.3, New Relic's Sinatra instrumentation works with Padrino versions 0.10.x or higher. Shotgun (not supported) The New Relic Ruby agent will not work with shotgun. It cannot make a connection before the dispatcher process exits. Neither Developer mode nor Monitor mode will work.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.05466,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Sinatra <em>instrumentation</em>",
        "sections": "Sinatra <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "New Relic&#x27;s <em>Ruby</em> <em>agent</em> works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked"
      },
      "id": "603ebc9928ccbc1046eba786"
    },
    {
      "sections": [
        "Redis instrumentation",
        "Tip",
        "Interaction with newrelic-redis",
        "Important",
        "Capture Redis command arguments"
      ],
      "title": "Redis instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9923fcd7dd89191c620a9490fb89cd8ca4bf31e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/redis-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-03-16T08:03:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically instruments the Redis gem (gem version 3.0.0 or higher). After you install the agent and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart on the APM Summary page will show color-coded Redis information. Tip Redis instrumentation requires Ruby agent version 3.13.0 or higher. Interaction with newrelic-redis The third-party newrelic-redis gem provides Redis instrumentation support as an add-on to New Relic's Ruby agent. If the Ruby agent detects newrelic-redis, it will not install the built-in Redis instrumentation and will record a log message like this at startup: INFO : Not installing New Relic supported Redis instrumentation because the third party newrelic-redis gem is present Copy To use New Relic's built-in Redis instrumentation and view Redis information in the UI, remove the newrelic-redis gem. Important Removing the newrelic-redis gem in favor of the built-in instrumentation will change your transaction names. To preserve your existing transaction names, ignore the log message and do not uninstall the gem. Capture Redis command arguments By default, the Ruby agent only captures Redis command names. To capture Redis command arguments, use this configuration: transaction_tracer: record_redis_arguments: true Copy The agent limits the number of characters and arguments collected from each transaction trace node. The agent truncates items that exceed these limits.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.00722,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Redis <em>instrumentation</em>",
        "sections": "Redis <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically instruments the Redis <em>gem</em> (<em>gem</em> version 3.0.0 or higher). After you install the <em>agent</em> and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart"
      },
      "id": "603ed7a628ccbca064eba784"
    },
    {
      "sections": [
        "Rack and Metal support"
      ],
      "title": "Rack and Metal support",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "1f63bc13c1f6a91cf46a0223a67ba61f08bbf045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/frameworks/rack-metal-support/",
      "published_at": "2021-10-25T06:28:01Z",
      "updated_at": "2021-03-16T06:43:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Rack middlewares are automatically instrumented with Ruby agent version 3.9.0 or higher. The NewRelic::Agent::Instrumentation::Rack module is deprecated. After upgrading to Ruby agent version 3.9.0 or higher, New Relic recommends that you remove any references to this module from your code. For more information, see Instrumenting Metal controllers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.84583,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "Rack middlewares are automatically <em>instrumented</em> with <em>Ruby</em> <em>agent</em> version 3.9.0 or higher. The NewRelic::<em>Agent</em>::Instrumentation::Rack module is deprecated. After upgrading to <em>Ruby</em> <em>agent</em> version 3.9.0 or higher, New Relic recommends that you remove any references to this module from your code. For more information, see Instrumenting Metal controllers."
      },
      "id": "603ebe4c28ccbc8ecfeba7ad"
    }
  ],
  "/docs/apm/agents/ruby-agent/instrumented-gems/redis-instrumentation": [
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "fa34ef9ebcf8904e3601568b15d53bfe825424f4",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2021-10-25T06:29:50Z",
      "updated_at": "2021-09-27T15:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.37262,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "603ebc9ae7b9d2754a2a0810"
    },
    {
      "sections": [
        "Sinatra instrumentation",
        "Contents",
        "Getting started",
        "Middleware installation",
        "Ignoring routes",
        "Padrino",
        "Shotgun (not supported)"
      ],
      "title": "Sinatra instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "97ce5f5307e5c41049d2daf7c08d9eb741f27f47",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/sinatra-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-07-09T07:57:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Ruby agent works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked as separate actions. Contents Getting started To set up Sinatra: Install the latest newrelic_rpm gem. In your Sinatra app, immediately below the Sinatra require directive, add: require 'newrelic_rpm' Copy Set RACK_ENV to the environment corresponding to the configuration definitions in your newrelic.yml file; for example, development, staging, production, etc. Note: Developer mode only works with Rails. Middleware installation Ruby agent versions prior to 3.6.3 required manual addition of New Relic middlewares to enable certain features, such as cross application tracing and browser monitoring. For more information about required middlewares, see Rack middlewares, or upgrade to the most recent Ruby agent. Ignoring routes Ruby agent versions 3.6.3 or higher support ignoring certain routes, similar to what was previously available in Rails controller instrumentation. To specify these values, use the same style of routes that you use to define your Sinatra application. For example, to ignore a ping route in a Sinatra app, include the following code in the app: newrelic_ignore '/ping' get '/ping' do # ... end Copy If you want an entire application to be ignored (for example, in a mounted application), call newrelic_ignore without parameters: newrelic_ignore Copy Additionally, newrelic_ignore_apdex and newrelic_ignore_enduser are supported. The newrelic_ignore_apdex call will exclude a given route from consideration in overall Apdex calculations. The newrelic_ignore_enduser call will prevent automatic injection of the page load timing JavaScript when a route is rendered. Padrino Padrino is a framework built on top of Sinatra. Starting with Ruby agent version 3.6.3, New Relic's Sinatra instrumentation works with Padrino versions 0.10.x or higher. Shotgun (not supported) The New Relic Ruby agent will not work with shotgun. It cannot make a connection before the dispatcher process exits. Neither Developer mode nor Monitor mode will work.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.05466,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Sinatra <em>instrumentation</em>",
        "sections": "Sinatra <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "New Relic&#x27;s <em>Ruby</em> <em>agent</em> works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked"
      },
      "id": "603ebc9928ccbc1046eba786"
    },
    {
      "sections": [
        "Rack and Metal support"
      ],
      "title": "Rack and Metal support",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "1f63bc13c1f6a91cf46a0223a67ba61f08bbf045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/frameworks/rack-metal-support/",
      "published_at": "2021-10-25T06:28:01Z",
      "updated_at": "2021-03-16T06:43:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Rack middlewares are automatically instrumented with Ruby agent version 3.9.0 or higher. The NewRelic::Agent::Instrumentation::Rack module is deprecated. After upgrading to Ruby agent version 3.9.0 or higher, New Relic recommends that you remove any references to this module from your code. For more information, see Instrumenting Metal controllers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.84583,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "Rack middlewares are automatically <em>instrumented</em> with <em>Ruby</em> <em>agent</em> version 3.9.0 or higher. The NewRelic::<em>Agent</em>::Instrumentation::Rack module is deprecated. After upgrading to <em>Ruby</em> <em>agent</em> version 3.9.0 or higher, New Relic recommends that you remove any references to this module from your code. For more information, see Instrumenting Metal controllers."
      },
      "id": "603ebe4c28ccbc8ecfeba7ad"
    }
  ],
  "/docs/apm/agents/ruby-agent/instrumented-gems/sinatra-instrumentation": [
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "fa34ef9ebcf8904e3601568b15d53bfe825424f4",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2021-10-25T06:29:50Z",
      "updated_at": "2021-09-27T15:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.37262,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "603ebc9ae7b9d2754a2a0810"
    },
    {
      "sections": [
        "Redis instrumentation",
        "Tip",
        "Interaction with newrelic-redis",
        "Important",
        "Capture Redis command arguments"
      ],
      "title": "Redis instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9923fcd7dd89191c620a9490fb89cd8ca4bf31e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/instrumented-gems/redis-instrumentation/",
      "published_at": "2021-10-25T06:30:40Z",
      "updated_at": "2021-03-16T08:03:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically instruments the Redis gem (gem version 3.0.0 or higher). After you install the agent and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart on the APM Summary page will show color-coded Redis information. Tip Redis instrumentation requires Ruby agent version 3.13.0 or higher. Interaction with newrelic-redis The third-party newrelic-redis gem provides Redis instrumentation support as an add-on to New Relic's Ruby agent. If the Ruby agent detects newrelic-redis, it will not install the built-in Redis instrumentation and will record a log message like this at startup: INFO : Not installing New Relic supported Redis instrumentation because the third party newrelic-redis gem is present Copy To use New Relic's built-in Redis instrumentation and view Redis information in the UI, remove the newrelic-redis gem. Important Removing the newrelic-redis gem in favor of the built-in instrumentation will change your transaction names. To preserve your existing transaction names, ignore the log message and do not uninstall the gem. Capture Redis command arguments By default, the Ruby agent only captures Redis command names. To capture Redis command arguments, use this configuration: transaction_tracer: record_redis_arguments: true Copy The agent limits the number of characters and arguments collected from each transaction trace node. The agent truncates items that exceed these limits.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.00722,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Redis <em>instrumentation</em>",
        "sections": "Redis <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically instruments the Redis <em>gem</em> (<em>gem</em> version 3.0.0 or higher). After you install the <em>agent</em> and generate traffic for your app, you can view Redis operations on the APM Summary page, on the Databases page, and in transaction traces. For example, the main chart"
      },
      "id": "603ed7a628ccbca064eba784"
    },
    {
      "sections": [
        "Rack and Metal support"
      ],
      "title": "Rack and Metal support",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "1f63bc13c1f6a91cf46a0223a67ba61f08bbf045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/frameworks/rack-metal-support/",
      "published_at": "2021-10-25T06:28:01Z",
      "updated_at": "2021-03-16T06:43:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Rack middlewares are automatically instrumented with Ruby agent version 3.9.0 or higher. The NewRelic::Agent::Instrumentation::Rack module is deprecated. After upgrading to Ruby agent version 3.9.0 or higher, New Relic recommends that you remove any references to this module from your code. For more information, see Instrumenting Metal controllers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.84583,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "Rack middlewares are automatically <em>instrumented</em> with <em>Ruby</em> <em>agent</em> version 3.9.0 or higher. The NewRelic::<em>Agent</em>::Instrumentation::Rack module is deprecated. After upgrading to <em>Ruby</em> <em>agent</em> version 3.9.0 or higher, New Relic recommends that you remove any references to this module from your code. For more information, see Instrumenting Metal controllers."
      },
      "id": "603ebe4c28ccbc8ecfeba7ad"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/control-when-ruby-agent-starts": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.36743,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.52676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.34156,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/generating-logs-troubleshooting-ruby": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.36743,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.52676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.34156,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/incompatible-gems": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.36737,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.52675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.34156,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/no-data-appears-ruby": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.36737,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.52675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.34156,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/no-data-unicorn": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.36731,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.52674,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.34155,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/no-log-file-ruby": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.36731,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.52674,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.34155,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/not-installing-new-relic-supported-grape": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.36723,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.52673,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.34155,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/passenger-troubleshooting": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.36723,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.52673,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.34155,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/ruby-agent-audit-log": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.36723,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.52673,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.34155,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/systemstackerror-stack-level-too-deep": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.36716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.526726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.341545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/update-deprecated-api-calls": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.36716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.526726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.341545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/update-private-api-calls-public-tracer-api": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-25T00:56:20Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.3671,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic <em>Ruby</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "&#x27;. Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE Use these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Ruby</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Ruby agent installation: Rails plugin",
        "Contents",
        "Install the New Relic Rails plugin",
        "Important",
        "Update the configuration file",
        "Update the newrelic.yml file",
        "Update the Ruby agent",
        "Tip",
        "Uninstall the Rails plugin",
        "For more help"
      ],
      "title": "Ruby agent installation: Rails plugin",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "bc8a6181852e7ae08fc0cd808b6e0e9d5279bb49",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin/",
      "published_at": "2021-10-25T06:28:59Z",
      "updated_at": "2021-09-27T15:58:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These instructions are for installing the Ruby agent as a Rails plugin. For most use cases, you should instead install the agent gem. Contents Install the New Relic Rails plugin Important New Relic strongly recommends installing the Ruby agent as a gem in order to have better control over versions and dependencies. To install the Rails plugin from Github, use the following commands for Rails versions 2 or higher: script/plugin install git://github.com/newrelic/newrelic-ruby-agent.git mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent Copy This will export the Rails plugin into your application's vendor/plugins directory. If you cannot install the Rails plugin directly from the git URL, you can clone the repository into the vendor/plugins directory. Update the configuration file After installing the agent, copy the newrelic.yml file into the config subdirectory of your application. You can download a fresh newrelic.yml that includes your license key from the Account settings when logged in to New Relic. Important As part of the installation process, change the default application name to a meaningful name. Update the newrelic.yml file Whenever you update the agent, double-check that your Ruby agent configuration file (config/newrelic.yml) is up to date: Open the default newrelic.yml file that lives in the Ruby agent's plugin folder (vendor/plugins/newrelic-ruby-agent/newrelic.yml). Look for new configuration options that are not in your config/newrelic.yml file. Update the Ruby agent When using Subversion with the Rails plugin, be sure to remove the old agent plugin before reinstalling. Tip Use the gem if possible. svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"removing old version of newrelic\" Copy Then, to install the latest Ruby agent plugin: script/rails plugin install git://github.com/newrelic/newrelic-ruby-agent.git vendor/plugins/newrelic-ruby-agent mv vendor/plugins/rpm vendor/plugins/newrelic-ruby-agent svn add vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins -m \"upgrading newrelic to version X.X.X\" Copy Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor/plugins/newrelic-ruby-agent svn commit vendor/plugins Copy For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, general information about installation, configuration, troubleshooting, and known issues) Ruby agent installation (using the New Relic Ruby gem and configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.52672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "sections": "<em>Ruby</em> <em>agent</em> installation: Rails plugin",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " Uninstall the Rails plugin To uninstall the Rails plugin: svn rm vendor&#x2F;plugins&#x2F;newrelic-<em>ruby</em>-<em>agent</em> svn commit vendor&#x2F;plugins Copy For more help Additional documentation resources include: New Relic for <em>Ruby</em> (compatibility and requirements, general information about installation, configuration, <em>troubleshooting</em>, and known issues) <em>Ruby</em> <em>agent</em> installation (using the New Relic <em>Ruby</em> gem and configuration file)"
      },
      "id": "603eb6f4196a67251da83d95"
    },
    {
      "sections": [
        "Developer mode",
        "Caution",
        "Security considerations",
        "Tip",
        "Installation",
        "Known issues",
        "Requires Rails 2.3 or higher",
        "Incompatible with Pow",
        "Using Developer mode",
        "Troubleshooting",
        "Disappearing requests",
        "Undefined method path for Rack::Request",
        "ActiveRecord reloads"
      ],
      "title": "Developer mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Features"
      ],
      "external_id": "5b907e0c610c1d22da2df34aaa999ab2c4513e96",
      "image": "https://docs.newrelic.com/static/6e3d86f6f17361e63f52edf965fa1afa/91e7e/screen-breakdown-chart.png",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/features/developer-mode/",
      "published_at": "2021-10-25T00:53:38Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Caution Developer mode is deprecated and no longer supported as of Ruby agent version 4.1.0. The New Relic Ruby agent includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made by the controller actions as they are invoked on the Rails instance. The free Developer mode gives you some of the same in-depth transaction visibility you get with New Relic's transaction traces feature. However, it works only in a single Rails instance, and it has much higher overhead than the production version. It is not recommended for use beyond a developer's desktop sandbox. Security considerations The Ruby agent's Developer mode, which is on by default when the RAILS_ENV == \"development\", does not communicate with the New Relic collector in any way. Pie charts are rendered using Google Charts, which involves an HTTP post of aggregate data. Tip The Ruby agent's Production mode, which is on by default when the RAILS_ENV == \"production\" and RAILS_ENV == \"staging\", does communicate with the New Relic site. For more information, see Security. Installation To install Developer mode, install Ruby agent as a plugin or gem. You may also need to set developer_mode to true in your newrelic.yml for the RAILS_ENV in which you are working. Developer mode is on by default only when RAILS_ENV = development. While a newrelic.yml file will be created as part of the installation, it is not necessary to have a valid license key. Known issues Known issues with Developer mode include: Requires Rails 2.3 or higher Developer mode in recent agents only works on Rails 2.3 or higher. It is rack based, and earlier versions of the framework did not incorporate rack. The developer edition installs a middleware in your app that responds to any URL prepended with /newrelic; for example, /newrelic, /newrelic/files/images/foo.png, etc. In some cases the /newrelic URL gets captured by an earlier middleware. In this situation, disable the Developer mode route and include the middleware yourself: At the beginning of the file, in config.ru: require 'newrelic_rpm' require 'new_relic/rack/developer_mode' use NewRelic::Rack::DeveloperMode Copy Incompatible with Pow Developer mode is not supported from Pow, a zero-config Rack server for Mac OS X. Using Developer mode If you run your application on your desktop using thin, WEBrick, or something similar, open the URL /newrelic on your server to see the Developer mode user interface. Caution If you are using Passenger, Unicorn, or other forking application servers on your desktop, you may notice some odd behavior with disappearing data if your application server launches multiple instances. Refer to the Troubleshooting tips, which follow. Developer Mode Breakdown Chart Troubleshooting Troubleshooting tips for Developer mode: Disappearing requests If you have this problem with Unicorn or other multi-worker dispatchers, try limiting the number of workers to 1. Undefined method path for Rack::Request Some users may see an undefined method path for #<Rack::Request>. If you are using Rails version 2.3.2, then you are mostly likely running into a problem with the way the Rack dependency was defined in the Rails package. Either upgrade to 2.3.3 (or higher), or define Rack version 1.0.1 as a dependency in your Gemfile. ActiveRecord reloads Developer mode reloads ActiveRecord method definitions for every reload and reports the time spent defining the methods (such as define_attribute_method). This does not happen in production. To get real results to compare, add the following to the development environment: config.cache_classes = true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.34154,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "Caution Developer mode is deprecated and no longer supported as of <em>Ruby</em> <em>agent</em> version 4.1.0. The New Relic <em>Ruby</em> <em>agent</em> includes Developer mode, a built-in UI for examining details about web transactions in your application. With Developer mode, you can examine the library and database calls made"
      },
      "id": "603ebde128ccbc8391eba74a"
    }
  ],
  "/docs/apm/apm-ui-pages/error-analytics/apm-error-profiles-troubleshoot-trends": [
    {
      "sections": [
        "Manage error data",
        "Error data types: events and trace details",
        "Events",
        "Trace details",
        "Caps on error reporting",
        "Charting error rates and counts",
        "Report custom errors",
        "Ignore errors",
        "Reduce noise with expected errors",
        "Disable error traces",
        "Delete error traces",
        "Caution"
      ],
      "title": "Manage error data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "29a2ebdc7b91029a1fada50791b90e9dc548f17e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/manage-error-data/",
      "published_at": "2021-10-25T00:52:13Z",
      "updated_at": "2021-09-08T19:58:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM Errors page helps you identify, triage, and fix errors in your services. The Errors page uses data collected by the APM agent to display stack traces, transaction attributes such as HTTP header values, and any other custom attributes, so you can understand the context of the error and fix it. Error data types: events and trace details By default, our APM agents collect two type of error data: Events Trace details Events The error event data type includes default attributes, as well as any custom attributes instrumented in your service. It doesn't include a stack trace. Find your events data in the Errors UI as follows: The Errors column in the Error traces table. The Top 5 errors chart. When you’ve drilled into a grouping of errors, those errors not displaying a stack trace are based on this type of data. You can disable Show only errors with stack trace to show errors that have this type of data collected, but no associated trace details. Events are subject to sampling (see Caps on error reporting and Charting error rates and counts). For more on error event data, see Events reported by APM. Trace details The trace details error data type includes stack traces and attributes, and supplements events with more data. It's expected that more events will be reported than trace details--see Caps on error reporting. Find your trace details data in the Errors UI as follows: The “Stack traces” column of the Error traces table. When you’ve drilled into a grouping of errors, those errors with a stack trace use this type of data: Show only errors with stack trace is enabled by default, to constrain the errors shown to just those that have this type of data collected. This data is governed by specific retention rules for Error details. Caps on error reporting New Relic caps error reporting at: 100 events per minute per agent instance 20 trace details per minute per agent instance These caps prevent error reporting from negatively impacting application performance. Examples: App running across five EC2 instances, one JVM each. New Relic caps error reporting at: 100 events per minute x 5 instances = 500 events per minute 20 trace details per minute x 5 instances = 100 trace details per minute App running on one host with ten instances. New Relic caps error reporting at: 100 events per minute x 10 instances = 1000 events per minute 20 trace details per minute x 10 instances = 200 events per minute Charting error rates and counts The Error rate chart is driven by a query on metric timeslice data, which is an unsampled aggregate data type that is accurate but has very limited dimensionality. This data can't be faceted or filtered as flexibly as error event data. You can reproduce this chart in a dashboard, or explore the metric timeslice data further by clicking the ... menu on the Error rate chart, and then using the View query or Add to dashboard options. To chart faceted error counts using event data, as in the Top 5 errors chart, use an NRQL event query. Click the ... menu on the Top 5 errors chart and choose View query for a starting point in creating your chart. Since event data can be sampled (see Caps on error reporting), you can use the EXTRAPOLATE keyword to get an accurate error count, even if sampling is occurring. Report custom errors You can report errors not collected by default with our agents using our agent APIs. For more, see the documentation on the API. Ignore errors You can prevent certain errors that would normally be reported to New Relic from being collected using our agent APIs or the server-side configuration UI. For more details, see Manage errors in APM. Reduce noise with expected errors Sometimes you want to collect error data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors page, but won’t affect your service’s error rate or Apdex metrics. Disable error traces To prevent certain errors from being reported to New Relic, disable them in your agent's configuration file. For most agents, you can ignore certain error codes or disable errors completely. For more information, see your specific agent's configuration documentation: C SDK Go (not applicable; the agent only reports errors when configured to do so) Java .NET Node.js PHP Python Ruby Delete error traces Caution You cannot recover error traces after you delete them. Deleting errors is currently only available in the legacy Errors Classic UI. If you want to... Do this... Delete all error traces for your app If you have permissions to delete all error traces for an app: Go to one.newrelic.com > APM > (select an app) > More views > Errors (classic). Select Delete all errors. Delete all error traces for your account To delete all error traces for your New Relic account, get support at support.newrelic.com. Delete individual error traces To delete individual error traces, use APM's Errors (classic) page. Drill into an error from the table of errors, then click Delete this error. In addition to deleting error traces, you may also want to delete transaction traces or database/slow SQL traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 207.40631,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>error</em> data",
        "sections": "Manage <em>error</em> data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " configuration <em>UI</em>. For more details, see Manage errors in <em>APM</em>. Reduce noise with expected errors Sometimes you want to collect <em>error</em> data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors <em>page</em>, but won’t"
      },
      "id": "6044077e28ccbcab752c60d1"
    },
    {
      "sections": [
        "Errors page: Find, fix, and verify problems",
        "View the APM Errors page",
        "Important",
        "Use the Errors workflow to identify problems",
        "Error rate chart: See patterns immediately",
        "Top five errors: Correlate to alerts or find significant groupings",
        "Error traces: Find the line of code and data needed to reproduce the issue",
        "Expected errors",
        "Errors outside transactions",
        "Select the time period for error data"
      ],
      "title": "Errors page: Find, fix, and verify problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "fe321816a8727f65e32b4ec1f381ba9d17c432b7",
      "image": "https://docs.newrelic.com/static/1b3bf12a5d48aa0396de5e488bf17f27/c1b63/WebPortal___New_Relic_One.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/errors-page-find-fix-verify-problems/",
      "published_at": "2021-10-25T00:51:31Z",
      "updated_at": "2021-07-09T07:35:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Errors UI in New Relic One, you can see the line of code that's causing a bad experience for your users, and get enough data to reproduce the issue so you can fix it. When you do, you’ll be able to confirm your fix is working in production. Use Errors in New Relic One to: Group and filter events to triage important errors. Get alert notifications about errors. Review stack traces, logs, and other details. Share the error information with charts and dashboards. Report new errors using instrumentation, prevent certain errors from being reported, and filter out noisy errors using expected errors. View the APM Errors page Important As of October 1, 2021, the APM Errors (classic) UI will be discontinued in favor of the New Relic One APM Errors UI. For more details, see our Explorers Hub post. To view the Errors page: Go to one.newrelic.com > APM > (select an app), then click the Error rate table's title on your selected app's Summary page. OR Go to one.newrelic.com > APM > (select an app) > Events > Errors. APM Errors UI: The Error rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5 by count chart and Error traces table. Use the Instance dropdown to focus on a specific instance. Use the Errors workflow to identify problems Use this basic workflow to get the most out of the information you see from the Errors page. Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. Correlate any general patterns on the Top 5 errors chart to alerts occurring during the same time period. Use the groups and filters to examine the error events and attributes in more detail, and look for patterns with error messages, transaction names, or other groupings. Explore and share Error trace table information, including specific stack trace details, logs, and attributes (host, URL, user, custom attributes, etc.) Also review the Error profiles page to guide your investigation into which attribute values might be correlated to the cause of errors, by comparing the frequency of those values between transactions where the error did and didn't occur (only in the old UI). Error rate chart: See patterns immediately Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. For example, are there any spikes near a recent deployment? You may want to change the selected time period to look for other historical patterns. This chart always shows the overall error rate and count for the selected time period, even when you filter the rest of the page. If you want to focus your investigation on a particular type of error, use the Top 5 errors chart or the Error traces table. Top five errors: Correlate to alerts or find significant groupings Use the Top 5 errors chart to identify what error types and how many of those errors occurred during the same time period as the Error rate chart. For example: Is the error spike related to a specific exception class or transaction? Do the top errors point to a new host/container that recently got moved into production? Are the top error messages repeatedly about failed connections by hosts that you know are in a specific region of your organization? Have the chart backgrounds changed color to indicate an alert condition? (Light pink indicates the alert condition's Warning threshold, and dark pink indicates the Critical threshold.) If you want to... Do this... Change the \"top 5\" selection By default, Top 5 errors chart shows the top five errors by error class and transaction name. To group by other attributes, such as error message, host, or custom attribute, use the search bar. Explore or share error trend data The Top 5 errors chart uses error events, which include rich attribute data b default, along with any custom attributes you have added to the error event type. To examine this data in more detail, or to share it with others, select the View query or Add to dashboard links that appear when you click the chart's ... menu. Error traces: Find the line of code and data needed to reproduce the issue The Error traces table groups errors by the attributes you've selected, and links them to relevant detailed error traces. Each row helps you find answers to questions such as: How many of this transaction/class (or custom grouping) occurred within the selected time period? What is the most recent error message? When did this error first and last occur? Sometimes it may be useful to sort error trace data other than from the most to fewest occurrences. You can change the sort order or filter options to focus on just the types of errors that matter the most to you and your teams. For example: Which error has the fewest occurrences (sort on Errors column)? When did a particular error stop (sort on Last occurred)? Once you find the group of errors you want to fix, click a row in the Error traces table to drill down into the stack traces and attribute data that help pinpoint the cause. Expected errors Reduce noisy errors by marking them as “expected errors”. Such errors won't affect reported error rate or Apdex metrics. See Manage errors for more details. Expected errors aren't shown by default on the Errors page. You can show them by turning on the Show N expected errors switch below the Group by bar. Errors outside transactions Using the New Relic agent API, you can record custom errors at any point in the execution of your code. Sometimes, such custom errors will occur when a transaction is not executing, such as in high-volume aynchronous code that doesn't handle an HTTP transaction. Errors outside transactions are shown by default on the Errors page, but you can hide them by turning off the Show N errors outside transactions switch below the Group by bar. Select the time period for error data Use the time picker to examine details of error events over the past week. The error events view is available for up to a seven-day window of data collected over the last eight days. You may notice slight differences in count if your time window is set to ending now. This occurs because the counts for the list and table may be requested at slightly different times as the page auto-refreshes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 189.8035,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Errors</em> <em>page</em>: Find, fix, and verify problems",
        "sections": "View the <em>APM</em> <em>Errors</em> <em>page</em>",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the <em>Error</em> rate table&#x27;s title on your selected app&#x27;s Summary <em>page</em>. OR Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Events &gt; Errors. <em>APM</em> Errors <em>UI</em>: The <em>Error</em> rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5"
      },
      "id": "60440747e7b9d2f2295799b6"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-10-25T15:30:44Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.58005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in <em>APM</em>&#x27;s transaction traces and <em>error</em> <em>analytics</em>. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic&#x27;s webhook IPs"
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    }
  ],
  "/docs/apm/apm-ui-pages/error-analytics/errors-page-find-fix-verify-problems": [
    {
      "sections": [
        "Manage error data",
        "Error data types: events and trace details",
        "Events",
        "Trace details",
        "Caps on error reporting",
        "Charting error rates and counts",
        "Report custom errors",
        "Ignore errors",
        "Reduce noise with expected errors",
        "Disable error traces",
        "Delete error traces",
        "Caution"
      ],
      "title": "Manage error data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "29a2ebdc7b91029a1fada50791b90e9dc548f17e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/manage-error-data/",
      "published_at": "2021-10-25T00:52:13Z",
      "updated_at": "2021-09-08T19:58:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM Errors page helps you identify, triage, and fix errors in your services. The Errors page uses data collected by the APM agent to display stack traces, transaction attributes such as HTTP header values, and any other custom attributes, so you can understand the context of the error and fix it. Error data types: events and trace details By default, our APM agents collect two type of error data: Events Trace details Events The error event data type includes default attributes, as well as any custom attributes instrumented in your service. It doesn't include a stack trace. Find your events data in the Errors UI as follows: The Errors column in the Error traces table. The Top 5 errors chart. When you’ve drilled into a grouping of errors, those errors not displaying a stack trace are based on this type of data. You can disable Show only errors with stack trace to show errors that have this type of data collected, but no associated trace details. Events are subject to sampling (see Caps on error reporting and Charting error rates and counts). For more on error event data, see Events reported by APM. Trace details The trace details error data type includes stack traces and attributes, and supplements events with more data. It's expected that more events will be reported than trace details--see Caps on error reporting. Find your trace details data in the Errors UI as follows: The “Stack traces” column of the Error traces table. When you’ve drilled into a grouping of errors, those errors with a stack trace use this type of data: Show only errors with stack trace is enabled by default, to constrain the errors shown to just those that have this type of data collected. This data is governed by specific retention rules for Error details. Caps on error reporting New Relic caps error reporting at: 100 events per minute per agent instance 20 trace details per minute per agent instance These caps prevent error reporting from negatively impacting application performance. Examples: App running across five EC2 instances, one JVM each. New Relic caps error reporting at: 100 events per minute x 5 instances = 500 events per minute 20 trace details per minute x 5 instances = 100 trace details per minute App running on one host with ten instances. New Relic caps error reporting at: 100 events per minute x 10 instances = 1000 events per minute 20 trace details per minute x 10 instances = 200 events per minute Charting error rates and counts The Error rate chart is driven by a query on metric timeslice data, which is an unsampled aggregate data type that is accurate but has very limited dimensionality. This data can't be faceted or filtered as flexibly as error event data. You can reproduce this chart in a dashboard, or explore the metric timeslice data further by clicking the ... menu on the Error rate chart, and then using the View query or Add to dashboard options. To chart faceted error counts using event data, as in the Top 5 errors chart, use an NRQL event query. Click the ... menu on the Top 5 errors chart and choose View query for a starting point in creating your chart. Since event data can be sampled (see Caps on error reporting), you can use the EXTRAPOLATE keyword to get an accurate error count, even if sampling is occurring. Report custom errors You can report errors not collected by default with our agents using our agent APIs. For more, see the documentation on the API. Ignore errors You can prevent certain errors that would normally be reported to New Relic from being collected using our agent APIs or the server-side configuration UI. For more details, see Manage errors in APM. Reduce noise with expected errors Sometimes you want to collect error data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors page, but won’t affect your service’s error rate or Apdex metrics. Disable error traces To prevent certain errors from being reported to New Relic, disable them in your agent's configuration file. For most agents, you can ignore certain error codes or disable errors completely. For more information, see your specific agent's configuration documentation: C SDK Go (not applicable; the agent only reports errors when configured to do so) Java .NET Node.js PHP Python Ruby Delete error traces Caution You cannot recover error traces after you delete them. Deleting errors is currently only available in the legacy Errors Classic UI. If you want to... Do this... Delete all error traces for your app If you have permissions to delete all error traces for an app: Go to one.newrelic.com > APM > (select an app) > More views > Errors (classic). Select Delete all errors. Delete all error traces for your account To delete all error traces for your New Relic account, get support at support.newrelic.com. Delete individual error traces To delete individual error traces, use APM's Errors (classic) page. Drill into an error from the table of errors, then click Delete this error. In addition to deleting error traces, you may also want to delete transaction traces or database/slow SQL traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 207.4063,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>error</em> data",
        "sections": "Manage <em>error</em> data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " configuration <em>UI</em>. For more details, see Manage errors in <em>APM</em>. Reduce noise with expected errors Sometimes you want to collect <em>error</em> data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors <em>page</em>, but won’t"
      },
      "id": "6044077e28ccbcab752c60d1"
    },
    {
      "sections": [
        "APM Error profiles: Troubleshoot trends",
        "Tip",
        "Error profile attribute examples",
        "Error profiles feature in APM",
        "Select error profile criteria",
        "Error profile criteria example",
        "Analyze error profile results",
        "Error and non-error distribution",
        "Top deviating values",
        "Other category",
        "No value category",
        "Filters"
      ],
      "title": "APM Error profiles: Troubleshoot trends",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "14c286f0cf0f8cc14674c6422fdfa6286393ca6e",
      "image": "https://docs.newrelic.com/static/fcd404afa812236cf952f7861f28cca3/8c557/apm-error-profile-tab-demo.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/apm-error-profiles-troubleshoot-trends/",
      "published_at": "2021-10-25T00:51:31Z",
      "updated_at": "2021-09-08T19:58:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When DevOps experts need to track down what causes errors in your app, it may not be easy to identify the cause. APM's error profiles automatically compare one set of events to another. Each error profile provides visual details about significant differences in the frequency of different values for the events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of non-erroring transactions This helps you take more of the guesswork out of resolving your app errors. You can more easily determine if you can safely ignore the error, or if you should attempt to resolve the error with a new deployment, code edits, customer communications, or other actions. Tip To view error profiles, you must use the classic APM view in New Relic One. To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. Error profile attribute examples Error profiles appear as a separate tab on your APM Errors page. Error profiles feature in APM Use error profiles to troubleshoot trends and significant differences in the frequency of error events for your app. An error profile is a collection of attributes with significantly different traits compared to non-errors. An attribute is \"unusual\" if a set of events represent what is normal (for example, errors compared to all traffic for a given time window), or differences between similar criteria (for example, two different hosts). Errors may be related to events such as: Specific web transaction names or non-web transaction names, JVM thread names, etc. Unique types of error messages, classes, etc. Random customer interactions; for example, a particular error comes from a single customer's account, while normal traffic comes from a wide variety of accounts External call counts or duration Timing differences among hosts in your ecosystem, cluster agent IDs, etc. Other anomalies Select error profile criteria Based on criteria in your app's Errors page, New Relic analyzes and lists unusual trends by their significance. Your selected criteria includes: Time window Errors page filters Search criteria on the Errors page or the Error profiles tab As you examine error profile results and want to dig deeper, add or change your app's error profile criteria. The Error profile tab refreshes to show the traits that distinguish the errors that match the updated criteria. Error profile criteria example Your app's Error profile tab currently shows several error classes or messages. To filter to a specific error class or message, use any of these options: From the Errors page's time picker, change the time range. For example, change the default (30 minutes) to Last 24 hours, ending now. From the Errors page's filter section: Select Back to groupings list, then select other Error groups, Error attributes, or Custom attributes. From the Errors page's filter section: Click a specific item on the list to narrow the filter. For example, if several error messages are listed, click only the message you are interested in. From the Error profiles tab's search box, type class, message, or other search values. Analyze error profile results To examine details for the attribute results in your app's error profile, you must use the classic APM view in New Relic One. Go to one.newrelic.com/apm > APM > (select an app) > Events > Errors, then toggle Show new view so that APM shows the classic view of the Errors page. From the Errors page, select the Error profile tab. From the Error profile tab, review the list of error attributes that match the currently selected error profile criteria. To view a specific attribute's details, click it. To highlight specific error details, mouse over any pie chart segment or table row for the attribute. To investigate a specific attribute for your app's errors, type its name in the Error profiles tab's search window, or change the currently selected error profile criteria. Compare values with large differences to identify the traits that distinguish the errors for an attribute. The comparative data in the error profile results and the error trace details can help you decide what steps to take for additional troubleshooting and resolving the error. Error and non-error distribution Depending on an error's attributes, sometimes the attribute is distributed differently for errors than for non-errors. Top deviating values New Relic analyzes each attribute for your app's errors and compares the distribution for errors that match your criteria to transactions without errors. If the proportions between these errors are roughly the same compared to transactions without any errors, the attribute does not contain much useful information for debugging. New Relic limits the error profile's pie chart and table for each attribute to show only the top deviating values. When proportions are roughly the same, New Relic does not include them in the error profile. Other category After the top deviating values, the error profile groups the rest into an Other category. This helps you focus on the values that are different for these errors. No value category If values are unusually present or are not present in the errors, you may see a No value category on the list of error profiles. Filters If you do not have any filters selected, the profile shows any distinguishing traits your errors exhibit in aggregate. Example: A certain kind of transaction makes up 20% of all of your traffic and is responsible for 80% of your errors. The error profile will show the unexpected proportions in the Transaction attribute. Adjust your error profile criteria to drill down even deeper into the profile results, so you can more effectively troubleshoot and resolve specific error events.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 207.40628,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "sections": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. <em>Error</em> profile attribute examples <em>Error</em> profiles appear as a separate tab on your <em>APM</em> Errors <em>page</em>. <em>Error</em> profiles feature in <em>APM</em> Use <em>error</em> profiles to troubleshoot trends and significant"
      },
      "id": "6044074764441fe72a378f08"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-10-25T15:30:44Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.58005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in <em>APM</em>&#x27;s transaction traces and <em>error</em> <em>analytics</em>. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic&#x27;s webhook IPs"
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    }
  ],
  "/docs/apm/apm-ui-pages/error-analytics/manage-error-data": [
    {
      "sections": [
        "APM Error profiles: Troubleshoot trends",
        "Tip",
        "Error profile attribute examples",
        "Error profiles feature in APM",
        "Select error profile criteria",
        "Error profile criteria example",
        "Analyze error profile results",
        "Error and non-error distribution",
        "Top deviating values",
        "Other category",
        "No value category",
        "Filters"
      ],
      "title": "APM Error profiles: Troubleshoot trends",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "14c286f0cf0f8cc14674c6422fdfa6286393ca6e",
      "image": "https://docs.newrelic.com/static/fcd404afa812236cf952f7861f28cca3/8c557/apm-error-profile-tab-demo.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/apm-error-profiles-troubleshoot-trends/",
      "published_at": "2021-10-25T00:51:31Z",
      "updated_at": "2021-09-08T19:58:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When DevOps experts need to track down what causes errors in your app, it may not be easy to identify the cause. APM's error profiles automatically compare one set of events to another. Each error profile provides visual details about significant differences in the frequency of different values for the events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of non-erroring transactions This helps you take more of the guesswork out of resolving your app errors. You can more easily determine if you can safely ignore the error, or if you should attempt to resolve the error with a new deployment, code edits, customer communications, or other actions. Tip To view error profiles, you must use the classic APM view in New Relic One. To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. Error profile attribute examples Error profiles appear as a separate tab on your APM Errors page. Error profiles feature in APM Use error profiles to troubleshoot trends and significant differences in the frequency of error events for your app. An error profile is a collection of attributes with significantly different traits compared to non-errors. An attribute is \"unusual\" if a set of events represent what is normal (for example, errors compared to all traffic for a given time window), or differences between similar criteria (for example, two different hosts). Errors may be related to events such as: Specific web transaction names or non-web transaction names, JVM thread names, etc. Unique types of error messages, classes, etc. Random customer interactions; for example, a particular error comes from a single customer's account, while normal traffic comes from a wide variety of accounts External call counts or duration Timing differences among hosts in your ecosystem, cluster agent IDs, etc. Other anomalies Select error profile criteria Based on criteria in your app's Errors page, New Relic analyzes and lists unusual trends by their significance. Your selected criteria includes: Time window Errors page filters Search criteria on the Errors page or the Error profiles tab As you examine error profile results and want to dig deeper, add or change your app's error profile criteria. The Error profile tab refreshes to show the traits that distinguish the errors that match the updated criteria. Error profile criteria example Your app's Error profile tab currently shows several error classes or messages. To filter to a specific error class or message, use any of these options: From the Errors page's time picker, change the time range. For example, change the default (30 minutes) to Last 24 hours, ending now. From the Errors page's filter section: Select Back to groupings list, then select other Error groups, Error attributes, or Custom attributes. From the Errors page's filter section: Click a specific item on the list to narrow the filter. For example, if several error messages are listed, click only the message you are interested in. From the Error profiles tab's search box, type class, message, or other search values. Analyze error profile results To examine details for the attribute results in your app's error profile, you must use the classic APM view in New Relic One. Go to one.newrelic.com/apm > APM > (select an app) > Events > Errors, then toggle Show new view so that APM shows the classic view of the Errors page. From the Errors page, select the Error profile tab. From the Error profile tab, review the list of error attributes that match the currently selected error profile criteria. To view a specific attribute's details, click it. To highlight specific error details, mouse over any pie chart segment or table row for the attribute. To investigate a specific attribute for your app's errors, type its name in the Error profiles tab's search window, or change the currently selected error profile criteria. Compare values with large differences to identify the traits that distinguish the errors for an attribute. The comparative data in the error profile results and the error trace details can help you decide what steps to take for additional troubleshooting and resolving the error. Error and non-error distribution Depending on an error's attributes, sometimes the attribute is distributed differently for errors than for non-errors. Top deviating values New Relic analyzes each attribute for your app's errors and compares the distribution for errors that match your criteria to transactions without errors. If the proportions between these errors are roughly the same compared to transactions without any errors, the attribute does not contain much useful information for debugging. New Relic limits the error profile's pie chart and table for each attribute to show only the top deviating values. When proportions are roughly the same, New Relic does not include them in the error profile. Other category After the top deviating values, the error profile groups the rest into an Other category. This helps you focus on the values that are different for these errors. No value category If values are unusually present or are not present in the errors, you may see a No value category on the list of error profiles. Filters If you do not have any filters selected, the profile shows any distinguishing traits your errors exhibit in aggregate. Example: A certain kind of transaction makes up 20% of all of your traffic and is responsible for 80% of your errors. The error profile will show the unexpected proportions in the Transaction attribute. Adjust your error profile criteria to drill down even deeper into the profile results, so you can more effectively troubleshoot and resolve specific error events.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 207.40628,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "sections": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. <em>Error</em> profile attribute examples <em>Error</em> profiles appear as a separate tab on your <em>APM</em> Errors <em>page</em>. <em>Error</em> profiles feature in <em>APM</em> Use <em>error</em> profiles to troubleshoot trends and significant"
      },
      "id": "6044074764441fe72a378f08"
    },
    {
      "sections": [
        "Errors page: Find, fix, and verify problems",
        "View the APM Errors page",
        "Important",
        "Use the Errors workflow to identify problems",
        "Error rate chart: See patterns immediately",
        "Top five errors: Correlate to alerts or find significant groupings",
        "Error traces: Find the line of code and data needed to reproduce the issue",
        "Expected errors",
        "Errors outside transactions",
        "Select the time period for error data"
      ],
      "title": "Errors page: Find, fix, and verify problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "fe321816a8727f65e32b4ec1f381ba9d17c432b7",
      "image": "https://docs.newrelic.com/static/1b3bf12a5d48aa0396de5e488bf17f27/c1b63/WebPortal___New_Relic_One.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/errors-page-find-fix-verify-problems/",
      "published_at": "2021-10-25T00:51:31Z",
      "updated_at": "2021-07-09T07:35:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Errors UI in New Relic One, you can see the line of code that's causing a bad experience for your users, and get enough data to reproduce the issue so you can fix it. When you do, you’ll be able to confirm your fix is working in production. Use Errors in New Relic One to: Group and filter events to triage important errors. Get alert notifications about errors. Review stack traces, logs, and other details. Share the error information with charts and dashboards. Report new errors using instrumentation, prevent certain errors from being reported, and filter out noisy errors using expected errors. View the APM Errors page Important As of October 1, 2021, the APM Errors (classic) UI will be discontinued in favor of the New Relic One APM Errors UI. For more details, see our Explorers Hub post. To view the Errors page: Go to one.newrelic.com > APM > (select an app), then click the Error rate table's title on your selected app's Summary page. OR Go to one.newrelic.com > APM > (select an app) > Events > Errors. APM Errors UI: The Error rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5 by count chart and Error traces table. Use the Instance dropdown to focus on a specific instance. Use the Errors workflow to identify problems Use this basic workflow to get the most out of the information you see from the Errors page. Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. Correlate any general patterns on the Top 5 errors chart to alerts occurring during the same time period. Use the groups and filters to examine the error events and attributes in more detail, and look for patterns with error messages, transaction names, or other groupings. Explore and share Error trace table information, including specific stack trace details, logs, and attributes (host, URL, user, custom attributes, etc.) Also review the Error profiles page to guide your investigation into which attribute values might be correlated to the cause of errors, by comparing the frequency of those values between transactions where the error did and didn't occur (only in the old UI). Error rate chart: See patterns immediately Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. For example, are there any spikes near a recent deployment? You may want to change the selected time period to look for other historical patterns. This chart always shows the overall error rate and count for the selected time period, even when you filter the rest of the page. If you want to focus your investigation on a particular type of error, use the Top 5 errors chart or the Error traces table. Top five errors: Correlate to alerts or find significant groupings Use the Top 5 errors chart to identify what error types and how many of those errors occurred during the same time period as the Error rate chart. For example: Is the error spike related to a specific exception class or transaction? Do the top errors point to a new host/container that recently got moved into production? Are the top error messages repeatedly about failed connections by hosts that you know are in a specific region of your organization? Have the chart backgrounds changed color to indicate an alert condition? (Light pink indicates the alert condition's Warning threshold, and dark pink indicates the Critical threshold.) If you want to... Do this... Change the \"top 5\" selection By default, Top 5 errors chart shows the top five errors by error class and transaction name. To group by other attributes, such as error message, host, or custom attribute, use the search bar. Explore or share error trend data The Top 5 errors chart uses error events, which include rich attribute data b default, along with any custom attributes you have added to the error event type. To examine this data in more detail, or to share it with others, select the View query or Add to dashboard links that appear when you click the chart's ... menu. Error traces: Find the line of code and data needed to reproduce the issue The Error traces table groups errors by the attributes you've selected, and links them to relevant detailed error traces. Each row helps you find answers to questions such as: How many of this transaction/class (or custom grouping) occurred within the selected time period? What is the most recent error message? When did this error first and last occur? Sometimes it may be useful to sort error trace data other than from the most to fewest occurrences. You can change the sort order or filter options to focus on just the types of errors that matter the most to you and your teams. For example: Which error has the fewest occurrences (sort on Errors column)? When did a particular error stop (sort on Last occurred)? Once you find the group of errors you want to fix, click a row in the Error traces table to drill down into the stack traces and attribute data that help pinpoint the cause. Expected errors Reduce noisy errors by marking them as “expected errors”. Such errors won't affect reported error rate or Apdex metrics. See Manage errors for more details. Expected errors aren't shown by default on the Errors page. You can show them by turning on the Show N expected errors switch below the Group by bar. Errors outside transactions Using the New Relic agent API, you can record custom errors at any point in the execution of your code. Sometimes, such custom errors will occur when a transaction is not executing, such as in high-volume aynchronous code that doesn't handle an HTTP transaction. Errors outside transactions are shown by default on the Errors page, but you can hide them by turning off the Show N errors outside transactions switch below the Group by bar. Select the time period for error data Use the time picker to examine details of error events over the past week. The error events view is available for up to a seven-day window of data collected over the last eight days. You may notice slight differences in count if your time window is set to ending now. This occurs because the counts for the list and table may be requested at slightly different times as the page auto-refreshes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 189.8035,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Errors</em> <em>page</em>: Find, fix, and verify problems",
        "sections": "View the <em>APM</em> <em>Errors</em> <em>page</em>",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the <em>Error</em> rate table&#x27;s title on your selected app&#x27;s Summary <em>page</em>. OR Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Events &gt; Errors. <em>APM</em> Errors <em>UI</em>: The <em>Error</em> rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5"
      },
      "id": "60440747e7b9d2f2295799b6"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-10-25T15:30:44Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.58005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in <em>APM</em>&#x27;s transaction traces and <em>error</em> <em>analytics</em>. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic&#x27;s webhook IPs"
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    }
  ],
  "/docs/apm/apm-ui-pages/events/deployments-page-view-impact-your-app-users": [
    {
      "sections": [
        "Thread profiler tool",
        "Supported agents",
        "Start the profiler",
        "View profile data",
        "Agent considerations",
        ".NET-specific notes",
        "Python-specific notes",
        "Ruby-specific notes"
      ],
      "title": "Thread profiler tool",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "e2d300aa5dd9bdbf73684a04080773db0d1acd2b",
      "image": "https://docs.newrelic.com/static/1331956275509db052de91a6d8caebda/c1b63/thread-profiler-session.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/events/thread-profiler-tool/",
      "published_at": "2021-10-24T20:57:57Z",
      "updated_at": "2021-09-20T19:33:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The thread profiler is a low-impact profiling tool that can be used in production to identify bottlenecks in an application. It works by periodically (100ms) capturing the stack trace of each thread for a specified duration. At the end of the specified duration, the stack traces are aggregated to build a tree. The call count in the tree corresponds to the number of times that function was present in the stack traces under the same context. Although the call tree cannot capture the entire execution, a large enough sample can be a good representation of the application behavior. This provides insights into the \"hot\" functions of the app where most of the time is spent. With this scope, entries sampled less than 0.05% are omitted. Supported agents This feature is available only for specific agents and versions: Java: Agent versions 1.2.004.6 or higher .NET: Framework: Agent versions 2.12.146.0 or higher .NET Core 2.0: Agent versions 8.3.360.0 or higher (Windows only) Linux: .NET Core 3.0 or higher and agent versions 8.23 or higher Python: Agent versions 1.7.0 or higher Ruby: Agent versions 3.5.5 or higher Start the profiler The thread profiler feature is enabled by default. You also may be able to turn it on or off in your agent configuration file: Java: thread_profiler.enabled NET: You cannot disable the thread profiler with .NET apps. Python: thread_profiler.enabled Ruby: thread_profiler.enabled When enabled, you can view the thread profiler from our user interface: Go to one.newrelic.com > APM > (select an app) > Events > Thread profiler. Select the host you want to run the profiler on. Set the duration for the profiling session. Select Start profiler. This triggers the agent to start the thread profiler during the next harvest cycle (every one minute) and capture data for the specified duration. We record thread backtraces whether or not they are in a runnable state at the time the sample is taken. Threads that are sleeping or blocked on IO may appear in the call tree. one.newrelic.com > APM > (select an app) > Events > Thread profiler: Use this page to define the settings for the thread profiler duration and to view the results. View profile data After the profiler finishes running, the agent will report the profile data. The call tree automatically appears on the Thread profiler page. The percentages in the call tree represent the percentage of thread backtrace samples in which each call path appeared during the profiling session. The data collection started at the PROFILE COLLECTED time. The page color-codes the tree results: Red: Percentages greater than 30% Yellow: Percentages greater than 10% Black: Percentages less than 10% If you want to... Do this... Change how the thread profile information appears Select your choices of available options in the Tree settings, and select Refresh tree. Change how much information appears Select the Expand or Collapse options above the call tree, or select the name or arrow on any line in the call tree. View summary information about any line in the call tree Mouse over the line. Email the thread profile results to others Select Share this profile. Start another session or view a different thread profile Select Back to all profiles. Agent considerations Depending on which agent you use, the thread profiling feature has additional considerations. .NET-specific notes When using thread profiling with the .NET Framework agent, be aware of the following. .NET agent Thread profiler notes Supported on Linux Thread profiling on Linux is supported on .NET Core 3.0 or later applications when running .NET agent version 8.23 or later. Managed threads only For .NET agents, the thread profiler only captures stack traces on managed threads. It does not capture stack traces on unmanaged threads. If a call to an unmanaged function occurs on a managed thread, the thread profiler will show Native:Function Call in the call tree. No line numbers A .NET thread profile does not include line numbers in the call tree. The Show line numbers checkbox in the Tree Settings does not have any effect. Bug with 64-bit v4.0 .NET CLR There is a bug in the 64-bit version 4.0 .NET Common Language Runtime (CLR) that interferes with the agent's ability to retrieve managed stack traces. If your app experiences this bug, APM will show empty thread profiles. This bug does not affect 32-bit applications. The bug is fixed in the CLR releases for .NET 4.5. To verify whether your 64-bit application has the fixed version, look at the full version of the mscorlib.dll in the C: \\ Windows \\ Microsoft.NET \\ Framework64 \\ v4.0.30319 directory. The fix is in versions 4.0.30319.17379 or higher. Other category only All threads are put in the Other category. The Web Request and Background categories are not supported. Python-specific notes When using thread profiling with the Python agent, be aware of the following. Python agent Thread profiler notes Co-routine based systems There are limits to capturing details when a co-routine based system is being used, such as gevent or eventlet modes of gunicorn. If creating a new thread, the Python agent will actually create a greenlet instead of a thread profiler background thread. Therefore, the thread profiler will not capture any web request and background transactions on the thread profiler page. Greenlets A greenlet can run only when other greenlets explicitly yield control, such as when they block. For example, if the thread sampler does get to run, it will only sample the stack for other greenlets at a point where they are blocked. It will not sample them when they are executing arbitrary code. It can completely miss execution within a greenlet if it never blocked or otherwise yielded to another greenlet. Time in Python code Time spent in pure Python code that isn't blocking requests will not be picked up, and no information will be recorded or reported. This is because results are misleading when co-routines are used. Ruby-specific notes When using thread profiling with the Ruby agent, be aware of the following. Ruby agent Thread profiler notes Backtraces The thread profiler depends on the ability to capture thread backtraces from within your Ruby application. For this reason, it requires MRI 1.9.2 or higher (for the Thread#backtrace method). Resque The Ruby agent does not currently support thread profiles with Resque background jobs. A thread profiling session initiated against Resque will only capture traces from the parent process, not the job processes. JRuby JRuby support is considered experimental at this time. There are known issues with JRuby's Thread#backtrace implementation that will affect the accuracy of and reliability of backtraces collected under JRuby.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " for the specified duration. We record thread backtraces whether or not they are in a runnable state at the time the sample is taken. Threads that are sleeping or blocked on IO may appear in the call tree. one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Thread profiler: Use this <em>page</em> to define"
      },
      "id": "603ebd4928ccbccc3ceba78e"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-10-25T00:00:21Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.85638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Events</em> &gt; Alerts. one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Alerts: Use this <em>page</em> to view or filter information about alerts over the past two weeks"
      },
      "id": "603ebe4c196a676588a83dd6"
    },
    {
      "sections": [
        "APM: Report custom events and attributes",
        "Data considerations",
        "Tip",
        "Record custom events and attributes",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Timestamps",
        "Limits and restricted characters",
        "Reserved words"
      ],
      "title": "APM: Report custom events and attributes",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Custom events"
      ],
      "external_id": "8731386e34fbced8d086795e273a1e2392b663ba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/data-apis/custom-data/custom-events/apm-report-custom-events-attributes/",
      "published_at": "2021-10-24T20:14:08Z",
      "updated_at": "2021-10-23T19:43:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have APM, you can report custom event data. You can then query and visualize your data in New Relic. Data considerations New Relic agents send event data to New Relic as part of the normal harvest cycle every five seconds for agent versions supporting real time streaming. Sending a lot of events can increase the memory overhead of the agent. New Relic enforces an upper limit of 833 custom events every 5 seconds. Additionally, posts greater than 1MB (10^6 bytes) in size will not be recorded, regardless of the custom event limit. You can also send custom events using the Event API (without need for APM). However, be aware that custom events sent with the agent APIs are not compatible with high security mode. Tip For more information, check out New Relic University’s tutorial Adding custom data with the APM agent API. Or, go directly to the full online course Custom data with APM. Record custom events and attributes You can add your own custom APM events and attributes, which you can then use for querying and charting. This is one of several ways to report custom data. To record a custom event, follow the procedures for your New Relic language agent. To add custom attributes to APM events, you must first enable them for your APM agent, and then make an API call to record the attribute. Follow the agent-specific custom attribute procedures. When creating your own custom events and attributes, follow data requirements for: Size limits Attribute types Reserved words C SDK To add a custom event to apps monitored by the C SDK, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For more information, see the Guide to using the C SDK API. You can then add custom attributes for your C SDK app. Go To add a custom event to apps monitored by the Go agent, use RecordCustomEvent. You can then add custom attributes for your Go app. Java Custom event collection is enabled by default in Java agent version 3.13.0 or higher. To send custom events, call recordCustomEvent. For example: Map<String, Object> eventAttributes = new HashMap<String, Object>(); NewRelic.getAgent().getInsights().recordCustomEvent(\"MyCustomEvent\", eventAttributes); Copy The first argument defines the name of your event type, and the second argument is a map with the attributes for your custom event. Event attributes must be strings or numbers. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Java agent via a configuration parameter in newrelic.yml. Specify the maximum number of events to record per minute as an integer. For example, if you want to send less than the default of 10000 events: custom_insights_events: max_samples_stored: 5000 Copy To disable custom events entirely, add the following to your newrelic.yml: custom_insights_events: enabled: false Copy You can then add custom attributes for your Java app. For Java agent versions prior to 4.1.0, use the following YAML configuration: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy .NET Custom event collection is enabled by default in .NET agent version 4.6.29.0 or higher. To send custom events, simply call RecordCustomEvent(). For example: var eventAttributes = new Dictionary<String, Object>(); NewRelic.Api.Agent.NewRelic.RecordCustomEvent('MyCustomEvent', eventAttributes); Copy The first argument defines the name of your event type, and the second argument is an IEnumerable with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your .NET app. You can turn off custom events entirely by setting customEvents.enabled to false in newrelic.config. Node.js Custom event collection is enabled by default in Node.js agent version 1.15.0 or higher. To send custom events, simply call the relevant API. For example: recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your Node.js app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.js. PHP Custom event collection is enabled by default in PHP agent version 4.18 or higher. To send custom events, simply call the relevant API function. For example: newrelic_record_custom_event(\"WidgetSale\", array(\"color\"=>\"red\", \"weight\"=>12.5)); Copy The first argument defines the name of your event type, and the second argument is an array with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. By default, the maximum number of custom events recorded per minute is 10,000. This setting cannot be changed. You can then add custom attributes for your PHP app. To disable custom events entirely, add newrelic.custom_insights_events.enabled = false to your newrelic.ini and restart the agent. Python Custom event collection is enabled by default in Python agent version 2.60.0.46 or higher. To send custom events, simply call the relevant API. For example: newrelic.agent. record_custom_event (event_type, params, application=None) Copy The event_type defines the name (or type) of the custom event. Attributes of the custom event should be passed in as a dictionary via the params keyword argument. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For limits and restrictions on event_type and params, see our documentation about limits and restricted characters and reserved words If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. You can then add custom attributes for your Python app. To disable custom events entirely, set custom_insights_events.enabled to False in your newrelic.ini configuration file. Ruby Custom event collection is enabled by default in Ruby agent version 3.9.8.273 or higher. To send custom events, simply call the relevant API. For example: ::NewRelic::Agent.record_custom_event('WidgetSale', color: 'red', weight: 12.5) Copy The first argument defines the name of your event type, and the second argument is a hash with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Ruby agent via a configuration parameter in newrelic.yml: Add custom_insights_events.max_samples_stored: to your configuration file. Specify the maximum number of events to record per minute as an integer. For example, if you want to be able to send up to 5000 events per minute, add: custom_insights_events.max_samples_stored: 5000 Copy You can then add custom attributes for your Ruby app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.yml. Timestamps You may not specify a timestamp on events that are collected and recorded via the agent. The agent will automatically assign a timestamp to events based on when they are recorded via the API. Limits and restricted characters See Custom event data requirements for size limits, data types, and naming syntax requirements. Reserved words Before creating custom attributes, review New Relic's list of reserved terms used by NRQL. Otherwise unexpected results may occur.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.40999,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em>: Report custom <em>events</em> and attributes",
        "sections": "<em>APM</em>: Report custom <em>events</em> and attributes",
        "tags": "Custom <em>events</em>",
        "body": ". Record custom <em>events</em> and attributes You can add your own custom <em>APM</em> <em>events</em> and attributes, which you can then use for querying and charting. This is one of several ways to report custom data. To record a custom <em>event</em>, follow the procedures for your New Relic language agent. To add custom attributes"
      },
      "id": "609fa629e7b9d2fa8dc3eb04"
    }
  ],
  "/docs/apm/apm-ui-pages/events/thread-profiler-tool": [
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-10-25T00:00:21Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.85638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Events</em> &gt; Alerts. one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Alerts: Use this <em>page</em> to view or filter information about alerts over the past two weeks"
      },
      "id": "603ebe4c196a676588a83dd6"
    },
    {
      "sections": [
        "Deployments page: View impact on your app and users",
        "Set up deployment notifications",
        "View deployment details",
        "View performance after a deployment",
        "Tip"
      ],
      "title": "Deployments page: View impact on your app and users",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "e312ce78e93b452b265b646406db3a39d3f7e696",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/events/deployments-page-view-impact-your-app-users/",
      "published_at": "2021-10-25T00:52:55Z",
      "updated_at": "2021-03-16T06:31:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Deployments page lists recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors. You can view and drill down details, use search and sort options, hide or delete the error, share it with others, or file a ticket about it. Set up deployment notifications For all APM agents, you can record deployments by using webhooks or by using the New Relic REST API (v2). Some agents also have specific methods, such as the Java agent jar or the Python agent's newrelic-admin script. View deployment details After you configure the deployment information, you can view and drill down into details: Go to one.newrelic.com > APM > (select an app) > Events > Deployments. Use any of New Relic's standard user interface functions to drill down into detailed information. To view details for a particular event, select its date link. To view the errors page for this deployment, select the error link. To view details for a specific deployment if applicable, select Change log or Change report. The Change log contains any detail provided through the changelog parameter when recording the deployment. The Change report displays the behavior of the top ten transactions before and after the deployment. View performance after a deployment The Deployments page link for individual deployments appears on the selected app's Summary page in the Events section. For time frames shorter than 14 days, a blue vertical bar on a chart will indicate a deployment. To view summary information about the deployment, mouse over the blue bar. Tip You can also use the Compare with option on your APM summary page to select a time period to compare the same data. If you enable Compare with, the UI does not show deployment markers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.27362,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Deployments <em>page</em>: View impact on your app and users",
        "sections": "Deployments <em>page</em>: View impact on your app and users",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the deployment information, you can view and drill down into details: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Deployments. Use any of New Relic&#x27;s standard user interface functions to drill down into detailed information. To view details for a particular <em>event</em>, select its date link. To view"
      },
      "id": "603ebe19e7b9d2bc362a07cc"
    },
    {
      "sections": [
        "APM: Report custom events and attributes",
        "Data considerations",
        "Tip",
        "Record custom events and attributes",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Timestamps",
        "Limits and restricted characters",
        "Reserved words"
      ],
      "title": "APM: Report custom events and attributes",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Custom events"
      ],
      "external_id": "8731386e34fbced8d086795e273a1e2392b663ba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/data-apis/custom-data/custom-events/apm-report-custom-events-attributes/",
      "published_at": "2021-10-24T20:14:08Z",
      "updated_at": "2021-10-23T19:43:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have APM, you can report custom event data. You can then query and visualize your data in New Relic. Data considerations New Relic agents send event data to New Relic as part of the normal harvest cycle every five seconds for agent versions supporting real time streaming. Sending a lot of events can increase the memory overhead of the agent. New Relic enforces an upper limit of 833 custom events every 5 seconds. Additionally, posts greater than 1MB (10^6 bytes) in size will not be recorded, regardless of the custom event limit. You can also send custom events using the Event API (without need for APM). However, be aware that custom events sent with the agent APIs are not compatible with high security mode. Tip For more information, check out New Relic University’s tutorial Adding custom data with the APM agent API. Or, go directly to the full online course Custom data with APM. Record custom events and attributes You can add your own custom APM events and attributes, which you can then use for querying and charting. This is one of several ways to report custom data. To record a custom event, follow the procedures for your New Relic language agent. To add custom attributes to APM events, you must first enable them for your APM agent, and then make an API call to record the attribute. Follow the agent-specific custom attribute procedures. When creating your own custom events and attributes, follow data requirements for: Size limits Attribute types Reserved words C SDK To add a custom event to apps monitored by the C SDK, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For more information, see the Guide to using the C SDK API. You can then add custom attributes for your C SDK app. Go To add a custom event to apps monitored by the Go agent, use RecordCustomEvent. You can then add custom attributes for your Go app. Java Custom event collection is enabled by default in Java agent version 3.13.0 or higher. To send custom events, call recordCustomEvent. For example: Map<String, Object> eventAttributes = new HashMap<String, Object>(); NewRelic.getAgent().getInsights().recordCustomEvent(\"MyCustomEvent\", eventAttributes); Copy The first argument defines the name of your event type, and the second argument is a map with the attributes for your custom event. Event attributes must be strings or numbers. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Java agent via a configuration parameter in newrelic.yml. Specify the maximum number of events to record per minute as an integer. For example, if you want to send less than the default of 10000 events: custom_insights_events: max_samples_stored: 5000 Copy To disable custom events entirely, add the following to your newrelic.yml: custom_insights_events: enabled: false Copy You can then add custom attributes for your Java app. For Java agent versions prior to 4.1.0, use the following YAML configuration: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy .NET Custom event collection is enabled by default in .NET agent version 4.6.29.0 or higher. To send custom events, simply call RecordCustomEvent(). For example: var eventAttributes = new Dictionary<String, Object>(); NewRelic.Api.Agent.NewRelic.RecordCustomEvent('MyCustomEvent', eventAttributes); Copy The first argument defines the name of your event type, and the second argument is an IEnumerable with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your .NET app. You can turn off custom events entirely by setting customEvents.enabled to false in newrelic.config. Node.js Custom event collection is enabled by default in Node.js agent version 1.15.0 or higher. To send custom events, simply call the relevant API. For example: recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your Node.js app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.js. PHP Custom event collection is enabled by default in PHP agent version 4.18 or higher. To send custom events, simply call the relevant API function. For example: newrelic_record_custom_event(\"WidgetSale\", array(\"color\"=>\"red\", \"weight\"=>12.5)); Copy The first argument defines the name of your event type, and the second argument is an array with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. By default, the maximum number of custom events recorded per minute is 10,000. This setting cannot be changed. You can then add custom attributes for your PHP app. To disable custom events entirely, add newrelic.custom_insights_events.enabled = false to your newrelic.ini and restart the agent. Python Custom event collection is enabled by default in Python agent version 2.60.0.46 or higher. To send custom events, simply call the relevant API. For example: newrelic.agent. record_custom_event (event_type, params, application=None) Copy The event_type defines the name (or type) of the custom event. Attributes of the custom event should be passed in as a dictionary via the params keyword argument. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For limits and restrictions on event_type and params, see our documentation about limits and restricted characters and reserved words If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. You can then add custom attributes for your Python app. To disable custom events entirely, set custom_insights_events.enabled to False in your newrelic.ini configuration file. Ruby Custom event collection is enabled by default in Ruby agent version 3.9.8.273 or higher. To send custom events, simply call the relevant API. For example: ::NewRelic::Agent.record_custom_event('WidgetSale', color: 'red', weight: 12.5) Copy The first argument defines the name of your event type, and the second argument is a hash with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Ruby agent via a configuration parameter in newrelic.yml: Add custom_insights_events.max_samples_stored: to your configuration file. Specify the maximum number of events to record per minute as an integer. For example, if you want to be able to send up to 5000 events per minute, add: custom_insights_events.max_samples_stored: 5000 Copy You can then add custom attributes for your Ruby app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.yml. Timestamps You may not specify a timestamp on events that are collected and recorded via the agent. The agent will automatically assign a timestamp to events based on when they are recorded via the API. Limits and restricted characters See Custom event data requirements for size limits, data types, and naming syntax requirements. Reserved words Before creating custom attributes, review New Relic's list of reserved terms used by NRQL. Otherwise unexpected results may occur.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.40993,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em>: Report custom <em>events</em> and attributes",
        "sections": "<em>APM</em>: Report custom <em>events</em> and attributes",
        "tags": "Custom <em>events</em>",
        "body": ". Record custom <em>events</em> and attributes You can add your own custom <em>APM</em> <em>events</em> and attributes, which you can then use for querying and charting. This is one of several ways to report custom data. To record a custom <em>event</em>, follow the procedures for your New Relic language agent. To add custom attributes"
      },
      "id": "609fa629e7b9d2fa8dc3eb04"
    }
  ],
  "/docs/apm/apm-ui-pages/features/analyze-database-instance-level-performance-issues": [
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-10-25T15:30:44Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.25879,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "Request queue server configuration examples",
        "Apache",
        "Nginx",
        "F5 load balancers",
        "Network timing"
      ],
      "title": "Request queue server configuration examples",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c7a069b8875af411530a34aaef67155d20d7fb19",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/features/request-queue-server-configuration-examples/",
      "published_at": "2021-10-24T20:35:51Z",
      "updated_at": "2021-07-09T08:23:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to report request queuing, New Relic agents depend on an HTTP header set by the front-end web server (such as Apache or Nginx) or load balancer (such as HAProxy or F5). These examples use the X-Request-Start header, since it is has broader support across platforms. If this does not work with your server configuration for request queuing, try using the X-Queue-Start header. The syntax should otherwise be the same. Apache Apache's mod_headers module includes a %t variable that is formatted correctly. To enable request queue reporting, add this code to your Apache config: RequestHeader set X-Request-Start \"%t\" Copy Nginx If you are using Nginx version 1.2.6 or higher and the latest version of the Ruby, Python, or PHP agent, Nginx can easily be configured to report queue time. (For Nginx versions 1.2.6 or lower, you must recompile Nginx with a module or patch.) Configuring with Nginx 1.2.6 or higher uses the ${msec} variable, which is a number in seconds with milliseconds resolution. For more information, see http://nginx.org/en/docs/http/ngx_http_core_module.html#variables. Add the appropriate information to your Nginx config: Nginx configuration Values General Nginx use proxy_set_header X-Request-Start \"t=${msec}\"; Copy Passenger Version 5 or higher: >passenger_set_header X-REQUEST-START \"t=${msec}\"; Copy Older versions: passenger_set_cgi_param X_REQUEST_START \"t=${msec}\"; Copy fastcgi fastcgi_param HTTP_X_REQUEST_START \"t=${msec}\"; Copy uWSGI uwsgi_param HTTP_X_REQUEST_START \"t=${msec}\"; Copy F5 load balancers For F5 load balancers, use this configuration snippet: when HTTP_REQUEST_SEND { # TCL 8.4 so we have to calculate the time in millisecond resolution # Calculation from: https://groups.google.com/forum/? fromgroups=#!topic/comp.lang.tcl/tV9H6TDv0t8 set secs [clock seconds] set ms [clock clicks -milliseconds] set base [expr { $secs * 1000 }] set fract [expr { $ms - $base }] if { $fract >= 1000 } { set diff [expr { $fract / 1000 }] incr secs $diff incr fract [expr { -1000 * $diff }] } set micros [format \"%d%03d000\" $secs $fract] # Want this header inserted as if coming from the client clientside { HTTP::header insert X-Request-Start \"t=${micros}\" } } Copy Network timing Even with request queuing configured, the front-end server's setup can still affect network time in your browser data. This is because the front-end server does not add the queuing time header until after it actually accepts and processes the request. The queuing time headers can never account for backlog in the listener socket used to accept requests. For example, if the front-end server's configuration results in a backlog of requests that queue in the listener socket, page load timing will show an increase in network time.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.76956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the queuing time header until after it actually accepts and processes the request. The queuing time headers can never account for backlog in the listener socket used to accept requests. For example, if the front-end server&#x27;s configuration results in a backlog of requests that queue in the listener socket, <em>page</em> load timing will show an increase in network time."
      },
      "id": "603eb84a28ccbc1734eba7a5"
    },
    {
      "sections": [
        "Configure request queue reporting",
        "HTTP header",
        "Tip",
        "C SDK",
        "Go agent",
        "Java, Node.js, Python, Ruby agents",
        ".NET agent",
        "PHP agent"
      ],
      "title": "Configure request queue reporting",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "3226477ad8d63af87fd5947589af31d0d679b89b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/features/configure-request-queue-reporting/",
      "published_at": "2021-10-24T19:53:38Z",
      "updated_at": "2021-03-16T08:18:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Request queuing occurs before the request reaches your application (where the agent resides). This is why you need to do some straightforward configuration of the agent and your production hosts to take advantage of this feature. HTTP header In order to report request queuing, most New Relic agents depend on an HTTP header set by the front-end web server (such as Apache or Nginx) or load balancer (such as HAProxy or F5). You can configure these front-end servers to set the timestamp in the HTTP header that represents when the request first entered your production infrastructure. Tip Set this header as soon after the request enters your infrastructure as possible so that you are less likely to miss performance problems in your infrastructure that occur before the header is set. Most New Relic agents will interpret an X-Queue-Start or X-Request-Start header and use it to calculate Request Queuing. The agents treat these headers identically. Include a value in the format t=MICROSECONDS_SINCE_EPOCH where MICROSECONDS_SINCE_EPOCH is an integer value of the number of microseconds that have elapsed since the beginning of the Unix epoch (for example, January 1, 1970). Nearly any front-end HTTP server or load balancer can be configured to add this header. Additional details depend on your specific agent and server configuration. For more information, see the request queue configuration examples. C SDK The C SDK does not support request queuing. Go agent With the Go agent, set either header to record a metric for it. Java, Node.js, Python, Ruby agents The most recent versions of the Java, Node.js, Python, and Ruby agents provide more flexibility in the format of the X-Request-Start or X-Queue-Start header. These agents allow the timestamp to be submitted in seconds, milliseconds, or microseconds as an integer or floating point value. These agents also allow the leading t= in the header value to be omitted. Based on the order of magnitude, these agents automatically interpret the time unit as seconds, milliseconds, or microseconds. New Relic can do this reliably since a millisecond timestamp, interpreted as microseconds, would result in a queue time over 40 years. Python agent only: When using Apache/mod_wsgi 3.4 or higher, mod_wsgi will automatically insert an equivalent to the X-Queue-Start header into the WSGI environ dictionary for each request. This will mark the specific point in time where Apache first accepted the request. The value set by mod_wsgi will be picked up and used by the Python agent if no separate X-Request-Start or X-Queue-Start header has been manually configured into a web server's front end or in Apache itself. .NET agent The .NET agent does not require (and will ignore) any configuration of HTTP headers to calculate queue time. It works by instrumenting the IIS-queuing mechanism directly and reports queue time as the difference between when the HttpContext constructor executes and when the HttpApplication.BeginRequest event fires. Request queue time is only reported for .NET Framework applications hosted on IIS (for example: ASP.NET applications). It is not reported for ASP .NET Core applications (targeting .NET Core or Framework), nor for self-hosted OWIN applications. PHP agent The PHP agent only supports the X-Request-Start header. This identifies the timestamp in microseconds as an integer, with an optional t= in the header value. To ensure that the header is read properly, check your phpinfo() under the PHP Variables section, and verify that _SERVER[\"HTTP_X_REQUEST_START\"] exists and is in the expected format. If you are using Nginx, see Request queue server configuration examples for additional information on setting the header.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.97562,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>"
      },
      "id": "603eb8ba28ccbc4b1deba769"
    }
  ]
}