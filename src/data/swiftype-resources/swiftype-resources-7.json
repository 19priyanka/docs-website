{
  "/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2022-01-12T16:40:28Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.5306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2022-01-12T16:41:06Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.08081,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    },
    {
      "sections": [
        "Python runtime metrics",
        "CPU Usage",
        "Memory Usage",
        "Garbage Collection",
        "Important"
      ],
      "title": "Python runtime metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9ccca1055222837ebead1f8ec5e23926089ae6a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-runtime-metrics/",
      "published_at": "2022-01-12T16:42:23Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent records runtime metrics to allow you to analyze the performance of your Python processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU utilization, and also see time spent in different components of the CPU. The following CPU usage metrics are available: CPU Time: Track the amount of time being spent in different states of the CPU. This includes user (time running application code) and system (time spent in the operating system). This metric is represented as total elapsed time in seconds. CPU Utilization: Analyze the amount of processing resources being utilized over time by different components of the CPU. This includes the user component (for running application code) and system component (for running kernel code). This metric is reported as a percentage representing the time spent in the specified CPU component divided by total elapsed CPU time. Memory Usage You can monitor your system’s overall memory consumption and utilization by process and host. The following memory usage metrics are available: Total Physical Memory: Monitor the amount of total physical memory in megabytes being used by your system over time. This metric is also available for individual process IDs. Memory Utilization: Track memory utilization over time for your system and for individual processes. This metric is represented by the value of the total physical memory being used by your system (or a specific process) divided by the total amount of memory available. Garbage Collection Important Garbage collection profiling is available in Python agent version 6.2.0.156 and higher and is disabled by default in the agent. To enable it, check out our documentation here. The garbage collector finds unused data objects and reclaims that memory space so it can be used by another process. The Python agent provides the following garbage collection metrics: Object Count by Type: Gain insight into the most common object types being collected by the garbage collector by viewing their associated collection counts. You can customize the maximum number of object types you would like to see reported by this metric type by configuring the top_object_count_limit setting. Object Count by Generation: As collection occurs in each generation of the garbage collector, objects that survive are promoted into higher generations. This metric allows you to view the number of objects being stored in each of the garbage collector’s generations over time. Total Time by Generation: Analyze the amount of time the garbage collector is spending in each generation of collection. Garbage Collector Collections: The number of collections is influenced by the object threshold set for each generation. When the threshold is reached, a collection process will be triggered. Collections can also be manually triggered within application code with calls to gc.collect(). This metric reports the number of garbage collector sweeps that have happened in each generation over time. Garbage Collector Uncollectable: In some instances, the garbage collector may not be able to reach and free a certain object, deeming it uncollectable. This metric allows you to view the number of objects that were uncollectable by the garbage collector in each generation. Garbage Collector Collected: This metric reports the total number of objects that were collected by the garbage collector in each generation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.69763,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> runtime metrics",
        "sections": "<em>Python</em> runtime metrics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> records runtime metrics to allow you to analyze the performance of your <em>Python</em> processes and interpreter. This includes metrics related to CPU usage, memory usage, and garbage collection. CPU Usage With CPU runtime metrics, you can monitor CPU usage by examining user and system CPU"
      },
      "id": "617dbf9f28ccbcf0c97ffc13"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-graphQL": [
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.10988,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.08133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> API)",
        "sections": "background_task (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "923b7c4b9b48b55402bc7793ef3e12b0bdcfa8dc",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2022-01-12T11:33:43Z",
      "updated_at": "2022-01-12T11:33:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.analytic_event_data NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.custom_event_data NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED event_harvest_config.harvest_limits.span_event_data NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED event_harvest_config.harvest_limits.error_event_data NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Wildcarding (globbing) for function and class names is possible using patterns supported by the fnmatch module. Module paths are not supported by wildcards. Specify the patterns in the form module:function* or module:class.*. For example, if you want to add function tracing to all validation functions in the below file: my-app/common/utils.py def validate_credentials(): … def validate_status(): … def format_message(): … Copy Add the following line to the agent config file to include function tracing to all validation functions in my-app/common/utils.py by using wildcarding. my-app/newrelic.ini [newrelic] ... transaction_tracer.function_trace = common.utils:validate* Copy Important Wilcarding requires Python agent version 6.4.4.161 or higher. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Starting in Python agent version 7.0.0.166 or higher, distributed tracing is enabled by default. Enabling distributed tracing disables cross application tracing and has other effects on APM features. If migrating from cross application tracing, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Enables Distributed Tracing Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default false Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.74808,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> lets you change the default <em>agent</em> behavior <em>agent</em> using configuration options. The only required <em>Python</em> <em>agent</em> configuration setting is the license key. The license key identifies the account where the <em>agent</em> reports application data. Depending on how you are hosting your application"
      },
      "id": "617dc153196a67cf3df7bf56"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-message-queues": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2022-01-12T16:40:28Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.53058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2022-01-12T16:41:43Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.60493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2022-01-12T16:41:06Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.0808,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-runtime-metrics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2022-01-12T16:40:28Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.53058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2022-01-12T16:41:43Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.60493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2022-01-12T16:41:06Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.0808,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    }
  ],
  "/docs/apm/agents/python-agent/supported-features/python-tips-tricks": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "fb8f3d493aabba7397d45b7d05b619a3befcace1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2022-01-12T16:40:28Z",
      "updated_at": "2021-10-30T21:56:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add browser monitoring to your webpages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Python agent. To use the browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.53058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "617dbf7628ccbcf0c97ffbae"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "5875347c52a7fa3bdffe64e08978ddac3de438e7",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2022-01-12T16:41:43Z",
      "updated_at": "2021-10-23T18:33:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.60493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "617db7e1196a674544f7ca47"
    },
    {
      "sections": [
        "Optional manual browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags"
      ],
      "title": "Optional manual browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "9310f84f08e2c67a89e1f38cb4c99ec30a8ddca0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2022-01-12T16:41:06Z",
      "updated_at": "2021-10-23T18:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.0808,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "617dbf9fe7b9d245c9c04886"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/activate-application-warning-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.66632,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.109665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.081116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> API)",
        "sections": "background_task (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/emulating-legacy-server-side-parameter-configuration-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.66632,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.109665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.081116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> API)",
        "sections": "background_task (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/missing-information-when-using-ensurefuture-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.66626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.10956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.08101,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> API)",
        "sections": "background_task (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/no-data-appears-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.66626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.10956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.08101,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> API)",
        "sections": "background_task (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/python-agent-logging": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.66618,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.10945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.0809,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> API)",
        "sections": "background_task (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/testing-python-agent": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.66618,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.10945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.0809,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> API)",
        "sections": "background_task (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    }
  ],
  "/docs/apm/agents/python-agent/troubleshooting/troubleshooting-browser-instrumentation-python": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2022-01-12T11:00:09Z",
      "updated_at": "2022-01-08T05:18:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app: Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly: Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details: Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data: Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation: Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.6661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " in the APM UI within five minutes. If it does not, use these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.109344,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    },
    {
      "sections": [
        "background_task (Python agent API)",
        "Syntax",
        "Description",
        "callout.imporant",
        "Parameters",
        "Decorator and context manager parameters",
        "Wrapper parameters:",
        "Path-based parameters:",
        "Examples",
        "background_task decorator example",
        "BackgroundTask context manager example",
        "BackgroundTaskWrapper example"
      ],
      "title": "background_task (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "8deab76aa407b87237c4f0bd521b4bebc112f28a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/backgroundtask-python-agent-api/",
      "published_at": "2022-01-12T16:33:28Z",
      "updated_at": "2022-01-12T16:33:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This Python decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non-web activity like worker processes, job-based systems, and standalone scripts. Transactions marked as background tasks are displayed as non-web transactions in the APM UI and separated from web transactions. callout.imporant If a function isn't already instrumented, use function_trace() to create a function trace for that function within a background task. If a function using the background task decorator is called within the context of a web transaction, then the web transaction is marked as a background task. The measurement of the time taken begins when the original web transaction starts. If you cannot use the decorator, one of these call formats may be more useful: The context manager: If the tasks to be monitored will only be determined at runtime (and not import time), you can use the BackgroundTask context manager to directly wrap the execution of a block of code. (This is the context manager used by BackgroundTaskWrapper.) The wrapper: If you know in advance where the specific functions you want to track are, you can use the background_task decorator. But if you don't know all the functions that need to be traced (for example, if they're being looked up dynamically as part of a routing system), then you must use the BackgroundTaskWrapper to wrap the function at the time of registration or at the time of calling. The path-based wrapper: The path-based wrapper form is wrap_background_task. For more on the differences between and uses of these function forms, see Variable call formats. Parameters Decorator and context manager parameters newrelic.agent.background_task(application=None, name=None, group=None) Copy newrelic.agent.BackgroundTask(application=None, name=None, group=None) Copy Parameters for these calls: Parameter Description application Application instance Required. The application under which the data will be reported. Default is None. If left without a value, the application specified in the agent configuration (config file or environment variable) will be used. For more on generating an application object, see the application() method. The application, even if specified, can still be overridden if newrelic.app_name is defined in the WSGI application per request environ dictionary. name string Required. The name of the transaction. The default value is None. By default, the name will be the name of the function the decorator has been applied to but you can override this by supplying this name. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI to set the transaction type. If not supplied, the group defaults to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, we recommend you prefix it with Python/. Wrapper parameters: newrelic.agent.BackgroundTaskWrapper(wrapped, application=None, name=None, group=None) Copy BackgroundTaskWrapper takes the same parameters as the background_task decorator and this additional wrapped parameter: Parameter Description wrapped method Required. The method to be traced. Path-based parameters: newrelic.agent.wrap_background_task(module, object_path, application=None, name=None, group=None) Copy wrap_background_task takes the same parameters as the background_task decorator plus these additional parameters: Parameter Description module module or string Required. The module containing the non-web function/activity you are instrumenting. object_path string Required. The path to the module. Examples background_task decorator example Here's an example of using the background_task decorator: @newrelic.agent.background_task() def task(): ... Copy BackgroundTask context manager example An example of using BackgroundTask: application = newrelic.agent.application() name = newrelic.agent.callable_name(task) with BackgroundTask(application, name): task() Copy Here's another example with more parameters: application = newrelic.agent.register_application(timeout=10.0) def execute_task(task_name): with newrelic.agent.BackgroundTask(application, name=task_name, group='Task'): ... Copy BackgroundTaskWrapper example An example of using the BackgroundTaskWrapper: task = newrelic.agent.BackgroundTaskWrapper(get_next_task()) result = task(*args, **kwargs) Copy In this example, if this call was made in a web transaction being monitored by an agent, the call will reclassify the web transaction as a background task. If, however, the call was made in a background thread or coroutine, then it would start the recording of a fresh background task transaction that tracks what occurs until the call returns.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.080795,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "background_task (<em>Python</em> <em>agent</em> API)",
        "sections": "background_task (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.background_task(application=None, name=None, group=None) Copy Used to instrument a background task or other non-web transaction. Description This <em>Python</em> decorator can be used to instrument background tasks or other non-web transactions. This is typically used to instrument non"
      },
      "id": "617eaa07196a67d8b0f7c809"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-ajp-wsgi-server": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49153,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-cherrypy-web-framework": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49153,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework": [
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "778ab8d9a1029be25202cc21badc018a452dabab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2022-01-12T16:26:44Z",
      "updated_at": "2021-10-23T23:29:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.95268,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Asyncpg</em>",
        "sections": "Using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips"
      },
      "id": "617db5ffe7b9d221e3c04b9d"
    },
    {
      "sections": [
        "Django ASGI Mode",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Django ASGI Mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "ea90750938d5d871627358abb21716bed420515f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/async-instrumentation/django-asgi-mode/",
      "published_at": "2022-01-12T16:26:45Z",
      "updated_at": "2021-10-23T23:28:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 6.0.0.154 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.0493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our <em>Python</em>"
      },
      "id": "617db5fd28ccbc8e987fe5ab"
    },
    {
      "sections": [
        "profile_trace (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Parameters for decorator",
        "Wrapper parameters",
        "Examples",
        "profile_trace example",
        "Wrapper example"
      ],
      "title": "profile_trace (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "157143716747fd4252f1d409b4c2b578d51796ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/python-agent-api/profiletrace-python-agent-api/",
      "published_at": "2022-01-12T16:37:54Z",
      "updated_at": "2022-01-12T16:37:54Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported with profile_trace will appear on the APM Databases page. profile_trace returns a partial of ProfileTraceWrapper that can be used as a decorator for a function to time calls to your profiler. If you cannot use the decorator in your application, you can use the following call format: The wrapper form is ProfileTraceWrapper. It can be used to return a wrapped function without the use of a decorator. For an explanation of the uses of these different call formats, see Different call formats. See Examples for call examples. Important Functions are only instrumented in the scope of the specified function call. If a funtion function_a is traced and it calls function_b this will only be instrumented within the scope of function_a and not anywhere else where function_b is called but not traced. Parameters Parameters for decorator newrelic.agent.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy This call includes these parameters: Parameter Description name string Optional. The function name. If not set, defaults to the captured name of the function. group string Optional. The group represents the naming structure for the name parameter. This is used in the UI for segregating the transaction types. If not supplied, the group will default to Function in expectation that the name is of the form module:class.function or module:function and represents the name of the function being executed. If you are creating a custom group, it's recommended you prefix it with Python/. label string Optional. Adds a callout-style flag to the segment in a transaction trace. Default is None. params dict Optional. Custom parameters to add to the segment in transaction traces. depth dict Optional. Parameter for maximum function trace depth. Default is 3. Wrapper parameters newrelic.agent.ProfileTraceWrapper(wrapped, name=None, group=None, label=None, params=None, depth=3) Copy Parameters for the wrapper include all parameters for profile_trace and a wrapped parameter: Parameter Description wrapped function Required. The function being wrapped. Examples profile_trace example An example of using the profile_trace decorator: import newrelic.agent @newrelic.agent.profile_trace() def some_function(): ... Copy Wrapper example An example of using the ProfileTraceWrapper: import newrelic.agent def another_function(): wrapped_function = newrelic.agent.ProfileTraceWrapper(some_function) ... wrapped_function() ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.10924,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "sections": "profile_trace (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.profile_trace(name=None, group=None, label=None, params=None, depth=3) Copy Adds additional attributes to function trace names. Description profile_trace is used to add more detail to your transaction traces in the form of additional segments. Any calls reported"
      },
      "id": "61df03e2e7b9d21291b1d3ee"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-fastcgi-web-server": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49153,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-gunicorn-wsgi-web-server": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49153,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-modwsgi-web-server": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49153,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-paste": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49152,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-scgi-web-server": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49152,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49152,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "a9cac310a7aaf4536f0e478a3f3ff2ee59a5fad8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2022-01-12T11:04:17Z",
      "updated_at": "2021-10-23T18:38:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.16322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "617db84ee7b9d2cd27c05cd0"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-uwsgi-web-server": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49152,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-waitress-web-server": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49152,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "8c83b4375bc1e76fad75da67cef49fa9c18077c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-11-26T05:57:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.04794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-program uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>"
      },
      "id": "617e964728ccbc5e0a7fe6ee"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49152,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "a9cac310a7aaf4536f0e478a3f3ff2ee59a5fad8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2022-01-12T11:04:17Z",
      "updated_at": "2021-10-23T18:38:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.16322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "617db84ee7b9d2cd27c05cd0"
    }
  ],
  "/docs/apm/agents/python-agent/web-frameworks-servers/uvicorn": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "850b6186842afba4b9ebf68e3356c892e64a3bbe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2022-01-12T16:47:15Z",
      "updated_at": "2021-10-31T13:11:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.68883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "617e961a28ccbc977c7fe4fe"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "ff067441e6b5e365fd8be56a85e6f17202bd204c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2022-01-12T16:46:25Z",
      "updated_at": "2021-10-30T15:55:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49152,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "617d6b0be7b9d242fdc042db"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "a9cac310a7aaf4536f0e478a3f3ff2ee59a5fad8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2022-01-12T11:04:17Z",
      "updated_at": "2021-10-23T18:38:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.16321,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "617db84ee7b9d2cd27c05cd0"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/guide-using-ruby-agent-api": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 234.02414,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.89175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s <em>API</em> to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.88408,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 234.02393,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.89157,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s <em>API</em> to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Important",
        "Tracing blocks of code",
        "Naming transactions",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers Important This procedure does not work for Rails version 7 or higher. For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.8839,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 234.02393,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.89157,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s <em>API</em> to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.8839,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 234.02374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.8837,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Important",
        "Tracing blocks of code",
        "Naming transactions",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers Important This procedure does not work for Rails version 7 or higher. For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.8837,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic": [
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.89137,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s <em>API</em> to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.8837,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Important",
        "Tracing blocks of code",
        "Naming transactions",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers Important This procedure does not work for Rails version 7 or higher. For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.8837,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    }
  ],
  "/docs/apm/agents/ruby-agent/api-guides/third-party-instrumentation": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 234.02435,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.89119,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s <em>API</em> to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.88351,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    }
  ],
  "/docs/apm/agents/ruby-agent/attributes/enable-disable-attributes-ruby": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43317,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06708,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.37308,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/attributes/ruby-agent-attributes": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43254,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06648,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.372986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/attributes/ruby-attribute-examples": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43254,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06648,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.372986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/background-jobs/delayedjob-instrumentation": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.9647,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Background</em> <em>jobs</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " <em>Background</em> <em>jobs</em> supported by the New Relic <em>Ruby</em> <em>agent</em> include: <em>Background</em> <em>jobs</em> Supported Deprecated Delayed_<em>Job</em> 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Monitor Ruby background processes",
        "Supported frameworks",
        "Important",
        "Monitor custom background jobs",
        "Monitor custom background methods",
        "Monitor short-lived processes",
        "Configure newrelic.yml for background processes",
        "Non-Rails background application",
        "Background job environment monitored by New Relic",
        "Report to an alternate application name",
        "Ensure the agent starts",
        "Non-Rails standalone script",
        "Background tasks with daemons gem",
        "Monitor scripts"
      ],
      "title": "Monitor Ruby background processes",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "7eb4c19c475cc494df54778fe47379d15f827e65",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/background-jobs/monitor-ruby-background-processes/",
      "published_at": "2022-01-12T11:05:24Z",
      "updated_at": "2021-10-31T13:06:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Ruby agent automatically instruments several common background job frameworks. You can also customize it to trace any background tasks. Data from background jobs appears in the Transactions page in APM as Non-web transactions. Supported frameworks The following background job frameworks are supported by default in recent versions of the Ruby agent: Resque instrumentation (Ruby agent 3.4.0) Sidekiq instrumentation (Ruby agent 3.6.0) Delayed::Job instrumentation (Ruby agent 2.10) Important JRuby users may see issues with CPU metrics. If you are using these frameworks, monitoring background jobs typically doesn't require additional configuration. Monitor custom background jobs You can instrument custom background jobs to appear in the APM Transactions page as Non-web transactions. To monitor Non-web transactions while using an unsupported framework, you must add custom instrumentation. As an example, a background job periodically runs a task called SalesOrganization#find_new_leads. Add the ControllerInstrumentation module. Use the add_transaction_tracer directive below the method definition Add :category => :task to tell the agent this trace is a Non-web transaction. require 'newrelic_rpm' class SalesOrganization include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation def find_new_leads ... end add_transaction_tracer :find_new_leads, :category => :task end Copy You can pass a string to the :category, but values will only appear on the APM Transactions page if the string begins with OtherTransaction/. Monitor custom background methods Using the Ruby agent API, you can designate specific methods to trace the Non-web transactions. This gathers traces for slow running jobs and associates captured errors to transactions. To instrument a class method, use the class singleton. As an example, a background job periodically runs a task called SalesOrganization#find_new_leads. Add the ControllerInstrumentation module below the method definition. Use the add_transaction_tracer directive Add :category => :task to tell the agent this trace is a Non-web transaction. require 'newrelic_rpm' class SalesOrganization def self.find_new_leads ... end class << self include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation add_transaction_tracer :find_new_leads, :category => :task end end Copy For more information, see Ruby custom metrics. Monitor short-lived processes Make sure the process isn't running before the agent connects to the back-end servers. To do so, make the Ruby agent synchronously connect to New Relic, rather than the default asynchronous behavior. Use manual_start and pass in the :sync_startup => true option: require 'new_relic/agent' NewRelic::Agent.manual_start(:sync_startup => true) Copy Using require 'new_relic/agent' will require the agent's code, and it will make sure the agent doesn't run until you manually start it. If the process is shorter than the agent harvest cycle, you need to manually shut down the agent with ::NewRelic::Agents.shutdown to ensure all queued data is sent. Configure newrelic.yml for background processes Configuring your newrelic.yml depends on the context of the background application. Non-Rails background application If your background app is non-Rails application already running the Ruby agent, copy your newrelic.yml file to the directory where you launch the background job or in the config subdirectory. Make sure it includes your license key. Background jobs that do not run in a Rails context will examine the NEW_RELIC_ENV environment variable to determine which section of the configuration file to read, falling back to the RUBY_ENV, RAILS_ENV, and RACK_ENV environment variables in sequence, and finally defaulting to development if none of these environment variables are set. Background job environment monitored by New Relic If your background job runs in the context of an existing web application that is already monitored with New Relic, the Ruby agent will automatically pick up your existing newrelic.yml file. Background jobs that boot your application's Rails environment will use the RAILS_ENV environment variable in order to determine which section of the newrelic.yml file to read. Report to an alternate application name You can make jobs that run in the context of an existing New Relic web application appear under a different application name in the APM UI. Begin before newrelic_rpm gets required by your worker code. Set the NEW_RELIC_APP_NAME environment variable to the application name to use for your background jobs when starting your background worker processes. This will override the app_name setting in your newrelic.yml. $ NEW_RELIC_APP_NAME=\"My Background Jobs\" ./bin/my_background_worker.rb Copy Ensure the agent starts The Ruby agent will automatically start in most cases as soon as you require 'newrelic_rpm', unless the agent detects a blacklisted executable name, rake task name, or constant. This prevents it from starting during common rake tasks and interactive console sessions. Non-Rails standalone script Standalone scripts running without Rails generally will start the agent as soon as they require 'newrelic_rpm'. If you have a script that forks or daemonizes before it begins its main work, you may want to defer this require call until after the initial setup finishes. Background tasks with daemons gem If you use the daemons gem to start background tasks, the Ruby agent may fail to start and also not emit any logging. This happens because the daemons gem changes the working directory to / before executing your background code. The agent then attempts to resolve the paths to its configuration file and log file relative to the current working directory of the host process. To allow the agent to start in this situation, set environment variables with the locations of the agent configuration file and log file; for example: ENV['NRCONFIG'] ||= File.dirname(__FILE__) + '/../../config/newrelic.yml' ENV['NEW_RELIC_LOG'] ||= File.dirname(__FILE__) + '/../../log/newrelic_agent.log' Copy For more information, see the documentation about controlling agent startup Monitor scripts The agent startup instructions apply when running background jobs in a daemon. If a script executes a single background task and exits, manually shut down the agent with ::NewRelic::Agents.shutdown when the script finishes. This ensures the New Relic collector receives the data. For example: require 'newrelic_rpm' class SalesOrganization include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation def find_new_leads ... end add_transaction_tracer :find_new_leads, :category => :task end SalesOrganization.new.find_new_leads ::NewRelic::Agent.shutdown Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.88727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor <em>Ruby</em> <em>background</em> processes",
        "sections": "Monitor custom <em>background</em> <em>jobs</em>",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "Our <em>Ruby</em> <em>agent</em> automatically instruments several common <em>background</em> <em>job</em> frameworks. You can also customize it to trace any <em>background</em> tasks. Data from <em>background</em> <em>jobs</em> appears in the Transactions page in APM as Non-web transactions. Supported frameworks The following <em>background</em> <em>job</em> frameworks"
      },
      "id": "617e94c328ccbc8d457ffe0b"
    },
    {
      "sections": [
        "Sidekiq instrumentation",
        "Capture job arguments",
        "Tip",
        "Troubleshoot Sidekiq jobs"
      ],
      "title": "Sidekiq instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "8fa23864e2e950de80a1d1234a2bf0b257bb8d41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/background-jobs/sidekiq-instrumentation/",
      "published_at": "2022-01-12T11:19:20Z",
      "updated_at": "2021-10-24T00:17:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In addition to your web application itself, the New Relic Ruby agent (version 3.6.0 or higher) can automatically instrument your Sidekiq jobs. You do not need to include an instrumentation library in your worker. The Ruby agent will instrument the perform method on all Sidekiq workers. Data for background jobs appears in APM's Transactions page, complete with transaction traces and errors, by selecting Non-web transactions as the transaction type. Capture job arguments Starting with Ruby agent version 3.6.9, you can optionally configure the Ruby agent to capture Sidekiq job arguments in transaction traces and traced errors. This can be especially useful in attempting to reproduce failed jobs. By default this feature is off in case your job arguments contain sensitive information. To enable this feature, edit your newrelic.yml as appropriate for your agent version: newrelic_rpm 3.12.0 or higher: attributes.include: job.sidekiq.args.* newrelic_rpm 3.6.9 to 3.11.x: sidekiq.capture_params: true Tip This feature is distinct from the generic capture_params top-level setting, which controls whether HTTP request parameters are captured on transaction traces and traced errors for web requests. You can configure these two settings independently. Troubleshoot Sidekiq jobs If it appears that jobs are not being monitored, review your newrelic_agent.log file generated when the worker starts. It should indicate whether the agent detects Sidekiq and communicates with the server. If you need support, note the exact command line that you used to start Sidekiq.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.37003,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Troubleshoot Sidekiq <em>jobs</em>",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": " for <em>background</em> <em>jobs</em> appears in APM&#x27;s Transactions page, complete with transaction traces and errors, by selecting Non-web transactions as the transaction type. Capture <em>job</em> arguments Starting with <em>Ruby</em> <em>agent</em> version 3.6.9, you can optionally configure the <em>Ruby</em> <em>agent</em> to capture Sidekiq <em>job</em> arguments"
      },
      "id": "617e94f5e7b9d29455c03874"
    }
  ],
  "/docs/apm/agents/ruby-agent/background-jobs/monitor-ruby-background-processes": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.9647,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Background</em> <em>jobs</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " <em>Background</em> <em>jobs</em> supported by the New Relic <em>Ruby</em> <em>agent</em> include: <em>Background</em> <em>jobs</em> Supported Deprecated Delayed_<em>Job</em> 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Delayed::Job instrumentation",
        "Viewing background tasks",
        "Adding Custom Attributes",
        "Troubleshooting"
      ],
      "title": "Delayed::Job instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "43a9224ec5727f28cd2f12c5877ac98b828f89b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/background-jobs/delayedjob-instrumentation/",
      "published_at": "2022-01-12T11:05:24Z",
      "updated_at": "2021-11-26T06:00:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for the Delayed::Job library. No additional instrumentation is required. Viewing background tasks As long as the New Relic Ruby agent's gem or plugin is loaded before the Delayed::Job worker starts, all tasks will be monitored with the same level of detail as controller actions. To view the actions themselves: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. From the APM Transactions page, select Other transactions. Adding Custom Attributes If you want to add custom attributes to your Delayed::Job transactions, you can write a Delayed::Job plugin through a lifecycle hook and add those attributes to the transaction for each executed job. Create a plugin with the following structure: module NewRelicInstrumenter class DelayedJobPlugin < Delayed::Plugin callbacks do |lifecycle| lifecycle.around(:invoke_job) do |job, *args, &block| # Forward the call to the next callback in the callback chain ::NewRelic::Agent.add_custom_attributes( { # Any custom attributes go here -- from here you can access info # about the job like run_at, created_at, etc my_custom_attribute: \"my_custom_attribute_value\" } ) block.call(job, *args) end end end end Copy Add the plugin to Delayed::Job in the initializer in the config/initializers/delayed_job.rb file: require \"new_relic_instrumenter\" Delayed::Worker.plugins << NewRelicInstrumenter::DelayedJobPlugin Copy Troubleshooting The Ruby agent depends on being able to identify that it is running under Delayed::Job in order to correctly set up instrumentation. To do this, it examines the script name (the $0 variable in Ruby) to see whether it ends with delayed_job. If you have renamed the script you use to start your delayed_job workers to something else, or if you have a custom script with a different name, you will need to explicitly tell the agent that you are using Delayed::Job by setting the NEW_RELIC_DISPATCHER environment variable to delayed_job when starting your Delayed::Job workers. For example: NEW_RELIC_DISPATCHER=delayed_job bundle exec ./script/my_custom_script Copy If it appears that jobs are not being monitored, review the newrelic_agent.log file generated when the worker starts up. It should indicate whether the agent detects Delayed and communicates with the server. If you do not find a log, or if you still cannot determine why the jobs do not appear, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.91455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delayed::<em>Job</em> instrumentation",
        "sections": "Delayed::<em>Job</em> instrumentation",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for the Delayed::<em>Job</em> library. No additional instrumentation is required. Viewing <em>background</em> tasks As long as the New Relic <em>Ruby</em> <em>agent</em>&#x27;s gem or plugin is loaded before the Delayed::<em>Job</em> worker starts, all tasks will be monitored with the same level"
      },
      "id": "617e996464441f20c4fbe91d"
    },
    {
      "sections": [
        "Sidekiq instrumentation",
        "Capture job arguments",
        "Tip",
        "Troubleshoot Sidekiq jobs"
      ],
      "title": "Sidekiq instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "8fa23864e2e950de80a1d1234a2bf0b257bb8d41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/background-jobs/sidekiq-instrumentation/",
      "published_at": "2022-01-12T11:19:20Z",
      "updated_at": "2021-10-24T00:17:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In addition to your web application itself, the New Relic Ruby agent (version 3.6.0 or higher) can automatically instrument your Sidekiq jobs. You do not need to include an instrumentation library in your worker. The Ruby agent will instrument the perform method on all Sidekiq workers. Data for background jobs appears in APM's Transactions page, complete with transaction traces and errors, by selecting Non-web transactions as the transaction type. Capture job arguments Starting with Ruby agent version 3.6.9, you can optionally configure the Ruby agent to capture Sidekiq job arguments in transaction traces and traced errors. This can be especially useful in attempting to reproduce failed jobs. By default this feature is off in case your job arguments contain sensitive information. To enable this feature, edit your newrelic.yml as appropriate for your agent version: newrelic_rpm 3.12.0 or higher: attributes.include: job.sidekiq.args.* newrelic_rpm 3.6.9 to 3.11.x: sidekiq.capture_params: true Tip This feature is distinct from the generic capture_params top-level setting, which controls whether HTTP request parameters are captured on transaction traces and traced errors for web requests. You can configure these two settings independently. Troubleshoot Sidekiq jobs If it appears that jobs are not being monitored, review your newrelic_agent.log file generated when the worker starts. It should indicate whether the agent detects Sidekiq and communicates with the server. If you need support, note the exact command line that you used to start Sidekiq.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.37003,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Troubleshoot Sidekiq <em>jobs</em>",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": " for <em>background</em> <em>jobs</em> appears in APM&#x27;s Transactions page, complete with transaction traces and errors, by selecting Non-web transactions as the transaction type. Capture <em>job</em> arguments Starting with <em>Ruby</em> <em>agent</em> version 3.6.9, you can optionally configure the <em>Ruby</em> <em>agent</em> to capture Sidekiq <em>job</em> arguments"
      },
      "id": "617e94f5e7b9d29455c03874"
    }
  ],
  "/docs/apm/agents/ruby-agent/background-jobs/rake-instrumentation": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.9647,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Background</em> <em>jobs</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " <em>Background</em> <em>jobs</em> supported by the New Relic <em>Ruby</em> <em>agent</em> include: <em>Background</em> <em>jobs</em> Supported Deprecated Delayed_<em>Job</em> 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Delayed::Job instrumentation",
        "Viewing background tasks",
        "Adding Custom Attributes",
        "Troubleshooting"
      ],
      "title": "Delayed::Job instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "43a9224ec5727f28cd2f12c5877ac98b828f89b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/background-jobs/delayedjob-instrumentation/",
      "published_at": "2022-01-12T11:05:24Z",
      "updated_at": "2021-11-26T06:00:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for the Delayed::Job library. No additional instrumentation is required. Viewing background tasks As long as the New Relic Ruby agent's gem or plugin is loaded before the Delayed::Job worker starts, all tasks will be monitored with the same level of detail as controller actions. To view the actions themselves: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. From the APM Transactions page, select Other transactions. Adding Custom Attributes If you want to add custom attributes to your Delayed::Job transactions, you can write a Delayed::Job plugin through a lifecycle hook and add those attributes to the transaction for each executed job. Create a plugin with the following structure: module NewRelicInstrumenter class DelayedJobPlugin < Delayed::Plugin callbacks do |lifecycle| lifecycle.around(:invoke_job) do |job, *args, &block| # Forward the call to the next callback in the callback chain ::NewRelic::Agent.add_custom_attributes( { # Any custom attributes go here -- from here you can access info # about the job like run_at, created_at, etc my_custom_attribute: \"my_custom_attribute_value\" } ) block.call(job, *args) end end end end Copy Add the plugin to Delayed::Job in the initializer in the config/initializers/delayed_job.rb file: require \"new_relic_instrumenter\" Delayed::Worker.plugins << NewRelicInstrumenter::DelayedJobPlugin Copy Troubleshooting The Ruby agent depends on being able to identify that it is running under Delayed::Job in order to correctly set up instrumentation. To do this, it examines the script name (the $0 variable in Ruby) to see whether it ends with delayed_job. If you have renamed the script you use to start your delayed_job workers to something else, or if you have a custom script with a different name, you will need to explicitly tell the agent that you are using Delayed::Job by setting the NEW_RELIC_DISPATCHER environment variable to delayed_job when starting your Delayed::Job workers. For example: NEW_RELIC_DISPATCHER=delayed_job bundle exec ./script/my_custom_script Copy If it appears that jobs are not being monitored, review the newrelic_agent.log file generated when the worker starts up. It should indicate whether the agent detects Delayed and communicates with the server. If you do not find a log, or if you still cannot determine why the jobs do not appear, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.91455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delayed::<em>Job</em> instrumentation",
        "sections": "Delayed::<em>Job</em> instrumentation",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for the Delayed::<em>Job</em> library. No additional instrumentation is required. Viewing <em>background</em> tasks As long as the New Relic <em>Ruby</em> <em>agent</em>&#x27;s gem or plugin is loaded before the Delayed::<em>Job</em> worker starts, all tasks will be monitored with the same level"
      },
      "id": "617e996464441f20c4fbe91d"
    },
    {
      "sections": [
        "Monitor Ruby background processes",
        "Supported frameworks",
        "Important",
        "Monitor custom background jobs",
        "Monitor custom background methods",
        "Monitor short-lived processes",
        "Configure newrelic.yml for background processes",
        "Non-Rails background application",
        "Background job environment monitored by New Relic",
        "Report to an alternate application name",
        "Ensure the agent starts",
        "Non-Rails standalone script",
        "Background tasks with daemons gem",
        "Monitor scripts"
      ],
      "title": "Monitor Ruby background processes",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "7eb4c19c475cc494df54778fe47379d15f827e65",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/background-jobs/monitor-ruby-background-processes/",
      "published_at": "2022-01-12T11:05:24Z",
      "updated_at": "2021-10-31T13:06:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Ruby agent automatically instruments several common background job frameworks. You can also customize it to trace any background tasks. Data from background jobs appears in the Transactions page in APM as Non-web transactions. Supported frameworks The following background job frameworks are supported by default in recent versions of the Ruby agent: Resque instrumentation (Ruby agent 3.4.0) Sidekiq instrumentation (Ruby agent 3.6.0) Delayed::Job instrumentation (Ruby agent 2.10) Important JRuby users may see issues with CPU metrics. If you are using these frameworks, monitoring background jobs typically doesn't require additional configuration. Monitor custom background jobs You can instrument custom background jobs to appear in the APM Transactions page as Non-web transactions. To monitor Non-web transactions while using an unsupported framework, you must add custom instrumentation. As an example, a background job periodically runs a task called SalesOrganization#find_new_leads. Add the ControllerInstrumentation module. Use the add_transaction_tracer directive below the method definition Add :category => :task to tell the agent this trace is a Non-web transaction. require 'newrelic_rpm' class SalesOrganization include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation def find_new_leads ... end add_transaction_tracer :find_new_leads, :category => :task end Copy You can pass a string to the :category, but values will only appear on the APM Transactions page if the string begins with OtherTransaction/. Monitor custom background methods Using the Ruby agent API, you can designate specific methods to trace the Non-web transactions. This gathers traces for slow running jobs and associates captured errors to transactions. To instrument a class method, use the class singleton. As an example, a background job periodically runs a task called SalesOrganization#find_new_leads. Add the ControllerInstrumentation module below the method definition. Use the add_transaction_tracer directive Add :category => :task to tell the agent this trace is a Non-web transaction. require 'newrelic_rpm' class SalesOrganization def self.find_new_leads ... end class << self include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation add_transaction_tracer :find_new_leads, :category => :task end end Copy For more information, see Ruby custom metrics. Monitor short-lived processes Make sure the process isn't running before the agent connects to the back-end servers. To do so, make the Ruby agent synchronously connect to New Relic, rather than the default asynchronous behavior. Use manual_start and pass in the :sync_startup => true option: require 'new_relic/agent' NewRelic::Agent.manual_start(:sync_startup => true) Copy Using require 'new_relic/agent' will require the agent's code, and it will make sure the agent doesn't run until you manually start it. If the process is shorter than the agent harvest cycle, you need to manually shut down the agent with ::NewRelic::Agents.shutdown to ensure all queued data is sent. Configure newrelic.yml for background processes Configuring your newrelic.yml depends on the context of the background application. Non-Rails background application If your background app is non-Rails application already running the Ruby agent, copy your newrelic.yml file to the directory where you launch the background job or in the config subdirectory. Make sure it includes your license key. Background jobs that do not run in a Rails context will examine the NEW_RELIC_ENV environment variable to determine which section of the configuration file to read, falling back to the RUBY_ENV, RAILS_ENV, and RACK_ENV environment variables in sequence, and finally defaulting to development if none of these environment variables are set. Background job environment monitored by New Relic If your background job runs in the context of an existing web application that is already monitored with New Relic, the Ruby agent will automatically pick up your existing newrelic.yml file. Background jobs that boot your application's Rails environment will use the RAILS_ENV environment variable in order to determine which section of the newrelic.yml file to read. Report to an alternate application name You can make jobs that run in the context of an existing New Relic web application appear under a different application name in the APM UI. Begin before newrelic_rpm gets required by your worker code. Set the NEW_RELIC_APP_NAME environment variable to the application name to use for your background jobs when starting your background worker processes. This will override the app_name setting in your newrelic.yml. $ NEW_RELIC_APP_NAME=\"My Background Jobs\" ./bin/my_background_worker.rb Copy Ensure the agent starts The Ruby agent will automatically start in most cases as soon as you require 'newrelic_rpm', unless the agent detects a blacklisted executable name, rake task name, or constant. This prevents it from starting during common rake tasks and interactive console sessions. Non-Rails standalone script Standalone scripts running without Rails generally will start the agent as soon as they require 'newrelic_rpm'. If you have a script that forks or daemonizes before it begins its main work, you may want to defer this require call until after the initial setup finishes. Background tasks with daemons gem If you use the daemons gem to start background tasks, the Ruby agent may fail to start and also not emit any logging. This happens because the daemons gem changes the working directory to / before executing your background code. The agent then attempts to resolve the paths to its configuration file and log file relative to the current working directory of the host process. To allow the agent to start in this situation, set environment variables with the locations of the agent configuration file and log file; for example: ENV['NRCONFIG'] ||= File.dirname(__FILE__) + '/../../config/newrelic.yml' ENV['NEW_RELIC_LOG'] ||= File.dirname(__FILE__) + '/../../log/newrelic_agent.log' Copy For more information, see the documentation about controlling agent startup Monitor scripts The agent startup instructions apply when running background jobs in a daemon. If a script executes a single background task and exits, manually shut down the agent with ::NewRelic::Agents.shutdown when the script finishes. This ensures the New Relic collector receives the data. For example: require 'newrelic_rpm' class SalesOrganization include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation def find_new_leads ... end add_transaction_tracer :find_new_leads, :category => :task end SalesOrganization.new.find_new_leads ::NewRelic::Agent.shutdown Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.88727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor <em>Ruby</em> <em>background</em> processes",
        "sections": "Monitor custom <em>background</em> <em>jobs</em>",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "Our <em>Ruby</em> <em>agent</em> automatically instruments several common <em>background</em> <em>job</em> frameworks. You can also customize it to trace any <em>background</em> tasks. Data from <em>background</em> <em>jobs</em> appears in the Transactions page in APM as Non-web transactions. Supported frameworks The following <em>background</em> <em>job</em> frameworks"
      },
      "id": "617e94c328ccbc8d457ffe0b"
    }
  ],
  "/docs/apm/agents/ruby-agent/background-jobs/resque-instrumentation": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.9645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Background</em> <em>jobs</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " <em>Background</em> <em>jobs</em> supported by the New Relic <em>Ruby</em> <em>agent</em> include: <em>Background</em> <em>jobs</em> Supported Deprecated Delayed_<em>Job</em> 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Delayed::Job instrumentation",
        "Viewing background tasks",
        "Adding Custom Attributes",
        "Troubleshooting"
      ],
      "title": "Delayed::Job instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "43a9224ec5727f28cd2f12c5877ac98b828f89b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/background-jobs/delayedjob-instrumentation/",
      "published_at": "2022-01-12T11:05:24Z",
      "updated_at": "2021-11-26T06:00:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for the Delayed::Job library. No additional instrumentation is required. Viewing background tasks As long as the New Relic Ruby agent's gem or plugin is loaded before the Delayed::Job worker starts, all tasks will be monitored with the same level of detail as controller actions. To view the actions themselves: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. From the APM Transactions page, select Other transactions. Adding Custom Attributes If you want to add custom attributes to your Delayed::Job transactions, you can write a Delayed::Job plugin through a lifecycle hook and add those attributes to the transaction for each executed job. Create a plugin with the following structure: module NewRelicInstrumenter class DelayedJobPlugin < Delayed::Plugin callbacks do |lifecycle| lifecycle.around(:invoke_job) do |job, *args, &block| # Forward the call to the next callback in the callback chain ::NewRelic::Agent.add_custom_attributes( { # Any custom attributes go here -- from here you can access info # about the job like run_at, created_at, etc my_custom_attribute: \"my_custom_attribute_value\" } ) block.call(job, *args) end end end end Copy Add the plugin to Delayed::Job in the initializer in the config/initializers/delayed_job.rb file: require \"new_relic_instrumenter\" Delayed::Worker.plugins << NewRelicInstrumenter::DelayedJobPlugin Copy Troubleshooting The Ruby agent depends on being able to identify that it is running under Delayed::Job in order to correctly set up instrumentation. To do this, it examines the script name (the $0 variable in Ruby) to see whether it ends with delayed_job. If you have renamed the script you use to start your delayed_job workers to something else, or if you have a custom script with a different name, you will need to explicitly tell the agent that you are using Delayed::Job by setting the NEW_RELIC_DISPATCHER environment variable to delayed_job when starting your Delayed::Job workers. For example: NEW_RELIC_DISPATCHER=delayed_job bundle exec ./script/my_custom_script Copy If it appears that jobs are not being monitored, review the newrelic_agent.log file generated when the worker starts up. It should indicate whether the agent detects Delayed and communicates with the server. If you do not find a log, or if you still cannot determine why the jobs do not appear, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.91455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delayed::<em>Job</em> instrumentation",
        "sections": "Delayed::<em>Job</em> instrumentation",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for the Delayed::<em>Job</em> library. No additional instrumentation is required. Viewing <em>background</em> tasks As long as the New Relic <em>Ruby</em> <em>agent</em>&#x27;s gem or plugin is loaded before the Delayed::<em>Job</em> worker starts, all tasks will be monitored with the same level"
      },
      "id": "617e996464441f20c4fbe91d"
    },
    {
      "sections": [
        "Monitor Ruby background processes",
        "Supported frameworks",
        "Important",
        "Monitor custom background jobs",
        "Monitor custom background methods",
        "Monitor short-lived processes",
        "Configure newrelic.yml for background processes",
        "Non-Rails background application",
        "Background job environment monitored by New Relic",
        "Report to an alternate application name",
        "Ensure the agent starts",
        "Non-Rails standalone script",
        "Background tasks with daemons gem",
        "Monitor scripts"
      ],
      "title": "Monitor Ruby background processes",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "7eb4c19c475cc494df54778fe47379d15f827e65",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/background-jobs/monitor-ruby-background-processes/",
      "published_at": "2022-01-12T11:05:24Z",
      "updated_at": "2021-10-31T13:06:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Ruby agent automatically instruments several common background job frameworks. You can also customize it to trace any background tasks. Data from background jobs appears in the Transactions page in APM as Non-web transactions. Supported frameworks The following background job frameworks are supported by default in recent versions of the Ruby agent: Resque instrumentation (Ruby agent 3.4.0) Sidekiq instrumentation (Ruby agent 3.6.0) Delayed::Job instrumentation (Ruby agent 2.10) Important JRuby users may see issues with CPU metrics. If you are using these frameworks, monitoring background jobs typically doesn't require additional configuration. Monitor custom background jobs You can instrument custom background jobs to appear in the APM Transactions page as Non-web transactions. To monitor Non-web transactions while using an unsupported framework, you must add custom instrumentation. As an example, a background job periodically runs a task called SalesOrganization#find_new_leads. Add the ControllerInstrumentation module. Use the add_transaction_tracer directive below the method definition Add :category => :task to tell the agent this trace is a Non-web transaction. require 'newrelic_rpm' class SalesOrganization include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation def find_new_leads ... end add_transaction_tracer :find_new_leads, :category => :task end Copy You can pass a string to the :category, but values will only appear on the APM Transactions page if the string begins with OtherTransaction/. Monitor custom background methods Using the Ruby agent API, you can designate specific methods to trace the Non-web transactions. This gathers traces for slow running jobs and associates captured errors to transactions. To instrument a class method, use the class singleton. As an example, a background job periodically runs a task called SalesOrganization#find_new_leads. Add the ControllerInstrumentation module below the method definition. Use the add_transaction_tracer directive Add :category => :task to tell the agent this trace is a Non-web transaction. require 'newrelic_rpm' class SalesOrganization def self.find_new_leads ... end class << self include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation add_transaction_tracer :find_new_leads, :category => :task end end Copy For more information, see Ruby custom metrics. Monitor short-lived processes Make sure the process isn't running before the agent connects to the back-end servers. To do so, make the Ruby agent synchronously connect to New Relic, rather than the default asynchronous behavior. Use manual_start and pass in the :sync_startup => true option: require 'new_relic/agent' NewRelic::Agent.manual_start(:sync_startup => true) Copy Using require 'new_relic/agent' will require the agent's code, and it will make sure the agent doesn't run until you manually start it. If the process is shorter than the agent harvest cycle, you need to manually shut down the agent with ::NewRelic::Agents.shutdown to ensure all queued data is sent. Configure newrelic.yml for background processes Configuring your newrelic.yml depends on the context of the background application. Non-Rails background application If your background app is non-Rails application already running the Ruby agent, copy your newrelic.yml file to the directory where you launch the background job or in the config subdirectory. Make sure it includes your license key. Background jobs that do not run in a Rails context will examine the NEW_RELIC_ENV environment variable to determine which section of the configuration file to read, falling back to the RUBY_ENV, RAILS_ENV, and RACK_ENV environment variables in sequence, and finally defaulting to development if none of these environment variables are set. Background job environment monitored by New Relic If your background job runs in the context of an existing web application that is already monitored with New Relic, the Ruby agent will automatically pick up your existing newrelic.yml file. Background jobs that boot your application's Rails environment will use the RAILS_ENV environment variable in order to determine which section of the newrelic.yml file to read. Report to an alternate application name You can make jobs that run in the context of an existing New Relic web application appear under a different application name in the APM UI. Begin before newrelic_rpm gets required by your worker code. Set the NEW_RELIC_APP_NAME environment variable to the application name to use for your background jobs when starting your background worker processes. This will override the app_name setting in your newrelic.yml. $ NEW_RELIC_APP_NAME=\"My Background Jobs\" ./bin/my_background_worker.rb Copy Ensure the agent starts The Ruby agent will automatically start in most cases as soon as you require 'newrelic_rpm', unless the agent detects a blacklisted executable name, rake task name, or constant. This prevents it from starting during common rake tasks and interactive console sessions. Non-Rails standalone script Standalone scripts running without Rails generally will start the agent as soon as they require 'newrelic_rpm'. If you have a script that forks or daemonizes before it begins its main work, you may want to defer this require call until after the initial setup finishes. Background tasks with daemons gem If you use the daemons gem to start background tasks, the Ruby agent may fail to start and also not emit any logging. This happens because the daemons gem changes the working directory to / before executing your background code. The agent then attempts to resolve the paths to its configuration file and log file relative to the current working directory of the host process. To allow the agent to start in this situation, set environment variables with the locations of the agent configuration file and log file; for example: ENV['NRCONFIG'] ||= File.dirname(__FILE__) + '/../../config/newrelic.yml' ENV['NEW_RELIC_LOG'] ||= File.dirname(__FILE__) + '/../../log/newrelic_agent.log' Copy For more information, see the documentation about controlling agent startup Monitor scripts The agent startup instructions apply when running background jobs in a daemon. If a script executes a single background task and exits, manually shut down the agent with ::NewRelic::Agents.shutdown when the script finishes. This ensures the New Relic collector receives the data. For example: require 'newrelic_rpm' class SalesOrganization include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation def find_new_leads ... end add_transaction_tracer :find_new_leads, :category => :task end SalesOrganization.new.find_new_leads ::NewRelic::Agent.shutdown Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.88727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor <em>Ruby</em> <em>background</em> processes",
        "sections": "Monitor custom <em>background</em> <em>jobs</em>",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "Our <em>Ruby</em> <em>agent</em> automatically instruments several common <em>background</em> <em>job</em> frameworks. You can also customize it to trace any <em>background</em> tasks. Data from <em>background</em> <em>jobs</em> appears in the Transactions page in APM as Non-web transactions. Supported frameworks The following <em>background</em> <em>job</em> frameworks"
      },
      "id": "617e94c328ccbc8d457ffe0b"
    }
  ],
  "/docs/apm/agents/ruby-agent/background-jobs/sidekiq-instrumentation": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.9645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Background</em> <em>jobs</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " <em>Background</em> <em>jobs</em> supported by the New Relic <em>Ruby</em> <em>agent</em> include: <em>Background</em> <em>jobs</em> Supported Deprecated Delayed_<em>Job</em> 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Delayed::Job instrumentation",
        "Viewing background tasks",
        "Adding Custom Attributes",
        "Troubleshooting"
      ],
      "title": "Delayed::Job instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "43a9224ec5727f28cd2f12c5877ac98b828f89b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/background-jobs/delayedjob-instrumentation/",
      "published_at": "2022-01-12T11:05:24Z",
      "updated_at": "2021-11-26T06:00:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for the Delayed::Job library. No additional instrumentation is required. Viewing background tasks As long as the New Relic Ruby agent's gem or plugin is loaded before the Delayed::Job worker starts, all tasks will be monitored with the same level of detail as controller actions. To view the actions themselves: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. From the APM Transactions page, select Other transactions. Adding Custom Attributes If you want to add custom attributes to your Delayed::Job transactions, you can write a Delayed::Job plugin through a lifecycle hook and add those attributes to the transaction for each executed job. Create a plugin with the following structure: module NewRelicInstrumenter class DelayedJobPlugin < Delayed::Plugin callbacks do |lifecycle| lifecycle.around(:invoke_job) do |job, *args, &block| # Forward the call to the next callback in the callback chain ::NewRelic::Agent.add_custom_attributes( { # Any custom attributes go here -- from here you can access info # about the job like run_at, created_at, etc my_custom_attribute: \"my_custom_attribute_value\" } ) block.call(job, *args) end end end end Copy Add the plugin to Delayed::Job in the initializer in the config/initializers/delayed_job.rb file: require \"new_relic_instrumenter\" Delayed::Worker.plugins << NewRelicInstrumenter::DelayedJobPlugin Copy Troubleshooting The Ruby agent depends on being able to identify that it is running under Delayed::Job in order to correctly set up instrumentation. To do this, it examines the script name (the $0 variable in Ruby) to see whether it ends with delayed_job. If you have renamed the script you use to start your delayed_job workers to something else, or if you have a custom script with a different name, you will need to explicitly tell the agent that you are using Delayed::Job by setting the NEW_RELIC_DISPATCHER environment variable to delayed_job when starting your Delayed::Job workers. For example: NEW_RELIC_DISPATCHER=delayed_job bundle exec ./script/my_custom_script Copy If it appears that jobs are not being monitored, review the newrelic_agent.log file generated when the worker starts up. It should indicate whether the agent detects Delayed and communicates with the server. If you do not find a log, or if you still cannot determine why the jobs do not appear, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.91455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delayed::<em>Job</em> instrumentation",
        "sections": "Delayed::<em>Job</em> instrumentation",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for the Delayed::<em>Job</em> library. No additional instrumentation is required. Viewing <em>background</em> tasks As long as the New Relic <em>Ruby</em> <em>agent</em>&#x27;s gem or plugin is loaded before the Delayed::<em>Job</em> worker starts, all tasks will be monitored with the same level"
      },
      "id": "617e996464441f20c4fbe91d"
    },
    {
      "sections": [
        "Monitor Ruby background processes",
        "Supported frameworks",
        "Important",
        "Monitor custom background jobs",
        "Monitor custom background methods",
        "Monitor short-lived processes",
        "Configure newrelic.yml for background processes",
        "Non-Rails background application",
        "Background job environment monitored by New Relic",
        "Report to an alternate application name",
        "Ensure the agent starts",
        "Non-Rails standalone script",
        "Background tasks with daemons gem",
        "Monitor scripts"
      ],
      "title": "Monitor Ruby background processes",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Background jobs"
      ],
      "external_id": "7eb4c19c475cc494df54778fe47379d15f827e65",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/background-jobs/monitor-ruby-background-processes/",
      "published_at": "2022-01-12T11:05:24Z",
      "updated_at": "2021-10-31T13:06:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Ruby agent automatically instruments several common background job frameworks. You can also customize it to trace any background tasks. Data from background jobs appears in the Transactions page in APM as Non-web transactions. Supported frameworks The following background job frameworks are supported by default in recent versions of the Ruby agent: Resque instrumentation (Ruby agent 3.4.0) Sidekiq instrumentation (Ruby agent 3.6.0) Delayed::Job instrumentation (Ruby agent 2.10) Important JRuby users may see issues with CPU metrics. If you are using these frameworks, monitoring background jobs typically doesn't require additional configuration. Monitor custom background jobs You can instrument custom background jobs to appear in the APM Transactions page as Non-web transactions. To monitor Non-web transactions while using an unsupported framework, you must add custom instrumentation. As an example, a background job periodically runs a task called SalesOrganization#find_new_leads. Add the ControllerInstrumentation module. Use the add_transaction_tracer directive below the method definition Add :category => :task to tell the agent this trace is a Non-web transaction. require 'newrelic_rpm' class SalesOrganization include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation def find_new_leads ... end add_transaction_tracer :find_new_leads, :category => :task end Copy You can pass a string to the :category, but values will only appear on the APM Transactions page if the string begins with OtherTransaction/. Monitor custom background methods Using the Ruby agent API, you can designate specific methods to trace the Non-web transactions. This gathers traces for slow running jobs and associates captured errors to transactions. To instrument a class method, use the class singleton. As an example, a background job periodically runs a task called SalesOrganization#find_new_leads. Add the ControllerInstrumentation module below the method definition. Use the add_transaction_tracer directive Add :category => :task to tell the agent this trace is a Non-web transaction. require 'newrelic_rpm' class SalesOrganization def self.find_new_leads ... end class << self include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation add_transaction_tracer :find_new_leads, :category => :task end end Copy For more information, see Ruby custom metrics. Monitor short-lived processes Make sure the process isn't running before the agent connects to the back-end servers. To do so, make the Ruby agent synchronously connect to New Relic, rather than the default asynchronous behavior. Use manual_start and pass in the :sync_startup => true option: require 'new_relic/agent' NewRelic::Agent.manual_start(:sync_startup => true) Copy Using require 'new_relic/agent' will require the agent's code, and it will make sure the agent doesn't run until you manually start it. If the process is shorter than the agent harvest cycle, you need to manually shut down the agent with ::NewRelic::Agents.shutdown to ensure all queued data is sent. Configure newrelic.yml for background processes Configuring your newrelic.yml depends on the context of the background application. Non-Rails background application If your background app is non-Rails application already running the Ruby agent, copy your newrelic.yml file to the directory where you launch the background job or in the config subdirectory. Make sure it includes your license key. Background jobs that do not run in a Rails context will examine the NEW_RELIC_ENV environment variable to determine which section of the configuration file to read, falling back to the RUBY_ENV, RAILS_ENV, and RACK_ENV environment variables in sequence, and finally defaulting to development if none of these environment variables are set. Background job environment monitored by New Relic If your background job runs in the context of an existing web application that is already monitored with New Relic, the Ruby agent will automatically pick up your existing newrelic.yml file. Background jobs that boot your application's Rails environment will use the RAILS_ENV environment variable in order to determine which section of the newrelic.yml file to read. Report to an alternate application name You can make jobs that run in the context of an existing New Relic web application appear under a different application name in the APM UI. Begin before newrelic_rpm gets required by your worker code. Set the NEW_RELIC_APP_NAME environment variable to the application name to use for your background jobs when starting your background worker processes. This will override the app_name setting in your newrelic.yml. $ NEW_RELIC_APP_NAME=\"My Background Jobs\" ./bin/my_background_worker.rb Copy Ensure the agent starts The Ruby agent will automatically start in most cases as soon as you require 'newrelic_rpm', unless the agent detects a blacklisted executable name, rake task name, or constant. This prevents it from starting during common rake tasks and interactive console sessions. Non-Rails standalone script Standalone scripts running without Rails generally will start the agent as soon as they require 'newrelic_rpm'. If you have a script that forks or daemonizes before it begins its main work, you may want to defer this require call until after the initial setup finishes. Background tasks with daemons gem If you use the daemons gem to start background tasks, the Ruby agent may fail to start and also not emit any logging. This happens because the daemons gem changes the working directory to / before executing your background code. The agent then attempts to resolve the paths to its configuration file and log file relative to the current working directory of the host process. To allow the agent to start in this situation, set environment variables with the locations of the agent configuration file and log file; for example: ENV['NRCONFIG'] ||= File.dirname(__FILE__) + '/../../config/newrelic.yml' ENV['NEW_RELIC_LOG'] ||= File.dirname(__FILE__) + '/../../log/newrelic_agent.log' Copy For more information, see the documentation about controlling agent startup Monitor scripts The agent startup instructions apply when running background jobs in a daemon. If a script executes a single background task and exits, manually shut down the agent with ::NewRelic::Agents.shutdown when the script finishes. This ensures the New Relic collector receives the data. For example: require 'newrelic_rpm' class SalesOrganization include ::NewRelic::Agent::Instrumentation::ControllerInstrumentation def find_new_leads ... end add_transaction_tracer :find_new_leads, :category => :task end SalesOrganization.new.find_new_leads ::NewRelic::Agent.shutdown Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.88727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor <em>Ruby</em> <em>background</em> processes",
        "sections": "Monitor custom <em>background</em> <em>jobs</em>",
        "tags": "<em>Background</em> <em>jobs</em>",
        "body": "Our <em>Ruby</em> <em>agent</em> automatically instruments several common <em>background</em> <em>job</em> frameworks. You can also customize it to trace any <em>background</em> tasks. Data from <em>background</em> <em>jobs</em> appears in the Transactions page in APM as Non-web transactions. Supported frameworks The following <em>background</em> <em>job</em> frameworks"
      },
      "id": "617e94c328ccbc8d457ffe0b"
    }
  ],
  "/docs/apm/agents/ruby-agent/configuration/connect-hosts-your-account": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.82901,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.57605,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Ignoring transactions by URL with <em>configuration</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.70259,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For <em>configuration</em> options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    }
  ],
  "/docs/apm/agents/ruby-agent/configuration/custom-ssl-certificates-ruby": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.82901,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.57605,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Ignoring transactions by URL with <em>configuration</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.70259,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For <em>configuration</em> options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    }
  ],
  "/docs/apm/agents/ruby-agent/configuration/ruby-agent-configuration": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.82901,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.57605,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Ignoring transactions by URL with <em>configuration</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.70259,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For <em>configuration</em> options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/cross-application-tracing-ruby": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.37259,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/developer-mode": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.37259,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/garbage-collection": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43196,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06589,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.3725,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/http-client-tracing-ruby": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43196,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06589,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.3725,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/message-queues": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43185,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06577,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.37239,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/new-relic-browser-ruby-agent": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43185,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06577,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.37239,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/record-deployments-ruby-agent": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43173,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.3723,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/features/ruby-vm-measurements": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43173,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.3723,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/frameworks/metal-controller-instrumentation": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/ruby-release-notes/ruby-agent-830/",
      "sections": [
        "Ruby agent v8.3.0",
        "v8.3.0",
        "Support statement"
      ],
      "published_at": "2022-01-12T13:03:27Z",
      "title": "Ruby agent v8.3.0",
      "updated_at": "2022-01-11T15:42:09Z",
      "type": "docs",
      "external_id": "835611b222811836f6216fc56c2eb4d6f6ade63a",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "v8.3.0 Updated the agent to support Ruby 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of instrumented gems that are not compatible with Ruby 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4 support. Bugfix: Update AdaptiveSampler#sampled? algorithm One of the clauses in AdaptiveSampler#sampled? would always return false due to Integer division returning a result of zero. This method has been updated to use Float division instead, to exponentially back off the number of samples required. This may increase the number of traces collected for transactions. A huge thank you to @romul for bringing this to our attention and breaking down the problem! Bugfix: Correctly encode ASCII-8BIT log messages The encoding update for the DecoratingLogger in v8.2.0 did not account for ASCII-8BIT encoded characters qualifying as valid_encoding?. Now, ASCII-8BIT characters will be encoded as UTF-8 and include replacement characters as needed. We're very grateful for @nikajukic's collaboration and submission of a test case to resolve this issue. Support statement New Relic recommends that you upgrade the agent regularly and at a minimum every 3 months. As of this release, the oldest supported version is 5.6.0.349.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.68712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "sections": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "body": "v8.3.0 Updated the <em>agent</em> to support <em>Ruby</em> 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of <em>instrumented</em> <em>gems</em> that are not compatible with <em>Ruby</em> 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4"
      },
      "id": "61dda55264441fb61000e6a7"
    },
    {
      "sections": [
        "Mongo instrumentation",
        "Contents",
        "Supported gems",
        "Third-party and extends_newrelic_rpm instrumentation",
        "Disabling instrumentation"
      ],
      "title": "Mongo instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "573357a147f565bc05ac170117a4f67c95c08d38",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/frameworks/mongo-instrumentation/",
      "published_at": "2022-01-12T11:22:15Z",
      "updated_at": "2021-12-05T09:20:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for MongoDB queries made via the mongo gem. Contents Supported gems This summarizes the Ruby agent's support for gems by version. Gem version Comments mongo 1.8 and 1.9 Supported by New Relic's Ruby agent 3.7.1 or higher mongo 2.0 Not supported mongo 2.1 or higher Requires New Relic's Ruby agent 3.13.1 or higher Other gems Support for Mongoid 2/3/4 and Moped currently is available only via third-party gems. For links to the relevant projects, see extends_newrelic_rpm. Third-party and extends_newrelic_rpm instrumentation The extends_newrelic_rpm and newrelic_mongo gems both provide basic instrumentation for mongo. New Relic does not recommend running Mongo instrumentation via these gems alongside the Ruby agent's built-in Mongo support. This might double-count metrics such as overall database time. Also, the extends_newrelic_rpm and newrelic_mongo gems both use a distinct setting that can be used to disable them if removing those gems entirely isn't possible in your environment. For those third party gems, set disable_mongodb: false in your newrelic.yml. Disabling instrumentation To disable Mongo instrumentation in the agent, add the following to your newrelic.yml: disable_mongo: true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.97375,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mongo <em>instrumentation</em>",
        "sections": "Mongo <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for MongoDB queries made via the mongo <em>gem</em>. Contents Supported <em>gems</em> This summarizes the <em>Ruby</em> <em>agent</em>&#x27;s support for <em>gems</em> by version. <em>Gem</em> version Comments mongo 1.8 and 1.9 Supported by New Relic&#x27;s <em>Ruby</em> <em>agent</em> 3.7.1 or higher mongo 2.0 Not supported mongo 2.1"
      },
      "id": "617eaacae7b9d2ee96c03973"
    },
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9efaeae5c7f3cfc2003ff114ba7d95c66d76095d",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2022-01-12T11:25:01Z",
      "updated_at": "2021-10-23T18:55:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.94766,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "617d6b0be7b9d2e8e6c064ca"
    }
  ],
  "/docs/apm/agents/ruby-agent/frameworks/mongo-instrumentation": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/ruby-release-notes/ruby-agent-830/",
      "sections": [
        "Ruby agent v8.3.0",
        "v8.3.0",
        "Support statement"
      ],
      "published_at": "2022-01-12T13:03:27Z",
      "title": "Ruby agent v8.3.0",
      "updated_at": "2022-01-11T15:42:09Z",
      "type": "docs",
      "external_id": "835611b222811836f6216fc56c2eb4d6f6ade63a",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "v8.3.0 Updated the agent to support Ruby 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of instrumented gems that are not compatible with Ruby 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4 support. Bugfix: Update AdaptiveSampler#sampled? algorithm One of the clauses in AdaptiveSampler#sampled? would always return false due to Integer division returning a result of zero. This method has been updated to use Float division instead, to exponentially back off the number of samples required. This may increase the number of traces collected for transactions. A huge thank you to @romul for bringing this to our attention and breaking down the problem! Bugfix: Correctly encode ASCII-8BIT log messages The encoding update for the DecoratingLogger in v8.2.0 did not account for ASCII-8BIT encoded characters qualifying as valid_encoding?. Now, ASCII-8BIT characters will be encoded as UTF-8 and include replacement characters as needed. We're very grateful for @nikajukic's collaboration and submission of a test case to resolve this issue. Support statement New Relic recommends that you upgrade the agent regularly and at a minimum every 3 months. As of this release, the oldest supported version is 5.6.0.349.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.68712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "sections": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "body": "v8.3.0 Updated the <em>agent</em> to support <em>Ruby</em> 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of <em>instrumented</em> <em>gems</em> that are not compatible with <em>Ruby</em> 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4"
      },
      "id": "61dda55264441fb61000e6a7"
    },
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9efaeae5c7f3cfc2003ff114ba7d95c66d76095d",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2022-01-12T11:25:01Z",
      "updated_at": "2021-10-23T18:55:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.94766,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "617d6b0be7b9d2e8e6c064ca"
    },
    {
      "sections": [
        "Sinatra instrumentation",
        "Contents",
        "Getting started",
        "Middleware installation",
        "Ignoring routes",
        "Padrino",
        "Shotgun (not supported)"
      ],
      "title": "Sinatra instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "25ef31e6ba2f98a0adee6482fc01cc8b3fcac622",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/instrumented-gems/sinatra-instrumentation/",
      "published_at": "2022-01-12T11:25:40Z",
      "updated_at": "2021-10-23T18:56:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Ruby agent works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked as separate actions. Contents Getting started To set up Sinatra: Install the latest newrelic_rpm gem. In your Sinatra app, immediately below the Sinatra require directive, add: require 'newrelic_rpm' Copy Set RACK_ENV to the environment corresponding to the configuration definitions in your newrelic.yml file; for example, development, staging, production, etc. Note: Developer mode only works with Rails. Middleware installation Ruby agent versions prior to 3.6.3 required manual addition of New Relic middlewares to enable certain features, such as cross application tracing and browser monitoring. For more information about required middlewares, see Rack middlewares, or upgrade to the most recent Ruby agent. Ignoring routes Ruby agent versions 3.6.3 or higher support ignoring certain routes, similar to what was previously available in Rails controller instrumentation. To specify these values, use the same style of routes that you use to define your Sinatra application. For example, to ignore a ping route in a Sinatra app, include the following code in the app: newrelic_ignore '/ping' get '/ping' do # ... end Copy If you want an entire application to be ignored (for example, in a mounted application), call newrelic_ignore without parameters: newrelic_ignore Copy Additionally, newrelic_ignore_apdex and newrelic_ignore_enduser are supported. The newrelic_ignore_apdex call will exclude a given route from consideration in overall Apdex calculations. The newrelic_ignore_enduser call will prevent automatic injection of the page load timing JavaScript when a route is rendered. Padrino Padrino is a framework built on top of Sinatra. Starting with Ruby agent version 3.6.3, New Relic's Sinatra instrumentation works with Padrino versions 0.10.x or higher. Shotgun (not supported) The New Relic Ruby agent will not work with shotgun. It cannot make a connection before the dispatcher process exits. Neither Developer mode nor Monitor mode will work.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.47969,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Sinatra <em>instrumentation</em>",
        "sections": "Sinatra <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "New Relic&#x27;s <em>Ruby</em> <em>agent</em> works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked"
      },
      "id": "617eabb7196a6779e5f7c8af"
    }
  ],
  "/docs/apm/agents/ruby-agent/frameworks/rack-metal-support": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/ruby-release-notes/ruby-agent-830/",
      "sections": [
        "Ruby agent v8.3.0",
        "v8.3.0",
        "Support statement"
      ],
      "published_at": "2022-01-12T13:03:27Z",
      "title": "Ruby agent v8.3.0",
      "updated_at": "2022-01-11T15:42:09Z",
      "type": "docs",
      "external_id": "835611b222811836f6216fc56c2eb4d6f6ade63a",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "v8.3.0 Updated the agent to support Ruby 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of instrumented gems that are not compatible with Ruby 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4 support. Bugfix: Update AdaptiveSampler#sampled? algorithm One of the clauses in AdaptiveSampler#sampled? would always return false due to Integer division returning a result of zero. This method has been updated to use Float division instead, to exponentially back off the number of samples required. This may increase the number of traces collected for transactions. A huge thank you to @romul for bringing this to our attention and breaking down the problem! Bugfix: Correctly encode ASCII-8BIT log messages The encoding update for the DecoratingLogger in v8.2.0 did not account for ASCII-8BIT encoded characters qualifying as valid_encoding?. Now, ASCII-8BIT characters will be encoded as UTF-8 and include replacement characters as needed. We're very grateful for @nikajukic's collaboration and submission of a test case to resolve this issue. Support statement New Relic recommends that you upgrade the agent regularly and at a minimum every 3 months. As of this release, the oldest supported version is 5.6.0.349.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.68712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "sections": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "body": "v8.3.0 Updated the <em>agent</em> to support <em>Ruby</em> 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of <em>instrumented</em> <em>gems</em> that are not compatible with <em>Ruby</em> 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4"
      },
      "id": "61dda55264441fb61000e6a7"
    },
    {
      "sections": [
        "Mongo instrumentation",
        "Contents",
        "Supported gems",
        "Third-party and extends_newrelic_rpm instrumentation",
        "Disabling instrumentation"
      ],
      "title": "Mongo instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "573357a147f565bc05ac170117a4f67c95c08d38",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/frameworks/mongo-instrumentation/",
      "published_at": "2022-01-12T11:22:15Z",
      "updated_at": "2021-12-05T09:20:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for MongoDB queries made via the mongo gem. Contents Supported gems This summarizes the Ruby agent's support for gems by version. Gem version Comments mongo 1.8 and 1.9 Supported by New Relic's Ruby agent 3.7.1 or higher mongo 2.0 Not supported mongo 2.1 or higher Requires New Relic's Ruby agent 3.13.1 or higher Other gems Support for Mongoid 2/3/4 and Moped currently is available only via third-party gems. For links to the relevant projects, see extends_newrelic_rpm. Third-party and extends_newrelic_rpm instrumentation The extends_newrelic_rpm and newrelic_mongo gems both provide basic instrumentation for mongo. New Relic does not recommend running Mongo instrumentation via these gems alongside the Ruby agent's built-in Mongo support. This might double-count metrics such as overall database time. Also, the extends_newrelic_rpm and newrelic_mongo gems both use a distinct setting that can be used to disable them if removing those gems entirely isn't possible in your environment. For those third party gems, set disable_mongodb: false in your newrelic.yml. Disabling instrumentation To disable Mongo instrumentation in the agent, add the following to your newrelic.yml: disable_mongo: true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.97375,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mongo <em>instrumentation</em>",
        "sections": "Mongo <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for MongoDB queries made via the mongo <em>gem</em>. Contents Supported <em>gems</em> This summarizes the <em>Ruby</em> <em>agent</em>&#x27;s support for <em>gems</em> by version. <em>Gem</em> version Comments mongo 1.8 and 1.9 Supported by New Relic&#x27;s <em>Ruby</em> <em>agent</em> 3.7.1 or higher mongo 2.0 Not supported mongo 2.1"
      },
      "id": "617eaacae7b9d2ee96c03973"
    },
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9efaeae5c7f3cfc2003ff114ba7d95c66d76095d",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2022-01-12T11:25:01Z",
      "updated_at": "2021-10-23T18:55:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.94766,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "617d6b0be7b9d2e8e6c064ca"
    }
  ],
  "/docs/apm/agents/ruby-agent/frameworks/sequel-instrumentation": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/ruby-release-notes/ruby-agent-830/",
      "sections": [
        "Ruby agent v8.3.0",
        "v8.3.0",
        "Support statement"
      ],
      "published_at": "2022-01-12T13:03:27Z",
      "title": "Ruby agent v8.3.0",
      "updated_at": "2022-01-11T15:42:09Z",
      "type": "docs",
      "external_id": "835611b222811836f6216fc56c2eb4d6f6ade63a",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "v8.3.0 Updated the agent to support Ruby 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of instrumented gems that are not compatible with Ruby 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4 support. Bugfix: Update AdaptiveSampler#sampled? algorithm One of the clauses in AdaptiveSampler#sampled? would always return false due to Integer division returning a result of zero. This method has been updated to use Float division instead, to exponentially back off the number of samples required. This may increase the number of traces collected for transactions. A huge thank you to @romul for bringing this to our attention and breaking down the problem! Bugfix: Correctly encode ASCII-8BIT log messages The encoding update for the DecoratingLogger in v8.2.0 did not account for ASCII-8BIT encoded characters qualifying as valid_encoding?. Now, ASCII-8BIT characters will be encoded as UTF-8 and include replacement characters as needed. We're very grateful for @nikajukic's collaboration and submission of a test case to resolve this issue. Support statement New Relic recommends that you upgrade the agent regularly and at a minimum every 3 months. As of this release, the oldest supported version is 5.6.0.349.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.68698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "sections": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "body": "v8.3.0 Updated the <em>agent</em> to support <em>Ruby</em> 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of <em>instrumented</em> <em>gems</em> that are not compatible with <em>Ruby</em> 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4"
      },
      "id": "61dda55264441fb61000e6a7"
    },
    {
      "sections": [
        "Mongo instrumentation",
        "Contents",
        "Supported gems",
        "Third-party and extends_newrelic_rpm instrumentation",
        "Disabling instrumentation"
      ],
      "title": "Mongo instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "573357a147f565bc05ac170117a4f67c95c08d38",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/frameworks/mongo-instrumentation/",
      "published_at": "2022-01-12T11:22:15Z",
      "updated_at": "2021-12-05T09:20:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for MongoDB queries made via the mongo gem. Contents Supported gems This summarizes the Ruby agent's support for gems by version. Gem version Comments mongo 1.8 and 1.9 Supported by New Relic's Ruby agent 3.7.1 or higher mongo 2.0 Not supported mongo 2.1 or higher Requires New Relic's Ruby agent 3.13.1 or higher Other gems Support for Mongoid 2/3/4 and Moped currently is available only via third-party gems. For links to the relevant projects, see extends_newrelic_rpm. Third-party and extends_newrelic_rpm instrumentation The extends_newrelic_rpm and newrelic_mongo gems both provide basic instrumentation for mongo. New Relic does not recommend running Mongo instrumentation via these gems alongside the Ruby agent's built-in Mongo support. This might double-count metrics such as overall database time. Also, the extends_newrelic_rpm and newrelic_mongo gems both use a distinct setting that can be used to disable them if removing those gems entirely isn't possible in your environment. For those third party gems, set disable_mongodb: false in your newrelic.yml. Disabling instrumentation To disable Mongo instrumentation in the agent, add the following to your newrelic.yml: disable_mongo: true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.97375,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mongo <em>instrumentation</em>",
        "sections": "Mongo <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for MongoDB queries made via the mongo <em>gem</em>. Contents Supported <em>gems</em> This summarizes the <em>Ruby</em> <em>agent</em>&#x27;s support for <em>gems</em> by version. <em>Gem</em> version Comments mongo 1.8 and 1.9 Supported by New Relic&#x27;s <em>Ruby</em> <em>agent</em> 3.7.1 or higher mongo 2.0 Not supported mongo 2.1"
      },
      "id": "617eaacae7b9d2ee96c03973"
    },
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9efaeae5c7f3cfc2003ff114ba7d95c66d76095d",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2022-01-12T11:25:01Z",
      "updated_at": "2021-10-23T18:55:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.94766,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "617d6b0be7b9d2e8e6c064ca"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/apm-agent-security-ruby": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 231.44135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s <em>Ruby</em> <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The <em>Ruby</em> <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86662,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2022-01-12T18:50:59Z",
      "updated_at": "2022-01-12T18:50:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest Cats Effect v3 Scala 2.12: 3.2.x Scala 2.13: 3.2.x GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to 3.8.x jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to 3.3.x Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.117004,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/introduction-new-relic-ruby": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 231.44116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s <em>Ruby</em> <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The <em>Ruby</em> <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.8665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2022-01-12T18:50:59Z",
      "updated_at": "2022-01-12T18:50:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest Cats Effect v3 Scala 2.12: 3.2.x Scala 2.13: 3.2.x GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to 3.8.x jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to 3.3.x Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.11689,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/migration-7x-guide": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 231.44116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s <em>Ruby</em> <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The <em>Ruby</em> <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.8665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2022-01-12T18:50:59Z",
      "updated_at": "2022-01-12T18:50:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest Cats Effect v3 Scala 2.12: 3.2.x Scala 2.13: 3.2.x GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to 3.8.x jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to 3.3.x Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.11689,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/migration-8x-guide": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 231.44095,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s <em>Ruby</em> <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The <em>Ruby</em> <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2022-01-12T18:50:59Z",
      "updated_at": "2022-01-12T18:50:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest Cats Effect v3 Scala 2.12: 3.2.x Scala 2.13: 3.2.x GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to 3.8.x jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to 3.3.x Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.11678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/new-relics-github-repository": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 231.44095,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s <em>Ruby</em> <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The <em>Ruby</em> <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2022-01-12T18:50:59Z",
      "updated_at": "2022-01-12T18:50:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest Cats Effect v3 Scala 2.12: 3.2.x Scala 2.13: 3.2.x GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to 3.8.x jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to 3.3.x Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.11678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    }
  ],
  "/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2022-01-12T18:50:59Z",
      "updated_at": "2022-01-12T18:50:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest Cats Effect v3 Scala 2.12: 3.2.x Scala 2.13: 3.2.x GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to 3.8.x jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to 3.3.x Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.11667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Introduction to New Relic for Ruby",
        "Compatibility and requirements",
        "Monitor app performance",
        "Install the agent",
        "Extend agent instrumentation",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Ruby",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "78629823e3103cf758fabed8581980990b19008d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/introduction-new-relic-ruby/",
      "published_at": "2022-01-12T11:22:47Z",
      "updated_at": "2021-11-14T16:24:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent monitors your applications to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Compatibility and requirements The Ruby agent supports many of the most common Ruby frameworks and platforms. You can also use the Ruby agent in a Google App Engine (GAE) flexible environment. Before you install the Ruby agent, ensure your system meets the system requirements. Monitor app performance View the big picture of your app Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app. Create architectural maps of your app. Enable distributed tracing to understand activity in an environment that relies on many services. Install New Relic Infrastructure and view detailed host data for your app. Find errors and problems quickly Track key transactions. Create customized dashboards for important metrics. Alert your team when errors or problems occur before they affect your users. Track performance after a deployment. Drill down into performance details Examine code-level transaction traces Examine database query traces. Examine error traces. Monitor Ruby background processes and daemons. View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the Ruby agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own. Query your data using NRQL. Send your own event data. Create and share customizable, interactive dashboards. Install the agent After creating a New Relic account, use our launcher or see the installation instructions. Install docs for gem (recommended) Install docs for rails plugin Add Ruby data Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Automatically inject the browser monitoring agent to get visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to fully customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom metrics: Record additional metrics as part of a transaction to gain more insights into your app's performance and business data. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshooting If you encounter issues with the Ruby agent, see our full list of troubleshooting documentation. Common issues include: No data appears (Ruby) Gems incompatible with the Ruby agent Sending handled errors to New Relic Controlling when the Ruby agent starts Check the source code The Ruby agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.82333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Ruby</em>",
        "sections": "Introduction to New Relic for <em>Ruby</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " or see the installation instructions. Install docs for gem (recommended) Install docs for rails plugin Add <em>Ruby</em> data Extend <em>agent</em> instrumentation After installing the <em>agent</em>, go further and extend the <em>agent</em>&#x27;s instrumentation: Page load timing: Automatically inject the browser monitoring <em>agent</em> to <em>get</em>"
      },
      "id": "617eab27e7b9d2395fc044bc"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06503,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.37181,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43103,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06491,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.371704,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/ruby-agent-heroku": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43103,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06491,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.371704,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/ruby-agent-installation-rails-plugin": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.37161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/uninstall-ruby-agent": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.37161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/installation/update-ruby-agent": [
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.43318,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.06697,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Important",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "bd5466c8a0ef5eea5c3034c46eeb2517470d4c41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2022-01-12T16:48:37Z",
      "updated_at": "2022-01-12T16:48:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Important These procedures have not bee tested with Rails version 7 or higher. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (for example, from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.37161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s API to track custom metrics, it&#x27;s important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom&#x2F;, the class or category name, and a label, each separated with a slash mark &#x2F;: Custom"
      },
      "id": "617e9ab664441f57befbe659"
    }
  ],
  "/docs/apm/agents/ruby-agent/instrumented-gems/rack-middlewares": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/ruby-release-notes/ruby-agent-830/",
      "sections": [
        "Ruby agent v8.3.0",
        "v8.3.0",
        "Support statement"
      ],
      "published_at": "2022-01-12T13:03:27Z",
      "title": "Ruby agent v8.3.0",
      "updated_at": "2022-01-11T15:42:09Z",
      "type": "docs",
      "external_id": "835611b222811836f6216fc56c2eb4d6f6ade63a",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "v8.3.0 Updated the agent to support Ruby 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of instrumented gems that are not compatible with Ruby 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4 support. Bugfix: Update AdaptiveSampler#sampled? algorithm One of the clauses in AdaptiveSampler#sampled? would always return false due to Integer division returning a result of zero. This method has been updated to use Float division instead, to exponentially back off the number of samples required. This may increase the number of traces collected for transactions. A huge thank you to @romul for bringing this to our attention and breaking down the problem! Bugfix: Correctly encode ASCII-8BIT log messages The encoding update for the DecoratingLogger in v8.2.0 did not account for ASCII-8BIT encoded characters qualifying as valid_encoding?. Now, ASCII-8BIT characters will be encoded as UTF-8 and include replacement characters as needed. We're very grateful for @nikajukic's collaboration and submission of a test case to resolve this issue. Support statement New Relic recommends that you upgrade the agent regularly and at a minimum every 3 months. As of this release, the oldest supported version is 5.6.0.349.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.68158,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "sections": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "body": "v8.3.0 Updated the <em>agent</em> to support <em>Ruby</em> 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of <em>instrumented</em> <em>gems</em> that are not compatible with <em>Ruby</em> 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4"
      },
      "id": "61dda55264441fb61000e6a7"
    },
    {
      "sections": [
        "Mongo instrumentation",
        "Contents",
        "Supported gems",
        "Third-party and extends_newrelic_rpm instrumentation",
        "Disabling instrumentation"
      ],
      "title": "Mongo instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "573357a147f565bc05ac170117a4f67c95c08d38",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/frameworks/mongo-instrumentation/",
      "published_at": "2022-01-12T11:22:15Z",
      "updated_at": "2021-12-05T09:20:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for MongoDB queries made via the mongo gem. Contents Supported gems This summarizes the Ruby agent's support for gems by version. Gem version Comments mongo 1.8 and 1.9 Supported by New Relic's Ruby agent 3.7.1 or higher mongo 2.0 Not supported mongo 2.1 or higher Requires New Relic's Ruby agent 3.13.1 or higher Other gems Support for Mongoid 2/3/4 and Moped currently is available only via third-party gems. For links to the relevant projects, see extends_newrelic_rpm. Third-party and extends_newrelic_rpm instrumentation The extends_newrelic_rpm and newrelic_mongo gems both provide basic instrumentation for mongo. New Relic does not recommend running Mongo instrumentation via these gems alongside the Ruby agent's built-in Mongo support. This might double-count metrics such as overall database time. Also, the extends_newrelic_rpm and newrelic_mongo gems both use a distinct setting that can be used to disable them if removing those gems entirely isn't possible in your environment. For those third party gems, set disable_mongodb: false in your newrelic.yml. Disabling instrumentation To disable Mongo instrumentation in the agent, add the following to your newrelic.yml: disable_mongo: true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.97476,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mongo <em>instrumentation</em>",
        "sections": "Mongo <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for MongoDB queries made via the mongo <em>gem</em>. Contents Supported <em>gems</em> This summarizes the <em>Ruby</em> <em>agent</em>&#x27;s support for <em>gems</em> by version. <em>Gem</em> version Comments mongo 1.8 and 1.9 Supported by New Relic&#x27;s <em>Ruby</em> <em>agent</em> 3.7.1 or higher mongo 2.0 Not supported mongo 2.1"
      },
      "id": "617eaacae7b9d2ee96c03973"
    },
    {
      "sections": [
        "Sinatra instrumentation",
        "Contents",
        "Getting started",
        "Middleware installation",
        "Ignoring routes",
        "Padrino",
        "Shotgun (not supported)"
      ],
      "title": "Sinatra instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "25ef31e6ba2f98a0adee6482fc01cc8b3fcac622",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/instrumented-gems/sinatra-instrumentation/",
      "published_at": "2022-01-12T11:25:40Z",
      "updated_at": "2021-10-23T18:56:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Ruby agent works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked as separate actions. Contents Getting started To set up Sinatra: Install the latest newrelic_rpm gem. In your Sinatra app, immediately below the Sinatra require directive, add: require 'newrelic_rpm' Copy Set RACK_ENV to the environment corresponding to the configuration definitions in your newrelic.yml file; for example, development, staging, production, etc. Note: Developer mode only works with Rails. Middleware installation Ruby agent versions prior to 3.6.3 required manual addition of New Relic middlewares to enable certain features, such as cross application tracing and browser monitoring. For more information about required middlewares, see Rack middlewares, or upgrade to the most recent Ruby agent. Ignoring routes Ruby agent versions 3.6.3 or higher support ignoring certain routes, similar to what was previously available in Rails controller instrumentation. To specify these values, use the same style of routes that you use to define your Sinatra application. For example, to ignore a ping route in a Sinatra app, include the following code in the app: newrelic_ignore '/ping' get '/ping' do # ... end Copy If you want an entire application to be ignored (for example, in a mounted application), call newrelic_ignore without parameters: newrelic_ignore Copy Additionally, newrelic_ignore_apdex and newrelic_ignore_enduser are supported. The newrelic_ignore_apdex call will exclude a given route from consideration in overall Apdex calculations. The newrelic_ignore_enduser call will prevent automatic injection of the page load timing JavaScript when a route is rendered. Padrino Padrino is a framework built on top of Sinatra. Starting with Ruby agent version 3.6.3, New Relic's Sinatra instrumentation works with Padrino versions 0.10.x or higher. Shotgun (not supported) The New Relic Ruby agent will not work with shotgun. It cannot make a connection before the dispatcher process exits. Neither Developer mode nor Monitor mode will work.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.48065,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Sinatra <em>instrumentation</em>",
        "sections": "Sinatra <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "New Relic&#x27;s <em>Ruby</em> <em>agent</em> works with Sinatra 1.2.x or higher. In the New Relic UI, the Sinatra actions appear similar to controller actions. The actions in the UI correspond to the pattern expression used to match them. HTTP operations are not distinguished. Multiple matches are all tracked"
      },
      "id": "617eabb7196a6779e5f7c8af"
    }
  ],
  "/docs/apm/agents/ruby-agent/instrumented-gems/redis-instrumentation": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/ruby-release-notes/ruby-agent-830/",
      "sections": [
        "Ruby agent v8.3.0",
        "v8.3.0",
        "Support statement"
      ],
      "published_at": "2022-01-12T13:03:27Z",
      "title": "Ruby agent v8.3.0",
      "updated_at": "2022-01-11T15:42:09Z",
      "type": "docs",
      "external_id": "835611b222811836f6216fc56c2eb4d6f6ade63a",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "v8.3.0 Updated the agent to support Ruby 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of instrumented gems that are not compatible with Ruby 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4 support. Bugfix: Update AdaptiveSampler#sampled? algorithm One of the clauses in AdaptiveSampler#sampled? would always return false due to Integer division returning a result of zero. This method has been updated to use Float division instead, to exponentially back off the number of samples required. This may increase the number of traces collected for transactions. A huge thank you to @romul for bringing this to our attention and breaking down the problem! Bugfix: Correctly encode ASCII-8BIT log messages The encoding update for the DecoratingLogger in v8.2.0 did not account for ASCII-8BIT encoded characters qualifying as valid_encoding?. Now, ASCII-8BIT characters will be encoded as UTF-8 and include replacement characters as needed. We're very grateful for @nikajukic's collaboration and submission of a test case to resolve this issue. Support statement New Relic recommends that you upgrade the agent regularly and at a minimum every 3 months. As of this release, the oldest supported version is 5.6.0.349.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.68246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "sections": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "body": "v8.3.0 Updated the <em>agent</em> to support <em>Ruby</em> 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of <em>instrumented</em> <em>gems</em> that are not compatible with <em>Ruby</em> 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4"
      },
      "id": "61dda55264441fb61000e6a7"
    },
    {
      "sections": [
        "Mongo instrumentation",
        "Contents",
        "Supported gems",
        "Third-party and extends_newrelic_rpm instrumentation",
        "Disabling instrumentation"
      ],
      "title": "Mongo instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "573357a147f565bc05ac170117a4f67c95c08d38",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/frameworks/mongo-instrumentation/",
      "published_at": "2022-01-12T11:22:15Z",
      "updated_at": "2021-12-05T09:20:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for MongoDB queries made via the mongo gem. Contents Supported gems This summarizes the Ruby agent's support for gems by version. Gem version Comments mongo 1.8 and 1.9 Supported by New Relic's Ruby agent 3.7.1 or higher mongo 2.0 Not supported mongo 2.1 or higher Requires New Relic's Ruby agent 3.13.1 or higher Other gems Support for Mongoid 2/3/4 and Moped currently is available only via third-party gems. For links to the relevant projects, see extends_newrelic_rpm. Third-party and extends_newrelic_rpm instrumentation The extends_newrelic_rpm and newrelic_mongo gems both provide basic instrumentation for mongo. New Relic does not recommend running Mongo instrumentation via these gems alongside the Ruby agent's built-in Mongo support. This might double-count metrics such as overall database time. Also, the extends_newrelic_rpm and newrelic_mongo gems both use a distinct setting that can be used to disable them if removing those gems entirely isn't possible in your environment. For those third party gems, set disable_mongodb: false in your newrelic.yml. Disabling instrumentation To disable Mongo instrumentation in the agent, add the following to your newrelic.yml: disable_mongo: true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.9743,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mongo <em>instrumentation</em>",
        "sections": "Mongo <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for MongoDB queries made via the mongo <em>gem</em>. Contents Supported <em>gems</em> This summarizes the <em>Ruby</em> <em>agent</em>&#x27;s support for <em>gems</em> by version. <em>Gem</em> version Comments mongo 1.8 and 1.9 Supported by New Relic&#x27;s <em>Ruby</em> <em>agent</em> 3.7.1 or higher mongo 2.0 Not supported mongo 2.1"
      },
      "id": "617eaacae7b9d2ee96c03973"
    },
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9efaeae5c7f3cfc2003ff114ba7d95c66d76095d",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2022-01-12T11:25:01Z",
      "updated_at": "2021-10-23T18:55:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.94821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "617d6b0be7b9d2e8e6c064ca"
    }
  ],
  "/docs/apm/agents/ruby-agent/instrumented-gems/sinatra-instrumentation": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/ruby-release-notes/ruby-agent-830/",
      "sections": [
        "Ruby agent v8.3.0",
        "v8.3.0",
        "Support statement"
      ],
      "published_at": "2022-01-12T13:03:27Z",
      "title": "Ruby agent v8.3.0",
      "updated_at": "2022-01-11T15:42:09Z",
      "type": "docs",
      "external_id": "835611b222811836f6216fc56c2eb4d6f6ade63a",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "v8.3.0 Updated the agent to support Ruby 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of instrumented gems that are not compatible with Ruby 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4 support. Bugfix: Update AdaptiveSampler#sampled? algorithm One of the clauses in AdaptiveSampler#sampled? would always return false due to Integer division returning a result of zero. This method has been updated to use Float division instead, to exponentially back off the number of samples required. This may increase the number of traces collected for transactions. A huge thank you to @romul for bringing this to our attention and breaking down the problem! Bugfix: Correctly encode ASCII-8BIT log messages The encoding update for the DecoratingLogger in v8.2.0 did not account for ASCII-8BIT encoded characters qualifying as valid_encoding?. Now, ASCII-8BIT characters will be encoded as UTF-8 and include replacement characters as needed. We're very grateful for @nikajukic's collaboration and submission of a test case to resolve this issue. Support statement New Relic recommends that you upgrade the agent regularly and at a minimum every 3 months. As of this release, the oldest supported version is 5.6.0.349.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.68234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "sections": "<em>Ruby</em> <em>agent</em> v8.3.0",
        "body": "v8.3.0 Updated the <em>agent</em> to support <em>Ruby</em> 3.1.0 Most of the changes involved updating the multiverse suite to exclude runs for older versions of <em>instrumented</em> <em>gems</em> that are not compatible with <em>Ruby</em> 3.1.0. In addition, Infinite Tracing testing was updated to accommodate YAML::unsafe_load for Psych 4"
      },
      "id": "61dda55264441fb61000e6a7"
    },
    {
      "sections": [
        "Mongo instrumentation",
        "Contents",
        "Supported gems",
        "Third-party and extends_newrelic_rpm instrumentation",
        "Disabling instrumentation"
      ],
      "title": "Mongo instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "573357a147f565bc05ac170117a4f67c95c08d38",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/frameworks/mongo-instrumentation/",
      "published_at": "2022-01-12T11:22:15Z",
      "updated_at": "2021-12-05T09:20:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent has built-in instrumentation for MongoDB queries made via the mongo gem. Contents Supported gems This summarizes the Ruby agent's support for gems by version. Gem version Comments mongo 1.8 and 1.9 Supported by New Relic's Ruby agent 3.7.1 or higher mongo 2.0 Not supported mongo 2.1 or higher Requires New Relic's Ruby agent 3.13.1 or higher Other gems Support for Mongoid 2/3/4 and Moped currently is available only via third-party gems. For links to the relevant projects, see extends_newrelic_rpm. Third-party and extends_newrelic_rpm instrumentation The extends_newrelic_rpm and newrelic_mongo gems both provide basic instrumentation for mongo. New Relic does not recommend running Mongo instrumentation via these gems alongside the Ruby agent's built-in Mongo support. This might double-count metrics such as overall database time. Also, the extends_newrelic_rpm and newrelic_mongo gems both use a distinct setting that can be used to disable them if removing those gems entirely isn't possible in your environment. For those third party gems, set disable_mongodb: false in your newrelic.yml. Disabling instrumentation To disable Mongo instrumentation in the agent, add the following to your newrelic.yml: disable_mongo: true Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.97429,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mongo <em>instrumentation</em>",
        "sections": "Mongo <em>instrumentation</em>",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": "The <em>Ruby</em> <em>agent</em> has built-in instrumentation for MongoDB queries made via the mongo <em>gem</em>. Contents Supported <em>gems</em> This summarizes the <em>Ruby</em> <em>agent</em>&#x27;s support for <em>gems</em> by version. <em>Gem</em> version Comments mongo 1.8 and 1.9 Supported by New Relic&#x27;s <em>Ruby</em> <em>agent</em> 3.7.1 or higher mongo 2.0 Not supported mongo 2.1"
      },
      "id": "617eaacae7b9d2ee96c03973"
    },
    {
      "sections": [
        "Rack middlewares",
        "Rack instrumentation",
        "Rack::Builder",
        "Rails middlewares",
        "Viewing middleware data",
        "In the APM Summary page",
        "In the APM Transactions page",
        "In APM transaction trace summary",
        "Disabling Rack instrumentation",
        "Installing Ruby agent middlewares manually",
        "Important",
        "Manual Rack instrumentation"
      ],
      "title": "Rack middlewares",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Instrumented gems"
      ],
      "external_id": "9efaeae5c7f3cfc2003ff114ba7d95c66d76095d",
      "image": "https://docs.newrelic.com/static/6a0f3d54778590afddb09dde98b4773e/c1b63/web_transactions.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/instrumented-gems/rack-middlewares/",
      "published_at": "2022-01-12T11:25:01Z",
      "updated_at": "2021-10-23T18:55:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Ruby agent automatically instruments Rack middlewares. If you are unfamiliar with the basics of Rack middlewares, review the resources linked by the Rails on Rack guide. Additionally, the Ruby agent provides some features via Rack middlewares: Distributed traces Auto-instrumentation for browser monitoring New Relic automatically installs these middlewares for Rails and Sinatra. Rack instrumentation The two most common ways to configure Rack middlewares are the Rack::Builder API (most often from config.ru) and Rails' middleware stack configuration: Rack::Builder Middlewares in your config.ru file are configured using Rack::Builder. For the Ruby agent to instrument middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack gem. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class (ActionDispatch::MiddlewareStack) instead of Rack::Builder to configure middlewares. Even if you haven't explicitly added middlewares to your Rails application, many components of Rails itself are implemented as middleware, so middleware data will appear by default. The Ruby agent automatically instruments middlewares added via ActionDispatch::MiddlewareStack on Rails 3.0 or higher. For more information about configuring middlewares with Rails, see the Ruby on Rails guide. Viewing middleware data You can view middleware data in APM. In the APM Summary page The main chart on your app's APM Summary page includes a purple bar that shows average time per request spent in all Rack middlewares for your application. APM > (selected application) > Summary: Middleware time appears in purple on your app's main Overview chart. In the APM Transactions page You can also see time for individual middlewares for a specific transaction name from your app's APM Transactions page. APM > (selected application) > Monitor > Transactions > (selected transaction) > Trace details: Here is an example of middleware time for a selected transaction for your app. In APM transaction trace summary Transaction traces also capture detailed middleware call information. APM > (selected application) > Monitor > Transactions > (selected transaction trace): Here is an example of middleware details in a transaction trace. Disabling Rack instrumentation If you do not want to instrument Rack middlewares, you may disable Rack middleware instrumentation with the disable_middleware_instrumentation setting. You can also ignore specific transactions. Installing Ruby agent middlewares manually The Ruby agent's implementation of New Relic's cross application tracing feature uses Rack middleware instrumentation to read and write HTTP headers that are necessary to pass information between monitored applications. If you are using Sinatra, have disabled middleware instrumentation as described above, and want to use cross application tracing, you must manually add the NewRelic::Rack::AgentHooks middleware to your middleware stack. Important As of version 8.0.0, cross application tracing is deprecated in favor of distributed tracing. When enabled, distributed tracing is automatically configured for all rack-based apps without the need for an additional middleware. If you would like to continue using cross application tracing, you will need to update your configuration. Manual Rack instrumentation Earlier versions of the Ruby agent supported manually instrumenting Rack middlewares via the NewRelic::Agent::Instrumentation::Rack module. This instrumentation is deprecated in Ruby agent versions 3.9.0 or higher, because it is unnecessary with automatic middleware instrumentation. New Relic recommends that you remove references to this module from your code after upgrading to 3.9.0 or higher.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.94821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Installing <em>Ruby</em> <em>agent</em> middlewares manually",
        "tags": "<em>Instrumented</em> <em>gems</em>",
        "body": " config.ru file are configured using Rack::Builder. For the <em>Ruby</em> <em>agent</em> to <em>instrument</em> middlewares from Rack::Builder, your app must run version 1.1.0 or higher of the rack <em>gem</em>. This is the most common use of middlewares with Sinatra or pure-rack applications. Rails middlewares Rails uses its own class"
      },
      "id": "617d6b0be7b9d2e8e6c064ca"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/control-when-ruby-agent-starts": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.28474,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86697,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/generating-logs-troubleshooting-ruby": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.2846,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86685,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/incompatible-gems": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.2846,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86685,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/no-data-appears-ruby": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.28448,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22531,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86673,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/no-data-unicorn": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.28448,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22531,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86673,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/no-log-file-ruby": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.28436,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/not-installing-new-relic-supported-grape": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.28436,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/passenger-troubleshooting": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.28436,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/ruby-agent-audit-log": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.28423,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22508,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86649,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/systemstackerror-stack-level-too-deep": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.28423,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22508,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86649,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/update-deprecated-api-calls": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.28409,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86636,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/agents/ruby-agent/troubleshooting/update-private-api-calls-public-tracer-api": [
    {
      "sections": [
        "Ignoring specific transactions",
        "Important",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0d1ebfd44ce695d4fc70d69060f04367df33dbd0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2022-01-12T16:47:56Z",
      "updated_at": "2022-01-12T16:47:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Important This procedure has not been tested with Rails version 7 or higher. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy This configuration will only prevent Transaction events that match the set pattern from reporting. Use any of the newrelic_ignore* family of methods if you would like to prevent all data, such as trace data, from reporting from a transaction. Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.28409,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshooting</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following"
      },
      "id": "617e9647e7b9d26088c044a4"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2022-01-12T11:23:56Z",
      "updated_at": "2022-01-12T11:23:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 3.1.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 4.x.x 5.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 6.2.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.22496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "sections": "<em>Ruby</em> <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see the browser and <em>Ruby</em> <em>agent</em> documentation. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Important",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4ead3bf72477012fd5d777a2ac825d7e84357f9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2022-01-12T16:48:36Z",
      "updated_at": "2022-01-12T16:48:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.86636,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> API NewRelic::<em>Agent</em>.notice_error call within your error handler. Important These procedures have not been tested with Rails version 7 or higher. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This API call takes"
      },
      "id": "617e9676196a67965df7bb30"
    }
  ],
  "/docs/apm/apm-ui-pages/error-analytics/apm-error-profiles-troubleshoot-trends": [
    {
      "sections": [
        "Manage error data",
        "View logs for your APM and infrastructure data",
        "Error data types: events and trace details",
        "Events",
        "Trace details",
        "Caps on error reporting",
        "Charting error rates and counts",
        "Report custom errors",
        "Ignore errors",
        "Reduce noise with expected errors",
        "Disable error traces",
        "Delete error traces",
        "Caution"
      ],
      "title": "Manage error data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "29a2ebdc7b91029a1fada50791b90e9dc548f17e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/manage-error-data/",
      "published_at": "2022-01-12T08:45:52Z",
      "updated_at": "2021-11-14T09:35:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM Errors page helps you identify, triage, and fix errors in your services. The Errors page uses data collected by the APM agent to display stack traces, transaction attributes such as HTTP header values, and any other custom attributes, so you can understand the context of the error and fix it. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Error data types: events and trace details By default, our APM agents collect two type of error data: Events Trace details Events The error event data type includes default attributes, as well as any custom attributes instrumented in your service. It doesn't include a stack trace. Find your events data in the Errors UI as follows: The Errors column in the Error traces table. The Top 5 errors chart. When you’ve drilled into a grouping of errors, those errors not displaying a stack trace are based on this type of data. You can disable Show only errors with stack trace to show errors that have this type of data collected, but no associated trace details. Events are subject to sampling (see Caps on error reporting and Charting error rates and counts). For more on error event data, see Events reported by APM. Trace details The trace details error data type includes stack traces and attributes, and supplements events with more data. It's expected that more events will be reported than trace details--see Caps on error reporting. Find your trace details data in the Errors UI as follows: The Stack traces column of the Error traces table. When you’ve drilled into a grouping of errors, those errors with a stack trace use this type of data. Show only errors with stack trace is enabled by default, to constrain the errors shown to just those that have this type of data collected. This data is governed by specific retention rules for Error details. Caps on error reporting New Relic caps error reporting at: 100 events per minute per agent instance 20 trace details per minute per agent instance These caps prevent error reporting from negatively impacting application performance. Examples: App running across five EC2 instances, one JVM each. New Relic caps error reporting at: 100 events per minute x 5 instances = 500 events per minute 20 trace details per minute x 5 instances = 100 trace details per minute App running on one host with ten instances. New Relic caps error reporting at: 100 events per minute x 10 instances = 1000 events per minute 20 trace details per minute x 10 instances = 200 events per minute Charting error rates and counts The Error rate chart is driven by a query on metric timeslice data, which is an unsampled aggregate data type that is accurate but has very limited dimensionality. This data can't be faceted or filtered as flexibly as error event data. You can reproduce this chart in a dashboard, or explore the metric timeslice data further by clicking the ... menu on the Error rate chart, and then using the View query or Add to dashboard options. To chart faceted error counts using event data, as in the Top 5 errors chart, use an NRQL event query. Click the ... menu on the Top 5 errors chart and choose View query for a starting point in creating your chart. Since event data can be sampled (see Caps on error reporting), you can use the EXTRAPOLATE keyword to get an accurate error count, even if sampling is occurring. Report custom errors You can report errors not collected by default with our agents using our agent APIs. For more, see the documentation on the API. Ignore errors You can prevent certain errors that would normally be reported to New Relic from being collected using our agent APIs or the server-side configuration UI. For more details, see Manage errors in APM. Reduce noise with expected errors Sometimes you want to collect error data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors page, but won’t affect your service’s error rate or Apdex metrics. Disable error traces To prevent certain errors from being reported to New Relic, disable them in your agent's configuration file. For most agents, you can ignore certain error codes or disable errors completely. For more information, see your specific agent's configuration documentation: C SDK Go (not applicable; the agent only reports errors when configured to do so) Java .NET Node.js PHP Python Ruby Delete error traces Caution You cannot recover error traces after you delete them. Deleting errors is currently only available in the legacy Errors Classic UI. If you want to... Do this... Delete all error traces for your app If you have permissions to delete all error traces for an app: Go to one.newrelic.com > APM > (select an app) > More views > Errors (classic). Select Delete all errors. Delete all error traces for your account To delete all error traces for your New Relic account, get support at support.newrelic.com. Delete individual error traces To delete individual error traces, use APM's Errors (classic) page. Drill into an error from the table of errors, then click Delete this error. In addition to deleting error traces, you may also want to delete transaction traces or database/slow SQL traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 204.51141,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>error</em> data",
        "sections": "Manage <em>error</em> data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another <em>UI</em> <em>page</em> in New Relic One. <em>Error</em> data types: events and trace details By default, our <em>APM</em> agents collect two type of <em>error</em> data: Events Trace details Events The <em>error</em> event data type includes default attributes"
      },
      "id": "6044077e28ccbcab752c60d1"
    },
    {
      "sections": [
        "Errors page: Find, fix, and verify problems",
        "View the APM Errors page",
        "Important",
        "Use the Errors workflow to identify problems",
        "Error rate chart: See patterns immediately",
        "Top five errors: Correlate to alerts or find significant groupings",
        "Error traces: Find the line of code and data needed to reproduce the issue",
        "Examine logs for error details",
        "Expected errors",
        "Errors outside transactions",
        "Select the time period for error data"
      ],
      "title": "Errors page: Find, fix, and verify problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "fe321816a8727f65e32b4ec1f381ba9d17c432b7",
      "image": "https://docs.newrelic.com/static/1b3bf12a5d48aa0396de5e488bf17f27/c1b63/WebPortal___New_Relic_One.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/errors-page-find-fix-verify-problems/",
      "published_at": "2022-01-12T08:45:13Z",
      "updated_at": "2021-11-14T09:35:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Errors UI in New Relic One, you can see the line of code that's causing a bad experience for your users, and get enough data to reproduce the issue so you can fix it. When you do, you’ll be able to confirm your fix is working in production. Use Errors in New Relic One to: Group and filter events to triage important errors. Get alert notifications about errors. Review stack traces, logs, and other details. Share the error information with charts and dashboards. Report new errors using instrumentation, prevent certain errors from being reported, and filter out noisy errors using expected errors. View the APM Errors page Important As of November 1, 2021, the APM Errors (classic) UI will be discontinued in favor of the New Relic One APM Errors UI. For more details, see our Explorers Hub post. To view the Errors page: Go to one.newrelic.com > APM > (select an app), then click the Error rate table's title on your selected app's Summary page. OR Go to one.newrelic.com > APM > (select an app) > Events > Errors. APM Errors UI: The Error rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5 by count chart and Error traces table. Use the Instance dropdown to focus on a specific instance. Use the Errors workflow to identify problems Use this basic workflow to get the most out of the information you see from the Errors page. Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. Correlate any general patterns on the Top 5 errors chart to alerts occurring during the same time period. Use the groups and filters to examine the error events and attributes in more detail, and look for patterns with error messages, transaction names, or other groupings. Explore and share Error trace table information, including specific stack trace details, logs, and attributes (host, URL, user, custom attributes, etc.) Also review the Error profiles page to guide your investigation into which attribute values might be correlated to the cause of errors, by comparing the frequency of those values between transactions where the error did and didn't occur (only in the old UI). Error rate chart: See patterns immediately Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. For example, are there any spikes near a recent deployment? You may want to change the selected time period to look for other historical patterns. This chart always shows the overall error rate and count for the selected time period, even when you filter the rest of the page. If you want to focus your investigation on a particular type of error, use the Top 5 errors chart or the Error traces table. Top five errors: Correlate to alerts or find significant groupings Use the Top 5 errors chart to identify what error types and how many of those errors occurred during the same time period as the Error rate chart. For example: Is the error spike related to a specific exception class or transaction? Do the top errors point to a new host/container that recently got moved into production? Are the top error messages repeatedly about failed connections by hosts that you know are in a specific region of your organization? Have the chart backgrounds changed color to indicate an alert condition? (Light pink indicates the alert condition's Warning threshold, and dark pink indicates the Critical threshold.) If you want to... Do this... Change the \"top 5\" selection By default, Top 5 errors chart shows the top five errors by error class and transaction name. To group by other attributes, such as error message, host, or custom attribute, use the search bar. Explore or share error trend data The Top 5 errors chart uses error events, which include rich attribute data b default, along with any custom attributes you have added to the error event type. To examine this data in more detail, or to share it with others, select the View query or Add to dashboard links that appear when you click the chart's ... menu. Error traces: Find the line of code and data needed to reproduce the issue The Error traces table groups errors by the attributes you've selected, and links them to relevant detailed error traces. Each row helps you find answers to questions such as: How many of this transaction/class (or custom grouping) occurred within the selected time period? What is the most recent error message? When did this error first and last occur? Sometimes it may be useful to sort error trace data other than from the most to fewest occurrences. You can change the sort order or filter options to focus on just the types of errors that matter the most to you and your teams. For example: Which error has the fewest occurrences (sort on Errors column)? When did a particular error stop (sort on Last occurred)? Once you find the group of errors you want to fix, click a row in the Error traces table to drill down into the stack traces and attribute data that help pinpoint the cause. Examine logs for error details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Errors page, click on an error to go to the Error details page. From the error details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your error details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Expected errors Reduce noisy errors by marking them as “expected errors”. Such errors won't affect reported error rate or Apdex metrics. See Manage errors for more details. Expected errors aren't shown by default on the Errors page. You can show them by turning on the Show N expected errors switch below the Group by bar. Errors outside transactions Using the New Relic agent API, you can record custom errors at any point in the execution of your code. Sometimes, such custom errors will occur when a transaction is not executing, such as in high-volume aynchronous code that doesn't handle an HTTP transaction. Errors outside transactions are shown by default on the Errors page, but you can hide them by turning off the Show N errors outside transactions switch below the Group by bar. Select the time period for error data Use the time picker to examine details of error events over the past week. The error events view is available for up to a seven-day window of data collected over the last eight days. You may notice slight differences in count if your time window is set to ending now. This occurs because the counts for the list and table may be requested at slightly different times as the page auto-refreshes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 204.51125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Errors</em> <em>page</em>: Find, fix, and verify problems",
        "sections": "View the <em>APM</em> <em>Errors</em> <em>page</em>",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the <em>Error</em> rate table&#x27;s title on your selected app&#x27;s Summary <em>page</em>. OR Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Events &gt; Errors. <em>APM</em> Errors <em>UI</em>: The <em>Error</em> rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5"
      },
      "id": "60440747e7b9d2f2295799b6"
    },
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.84308,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "In <em>APM</em>, when transaction traces are collected, there may be additional Slow query data available on the Databases <em>page</em>. Let&#x27;s look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different"
      },
      "id": "604407dae7b9d26489579a05"
    }
  ],
  "/docs/apm/apm-ui-pages/error-analytics/errors-page-find-fix-verify-problems": [
    {
      "sections": [
        "Manage error data",
        "View logs for your APM and infrastructure data",
        "Error data types: events and trace details",
        "Events",
        "Trace details",
        "Caps on error reporting",
        "Charting error rates and counts",
        "Report custom errors",
        "Ignore errors",
        "Reduce noise with expected errors",
        "Disable error traces",
        "Delete error traces",
        "Caution"
      ],
      "title": "Manage error data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "29a2ebdc7b91029a1fada50791b90e9dc548f17e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/manage-error-data/",
      "published_at": "2022-01-12T08:45:52Z",
      "updated_at": "2021-11-14T09:35:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM Errors page helps you identify, triage, and fix errors in your services. The Errors page uses data collected by the APM agent to display stack traces, transaction attributes such as HTTP header values, and any other custom attributes, so you can understand the context of the error and fix it. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Error data types: events and trace details By default, our APM agents collect two type of error data: Events Trace details Events The error event data type includes default attributes, as well as any custom attributes instrumented in your service. It doesn't include a stack trace. Find your events data in the Errors UI as follows: The Errors column in the Error traces table. The Top 5 errors chart. When you’ve drilled into a grouping of errors, those errors not displaying a stack trace are based on this type of data. You can disable Show only errors with stack trace to show errors that have this type of data collected, but no associated trace details. Events are subject to sampling (see Caps on error reporting and Charting error rates and counts). For more on error event data, see Events reported by APM. Trace details The trace details error data type includes stack traces and attributes, and supplements events with more data. It's expected that more events will be reported than trace details--see Caps on error reporting. Find your trace details data in the Errors UI as follows: The Stack traces column of the Error traces table. When you’ve drilled into a grouping of errors, those errors with a stack trace use this type of data. Show only errors with stack trace is enabled by default, to constrain the errors shown to just those that have this type of data collected. This data is governed by specific retention rules for Error details. Caps on error reporting New Relic caps error reporting at: 100 events per minute per agent instance 20 trace details per minute per agent instance These caps prevent error reporting from negatively impacting application performance. Examples: App running across five EC2 instances, one JVM each. New Relic caps error reporting at: 100 events per minute x 5 instances = 500 events per minute 20 trace details per minute x 5 instances = 100 trace details per minute App running on one host with ten instances. New Relic caps error reporting at: 100 events per minute x 10 instances = 1000 events per minute 20 trace details per minute x 10 instances = 200 events per minute Charting error rates and counts The Error rate chart is driven by a query on metric timeslice data, which is an unsampled aggregate data type that is accurate but has very limited dimensionality. This data can't be faceted or filtered as flexibly as error event data. You can reproduce this chart in a dashboard, or explore the metric timeslice data further by clicking the ... menu on the Error rate chart, and then using the View query or Add to dashboard options. To chart faceted error counts using event data, as in the Top 5 errors chart, use an NRQL event query. Click the ... menu on the Top 5 errors chart and choose View query for a starting point in creating your chart. Since event data can be sampled (see Caps on error reporting), you can use the EXTRAPOLATE keyword to get an accurate error count, even if sampling is occurring. Report custom errors You can report errors not collected by default with our agents using our agent APIs. For more, see the documentation on the API. Ignore errors You can prevent certain errors that would normally be reported to New Relic from being collected using our agent APIs or the server-side configuration UI. For more details, see Manage errors in APM. Reduce noise with expected errors Sometimes you want to collect error data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors page, but won’t affect your service’s error rate or Apdex metrics. Disable error traces To prevent certain errors from being reported to New Relic, disable them in your agent's configuration file. For most agents, you can ignore certain error codes or disable errors completely. For more information, see your specific agent's configuration documentation: C SDK Go (not applicable; the agent only reports errors when configured to do so) Java .NET Node.js PHP Python Ruby Delete error traces Caution You cannot recover error traces after you delete them. Deleting errors is currently only available in the legacy Errors Classic UI. If you want to... Do this... Delete all error traces for your app If you have permissions to delete all error traces for an app: Go to one.newrelic.com > APM > (select an app) > More views > Errors (classic). Select Delete all errors. Delete all error traces for your account To delete all error traces for your New Relic account, get support at support.newrelic.com. Delete individual error traces To delete individual error traces, use APM's Errors (classic) page. Drill into an error from the table of errors, then click Delete this error. In addition to deleting error traces, you may also want to delete transaction traces or database/slow SQL traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 204.51141,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>error</em> data",
        "sections": "Manage <em>error</em> data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another <em>UI</em> <em>page</em> in New Relic One. <em>Error</em> data types: events and trace details By default, our <em>APM</em> agents collect two type of <em>error</em> data: Events Trace details Events The <em>error</em> event data type includes default attributes"
      },
      "id": "6044077e28ccbcab752c60d1"
    },
    {
      "sections": [
        "APM Error profiles: Troubleshoot trends",
        "Tip",
        "Error profile attribute examples",
        "Error profiles feature in APM",
        "Select error profile criteria",
        "Error profile criteria example",
        "Analyze error profile results",
        "Error and non-error distribution",
        "Top deviating values",
        "Other category",
        "No value category",
        "Filters"
      ],
      "title": "APM Error profiles: Troubleshoot trends",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "14c286f0cf0f8cc14674c6422fdfa6286393ca6e",
      "image": "https://docs.newrelic.com/static/fcd404afa812236cf952f7861f28cca3/8c557/apm-error-profile-tab-demo.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/apm-error-profiles-troubleshoot-trends/",
      "published_at": "2022-01-12T08:45:52Z",
      "updated_at": "2021-09-08T19:58:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When DevOps experts need to track down what causes errors in your app, it may not be easy to identify the cause. APM's error profiles automatically compare one set of events to another. Each error profile provides visual details about significant differences in the frequency of different values for the events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of non-erroring transactions This helps you take more of the guesswork out of resolving your app errors. You can more easily determine if you can safely ignore the error, or if you should attempt to resolve the error with a new deployment, code edits, customer communications, or other actions. Tip To view error profiles, you must use the classic APM view in New Relic One. To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. Error profile attribute examples Error profiles appear as a separate tab on your APM Errors page. Error profiles feature in APM Use error profiles to troubleshoot trends and significant differences in the frequency of error events for your app. An error profile is a collection of attributes with significantly different traits compared to non-errors. An attribute is \"unusual\" if a set of events represent what is normal (for example, errors compared to all traffic for a given time window), or differences between similar criteria (for example, two different hosts). Errors may be related to events such as: Specific web transaction names or non-web transaction names, JVM thread names, etc. Unique types of error messages, classes, etc. Random customer interactions; for example, a particular error comes from a single customer's account, while normal traffic comes from a wide variety of accounts External call counts or duration Timing differences among hosts in your ecosystem, cluster agent IDs, etc. Other anomalies Select error profile criteria Based on criteria in your app's Errors page, New Relic analyzes and lists unusual trends by their significance. Your selected criteria includes: Time window Errors page filters Search criteria on the Errors page or the Error profiles tab As you examine error profile results and want to dig deeper, add or change your app's error profile criteria. The Error profile tab refreshes to show the traits that distinguish the errors that match the updated criteria. Error profile criteria example Your app's Error profile tab currently shows several error classes or messages. To filter to a specific error class or message, use any of these options: From the Errors page's time picker, change the time range. For example, change the default (30 minutes) to Last 24 hours, ending now. From the Errors page's filter section: Select Back to groupings list, then select other Error groups, Error attributes, or Custom attributes. From the Errors page's filter section: Click a specific item on the list to narrow the filter. For example, if several error messages are listed, click only the message you are interested in. From the Error profiles tab's search box, type class, message, or other search values. Analyze error profile results To examine details for the attribute results in your app's error profile, you must use the classic APM view in New Relic One. Go to one.newrelic.com/apm > APM > (select an app) > Events > Errors, then toggle Show new view so that APM shows the classic view of the Errors page. From the Errors page, select the Error profile tab. From the Error profile tab, review the list of error attributes that match the currently selected error profile criteria. To view a specific attribute's details, click it. To highlight specific error details, mouse over any pie chart segment or table row for the attribute. To investigate a specific attribute for your app's errors, type its name in the Error profiles tab's search window, or change the currently selected error profile criteria. Compare values with large differences to identify the traits that distinguish the errors for an attribute. The comparative data in the error profile results and the error trace details can help you decide what steps to take for additional troubleshooting and resolving the error. Error and non-error distribution Depending on an error's attributes, sometimes the attribute is distributed differently for errors than for non-errors. Top deviating values New Relic analyzes each attribute for your app's errors and compares the distribution for errors that match your criteria to transactions without errors. If the proportions between these errors are roughly the same compared to transactions without any errors, the attribute does not contain much useful information for debugging. New Relic limits the error profile's pie chart and table for each attribute to show only the top deviating values. When proportions are roughly the same, New Relic does not include them in the error profile. Other category After the top deviating values, the error profile groups the rest into an Other category. This helps you focus on the values that are different for these errors. No value category If values are unusually present or are not present in the errors, you may see a No value category on the list of error profiles. Filters If you do not have any filters selected, the profile shows any distinguishing traits your errors exhibit in aggregate. Example: A certain kind of transaction makes up 20% of all of your traffic and is responsible for 80% of your errors. The error profile will show the unexpected proportions in the Transaction attribute. Adjust your error profile criteria to drill down even deeper into the profile results, so you can more effectively troubleshoot and resolve specific error events.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 190.1305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "sections": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. <em>Error</em> profile attribute examples <em>Error</em> profiles appear as a separate tab on your <em>APM</em> Errors <em>page</em>. <em>Error</em> profiles feature in <em>APM</em> Use <em>error</em> profiles to troubleshoot trends and significant"
      },
      "id": "6044074764441fe72a378f08"
    },
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.84308,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "In <em>APM</em>, when transaction traces are collected, there may be additional Slow query data available on the Databases <em>page</em>. Let&#x27;s look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different"
      },
      "id": "604407dae7b9d26489579a05"
    }
  ],
  "/docs/apm/apm-ui-pages/error-analytics/manage-error-data": [
    {
      "sections": [
        "Errors page: Find, fix, and verify problems",
        "View the APM Errors page",
        "Important",
        "Use the Errors workflow to identify problems",
        "Error rate chart: See patterns immediately",
        "Top five errors: Correlate to alerts or find significant groupings",
        "Error traces: Find the line of code and data needed to reproduce the issue",
        "Examine logs for error details",
        "Expected errors",
        "Errors outside transactions",
        "Select the time period for error data"
      ],
      "title": "Errors page: Find, fix, and verify problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "fe321816a8727f65e32b4ec1f381ba9d17c432b7",
      "image": "https://docs.newrelic.com/static/1b3bf12a5d48aa0396de5e488bf17f27/c1b63/WebPortal___New_Relic_One.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/errors-page-find-fix-verify-problems/",
      "published_at": "2022-01-12T08:45:13Z",
      "updated_at": "2021-11-14T09:35:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Errors UI in New Relic One, you can see the line of code that's causing a bad experience for your users, and get enough data to reproduce the issue so you can fix it. When you do, you’ll be able to confirm your fix is working in production. Use Errors in New Relic One to: Group and filter events to triage important errors. Get alert notifications about errors. Review stack traces, logs, and other details. Share the error information with charts and dashboards. Report new errors using instrumentation, prevent certain errors from being reported, and filter out noisy errors using expected errors. View the APM Errors page Important As of November 1, 2021, the APM Errors (classic) UI will be discontinued in favor of the New Relic One APM Errors UI. For more details, see our Explorers Hub post. To view the Errors page: Go to one.newrelic.com > APM > (select an app), then click the Error rate table's title on your selected app's Summary page. OR Go to one.newrelic.com > APM > (select an app) > Events > Errors. APM Errors UI: The Error rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5 by count chart and Error traces table. Use the Instance dropdown to focus on a specific instance. Use the Errors workflow to identify problems Use this basic workflow to get the most out of the information you see from the Errors page. Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. Correlate any general patterns on the Top 5 errors chart to alerts occurring during the same time period. Use the groups and filters to examine the error events and attributes in more detail, and look for patterns with error messages, transaction names, or other groupings. Explore and share Error trace table information, including specific stack trace details, logs, and attributes (host, URL, user, custom attributes, etc.) Also review the Error profiles page to guide your investigation into which attribute values might be correlated to the cause of errors, by comparing the frequency of those values between transactions where the error did and didn't occur (only in the old UI). Error rate chart: See patterns immediately Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. For example, are there any spikes near a recent deployment? You may want to change the selected time period to look for other historical patterns. This chart always shows the overall error rate and count for the selected time period, even when you filter the rest of the page. If you want to focus your investigation on a particular type of error, use the Top 5 errors chart or the Error traces table. Top five errors: Correlate to alerts or find significant groupings Use the Top 5 errors chart to identify what error types and how many of those errors occurred during the same time period as the Error rate chart. For example: Is the error spike related to a specific exception class or transaction? Do the top errors point to a new host/container that recently got moved into production? Are the top error messages repeatedly about failed connections by hosts that you know are in a specific region of your organization? Have the chart backgrounds changed color to indicate an alert condition? (Light pink indicates the alert condition's Warning threshold, and dark pink indicates the Critical threshold.) If you want to... Do this... Change the \"top 5\" selection By default, Top 5 errors chart shows the top five errors by error class and transaction name. To group by other attributes, such as error message, host, or custom attribute, use the search bar. Explore or share error trend data The Top 5 errors chart uses error events, which include rich attribute data b default, along with any custom attributes you have added to the error event type. To examine this data in more detail, or to share it with others, select the View query or Add to dashboard links that appear when you click the chart's ... menu. Error traces: Find the line of code and data needed to reproduce the issue The Error traces table groups errors by the attributes you've selected, and links them to relevant detailed error traces. Each row helps you find answers to questions such as: How many of this transaction/class (or custom grouping) occurred within the selected time period? What is the most recent error message? When did this error first and last occur? Sometimes it may be useful to sort error trace data other than from the most to fewest occurrences. You can change the sort order or filter options to focus on just the types of errors that matter the most to you and your teams. For example: Which error has the fewest occurrences (sort on Errors column)? When did a particular error stop (sort on Last occurred)? Once you find the group of errors you want to fix, click a row in the Error traces table to drill down into the stack traces and attribute data that help pinpoint the cause. Examine logs for error details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Errors page, click on an error to go to the Error details page. From the error details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your error details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Expected errors Reduce noisy errors by marking them as “expected errors”. Such errors won't affect reported error rate or Apdex metrics. See Manage errors for more details. Expected errors aren't shown by default on the Errors page. You can show them by turning on the Show N expected errors switch below the Group by bar. Errors outside transactions Using the New Relic agent API, you can record custom errors at any point in the execution of your code. Sometimes, such custom errors will occur when a transaction is not executing, such as in high-volume aynchronous code that doesn't handle an HTTP transaction. Errors outside transactions are shown by default on the Errors page, but you can hide them by turning off the Show N errors outside transactions switch below the Group by bar. Select the time period for error data Use the time picker to examine details of error events over the past week. The error events view is available for up to a seven-day window of data collected over the last eight days. You may notice slight differences in count if your time window is set to ending now. This occurs because the counts for the list and table may be requested at slightly different times as the page auto-refreshes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 204.51125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Errors</em> <em>page</em>: Find, fix, and verify problems",
        "sections": "View the <em>APM</em> <em>Errors</em> <em>page</em>",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the <em>Error</em> rate table&#x27;s title on your selected app&#x27;s Summary <em>page</em>. OR Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Events &gt; Errors. <em>APM</em> Errors <em>UI</em>: The <em>Error</em> rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5"
      },
      "id": "60440747e7b9d2f2295799b6"
    },
    {
      "sections": [
        "APM Error profiles: Troubleshoot trends",
        "Tip",
        "Error profile attribute examples",
        "Error profiles feature in APM",
        "Select error profile criteria",
        "Error profile criteria example",
        "Analyze error profile results",
        "Error and non-error distribution",
        "Top deviating values",
        "Other category",
        "No value category",
        "Filters"
      ],
      "title": "APM Error profiles: Troubleshoot trends",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "14c286f0cf0f8cc14674c6422fdfa6286393ca6e",
      "image": "https://docs.newrelic.com/static/fcd404afa812236cf952f7861f28cca3/8c557/apm-error-profile-tab-demo.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/apm-error-profiles-troubleshoot-trends/",
      "published_at": "2022-01-12T08:45:52Z",
      "updated_at": "2021-09-08T19:58:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When DevOps experts need to track down what causes errors in your app, it may not be easy to identify the cause. APM's error profiles automatically compare one set of events to another. Each error profile provides visual details about significant differences in the frequency of different values for the events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of non-erroring transactions This helps you take more of the guesswork out of resolving your app errors. You can more easily determine if you can safely ignore the error, or if you should attempt to resolve the error with a new deployment, code edits, customer communications, or other actions. Tip To view error profiles, you must use the classic APM view in New Relic One. To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. Error profile attribute examples Error profiles appear as a separate tab on your APM Errors page. Error profiles feature in APM Use error profiles to troubleshoot trends and significant differences in the frequency of error events for your app. An error profile is a collection of attributes with significantly different traits compared to non-errors. An attribute is \"unusual\" if a set of events represent what is normal (for example, errors compared to all traffic for a given time window), or differences between similar criteria (for example, two different hosts). Errors may be related to events such as: Specific web transaction names or non-web transaction names, JVM thread names, etc. Unique types of error messages, classes, etc. Random customer interactions; for example, a particular error comes from a single customer's account, while normal traffic comes from a wide variety of accounts External call counts or duration Timing differences among hosts in your ecosystem, cluster agent IDs, etc. Other anomalies Select error profile criteria Based on criteria in your app's Errors page, New Relic analyzes and lists unusual trends by their significance. Your selected criteria includes: Time window Errors page filters Search criteria on the Errors page or the Error profiles tab As you examine error profile results and want to dig deeper, add or change your app's error profile criteria. The Error profile tab refreshes to show the traits that distinguish the errors that match the updated criteria. Error profile criteria example Your app's Error profile tab currently shows several error classes or messages. To filter to a specific error class or message, use any of these options: From the Errors page's time picker, change the time range. For example, change the default (30 minutes) to Last 24 hours, ending now. From the Errors page's filter section: Select Back to groupings list, then select other Error groups, Error attributes, or Custom attributes. From the Errors page's filter section: Click a specific item on the list to narrow the filter. For example, if several error messages are listed, click only the message you are interested in. From the Error profiles tab's search box, type class, message, or other search values. Analyze error profile results To examine details for the attribute results in your app's error profile, you must use the classic APM view in New Relic One. Go to one.newrelic.com/apm > APM > (select an app) > Events > Errors, then toggle Show new view so that APM shows the classic view of the Errors page. From the Errors page, select the Error profile tab. From the Error profile tab, review the list of error attributes that match the currently selected error profile criteria. To view a specific attribute's details, click it. To highlight specific error details, mouse over any pie chart segment or table row for the attribute. To investigate a specific attribute for your app's errors, type its name in the Error profiles tab's search window, or change the currently selected error profile criteria. Compare values with large differences to identify the traits that distinguish the errors for an attribute. The comparative data in the error profile results and the error trace details can help you decide what steps to take for additional troubleshooting and resolving the error. Error and non-error distribution Depending on an error's attributes, sometimes the attribute is distributed differently for errors than for non-errors. Top deviating values New Relic analyzes each attribute for your app's errors and compares the distribution for errors that match your criteria to transactions without errors. If the proportions between these errors are roughly the same compared to transactions without any errors, the attribute does not contain much useful information for debugging. New Relic limits the error profile's pie chart and table for each attribute to show only the top deviating values. When proportions are roughly the same, New Relic does not include them in the error profile. Other category After the top deviating values, the error profile groups the rest into an Other category. This helps you focus on the values that are different for these errors. No value category If values are unusually present or are not present in the errors, you may see a No value category on the list of error profiles. Filters If you do not have any filters selected, the profile shows any distinguishing traits your errors exhibit in aggregate. Example: A certain kind of transaction makes up 20% of all of your traffic and is responsible for 80% of your errors. The error profile will show the unexpected proportions in the Transaction attribute. Adjust your error profile criteria to drill down even deeper into the profile results, so you can more effectively troubleshoot and resolve specific error events.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 190.1305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "sections": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. <em>Error</em> profile attribute examples <em>Error</em> profiles appear as a separate tab on your <em>APM</em> Errors <em>page</em>. <em>Error</em> profiles feature in <em>APM</em> Use <em>error</em> profiles to troubleshoot trends and significant"
      },
      "id": "6044074764441fe72a378f08"
    },
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.84305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "In <em>APM</em>, when transaction traces are collected, there may be additional Slow query data available on the Databases <em>page</em>. Let&#x27;s look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different"
      },
      "id": "604407dae7b9d26489579a05"
    }
  ],
  "/docs/apm/apm-ui-pages/events/deployments-page-view-impact-your-app-users": [
    {
      "sections": [
        "Thread profiler tool",
        "Supported agents",
        "Start the profiler",
        "View profile data",
        "Agent considerations",
        ".NET-specific notes",
        "Python-specific notes",
        "Ruby-specific notes"
      ],
      "title": "Thread profiler tool",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "e2d300aa5dd9bdbf73684a04080773db0d1acd2b",
      "image": "https://docs.newrelic.com/static/1331956275509db052de91a6d8caebda/c1b63/thread-profiler-session.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/events/thread-profiler-tool/",
      "published_at": "2022-01-12T08:46:29Z",
      "updated_at": "2021-09-20T19:33:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The thread profiler is a low-impact profiling tool that can be used in production to identify bottlenecks in an application. It works by periodically (100ms) capturing the stack trace of each thread for a specified duration. At the end of the specified duration, the stack traces are aggregated to build a tree. The call count in the tree corresponds to the number of times that function was present in the stack traces under the same context. Although the call tree cannot capture the entire execution, a large enough sample can be a good representation of the application behavior. This provides insights into the \"hot\" functions of the app where most of the time is spent. With this scope, entries sampled less than 0.05% are omitted. Supported agents This feature is available only for specific agents and versions: Java: Agent versions 1.2.004.6 or higher .NET: Framework: Agent versions 2.12.146.0 or higher .NET Core 2.0: Agent versions 8.3.360.0 or higher (Windows only) Linux: .NET Core 3.0 or higher and agent versions 8.23 or higher Python: Agent versions 1.7.0 or higher Ruby: Agent versions 3.5.5 or higher Start the profiler The thread profiler feature is enabled by default. You also may be able to turn it on or off in your agent configuration file: Java: thread_profiler.enabled NET: You cannot disable the thread profiler with .NET apps. Python: thread_profiler.enabled Ruby: thread_profiler.enabled When enabled, you can view the thread profiler from our user interface: Go to one.newrelic.com > APM > (select an app) > Events > Thread profiler. Select the host you want to run the profiler on. Set the duration for the profiling session. Select Start profiler. This triggers the agent to start the thread profiler during the next harvest cycle (every one minute) and capture data for the specified duration. We record thread backtraces whether or not they are in a runnable state at the time the sample is taken. Threads that are sleeping or blocked on IO may appear in the call tree. one.newrelic.com > APM > (select an app) > Events > Thread profiler: Use this page to define the settings for the thread profiler duration and to view the results. View profile data After the profiler finishes running, the agent will report the profile data. The call tree automatically appears on the Thread profiler page. The percentages in the call tree represent the percentage of thread backtrace samples in which each call path appeared during the profiling session. The data collection started at the PROFILE COLLECTED time. The page color-codes the tree results: Red: Percentages greater than 30% Yellow: Percentages greater than 10% Black: Percentages less than 10% If you want to... Do this... Change how the thread profile information appears Select your choices of available options in the Tree settings, and select Refresh tree. Change how much information appears Select the Expand or Collapse options above the call tree, or select the name or arrow on any line in the call tree. View summary information about any line in the call tree Mouse over the line. Email the thread profile results to others Select Share this profile. Start another session or view a different thread profile Select Back to all profiles. Agent considerations Depending on which agent you use, the thread profiling feature has additional considerations. .NET-specific notes When using thread profiling with the .NET Framework agent, be aware of the following. .NET agent Thread profiler notes Supported on Linux Thread profiling on Linux is supported on .NET Core 3.0 or later applications when running .NET agent version 8.23 or later. Managed threads only For .NET agents, the thread profiler only captures stack traces on managed threads. It does not capture stack traces on unmanaged threads. If a call to an unmanaged function occurs on a managed thread, the thread profiler will show Native:Function Call in the call tree. No line numbers A .NET thread profile does not include line numbers in the call tree. The Show line numbers checkbox in the Tree Settings does not have any effect. Bug with 64-bit v4.0 .NET CLR There is a bug in the 64-bit version 4.0 .NET Common Language Runtime (CLR) that interferes with the agent's ability to retrieve managed stack traces. If your app experiences this bug, APM will show empty thread profiles. This bug does not affect 32-bit applications. The bug is fixed in the CLR releases for .NET 4.5. To verify whether your 64-bit application has the fixed version, look at the full version of the mscorlib.dll in the C: \\ Windows \\ Microsoft.NET \\ Framework64 \\ v4.0.30319 directory. The fix is in versions 4.0.30319.17379 or higher. Other category only All threads are put in the Other category. The Web Request and Background categories are not supported. Python-specific notes When using thread profiling with the Python agent, be aware of the following. Python agent Thread profiler notes Co-routine based systems There are limits to capturing details when a co-routine based system is being used, such as gevent or eventlet modes of gunicorn. If creating a new thread, the Python agent will actually create a greenlet instead of a thread profiler background thread. Therefore, the thread profiler will not capture any web request and background transactions on the thread profiler page. Greenlets A greenlet can run only when other greenlets explicitly yield control, such as when they block. For example, if the thread sampler does get to run, it will only sample the stack for other greenlets at a point where they are blocked. It will not sample them when they are executing arbitrary code. It can completely miss execution within a greenlet if it never blocked or otherwise yielded to another greenlet. Time in Python code Time spent in pure Python code that isn't blocking requests will not be picked up, and no information will be recorded or reported. This is because results are misleading when co-routines are used. Ruby-specific notes When using thread profiling with the Ruby agent, be aware of the following. Ruby agent Thread profiler notes Backtraces The thread profiler depends on the ability to capture thread backtraces from within your Ruby application. For this reason, it requires MRI 1.9.2 or higher (for the Thread#backtrace method). Resque The Ruby agent does not currently support thread profiles with Resque background jobs. A thread profiling session initiated against Resque will only capture traces from the parent process, not the job processes. JRuby JRuby support is considered experimental at this time. There are known issues with JRuby's Thread#backtrace implementation that will affect the accuracy of and reliability of backtraces collected under JRuby.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.23627,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " for the specified duration. We record thread backtraces whether or not they are in a runnable state at the time the sample is taken. Threads that are sleeping or blocked on IO may appear in the call tree. one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Thread profiler: Use this <em>page</em> to define"
      },
      "id": "603ebd4928ccbccc3ceba78e"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2022-01-12T08:49:55Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.07356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Events</em> &gt; Alerts. one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Alerts: Use this <em>page</em> to view or filter information about alerts over the past two weeks"
      },
      "id": "603ebe4c196a676588a83dd6"
    },
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.92363,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "In <em>APM</em>, when transaction traces are collected, there may be additional Slow query data available on the Databases <em>page</em>. Let&#x27;s look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different"
      },
      "id": "604407dae7b9d26489579a05"
    }
  ],
  "/docs/apm/apm-ui-pages/events/thread-profiler-tool": [
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2022-01-12T08:49:55Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.07356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Events</em> &gt; Alerts. one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Alerts: Use this <em>page</em> to view or filter information about alerts over the past two weeks"
      },
      "id": "603ebe4c196a676588a83dd6"
    },
    {
      "sections": [
        "Deployments page: View impact on your app and users",
        "Set up deployment notifications",
        "View deployment details",
        "View performance after a deployment",
        "Tip"
      ],
      "title": "Deployments page: View impact on your app and users",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "e312ce78e93b452b265b646406db3a39d3f7e696",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/events/deployments-page-view-impact-your-app-users/",
      "published_at": "2022-01-12T08:46:29Z",
      "updated_at": "2021-03-16T06:31:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Deployments page lists recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors. You can view and drill down details, use search and sort options, hide or delete the error, share it with others, or file a ticket about it. Set up deployment notifications For all APM agents, you can record deployments by using webhooks or by using the New Relic REST API (v2). Some agents also have specific methods, such as the Java agent jar or the Python agent's newrelic-admin script. View deployment details After you configure the deployment information, you can view and drill down into details: Go to one.newrelic.com > APM > (select an app) > Events > Deployments. Use any of New Relic's standard user interface functions to drill down into detailed information. To view details for a particular event, select its date link. To view the errors page for this deployment, select the error link. To view details for a specific deployment if applicable, select Change log or Change report. The Change log contains any detail provided through the changelog parameter when recording the deployment. The Change report displays the behavior of the top ten transactions before and after the deployment. View performance after a deployment The Deployments page link for individual deployments appears on the selected app's Summary page in the Events section. For time frames shorter than 14 days, a blue vertical bar on a chart will indicate a deployment. To view summary information about the deployment, mouse over the blue bar. Tip You can also use the Compare with option on your APM summary page to select a time period to compare the same data. If you enable Compare with, the UI does not show deployment markers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.35774,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Deployments <em>page</em>: View impact on your app and users",
        "sections": "Deployments <em>page</em>: View impact on your app and users",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the deployment information, you can view and drill down into details: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Deployments. Use any of New Relic&#x27;s standard user interface functions to drill down into detailed information. To view details for a particular <em>event</em>, select its date link. To view"
      },
      "id": "603ebe19e7b9d2bc362a07cc"
    },
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.92363,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "In <em>APM</em>, when transaction traces are collected, there may be additional Slow query data available on the Databases <em>page</em>. Let&#x27;s look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different"
      },
      "id": "604407dae7b9d26489579a05"
    }
  ],
  "/docs/apm/apm-ui-pages/features/analyze-database-instance-level-performance-issues": [
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.84302,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "In <em>APM</em>, when transaction traces are collected, there may be additional Slow query data available on the Databases <em>page</em>. Let&#x27;s look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different"
      },
      "id": "604407dae7b9d26489579a05"
    },
    {
      "sections": [
        "Request queue server configuration examples",
        "Apache",
        "Nginx",
        "F5 load balancers",
        "Network timing"
      ],
      "title": "Request queue server configuration examples",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c7a069b8875af411530a34aaef67155d20d7fb19",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/features/request-queue-server-configuration-examples/",
      "published_at": "2022-01-12T08:50:25Z",
      "updated_at": "2021-07-09T08:23:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to report request queuing, New Relic agents depend on an HTTP header set by the front-end web server (such as Apache or Nginx) or load balancer (such as HAProxy or F5). These examples use the X-Request-Start header, since it is has broader support across platforms. If this does not work with your server configuration for request queuing, try using the X-Queue-Start header. The syntax should otherwise be the same. Apache Apache's mod_headers module includes a %t variable that is formatted correctly. To enable request queue reporting, add this code to your Apache config: RequestHeader set X-Request-Start \"%t\" Copy Nginx If you are using Nginx version 1.2.6 or higher and the latest version of the Ruby, Python, or PHP agent, Nginx can easily be configured to report queue time. (For Nginx versions 1.2.6 or lower, you must recompile Nginx with a module or patch.) Configuring with Nginx 1.2.6 or higher uses the ${msec} variable, which is a number in seconds with milliseconds resolution. For more information, see http://nginx.org/en/docs/http/ngx_http_core_module.html#variables. Add the appropriate information to your Nginx config: Nginx configuration Values General Nginx use proxy_set_header X-Request-Start \"t=${msec}\"; Copy Passenger Version 5 or higher: >passenger_set_header X-REQUEST-START \"t=${msec}\"; Copy Older versions: passenger_set_cgi_param X_REQUEST_START \"t=${msec}\"; Copy fastcgi fastcgi_param HTTP_X_REQUEST_START \"t=${msec}\"; Copy uWSGI uwsgi_param HTTP_X_REQUEST_START \"t=${msec}\"; Copy F5 load balancers For F5 load balancers, use this configuration snippet: when HTTP_REQUEST_SEND { # TCL 8.4 so we have to calculate the time in millisecond resolution # Calculation from: https://groups.google.com/forum/? fromgroups=#!topic/comp.lang.tcl/tV9H6TDv0t8 set secs [clock seconds] set ms [clock clicks -milliseconds] set base [expr { $secs * 1000 }] set fract [expr { $ms - $base }] if { $fract >= 1000 } { set diff [expr { $fract / 1000 }] incr secs $diff incr fract [expr { -1000 * $diff }] } set micros [format \"%d%03d000\" $secs $fract] # Want this header inserted as if coming from the client clientside { HTTP::header insert X-Request-Start \"t=${micros}\" } } Copy Network timing Even with request queuing configured, the front-end server's setup can still affect network time in your browser data. This is because the front-end server does not add the queuing time header until after it actually accepts and processes the request. The queuing time headers can never account for backlog in the listener socket used to accept requests. For example, if the front-end server's configuration results in a backlog of requests that queue in the listener socket, page load timing will show an increase in network time.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.61797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the queuing time header until after it actually accepts and processes the request. The queuing time headers can never account for backlog in the listener socket used to accept requests. For example, if the front-end server&#x27;s configuration results in a backlog of requests that queue in the listener socket, <em>page</em> load timing will show an increase in network time."
      },
      "id": "603eb84a28ccbc1734eba7a5"
    },
    {
      "sections": [
        "Configure request queue reporting",
        "HTTP header",
        "Tip",
        "C SDK",
        "Go agent",
        "Java, Node.js, Python, Ruby agents",
        ".NET agent",
        "PHP agent"
      ],
      "title": "Configure request queue reporting",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "3226477ad8d63af87fd5947589af31d0d679b89b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/features/configure-request-queue-reporting/",
      "published_at": "2022-01-12T08:49:54Z",
      "updated_at": "2021-03-16T08:18:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Request queuing occurs before the request reaches your application (where the agent resides). This is why you need to do some straightforward configuration of the agent and your production hosts to take advantage of this feature. HTTP header In order to report request queuing, most New Relic agents depend on an HTTP header set by the front-end web server (such as Apache or Nginx) or load balancer (such as HAProxy or F5). You can configure these front-end servers to set the timestamp in the HTTP header that represents when the request first entered your production infrastructure. Tip Set this header as soon after the request enters your infrastructure as possible so that you are less likely to miss performance problems in your infrastructure that occur before the header is set. Most New Relic agents will interpret an X-Queue-Start or X-Request-Start header and use it to calculate Request Queuing. The agents treat these headers identically. Include a value in the format t=MICROSECONDS_SINCE_EPOCH where MICROSECONDS_SINCE_EPOCH is an integer value of the number of microseconds that have elapsed since the beginning of the Unix epoch (for example, January 1, 1970). Nearly any front-end HTTP server or load balancer can be configured to add this header. Additional details depend on your specific agent and server configuration. For more information, see the request queue configuration examples. C SDK The C SDK does not support request queuing. Go agent With the Go agent, set either header to record a metric for it. Java, Node.js, Python, Ruby agents The most recent versions of the Java, Node.js, Python, and Ruby agents provide more flexibility in the format of the X-Request-Start or X-Queue-Start header. These agents allow the timestamp to be submitted in seconds, milliseconds, or microseconds as an integer or floating point value. These agents also allow the leading t= in the header value to be omitted. Based on the order of magnitude, these agents automatically interpret the time unit as seconds, milliseconds, or microseconds. New Relic can do this reliably since a millisecond timestamp, interpreted as microseconds, would result in a queue time over 40 years. Python agent only: When using Apache/mod_wsgi 3.4 or higher, mod_wsgi will automatically insert an equivalent to the X-Queue-Start header into the WSGI environ dictionary for each request. This will mark the specific point in time where Apache first accepted the request. The value set by mod_wsgi will be picked up and used by the Python agent if no separate X-Request-Start or X-Queue-Start header has been manually configured into a web server's front end or in Apache itself. .NET agent The .NET agent does not require (and will ignore) any configuration of HTTP headers to calculate queue time. It works by instrumenting the IIS-queuing mechanism directly and reports queue time as the difference between when the HttpContext constructor executes and when the HttpApplication.BeginRequest event fires. Request queue time is only reported for .NET Framework applications hosted on IIS (for example: ASP.NET applications). It is not reported for ASP .NET Core applications (targeting .NET Core or Framework), nor for self-hosted OWIN applications. PHP agent The PHP agent only supports the X-Request-Start header. This identifies the timestamp in microseconds as an integer, with an optional t= in the header value. To ensure that the header is read properly, check your phpinfo() under the PHP Variables section, and verify that _SERVER[\"HTTP_X_REQUEST_START\"] exists and is in the expected format. If you are using Nginx, see Request queue server configuration examples for additional information on setting the header.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.9338,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>"
      },
      "id": "603eb8ba28ccbc4b1deba769"
    }
  ],
  "/docs/apm/apm-ui-pages/features/request-queuing-tracking-front-end-time": [
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.84302,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "In <em>APM</em>, when transaction traces are collected, there may be additional Slow query data available on the Databases <em>page</em>. Let&#x27;s look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different"
      },
      "id": "604407dae7b9d26489579a05"
    },
    {
      "sections": [
        "Request queue server configuration examples",
        "Apache",
        "Nginx",
        "F5 load balancers",
        "Network timing"
      ],
      "title": "Request queue server configuration examples",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c7a069b8875af411530a34aaef67155d20d7fb19",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/features/request-queue-server-configuration-examples/",
      "published_at": "2022-01-12T08:50:25Z",
      "updated_at": "2021-07-09T08:23:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to report request queuing, New Relic agents depend on an HTTP header set by the front-end web server (such as Apache or Nginx) or load balancer (such as HAProxy or F5). These examples use the X-Request-Start header, since it is has broader support across platforms. If this does not work with your server configuration for request queuing, try using the X-Queue-Start header. The syntax should otherwise be the same. Apache Apache's mod_headers module includes a %t variable that is formatted correctly. To enable request queue reporting, add this code to your Apache config: RequestHeader set X-Request-Start \"%t\" Copy Nginx If you are using Nginx version 1.2.6 or higher and the latest version of the Ruby, Python, or PHP agent, Nginx can easily be configured to report queue time. (For Nginx versions 1.2.6 or lower, you must recompile Nginx with a module or patch.) Configuring with Nginx 1.2.6 or higher uses the ${msec} variable, which is a number in seconds with milliseconds resolution. For more information, see http://nginx.org/en/docs/http/ngx_http_core_module.html#variables. Add the appropriate information to your Nginx config: Nginx configuration Values General Nginx use proxy_set_header X-Request-Start \"t=${msec}\"; Copy Passenger Version 5 or higher: >passenger_set_header X-REQUEST-START \"t=${msec}\"; Copy Older versions: passenger_set_cgi_param X_REQUEST_START \"t=${msec}\"; Copy fastcgi fastcgi_param HTTP_X_REQUEST_START \"t=${msec}\"; Copy uWSGI uwsgi_param HTTP_X_REQUEST_START \"t=${msec}\"; Copy F5 load balancers For F5 load balancers, use this configuration snippet: when HTTP_REQUEST_SEND { # TCL 8.4 so we have to calculate the time in millisecond resolution # Calculation from: https://groups.google.com/forum/? fromgroups=#!topic/comp.lang.tcl/tV9H6TDv0t8 set secs [clock seconds] set ms [clock clicks -milliseconds] set base [expr { $secs * 1000 }] set fract [expr { $ms - $base }] if { $fract >= 1000 } { set diff [expr { $fract / 1000 }] incr secs $diff incr fract [expr { -1000 * $diff }] } set micros [format \"%d%03d000\" $secs $fract] # Want this header inserted as if coming from the client clientside { HTTP::header insert X-Request-Start \"t=${micros}\" } } Copy Network timing Even with request queuing configured, the front-end server's setup can still affect network time in your browser data. This is because the front-end server does not add the queuing time header until after it actually accepts and processes the request. The queuing time headers can never account for backlog in the listener socket used to accept requests. For example, if the front-end server's configuration results in a backlog of requests that queue in the listener socket, page load timing will show an increase in network time.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.61797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the queuing time header until after it actually accepts and processes the request. The queuing time headers can never account for backlog in the listener socket used to accept requests. For example, if the front-end server&#x27;s configuration results in a backlog of requests that queue in the listener socket, <em>page</em> load timing will show an increase in network time."
      },
      "id": "603eb84a28ccbc1734eba7a5"
    },
    {
      "sections": [
        "Configure request queue reporting",
        "HTTP header",
        "Tip",
        "C SDK",
        "Go agent",
        "Java, Node.js, Python, Ruby agents",
        ".NET agent",
        "PHP agent"
      ],
      "title": "Configure request queue reporting",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "3226477ad8d63af87fd5947589af31d0d679b89b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/features/configure-request-queue-reporting/",
      "published_at": "2022-01-12T08:49:54Z",
      "updated_at": "2021-03-16T08:18:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Request queuing occurs before the request reaches your application (where the agent resides). This is why you need to do some straightforward configuration of the agent and your production hosts to take advantage of this feature. HTTP header In order to report request queuing, most New Relic agents depend on an HTTP header set by the front-end web server (such as Apache or Nginx) or load balancer (such as HAProxy or F5). You can configure these front-end servers to set the timestamp in the HTTP header that represents when the request first entered your production infrastructure. Tip Set this header as soon after the request enters your infrastructure as possible so that you are less likely to miss performance problems in your infrastructure that occur before the header is set. Most New Relic agents will interpret an X-Queue-Start or X-Request-Start header and use it to calculate Request Queuing. The agents treat these headers identically. Include a value in the format t=MICROSECONDS_SINCE_EPOCH where MICROSECONDS_SINCE_EPOCH is an integer value of the number of microseconds that have elapsed since the beginning of the Unix epoch (for example, January 1, 1970). Nearly any front-end HTTP server or load balancer can be configured to add this header. Additional details depend on your specific agent and server configuration. For more information, see the request queue configuration examples. C SDK The C SDK does not support request queuing. Go agent With the Go agent, set either header to record a metric for it. Java, Node.js, Python, Ruby agents The most recent versions of the Java, Node.js, Python, and Ruby agents provide more flexibility in the format of the X-Request-Start or X-Queue-Start header. These agents allow the timestamp to be submitted in seconds, milliseconds, or microseconds as an integer or floating point value. These agents also allow the leading t= in the header value to be omitted. Based on the order of magnitude, these agents automatically interpret the time unit as seconds, milliseconds, or microseconds. New Relic can do this reliably since a millisecond timestamp, interpreted as microseconds, would result in a queue time over 40 years. Python agent only: When using Apache/mod_wsgi 3.4 or higher, mod_wsgi will automatically insert an equivalent to the X-Queue-Start header into the WSGI environ dictionary for each request. This will mark the specific point in time where Apache first accepted the request. The value set by mod_wsgi will be picked up and used by the Python agent if no separate X-Request-Start or X-Queue-Start header has been manually configured into a web server's front end or in Apache itself. .NET agent The .NET agent does not require (and will ignore) any configuration of HTTP headers to calculate queue time. It works by instrumenting the IIS-queuing mechanism directly and reports queue time as the difference between when the HttpContext constructor executes and when the HttpApplication.BeginRequest event fires. Request queue time is only reported for .NET Framework applications hosted on IIS (for example: ASP.NET applications). It is not reported for ASP .NET Core applications (targeting .NET Core or Framework), nor for self-hosted OWIN applications. PHP agent The PHP agent only supports the X-Request-Start header. This identifies the timestamp in microseconds as an integer, with an optional t= in the header value. To ensure that the header is read properly, check your phpinfo() under the PHP Variables section, and verify that _SERVER[\"HTTP_X_REQUEST_START\"] exists and is in the expected format. If you are using Nginx, see Request queue server configuration examples for additional information on setting the header.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.9338,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>"
      },
      "id": "603eb8ba28ccbc4b1deba769"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/agent-specific-ui-pages": [
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.68399,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": ": Do one of the following: New Relic Explorer: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. <em>APM</em>: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. Select a database transaction. If available, select any available slow queries listed on the <em>page</em>"
      },
      "id": "604407dae7b9d26489579a05"
    },
    {
      "sections": [
        "Transactions page: Find specific performance problems",
        "Types of transactions",
        "Tip",
        "Wall-clock time",
        "View transactions",
        "Use drill-down functions",
        "Change the displayed transaction Type",
        "Select the type of performance measurement (Sort)",
        "Mouse over summary information about a transaction",
        "Select detailed information about a transaction",
        "View transaction data in different visual formats",
        "Show corresponding browser request data",
        "Identify transaction segments with high call counts or time",
        "Show all transactions",
        "Additional functions",
        "Caution"
      ],
      "title": "Transactions page: Find specific performance problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "af8aa4a977d05428494b8b34aed1ac6ea831d8db",
      "image": "https://docs.newrelic.com/static/0b30cbf2e9065777c252216f96c80ad7/a2d4f/APM-transaction-high-time-colorization_0.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/transactions-page-find-specific-performance-problems/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-11-13T07:21:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Transactions page helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This page lists the selected app's transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per minute or rpm). For non-web transactions (such as message processing, background tasks, and other processes and jobs that do not handle web requests), this page shows charts of CPU and memory usage. Types of transactions Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Depending on your selected application, the Transactions page may include a dropdown you can use to select from the types of transactions available. New Relic measures processing time by type of request (web transaction or non-web transaction). This may include: Web: App server requests Non-web: Other requests (operations, background tasks, etc.) The Transactions page also may include links to transaction traces and key transactions. The types of information available will depend on your selected app and the type of request (web or non-web). Wall-clock time Wall-clock time is the amount of time recorded by the clock. New Relic uses wall-clock time for all the transactions and then sums that value across all of the transactions. The host can execute requests in parallel, so you may see percentages over 100. For example, 100% would indicate that the execution time across all selected transactions is equal to the time expended when recording wall-clock time. View transactions To view information about your app's transaction requests: Do one of the following: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Go to one.newrelic.com > Explorer > (select an app) > Monitor > Transactions. If applicable: To change which available types of transactions appear, select the Type. Select the sort order, or keep the default. Select the type of view as a chart (default), histogram, or percentile, if available. To view additional details, use any of the transaction drill-down functions. To add a chart to a dashboard, mouse over the chart, then select the Add to a dashboard link that appears below it. If a chart's background is light red, this indicates a time period when an alert condition's Critical threshold has been violated. To view the incident details in New Relic Alerts, click the chart. For more information, see the documentation about navigating core UI components in New Relic One. Use drill-down functions Use any of New Relic's standard user interface functions to drill down into detailed information. The Transactions page has additional drill-down functions. Change the displayed transaction Type If the Type dropdown appears above list of transactions, you can select your choice of transaction type. The available types depend on what transactions your application uses. Select the type of performance measurement (Sort) The Sort dropdown above the transaction list allows you to review transactions according to different measurements. This helps you identify good candidates for performance tuning or fixing errors. You can sort by: Sort option Comments Most time consuming (default) Highest percentage of the app's total time used. This measures which transactions consumed the most time in total. This is calculated by multiplying the number of times the transaction is called by the time the transaction took to complete. A transaction could be short, but if it is frequently called, it would appear at the top of this ranking. Slowest average response time Slowest individual transactions for the time period as averaged. This measures the slowest types of transaction. A transaction could be called only a few times, but if it is one of the longest transactions to finish, it would appear at the top of this ranking. Apdex most dissatisfying Transactions with the highest percentages of user dissatisfaction levels for the response time of your web apps and services (Apdex). The dissatisfaction level is the difference between a perfect Apdex score (1.0) and your app's apdex_t (\"tolerating\") score, based on your Apdex settings. Transactions that have the highest (worst) percentages appear at the top of this ranking. Highest throughput This measures the amount of throughput, in operation requests per minute or rpm. (For web throughput, requests per minute is sometimes called pages per minute or ppm.) Transactions that have the highest number of requests per minute appear at the top of this ranking. Tip Depending on the transaction type you choose, different sort options may be available. Mouse over summary information about a transaction To quickly view key pieces of information about the transaction, mouse over its name on the list. Select detailed information about a transaction To view detailed information, select a transaction from the list, then select App performance or Historical performance. You can also view transaction traces. View transaction data in different visual formats The Transaction page's Top 5 transactions chart and a selected transaction's App performance window include options to view data as a: Chart Histogram Percentile In addition, from the Breakdown table for a selected transaction, you can select the link to show or hide all segments of the breakdown data. Show corresponding browser request data In order to view browser information, you must install the browser agent. Then, to view corresponding browser request data, use either of these options: Select the Browser drill-down link if available. Go to one.newrelic.com > Browser > (select an app) > Page views. Identify transaction segments with high call counts or time In a transaction's Breakdown table, the Avg calls (per txn) column may include colorized segment values. These indicate instrumented segments that have exceeded thresholds. Yellow: Segment time is more than 10% of total transaction time and call count is higher than 10. Red: Segment time is more than 10% of total transaction time and call count is higher than 20. Show all transactions To view all available transactions as a table, select the Show all transactions table link. From here, use any of the available options: To change the sort order, select any column header. To export the data to a file with comma-separated values, select Export as CSV. To return to the previous chart view, select Back to top transactions. CSV tables for ending now time periods are calculated at run time. They may show slightly higher values than what appears in the APM table. For each transaction, the Show all transactions table includes these measurements: Measurement Definition Apdex The average Apdex score for all transactions that occurred in the selected time range. Apdex scores marked with an * asterisk indicate the agent collected fewer than 100 samples for that transaction name. Data for these transactions may be less accurate than data for transactions with higher throughput. Count The total number of all transactions that occurred in the selected time range. Avg (ms) The average time taken by all transactions in the selected time range. SD (ms) The standard deviation of all timing measurements for all transactions in the selected time range. Min (ms) The time taken by the fastest transaction in the selected time range. Max (ms) The time taken by the slowest transaction in the selected time range. Total (ms) The total amount of time taken by all transactions that occurred in the selected time range. Total (% time) The total amount of time for all transactions of that type, expressed as a percentage of the total amount of time taken by all transactions. Dissat (%) The percentage of the transactions that did not have satisfied Apdex scores. If you view transactions as a table, the All transactions row always contributes 100% of the app's total dissatisfaction, even if no responses are dissatisfying (100% of zero is zero). In this situation, 100% does not mean that all of your transactions are dissatisfying. The sum of all the other values in the Dissat (%) column is 100%. Additional functions Here are some additional functions for the Transactions page's selected transaction. If you want to... Do this... View transactions for operations and other background tasks Change the Type to Other transactions (or a specific type listed), then select a specific transaction. The Transactions page shows the top five transactions for this selection by wall-clock time, CPU usage, and memory usage. Track a transaction that is important to your business Select the transaction's name, then select Track as key transaction. View transaction trace details A transaction trace is a complete picture of a single transaction. From the Transactions page, select the transaction trace. Select the view for Summary, Trace details, or Database queries, if available. To expand the transaction trace to full screen view, select the full screen icon. To return to the Transactions page: Next to the transaction trace's name, select the back arrow. Examine logs for trace details If you are using our logs in context feature, you can see any logs that are linked to your traces. From the Transactions page, click on a trace to go to the trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. Add or view transaction segments To add segments to a transaction, use custom instrumentation. To view the segments of a specific transaction, use transaction traces. View reports You can also use the Web transactions analysis report for web transactions and the Background jobs analysis report for non-web transactions to compare the amount of time spent in throughput, total time in the transaction, average time to execute it, and Apdex score as applicable. Delete all transaction traces Caution If you select Delete all traces, you cannot recover them.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.83904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transactions <em>page</em>: Find specific performance problems",
        "sections": "Transactions <em>page</em>: Find specific performance problems",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Transactions <em>page</em> helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This <em>page</em> lists the selected app&#x27;s transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per"
      },
      "id": "603ebd8228ccbcd2d3eba77b"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2022-01-12T08:47:46Z",
      "updated_at": "2021-11-06T23:07:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. From here you can also view available error logs in context for your app. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99054,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data": [
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.68399,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": ": Do one of the following: New Relic Explorer: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. <em>APM</em>: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. Select a database transaction. If available, select any available slow queries listed on the <em>page</em>"
      },
      "id": "604407dae7b9d26489579a05"
    },
    {
      "sections": [
        "Transactions page: Find specific performance problems",
        "Types of transactions",
        "Tip",
        "Wall-clock time",
        "View transactions",
        "Use drill-down functions",
        "Change the displayed transaction Type",
        "Select the type of performance measurement (Sort)",
        "Mouse over summary information about a transaction",
        "Select detailed information about a transaction",
        "View transaction data in different visual formats",
        "Show corresponding browser request data",
        "Identify transaction segments with high call counts or time",
        "Show all transactions",
        "Additional functions",
        "Caution"
      ],
      "title": "Transactions page: Find specific performance problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "af8aa4a977d05428494b8b34aed1ac6ea831d8db",
      "image": "https://docs.newrelic.com/static/0b30cbf2e9065777c252216f96c80ad7/a2d4f/APM-transaction-high-time-colorization_0.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/transactions-page-find-specific-performance-problems/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-11-13T07:21:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Transactions page helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This page lists the selected app's transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per minute or rpm). For non-web transactions (such as message processing, background tasks, and other processes and jobs that do not handle web requests), this page shows charts of CPU and memory usage. Types of transactions Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Depending on your selected application, the Transactions page may include a dropdown you can use to select from the types of transactions available. New Relic measures processing time by type of request (web transaction or non-web transaction). This may include: Web: App server requests Non-web: Other requests (operations, background tasks, etc.) The Transactions page also may include links to transaction traces and key transactions. The types of information available will depend on your selected app and the type of request (web or non-web). Wall-clock time Wall-clock time is the amount of time recorded by the clock. New Relic uses wall-clock time for all the transactions and then sums that value across all of the transactions. The host can execute requests in parallel, so you may see percentages over 100. For example, 100% would indicate that the execution time across all selected transactions is equal to the time expended when recording wall-clock time. View transactions To view information about your app's transaction requests: Do one of the following: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Go to one.newrelic.com > Explorer > (select an app) > Monitor > Transactions. If applicable: To change which available types of transactions appear, select the Type. Select the sort order, or keep the default. Select the type of view as a chart (default), histogram, or percentile, if available. To view additional details, use any of the transaction drill-down functions. To add a chart to a dashboard, mouse over the chart, then select the Add to a dashboard link that appears below it. If a chart's background is light red, this indicates a time period when an alert condition's Critical threshold has been violated. To view the incident details in New Relic Alerts, click the chart. For more information, see the documentation about navigating core UI components in New Relic One. Use drill-down functions Use any of New Relic's standard user interface functions to drill down into detailed information. The Transactions page has additional drill-down functions. Change the displayed transaction Type If the Type dropdown appears above list of transactions, you can select your choice of transaction type. The available types depend on what transactions your application uses. Select the type of performance measurement (Sort) The Sort dropdown above the transaction list allows you to review transactions according to different measurements. This helps you identify good candidates for performance tuning or fixing errors. You can sort by: Sort option Comments Most time consuming (default) Highest percentage of the app's total time used. This measures which transactions consumed the most time in total. This is calculated by multiplying the number of times the transaction is called by the time the transaction took to complete. A transaction could be short, but if it is frequently called, it would appear at the top of this ranking. Slowest average response time Slowest individual transactions for the time period as averaged. This measures the slowest types of transaction. A transaction could be called only a few times, but if it is one of the longest transactions to finish, it would appear at the top of this ranking. Apdex most dissatisfying Transactions with the highest percentages of user dissatisfaction levels for the response time of your web apps and services (Apdex). The dissatisfaction level is the difference between a perfect Apdex score (1.0) and your app's apdex_t (\"tolerating\") score, based on your Apdex settings. Transactions that have the highest (worst) percentages appear at the top of this ranking. Highest throughput This measures the amount of throughput, in operation requests per minute or rpm. (For web throughput, requests per minute is sometimes called pages per minute or ppm.) Transactions that have the highest number of requests per minute appear at the top of this ranking. Tip Depending on the transaction type you choose, different sort options may be available. Mouse over summary information about a transaction To quickly view key pieces of information about the transaction, mouse over its name on the list. Select detailed information about a transaction To view detailed information, select a transaction from the list, then select App performance or Historical performance. You can also view transaction traces. View transaction data in different visual formats The Transaction page's Top 5 transactions chart and a selected transaction's App performance window include options to view data as a: Chart Histogram Percentile In addition, from the Breakdown table for a selected transaction, you can select the link to show or hide all segments of the breakdown data. Show corresponding browser request data In order to view browser information, you must install the browser agent. Then, to view corresponding browser request data, use either of these options: Select the Browser drill-down link if available. Go to one.newrelic.com > Browser > (select an app) > Page views. Identify transaction segments with high call counts or time In a transaction's Breakdown table, the Avg calls (per txn) column may include colorized segment values. These indicate instrumented segments that have exceeded thresholds. Yellow: Segment time is more than 10% of total transaction time and call count is higher than 10. Red: Segment time is more than 10% of total transaction time and call count is higher than 20. Show all transactions To view all available transactions as a table, select the Show all transactions table link. From here, use any of the available options: To change the sort order, select any column header. To export the data to a file with comma-separated values, select Export as CSV. To return to the previous chart view, select Back to top transactions. CSV tables for ending now time periods are calculated at run time. They may show slightly higher values than what appears in the APM table. For each transaction, the Show all transactions table includes these measurements: Measurement Definition Apdex The average Apdex score for all transactions that occurred in the selected time range. Apdex scores marked with an * asterisk indicate the agent collected fewer than 100 samples for that transaction name. Data for these transactions may be less accurate than data for transactions with higher throughput. Count The total number of all transactions that occurred in the selected time range. Avg (ms) The average time taken by all transactions in the selected time range. SD (ms) The standard deviation of all timing measurements for all transactions in the selected time range. Min (ms) The time taken by the fastest transaction in the selected time range. Max (ms) The time taken by the slowest transaction in the selected time range. Total (ms) The total amount of time taken by all transactions that occurred in the selected time range. Total (% time) The total amount of time for all transactions of that type, expressed as a percentage of the total amount of time taken by all transactions. Dissat (%) The percentage of the transactions that did not have satisfied Apdex scores. If you view transactions as a table, the All transactions row always contributes 100% of the app's total dissatisfaction, even if no responses are dissatisfying (100% of zero is zero). In this situation, 100% does not mean that all of your transactions are dissatisfying. The sum of all the other values in the Dissat (%) column is 100%. Additional functions Here are some additional functions for the Transactions page's selected transaction. If you want to... Do this... View transactions for operations and other background tasks Change the Type to Other transactions (or a specific type listed), then select a specific transaction. The Transactions page shows the top five transactions for this selection by wall-clock time, CPU usage, and memory usage. Track a transaction that is important to your business Select the transaction's name, then select Track as key transaction. View transaction trace details A transaction trace is a complete picture of a single transaction. From the Transactions page, select the transaction trace. Select the view for Summary, Trace details, or Database queries, if available. To expand the transaction trace to full screen view, select the full screen icon. To return to the Transactions page: Next to the transaction trace's name, select the back arrow. Examine logs for trace details If you are using our logs in context feature, you can see any logs that are linked to your traces. From the Transactions page, click on a trace to go to the trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. Add or view transaction segments To add segments to a transaction, use custom instrumentation. To view the segments of a specific transaction, use transaction traces. View reports You can also use the Web transactions analysis report for web transactions and the Background jobs analysis report for non-web transactions to compare the amount of time spent in throughput, total time in the transaction, average time to execute it, and Apdex score as applicable. Delete all transaction traces Caution If you select Delete all traces, you cannot recover them.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.83904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transactions <em>page</em>: Find specific performance problems",
        "sections": "Transactions <em>page</em>: Find specific performance problems",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Transactions <em>page</em> helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This <em>page</em> lists the selected app&#x27;s transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per"
      },
      "id": "603ebd8228ccbcd2d3eba77b"
    },
    {
      "sections": [
        "View your applications index",
        "Tip"
      ],
      "title": "View your applications index",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "8e70cf3b6602b38efff4a6fb2443724a08a6701c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-your-applications-index/",
      "published_at": "2022-01-12T08:50:25Z",
      "updated_at": "2021-03-30T09:19:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When you go to one.newrelic.com > APM, you get an index of all APM apps associated with your New Relic account ID. The page automatically refreshes the index of applications every two minutes with the most current health status, events, and performance statistics. Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Here are some of the things you can do on this page: If you want to... Do this... View an app's details To go directly to the application's Summary page by clicking on the application's name. Find an app in the index Use any of these options to find what you want: Filter or roll up the index by category or tag. Use the search (magnifying glass) function at the top of the index. View details about a recent event or alert On the Summary page, review the entries under Application activity. You can select the link to get details. For more information, see View an app's alert information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.14821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "When you go to one.newrelic.com &gt; <em>APM</em>, you get an index of all <em>APM</em> apps associated with your New Relic account ID. The <em>page</em> automatically refreshes the index of applications every two minutes with the most current health status, events, and performance statistics. Tip To get a high-level overview"
      },
      "id": "60455c3de7b9d2951a5799f3"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/databases-page-view-operations-throughput-response-time": [
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.68396,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": ": Do one of the following: New Relic Explorer: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. <em>APM</em>: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. Select a database transaction. If available, select any available slow queries listed on the <em>page</em>"
      },
      "id": "604407dae7b9d26489579a05"
    },
    {
      "sections": [
        "Transactions page: Find specific performance problems",
        "Types of transactions",
        "Tip",
        "Wall-clock time",
        "View transactions",
        "Use drill-down functions",
        "Change the displayed transaction Type",
        "Select the type of performance measurement (Sort)",
        "Mouse over summary information about a transaction",
        "Select detailed information about a transaction",
        "View transaction data in different visual formats",
        "Show corresponding browser request data",
        "Identify transaction segments with high call counts or time",
        "Show all transactions",
        "Additional functions",
        "Caution"
      ],
      "title": "Transactions page: Find specific performance problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "af8aa4a977d05428494b8b34aed1ac6ea831d8db",
      "image": "https://docs.newrelic.com/static/0b30cbf2e9065777c252216f96c80ad7/a2d4f/APM-transaction-high-time-colorization_0.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/transactions-page-find-specific-performance-problems/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-11-13T07:21:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Transactions page helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This page lists the selected app's transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per minute or rpm). For non-web transactions (such as message processing, background tasks, and other processes and jobs that do not handle web requests), this page shows charts of CPU and memory usage. Types of transactions Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Depending on your selected application, the Transactions page may include a dropdown you can use to select from the types of transactions available. New Relic measures processing time by type of request (web transaction or non-web transaction). This may include: Web: App server requests Non-web: Other requests (operations, background tasks, etc.) The Transactions page also may include links to transaction traces and key transactions. The types of information available will depend on your selected app and the type of request (web or non-web). Wall-clock time Wall-clock time is the amount of time recorded by the clock. New Relic uses wall-clock time for all the transactions and then sums that value across all of the transactions. The host can execute requests in parallel, so you may see percentages over 100. For example, 100% would indicate that the execution time across all selected transactions is equal to the time expended when recording wall-clock time. View transactions To view information about your app's transaction requests: Do one of the following: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Go to one.newrelic.com > Explorer > (select an app) > Monitor > Transactions. If applicable: To change which available types of transactions appear, select the Type. Select the sort order, or keep the default. Select the type of view as a chart (default), histogram, or percentile, if available. To view additional details, use any of the transaction drill-down functions. To add a chart to a dashboard, mouse over the chart, then select the Add to a dashboard link that appears below it. If a chart's background is light red, this indicates a time period when an alert condition's Critical threshold has been violated. To view the incident details in New Relic Alerts, click the chart. For more information, see the documentation about navigating core UI components in New Relic One. Use drill-down functions Use any of New Relic's standard user interface functions to drill down into detailed information. The Transactions page has additional drill-down functions. Change the displayed transaction Type If the Type dropdown appears above list of transactions, you can select your choice of transaction type. The available types depend on what transactions your application uses. Select the type of performance measurement (Sort) The Sort dropdown above the transaction list allows you to review transactions according to different measurements. This helps you identify good candidates for performance tuning or fixing errors. You can sort by: Sort option Comments Most time consuming (default) Highest percentage of the app's total time used. This measures which transactions consumed the most time in total. This is calculated by multiplying the number of times the transaction is called by the time the transaction took to complete. A transaction could be short, but if it is frequently called, it would appear at the top of this ranking. Slowest average response time Slowest individual transactions for the time period as averaged. This measures the slowest types of transaction. A transaction could be called only a few times, but if it is one of the longest transactions to finish, it would appear at the top of this ranking. Apdex most dissatisfying Transactions with the highest percentages of user dissatisfaction levels for the response time of your web apps and services (Apdex). The dissatisfaction level is the difference between a perfect Apdex score (1.0) and your app's apdex_t (\"tolerating\") score, based on your Apdex settings. Transactions that have the highest (worst) percentages appear at the top of this ranking. Highest throughput This measures the amount of throughput, in operation requests per minute or rpm. (For web throughput, requests per minute is sometimes called pages per minute or ppm.) Transactions that have the highest number of requests per minute appear at the top of this ranking. Tip Depending on the transaction type you choose, different sort options may be available. Mouse over summary information about a transaction To quickly view key pieces of information about the transaction, mouse over its name on the list. Select detailed information about a transaction To view detailed information, select a transaction from the list, then select App performance or Historical performance. You can also view transaction traces. View transaction data in different visual formats The Transaction page's Top 5 transactions chart and a selected transaction's App performance window include options to view data as a: Chart Histogram Percentile In addition, from the Breakdown table for a selected transaction, you can select the link to show or hide all segments of the breakdown data. Show corresponding browser request data In order to view browser information, you must install the browser agent. Then, to view corresponding browser request data, use either of these options: Select the Browser drill-down link if available. Go to one.newrelic.com > Browser > (select an app) > Page views. Identify transaction segments with high call counts or time In a transaction's Breakdown table, the Avg calls (per txn) column may include colorized segment values. These indicate instrumented segments that have exceeded thresholds. Yellow: Segment time is more than 10% of total transaction time and call count is higher than 10. Red: Segment time is more than 10% of total transaction time and call count is higher than 20. Show all transactions To view all available transactions as a table, select the Show all transactions table link. From here, use any of the available options: To change the sort order, select any column header. To export the data to a file with comma-separated values, select Export as CSV. To return to the previous chart view, select Back to top transactions. CSV tables for ending now time periods are calculated at run time. They may show slightly higher values than what appears in the APM table. For each transaction, the Show all transactions table includes these measurements: Measurement Definition Apdex The average Apdex score for all transactions that occurred in the selected time range. Apdex scores marked with an * asterisk indicate the agent collected fewer than 100 samples for that transaction name. Data for these transactions may be less accurate than data for transactions with higher throughput. Count The total number of all transactions that occurred in the selected time range. Avg (ms) The average time taken by all transactions in the selected time range. SD (ms) The standard deviation of all timing measurements for all transactions in the selected time range. Min (ms) The time taken by the fastest transaction in the selected time range. Max (ms) The time taken by the slowest transaction in the selected time range. Total (ms) The total amount of time taken by all transactions that occurred in the selected time range. Total (% time) The total amount of time for all transactions of that type, expressed as a percentage of the total amount of time taken by all transactions. Dissat (%) The percentage of the transactions that did not have satisfied Apdex scores. If you view transactions as a table, the All transactions row always contributes 100% of the app's total dissatisfaction, even if no responses are dissatisfying (100% of zero is zero). In this situation, 100% does not mean that all of your transactions are dissatisfying. The sum of all the other values in the Dissat (%) column is 100%. Additional functions Here are some additional functions for the Transactions page's selected transaction. If you want to... Do this... View transactions for operations and other background tasks Change the Type to Other transactions (or a specific type listed), then select a specific transaction. The Transactions page shows the top five transactions for this selection by wall-clock time, CPU usage, and memory usage. Track a transaction that is important to your business Select the transaction's name, then select Track as key transaction. View transaction trace details A transaction trace is a complete picture of a single transaction. From the Transactions page, select the transaction trace. Select the view for Summary, Trace details, or Database queries, if available. To expand the transaction trace to full screen view, select the full screen icon. To return to the Transactions page: Next to the transaction trace's name, select the back arrow. Examine logs for trace details If you are using our logs in context feature, you can see any logs that are linked to your traces. From the Transactions page, click on a trace to go to the trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. Add or view transaction segments To add segments to a transaction, use custom instrumentation. To view the segments of a specific transaction, use transaction traces. View reports You can also use the Web transactions analysis report for web transactions and the Background jobs analysis report for non-web transactions to compare the amount of time spent in throughput, total time in the transaction, average time to execute it, and Apdex score as applicable. Delete all transaction traces Caution If you select Delete all traces, you cannot recover them.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.83904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transactions <em>page</em>: Find specific performance problems",
        "sections": "Transactions <em>page</em>: Find specific performance problems",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Transactions <em>page</em> helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This <em>page</em> lists the selected app&#x27;s transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per"
      },
      "id": "603ebd8228ccbcd2d3eba77b"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2022-01-12T08:47:46Z",
      "updated_at": "2021-11-06T23:07:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. From here you can also view available error logs in context for your app. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99054,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/external-services-page-view-web-cloud-network-data": [
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.68396,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": ": Do one of the following: New Relic Explorer: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. <em>APM</em>: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. Select a database transaction. If available, select any available slow queries listed on the <em>page</em>"
      },
      "id": "604407dae7b9d26489579a05"
    },
    {
      "sections": [
        "Transactions page: Find specific performance problems",
        "Types of transactions",
        "Tip",
        "Wall-clock time",
        "View transactions",
        "Use drill-down functions",
        "Change the displayed transaction Type",
        "Select the type of performance measurement (Sort)",
        "Mouse over summary information about a transaction",
        "Select detailed information about a transaction",
        "View transaction data in different visual formats",
        "Show corresponding browser request data",
        "Identify transaction segments with high call counts or time",
        "Show all transactions",
        "Additional functions",
        "Caution"
      ],
      "title": "Transactions page: Find specific performance problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "af8aa4a977d05428494b8b34aed1ac6ea831d8db",
      "image": "https://docs.newrelic.com/static/0b30cbf2e9065777c252216f96c80ad7/a2d4f/APM-transaction-high-time-colorization_0.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/transactions-page-find-specific-performance-problems/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-11-13T07:21:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Transactions page helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This page lists the selected app's transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per minute or rpm). For non-web transactions (such as message processing, background tasks, and other processes and jobs that do not handle web requests), this page shows charts of CPU and memory usage. Types of transactions Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Depending on your selected application, the Transactions page may include a dropdown you can use to select from the types of transactions available. New Relic measures processing time by type of request (web transaction or non-web transaction). This may include: Web: App server requests Non-web: Other requests (operations, background tasks, etc.) The Transactions page also may include links to transaction traces and key transactions. The types of information available will depend on your selected app and the type of request (web or non-web). Wall-clock time Wall-clock time is the amount of time recorded by the clock. New Relic uses wall-clock time for all the transactions and then sums that value across all of the transactions. The host can execute requests in parallel, so you may see percentages over 100. For example, 100% would indicate that the execution time across all selected transactions is equal to the time expended when recording wall-clock time. View transactions To view information about your app's transaction requests: Do one of the following: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Go to one.newrelic.com > Explorer > (select an app) > Monitor > Transactions. If applicable: To change which available types of transactions appear, select the Type. Select the sort order, or keep the default. Select the type of view as a chart (default), histogram, or percentile, if available. To view additional details, use any of the transaction drill-down functions. To add a chart to a dashboard, mouse over the chart, then select the Add to a dashboard link that appears below it. If a chart's background is light red, this indicates a time period when an alert condition's Critical threshold has been violated. To view the incident details in New Relic Alerts, click the chart. For more information, see the documentation about navigating core UI components in New Relic One. Use drill-down functions Use any of New Relic's standard user interface functions to drill down into detailed information. The Transactions page has additional drill-down functions. Change the displayed transaction Type If the Type dropdown appears above list of transactions, you can select your choice of transaction type. The available types depend on what transactions your application uses. Select the type of performance measurement (Sort) The Sort dropdown above the transaction list allows you to review transactions according to different measurements. This helps you identify good candidates for performance tuning or fixing errors. You can sort by: Sort option Comments Most time consuming (default) Highest percentage of the app's total time used. This measures which transactions consumed the most time in total. This is calculated by multiplying the number of times the transaction is called by the time the transaction took to complete. A transaction could be short, but if it is frequently called, it would appear at the top of this ranking. Slowest average response time Slowest individual transactions for the time period as averaged. This measures the slowest types of transaction. A transaction could be called only a few times, but if it is one of the longest transactions to finish, it would appear at the top of this ranking. Apdex most dissatisfying Transactions with the highest percentages of user dissatisfaction levels for the response time of your web apps and services (Apdex). The dissatisfaction level is the difference between a perfect Apdex score (1.0) and your app's apdex_t (\"tolerating\") score, based on your Apdex settings. Transactions that have the highest (worst) percentages appear at the top of this ranking. Highest throughput This measures the amount of throughput, in operation requests per minute or rpm. (For web throughput, requests per minute is sometimes called pages per minute or ppm.) Transactions that have the highest number of requests per minute appear at the top of this ranking. Tip Depending on the transaction type you choose, different sort options may be available. Mouse over summary information about a transaction To quickly view key pieces of information about the transaction, mouse over its name on the list. Select detailed information about a transaction To view detailed information, select a transaction from the list, then select App performance or Historical performance. You can also view transaction traces. View transaction data in different visual formats The Transaction page's Top 5 transactions chart and a selected transaction's App performance window include options to view data as a: Chart Histogram Percentile In addition, from the Breakdown table for a selected transaction, you can select the link to show or hide all segments of the breakdown data. Show corresponding browser request data In order to view browser information, you must install the browser agent. Then, to view corresponding browser request data, use either of these options: Select the Browser drill-down link if available. Go to one.newrelic.com > Browser > (select an app) > Page views. Identify transaction segments with high call counts or time In a transaction's Breakdown table, the Avg calls (per txn) column may include colorized segment values. These indicate instrumented segments that have exceeded thresholds. Yellow: Segment time is more than 10% of total transaction time and call count is higher than 10. Red: Segment time is more than 10% of total transaction time and call count is higher than 20. Show all transactions To view all available transactions as a table, select the Show all transactions table link. From here, use any of the available options: To change the sort order, select any column header. To export the data to a file with comma-separated values, select Export as CSV. To return to the previous chart view, select Back to top transactions. CSV tables for ending now time periods are calculated at run time. They may show slightly higher values than what appears in the APM table. For each transaction, the Show all transactions table includes these measurements: Measurement Definition Apdex The average Apdex score for all transactions that occurred in the selected time range. Apdex scores marked with an * asterisk indicate the agent collected fewer than 100 samples for that transaction name. Data for these transactions may be less accurate than data for transactions with higher throughput. Count The total number of all transactions that occurred in the selected time range. Avg (ms) The average time taken by all transactions in the selected time range. SD (ms) The standard deviation of all timing measurements for all transactions in the selected time range. Min (ms) The time taken by the fastest transaction in the selected time range. Max (ms) The time taken by the slowest transaction in the selected time range. Total (ms) The total amount of time taken by all transactions that occurred in the selected time range. Total (% time) The total amount of time for all transactions of that type, expressed as a percentage of the total amount of time taken by all transactions. Dissat (%) The percentage of the transactions that did not have satisfied Apdex scores. If you view transactions as a table, the All transactions row always contributes 100% of the app's total dissatisfaction, even if no responses are dissatisfying (100% of zero is zero). In this situation, 100% does not mean that all of your transactions are dissatisfying. The sum of all the other values in the Dissat (%) column is 100%. Additional functions Here are some additional functions for the Transactions page's selected transaction. If you want to... Do this... View transactions for operations and other background tasks Change the Type to Other transactions (or a specific type listed), then select a specific transaction. The Transactions page shows the top five transactions for this selection by wall-clock time, CPU usage, and memory usage. Track a transaction that is important to your business Select the transaction's name, then select Track as key transaction. View transaction trace details A transaction trace is a complete picture of a single transaction. From the Transactions page, select the transaction trace. Select the view for Summary, Trace details, or Database queries, if available. To expand the transaction trace to full screen view, select the full screen icon. To return to the Transactions page: Next to the transaction trace's name, select the back arrow. Examine logs for trace details If you are using our logs in context feature, you can see any logs that are linked to your traces. From the Transactions page, click on a trace to go to the trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. Add or view transaction segments To add segments to a transaction, use custom instrumentation. To view the segments of a specific transaction, use transaction traces. View reports You can also use the Web transactions analysis report for web transactions and the Background jobs analysis report for non-web transactions to compare the amount of time spent in throughput, total time in the transaction, average time to execute it, and Apdex score as applicable. Delete all transaction traces Caution If you select Delete all traces, you cannot recover them.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.83904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transactions <em>page</em>: Find specific performance problems",
        "sections": "Transactions <em>page</em>: Find specific performance problems",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Transactions <em>page</em> helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This <em>page</em> lists the selected app&#x27;s transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per"
      },
      "id": "603ebd8228ccbcd2d3eba77b"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2022-01-12T08:47:46Z",
      "updated_at": "2021-11-06T23:07:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. From here you can also view available error logs in context for your app. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99054,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/response-time-chart-types-apm-browser": [
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.68391,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": ": Do one of the following: New Relic Explorer: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. <em>APM</em>: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. Select a database transaction. If available, select any available slow queries listed on the <em>page</em>"
      },
      "id": "604407dae7b9d26489579a05"
    },
    {
      "sections": [
        "Transactions page: Find specific performance problems",
        "Types of transactions",
        "Tip",
        "Wall-clock time",
        "View transactions",
        "Use drill-down functions",
        "Change the displayed transaction Type",
        "Select the type of performance measurement (Sort)",
        "Mouse over summary information about a transaction",
        "Select detailed information about a transaction",
        "View transaction data in different visual formats",
        "Show corresponding browser request data",
        "Identify transaction segments with high call counts or time",
        "Show all transactions",
        "Additional functions",
        "Caution"
      ],
      "title": "Transactions page: Find specific performance problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "af8aa4a977d05428494b8b34aed1ac6ea831d8db",
      "image": "https://docs.newrelic.com/static/0b30cbf2e9065777c252216f96c80ad7/a2d4f/APM-transaction-high-time-colorization_0.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/transactions-page-find-specific-performance-problems/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-11-13T07:21:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Transactions page helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This page lists the selected app's transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per minute or rpm). For non-web transactions (such as message processing, background tasks, and other processes and jobs that do not handle web requests), this page shows charts of CPU and memory usage. Types of transactions Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Depending on your selected application, the Transactions page may include a dropdown you can use to select from the types of transactions available. New Relic measures processing time by type of request (web transaction or non-web transaction). This may include: Web: App server requests Non-web: Other requests (operations, background tasks, etc.) The Transactions page also may include links to transaction traces and key transactions. The types of information available will depend on your selected app and the type of request (web or non-web). Wall-clock time Wall-clock time is the amount of time recorded by the clock. New Relic uses wall-clock time for all the transactions and then sums that value across all of the transactions. The host can execute requests in parallel, so you may see percentages over 100. For example, 100% would indicate that the execution time across all selected transactions is equal to the time expended when recording wall-clock time. View transactions To view information about your app's transaction requests: Do one of the following: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Go to one.newrelic.com > Explorer > (select an app) > Monitor > Transactions. If applicable: To change which available types of transactions appear, select the Type. Select the sort order, or keep the default. Select the type of view as a chart (default), histogram, or percentile, if available. To view additional details, use any of the transaction drill-down functions. To add a chart to a dashboard, mouse over the chart, then select the Add to a dashboard link that appears below it. If a chart's background is light red, this indicates a time period when an alert condition's Critical threshold has been violated. To view the incident details in New Relic Alerts, click the chart. For more information, see the documentation about navigating core UI components in New Relic One. Use drill-down functions Use any of New Relic's standard user interface functions to drill down into detailed information. The Transactions page has additional drill-down functions. Change the displayed transaction Type If the Type dropdown appears above list of transactions, you can select your choice of transaction type. The available types depend on what transactions your application uses. Select the type of performance measurement (Sort) The Sort dropdown above the transaction list allows you to review transactions according to different measurements. This helps you identify good candidates for performance tuning or fixing errors. You can sort by: Sort option Comments Most time consuming (default) Highest percentage of the app's total time used. This measures which transactions consumed the most time in total. This is calculated by multiplying the number of times the transaction is called by the time the transaction took to complete. A transaction could be short, but if it is frequently called, it would appear at the top of this ranking. Slowest average response time Slowest individual transactions for the time period as averaged. This measures the slowest types of transaction. A transaction could be called only a few times, but if it is one of the longest transactions to finish, it would appear at the top of this ranking. Apdex most dissatisfying Transactions with the highest percentages of user dissatisfaction levels for the response time of your web apps and services (Apdex). The dissatisfaction level is the difference between a perfect Apdex score (1.0) and your app's apdex_t (\"tolerating\") score, based on your Apdex settings. Transactions that have the highest (worst) percentages appear at the top of this ranking. Highest throughput This measures the amount of throughput, in operation requests per minute or rpm. (For web throughput, requests per minute is sometimes called pages per minute or ppm.) Transactions that have the highest number of requests per minute appear at the top of this ranking. Tip Depending on the transaction type you choose, different sort options may be available. Mouse over summary information about a transaction To quickly view key pieces of information about the transaction, mouse over its name on the list. Select detailed information about a transaction To view detailed information, select a transaction from the list, then select App performance or Historical performance. You can also view transaction traces. View transaction data in different visual formats The Transaction page's Top 5 transactions chart and a selected transaction's App performance window include options to view data as a: Chart Histogram Percentile In addition, from the Breakdown table for a selected transaction, you can select the link to show or hide all segments of the breakdown data. Show corresponding browser request data In order to view browser information, you must install the browser agent. Then, to view corresponding browser request data, use either of these options: Select the Browser drill-down link if available. Go to one.newrelic.com > Browser > (select an app) > Page views. Identify transaction segments with high call counts or time In a transaction's Breakdown table, the Avg calls (per txn) column may include colorized segment values. These indicate instrumented segments that have exceeded thresholds. Yellow: Segment time is more than 10% of total transaction time and call count is higher than 10. Red: Segment time is more than 10% of total transaction time and call count is higher than 20. Show all transactions To view all available transactions as a table, select the Show all transactions table link. From here, use any of the available options: To change the sort order, select any column header. To export the data to a file with comma-separated values, select Export as CSV. To return to the previous chart view, select Back to top transactions. CSV tables for ending now time periods are calculated at run time. They may show slightly higher values than what appears in the APM table. For each transaction, the Show all transactions table includes these measurements: Measurement Definition Apdex The average Apdex score for all transactions that occurred in the selected time range. Apdex scores marked with an * asterisk indicate the agent collected fewer than 100 samples for that transaction name. Data for these transactions may be less accurate than data for transactions with higher throughput. Count The total number of all transactions that occurred in the selected time range. Avg (ms) The average time taken by all transactions in the selected time range. SD (ms) The standard deviation of all timing measurements for all transactions in the selected time range. Min (ms) The time taken by the fastest transaction in the selected time range. Max (ms) The time taken by the slowest transaction in the selected time range. Total (ms) The total amount of time taken by all transactions that occurred in the selected time range. Total (% time) The total amount of time for all transactions of that type, expressed as a percentage of the total amount of time taken by all transactions. Dissat (%) The percentage of the transactions that did not have satisfied Apdex scores. If you view transactions as a table, the All transactions row always contributes 100% of the app's total dissatisfaction, even if no responses are dissatisfying (100% of zero is zero). In this situation, 100% does not mean that all of your transactions are dissatisfying. The sum of all the other values in the Dissat (%) column is 100%. Additional functions Here are some additional functions for the Transactions page's selected transaction. If you want to... Do this... View transactions for operations and other background tasks Change the Type to Other transactions (or a specific type listed), then select a specific transaction. The Transactions page shows the top five transactions for this selection by wall-clock time, CPU usage, and memory usage. Track a transaction that is important to your business Select the transaction's name, then select Track as key transaction. View transaction trace details A transaction trace is a complete picture of a single transaction. From the Transactions page, select the transaction trace. Select the view for Summary, Trace details, or Database queries, if available. To expand the transaction trace to full screen view, select the full screen icon. To return to the Transactions page: Next to the transaction trace's name, select the back arrow. Examine logs for trace details If you are using our logs in context feature, you can see any logs that are linked to your traces. From the Transactions page, click on a trace to go to the trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. Add or view transaction segments To add segments to a transaction, use custom instrumentation. To view the segments of a specific transaction, use transaction traces. View reports You can also use the Web transactions analysis report for web transactions and the Background jobs analysis report for non-web transactions to compare the amount of time spent in throughput, total time in the transaction, average time to execute it, and Apdex score as applicable. Delete all transaction traces Caution If you select Delete all traces, you cannot recover them.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.83902,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transactions <em>page</em>: Find specific performance problems",
        "sections": "Transactions <em>page</em>: Find specific performance problems",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Transactions <em>page</em> helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This <em>page</em> lists the selected app&#x27;s transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per"
      },
      "id": "603ebd8228ccbcd2d3eba77b"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2022-01-12T08:47:46Z",
      "updated_at": "2021-11-06T23:07:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. From here you can also view available error logs in context for your app. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/transactions-page-find-specific-performance-problems": [
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.68391,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": ": Do one of the following: New Relic Explorer: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. <em>APM</em>: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. Select a database transaction. If available, select any available slow queries listed on the <em>page</em>"
      },
      "id": "604407dae7b9d26489579a05"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2022-01-12T08:47:46Z",
      "updated_at": "2021-11-06T23:07:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. From here you can also view available error logs in context for your app. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    },
    {
      "sections": [
        "View your applications index",
        "Tip"
      ],
      "title": "View your applications index",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "8e70cf3b6602b38efff4a6fb2443724a08a6701c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-your-applications-index/",
      "published_at": "2022-01-12T08:50:25Z",
      "updated_at": "2021-03-30T09:19:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When you go to one.newrelic.com > APM, you get an index of all APM apps associated with your New Relic account ID. The page automatically refreshes the index of applications every two minutes with the most current health status, events, and performance statistics. Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Here are some of the things you can do on this page: If you want to... Do this... View an app's details To go directly to the application's Summary page by clicking on the application's name. Find an app in the index Use any of these options to find what you want: Filter or roll up the index by category or tag. Use the search (magnifying glass) function at the top of the index. View details about a recent event or alert On the Summary page, review the entries under Application activity. You can select the link to get details. For more information, see View an app's alert information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.14821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "When you go to one.newrelic.com &gt; <em>APM</em>, you get an index of all <em>APM</em> apps associated with your New Relic account ID. The <em>page</em> automatically refreshes the index of applications every two minutes with the most current health status, events, and performance statistics. Tip To get a high-level overview"
      },
      "id": "60455c3de7b9d2951a5799f3"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/view-slow-query-details": [
    {
      "sections": [
        "Transactions page: Find specific performance problems",
        "Types of transactions",
        "Tip",
        "Wall-clock time",
        "View transactions",
        "Use drill-down functions",
        "Change the displayed transaction Type",
        "Select the type of performance measurement (Sort)",
        "Mouse over summary information about a transaction",
        "Select detailed information about a transaction",
        "View transaction data in different visual formats",
        "Show corresponding browser request data",
        "Identify transaction segments with high call counts or time",
        "Show all transactions",
        "Additional functions",
        "Caution"
      ],
      "title": "Transactions page: Find specific performance problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "af8aa4a977d05428494b8b34aed1ac6ea831d8db",
      "image": "https://docs.newrelic.com/static/0b30cbf2e9065777c252216f96c80ad7/a2d4f/APM-transaction-high-time-colorization_0.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/transactions-page-find-specific-performance-problems/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-11-13T07:21:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Transactions page helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This page lists the selected app's transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per minute or rpm). For non-web transactions (such as message processing, background tasks, and other processes and jobs that do not handle web requests), this page shows charts of CPU and memory usage. Types of transactions Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Depending on your selected application, the Transactions page may include a dropdown you can use to select from the types of transactions available. New Relic measures processing time by type of request (web transaction or non-web transaction). This may include: Web: App server requests Non-web: Other requests (operations, background tasks, etc.) The Transactions page also may include links to transaction traces and key transactions. The types of information available will depend on your selected app and the type of request (web or non-web). Wall-clock time Wall-clock time is the amount of time recorded by the clock. New Relic uses wall-clock time for all the transactions and then sums that value across all of the transactions. The host can execute requests in parallel, so you may see percentages over 100. For example, 100% would indicate that the execution time across all selected transactions is equal to the time expended when recording wall-clock time. View transactions To view information about your app's transaction requests: Do one of the following: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Go to one.newrelic.com > Explorer > (select an app) > Monitor > Transactions. If applicable: To change which available types of transactions appear, select the Type. Select the sort order, or keep the default. Select the type of view as a chart (default), histogram, or percentile, if available. To view additional details, use any of the transaction drill-down functions. To add a chart to a dashboard, mouse over the chart, then select the Add to a dashboard link that appears below it. If a chart's background is light red, this indicates a time period when an alert condition's Critical threshold has been violated. To view the incident details in New Relic Alerts, click the chart. For more information, see the documentation about navigating core UI components in New Relic One. Use drill-down functions Use any of New Relic's standard user interface functions to drill down into detailed information. The Transactions page has additional drill-down functions. Change the displayed transaction Type If the Type dropdown appears above list of transactions, you can select your choice of transaction type. The available types depend on what transactions your application uses. Select the type of performance measurement (Sort) The Sort dropdown above the transaction list allows you to review transactions according to different measurements. This helps you identify good candidates for performance tuning or fixing errors. You can sort by: Sort option Comments Most time consuming (default) Highest percentage of the app's total time used. This measures which transactions consumed the most time in total. This is calculated by multiplying the number of times the transaction is called by the time the transaction took to complete. A transaction could be short, but if it is frequently called, it would appear at the top of this ranking. Slowest average response time Slowest individual transactions for the time period as averaged. This measures the slowest types of transaction. A transaction could be called only a few times, but if it is one of the longest transactions to finish, it would appear at the top of this ranking. Apdex most dissatisfying Transactions with the highest percentages of user dissatisfaction levels for the response time of your web apps and services (Apdex). The dissatisfaction level is the difference between a perfect Apdex score (1.0) and your app's apdex_t (\"tolerating\") score, based on your Apdex settings. Transactions that have the highest (worst) percentages appear at the top of this ranking. Highest throughput This measures the amount of throughput, in operation requests per minute or rpm. (For web throughput, requests per minute is sometimes called pages per minute or ppm.) Transactions that have the highest number of requests per minute appear at the top of this ranking. Tip Depending on the transaction type you choose, different sort options may be available. Mouse over summary information about a transaction To quickly view key pieces of information about the transaction, mouse over its name on the list. Select detailed information about a transaction To view detailed information, select a transaction from the list, then select App performance or Historical performance. You can also view transaction traces. View transaction data in different visual formats The Transaction page's Top 5 transactions chart and a selected transaction's App performance window include options to view data as a: Chart Histogram Percentile In addition, from the Breakdown table for a selected transaction, you can select the link to show or hide all segments of the breakdown data. Show corresponding browser request data In order to view browser information, you must install the browser agent. Then, to view corresponding browser request data, use either of these options: Select the Browser drill-down link if available. Go to one.newrelic.com > Browser > (select an app) > Page views. Identify transaction segments with high call counts or time In a transaction's Breakdown table, the Avg calls (per txn) column may include colorized segment values. These indicate instrumented segments that have exceeded thresholds. Yellow: Segment time is more than 10% of total transaction time and call count is higher than 10. Red: Segment time is more than 10% of total transaction time and call count is higher than 20. Show all transactions To view all available transactions as a table, select the Show all transactions table link. From here, use any of the available options: To change the sort order, select any column header. To export the data to a file with comma-separated values, select Export as CSV. To return to the previous chart view, select Back to top transactions. CSV tables for ending now time periods are calculated at run time. They may show slightly higher values than what appears in the APM table. For each transaction, the Show all transactions table includes these measurements: Measurement Definition Apdex The average Apdex score for all transactions that occurred in the selected time range. Apdex scores marked with an * asterisk indicate the agent collected fewer than 100 samples for that transaction name. Data for these transactions may be less accurate than data for transactions with higher throughput. Count The total number of all transactions that occurred in the selected time range. Avg (ms) The average time taken by all transactions in the selected time range. SD (ms) The standard deviation of all timing measurements for all transactions in the selected time range. Min (ms) The time taken by the fastest transaction in the selected time range. Max (ms) The time taken by the slowest transaction in the selected time range. Total (ms) The total amount of time taken by all transactions that occurred in the selected time range. Total (% time) The total amount of time for all transactions of that type, expressed as a percentage of the total amount of time taken by all transactions. Dissat (%) The percentage of the transactions that did not have satisfied Apdex scores. If you view transactions as a table, the All transactions row always contributes 100% of the app's total dissatisfaction, even if no responses are dissatisfying (100% of zero is zero). In this situation, 100% does not mean that all of your transactions are dissatisfying. The sum of all the other values in the Dissat (%) column is 100%. Additional functions Here are some additional functions for the Transactions page's selected transaction. If you want to... Do this... View transactions for operations and other background tasks Change the Type to Other transactions (or a specific type listed), then select a specific transaction. The Transactions page shows the top five transactions for this selection by wall-clock time, CPU usage, and memory usage. Track a transaction that is important to your business Select the transaction's name, then select Track as key transaction. View transaction trace details A transaction trace is a complete picture of a single transaction. From the Transactions page, select the transaction trace. Select the view for Summary, Trace details, or Database queries, if available. To expand the transaction trace to full screen view, select the full screen icon. To return to the Transactions page: Next to the transaction trace's name, select the back arrow. Examine logs for trace details If you are using our logs in context feature, you can see any logs that are linked to your traces. From the Transactions page, click on a trace to go to the trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. Add or view transaction segments To add segments to a transaction, use custom instrumentation. To view the segments of a specific transaction, use transaction traces. View reports You can also use the Web transactions analysis report for web transactions and the Background jobs analysis report for non-web transactions to compare the amount of time spent in throughput, total time in the transaction, average time to execute it, and Apdex score as applicable. Delete all transaction traces Caution If you select Delete all traces, you cannot recover them.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.83902,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transactions <em>page</em>: Find specific performance problems",
        "sections": "Transactions <em>page</em>: Find specific performance problems",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Transactions <em>page</em> helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This <em>page</em> lists the selected app&#x27;s transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per"
      },
      "id": "603ebd8228ccbcd2d3eba77b"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2022-01-12T08:47:46Z",
      "updated_at": "2021-11-06T23:07:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. From here you can also view available error logs in context for your app. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    },
    {
      "sections": [
        "View your applications index",
        "Tip"
      ],
      "title": "View your applications index",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "8e70cf3b6602b38efff4a6fb2443724a08a6701c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-your-applications-index/",
      "published_at": "2022-01-12T08:50:25Z",
      "updated_at": "2021-03-30T09:19:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When you go to one.newrelic.com > APM, you get an index of all APM apps associated with your New Relic account ID. The page automatically refreshes the index of applications every two minutes with the most current health status, events, and performance statistics. Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Here are some of the things you can do on this page: If you want to... Do this... View an app's details To go directly to the application's Summary page by clicking on the application's name. Find an app in the index Use any of these options to find what you want: Filter or roll up the index by category or tag. Use the search (magnifying glass) function at the top of the index. View details about a recent event or alert On the Summary page, review the entries under Application activity. You can select the link to get details. For more information, see View an app's alert information.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.14821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "When you go to one.newrelic.com &gt; <em>APM</em>, you get an index of all <em>APM</em> apps associated with your New Relic account ID. The <em>page</em> automatically refreshes the index of applications every two minutes with the most current health status, events, and performance statistics. Tip To get a high-level overview"
      },
      "id": "60455c3de7b9d2951a5799f3"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/view-your-applications-index": [
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.68387,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": ": Do one of the following: New Relic Explorer: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. <em>APM</em>: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Monitor</em> &gt; Databases. Select a database transaction. If available, select any available slow queries listed on the <em>page</em>"
      },
      "id": "604407dae7b9d26489579a05"
    },
    {
      "sections": [
        "Transactions page: Find specific performance problems",
        "Types of transactions",
        "Tip",
        "Wall-clock time",
        "View transactions",
        "Use drill-down functions",
        "Change the displayed transaction Type",
        "Select the type of performance measurement (Sort)",
        "Mouse over summary information about a transaction",
        "Select detailed information about a transaction",
        "View transaction data in different visual formats",
        "Show corresponding browser request data",
        "Identify transaction segments with high call counts or time",
        "Show all transactions",
        "Additional functions",
        "Caution"
      ],
      "title": "Transactions page: Find specific performance problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "af8aa4a977d05428494b8b34aed1ac6ea831d8db",
      "image": "https://docs.newrelic.com/static/0b30cbf2e9065777c252216f96c80ad7/a2d4f/APM-transaction-high-time-colorization_0.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/transactions-page-find-specific-performance-problems/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-11-13T07:21:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Transactions page helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This page lists the selected app's transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per minute or rpm). For non-web transactions (such as message processing, background tasks, and other processes and jobs that do not handle web requests), this page shows charts of CPU and memory usage. Types of transactions Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Depending on your selected application, the Transactions page may include a dropdown you can use to select from the types of transactions available. New Relic measures processing time by type of request (web transaction or non-web transaction). This may include: Web: App server requests Non-web: Other requests (operations, background tasks, etc.) The Transactions page also may include links to transaction traces and key transactions. The types of information available will depend on your selected app and the type of request (web or non-web). Wall-clock time Wall-clock time is the amount of time recorded by the clock. New Relic uses wall-clock time for all the transactions and then sums that value across all of the transactions. The host can execute requests in parallel, so you may see percentages over 100. For example, 100% would indicate that the execution time across all selected transactions is equal to the time expended when recording wall-clock time. View transactions To view information about your app's transaction requests: Do one of the following: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Go to one.newrelic.com > Explorer > (select an app) > Monitor > Transactions. If applicable: To change which available types of transactions appear, select the Type. Select the sort order, or keep the default. Select the type of view as a chart (default), histogram, or percentile, if available. To view additional details, use any of the transaction drill-down functions. To add a chart to a dashboard, mouse over the chart, then select the Add to a dashboard link that appears below it. If a chart's background is light red, this indicates a time period when an alert condition's Critical threshold has been violated. To view the incident details in New Relic Alerts, click the chart. For more information, see the documentation about navigating core UI components in New Relic One. Use drill-down functions Use any of New Relic's standard user interface functions to drill down into detailed information. The Transactions page has additional drill-down functions. Change the displayed transaction Type If the Type dropdown appears above list of transactions, you can select your choice of transaction type. The available types depend on what transactions your application uses. Select the type of performance measurement (Sort) The Sort dropdown above the transaction list allows you to review transactions according to different measurements. This helps you identify good candidates for performance tuning or fixing errors. You can sort by: Sort option Comments Most time consuming (default) Highest percentage of the app's total time used. This measures which transactions consumed the most time in total. This is calculated by multiplying the number of times the transaction is called by the time the transaction took to complete. A transaction could be short, but if it is frequently called, it would appear at the top of this ranking. Slowest average response time Slowest individual transactions for the time period as averaged. This measures the slowest types of transaction. A transaction could be called only a few times, but if it is one of the longest transactions to finish, it would appear at the top of this ranking. Apdex most dissatisfying Transactions with the highest percentages of user dissatisfaction levels for the response time of your web apps and services (Apdex). The dissatisfaction level is the difference between a perfect Apdex score (1.0) and your app's apdex_t (\"tolerating\") score, based on your Apdex settings. Transactions that have the highest (worst) percentages appear at the top of this ranking. Highest throughput This measures the amount of throughput, in operation requests per minute or rpm. (For web throughput, requests per minute is sometimes called pages per minute or ppm.) Transactions that have the highest number of requests per minute appear at the top of this ranking. Tip Depending on the transaction type you choose, different sort options may be available. Mouse over summary information about a transaction To quickly view key pieces of information about the transaction, mouse over its name on the list. Select detailed information about a transaction To view detailed information, select a transaction from the list, then select App performance or Historical performance. You can also view transaction traces. View transaction data in different visual formats The Transaction page's Top 5 transactions chart and a selected transaction's App performance window include options to view data as a: Chart Histogram Percentile In addition, from the Breakdown table for a selected transaction, you can select the link to show or hide all segments of the breakdown data. Show corresponding browser request data In order to view browser information, you must install the browser agent. Then, to view corresponding browser request data, use either of these options: Select the Browser drill-down link if available. Go to one.newrelic.com > Browser > (select an app) > Page views. Identify transaction segments with high call counts or time In a transaction's Breakdown table, the Avg calls (per txn) column may include colorized segment values. These indicate instrumented segments that have exceeded thresholds. Yellow: Segment time is more than 10% of total transaction time and call count is higher than 10. Red: Segment time is more than 10% of total transaction time and call count is higher than 20. Show all transactions To view all available transactions as a table, select the Show all transactions table link. From here, use any of the available options: To change the sort order, select any column header. To export the data to a file with comma-separated values, select Export as CSV. To return to the previous chart view, select Back to top transactions. CSV tables for ending now time periods are calculated at run time. They may show slightly higher values than what appears in the APM table. For each transaction, the Show all transactions table includes these measurements: Measurement Definition Apdex The average Apdex score for all transactions that occurred in the selected time range. Apdex scores marked with an * asterisk indicate the agent collected fewer than 100 samples for that transaction name. Data for these transactions may be less accurate than data for transactions with higher throughput. Count The total number of all transactions that occurred in the selected time range. Avg (ms) The average time taken by all transactions in the selected time range. SD (ms) The standard deviation of all timing measurements for all transactions in the selected time range. Min (ms) The time taken by the fastest transaction in the selected time range. Max (ms) The time taken by the slowest transaction in the selected time range. Total (ms) The total amount of time taken by all transactions that occurred in the selected time range. Total (% time) The total amount of time for all transactions of that type, expressed as a percentage of the total amount of time taken by all transactions. Dissat (%) The percentage of the transactions that did not have satisfied Apdex scores. If you view transactions as a table, the All transactions row always contributes 100% of the app's total dissatisfaction, even if no responses are dissatisfying (100% of zero is zero). In this situation, 100% does not mean that all of your transactions are dissatisfying. The sum of all the other values in the Dissat (%) column is 100%. Additional functions Here are some additional functions for the Transactions page's selected transaction. If you want to... Do this... View transactions for operations and other background tasks Change the Type to Other transactions (or a specific type listed), then select a specific transaction. The Transactions page shows the top five transactions for this selection by wall-clock time, CPU usage, and memory usage. Track a transaction that is important to your business Select the transaction's name, then select Track as key transaction. View transaction trace details A transaction trace is a complete picture of a single transaction. From the Transactions page, select the transaction trace. Select the view for Summary, Trace details, or Database queries, if available. To expand the transaction trace to full screen view, select the full screen icon. To return to the Transactions page: Next to the transaction trace's name, select the back arrow. Examine logs for trace details If you are using our logs in context feature, you can see any logs that are linked to your traces. From the Transactions page, click on a trace to go to the trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. Add or view transaction segments To add segments to a transaction, use custom instrumentation. To view the segments of a specific transaction, use transaction traces. View reports You can also use the Web transactions analysis report for web transactions and the Background jobs analysis report for non-web transactions to compare the amount of time spent in throughput, total time in the transaction, average time to execute it, and Apdex score as applicable. Delete all transaction traces Caution If you select Delete all traces, you cannot recover them.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.83902,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transactions <em>page</em>: Find specific performance problems",
        "sections": "Transactions <em>page</em>: Find specific performance problems",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Transactions <em>page</em> helps you identify transactions that may be good candidates for fine-tuning performance problems or resolving errors. This <em>page</em> lists the selected app&#x27;s transaction Requests, the top five transactions by percent of wall-clock time, and relevant throughputs (requests per"
      },
      "id": "603ebd8228ccbcd2d3eba77b"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2022-01-12T08:47:46Z",
      "updated_at": "2021-11-06T23:07:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. From here you can also view available error logs in context for your app. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99052,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/applications-menu/events/view-alert-history": [
    {
      "sections": [
        "Thread profiler tool",
        "Supported agents",
        "Start the profiler",
        "View profile data",
        "Agent considerations",
        ".NET-specific notes",
        "Python-specific notes",
        "Ruby-specific notes"
      ],
      "title": "Thread profiler tool",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "e2d300aa5dd9bdbf73684a04080773db0d1acd2b",
      "image": "https://docs.newrelic.com/static/1331956275509db052de91a6d8caebda/c1b63/thread-profiler-session.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/events/thread-profiler-tool/",
      "published_at": "2022-01-12T08:46:29Z",
      "updated_at": "2021-09-20T19:33:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The thread profiler is a low-impact profiling tool that can be used in production to identify bottlenecks in an application. It works by periodically (100ms) capturing the stack trace of each thread for a specified duration. At the end of the specified duration, the stack traces are aggregated to build a tree. The call count in the tree corresponds to the number of times that function was present in the stack traces under the same context. Although the call tree cannot capture the entire execution, a large enough sample can be a good representation of the application behavior. This provides insights into the \"hot\" functions of the app where most of the time is spent. With this scope, entries sampled less than 0.05% are omitted. Supported agents This feature is available only for specific agents and versions: Java: Agent versions 1.2.004.6 or higher .NET: Framework: Agent versions 2.12.146.0 or higher .NET Core 2.0: Agent versions 8.3.360.0 or higher (Windows only) Linux: .NET Core 3.0 or higher and agent versions 8.23 or higher Python: Agent versions 1.7.0 or higher Ruby: Agent versions 3.5.5 or higher Start the profiler The thread profiler feature is enabled by default. You also may be able to turn it on or off in your agent configuration file: Java: thread_profiler.enabled NET: You cannot disable the thread profiler with .NET apps. Python: thread_profiler.enabled Ruby: thread_profiler.enabled When enabled, you can view the thread profiler from our user interface: Go to one.newrelic.com > APM > (select an app) > Events > Thread profiler. Select the host you want to run the profiler on. Set the duration for the profiling session. Select Start profiler. This triggers the agent to start the thread profiler during the next harvest cycle (every one minute) and capture data for the specified duration. We record thread backtraces whether or not they are in a runnable state at the time the sample is taken. Threads that are sleeping or blocked on IO may appear in the call tree. one.newrelic.com > APM > (select an app) > Events > Thread profiler: Use this page to define the settings for the thread profiler duration and to view the results. View profile data After the profiler finishes running, the agent will report the profile data. The call tree automatically appears on the Thread profiler page. The percentages in the call tree represent the percentage of thread backtrace samples in which each call path appeared during the profiling session. The data collection started at the PROFILE COLLECTED time. The page color-codes the tree results: Red: Percentages greater than 30% Yellow: Percentages greater than 10% Black: Percentages less than 10% If you want to... Do this... Change how the thread profile information appears Select your choices of available options in the Tree settings, and select Refresh tree. Change how much information appears Select the Expand or Collapse options above the call tree, or select the name or arrow on any line in the call tree. View summary information about any line in the call tree Mouse over the line. Email the thread profile results to others Select Share this profile. Start another session or view a different thread profile Select Back to all profiles. Agent considerations Depending on which agent you use, the thread profiling feature has additional considerations. .NET-specific notes When using thread profiling with the .NET Framework agent, be aware of the following. .NET agent Thread profiler notes Supported on Linux Thread profiling on Linux is supported on .NET Core 3.0 or later applications when running .NET agent version 8.23 or later. Managed threads only For .NET agents, the thread profiler only captures stack traces on managed threads. It does not capture stack traces on unmanaged threads. If a call to an unmanaged function occurs on a managed thread, the thread profiler will show Native:Function Call in the call tree. No line numbers A .NET thread profile does not include line numbers in the call tree. The Show line numbers checkbox in the Tree Settings does not have any effect. Bug with 64-bit v4.0 .NET CLR There is a bug in the 64-bit version 4.0 .NET Common Language Runtime (CLR) that interferes with the agent's ability to retrieve managed stack traces. If your app experiences this bug, APM will show empty thread profiles. This bug does not affect 32-bit applications. The bug is fixed in the CLR releases for .NET 4.5. To verify whether your 64-bit application has the fixed version, look at the full version of the mscorlib.dll in the C: \\ Windows \\ Microsoft.NET \\ Framework64 \\ v4.0.30319 directory. The fix is in versions 4.0.30319.17379 or higher. Other category only All threads are put in the Other category. The Web Request and Background categories are not supported. Python-specific notes When using thread profiling with the Python agent, be aware of the following. Python agent Thread profiler notes Co-routine based systems There are limits to capturing details when a co-routine based system is being used, such as gevent or eventlet modes of gunicorn. If creating a new thread, the Python agent will actually create a greenlet instead of a thread profiler background thread. Therefore, the thread profiler will not capture any web request and background transactions on the thread profiler page. Greenlets A greenlet can run only when other greenlets explicitly yield control, such as when they block. For example, if the thread sampler does get to run, it will only sample the stack for other greenlets at a point where they are blocked. It will not sample them when they are executing arbitrary code. It can completely miss execution within a greenlet if it never blocked or otherwise yielded to another greenlet. Time in Python code Time spent in pure Python code that isn't blocking requests will not be picked up, and no information will be recorded or reported. This is because results are misleading when co-routines are used. Ruby-specific notes When using thread profiling with the Ruby agent, be aware of the following. Ruby agent Thread profiler notes Backtraces The thread profiler depends on the ability to capture thread backtraces from within your Ruby application. For this reason, it requires MRI 1.9.2 or higher (for the Thread#backtrace method). Resque The Ruby agent does not currently support thread profiles with Resque background jobs. A thread profiling session initiated against Resque will only capture traces from the parent process, not the job processes. JRuby JRuby support is considered experimental at this time. There are known issues with JRuby's Thread#backtrace implementation that will affect the accuracy of and reliability of backtraces collected under JRuby.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.23625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " for the specified duration. We record thread backtraces whether or not they are in a runnable state at the time the sample is taken. Threads that are sleeping or blocked on IO may appear in the call tree. one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Thread profiler: Use this <em>page</em> to define"
      },
      "id": "603ebd4928ccbccc3ceba78e"
    },
    {
      "sections": [
        "Deployments page: View impact on your app and users",
        "Set up deployment notifications",
        "View deployment details",
        "View performance after a deployment",
        "Tip"
      ],
      "title": "Deployments page: View impact on your app and users",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "e312ce78e93b452b265b646406db3a39d3f7e696",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/events/deployments-page-view-impact-your-app-users/",
      "published_at": "2022-01-12T08:46:29Z",
      "updated_at": "2021-03-16T06:31:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Deployments page lists recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors. You can view and drill down details, use search and sort options, hide or delete the error, share it with others, or file a ticket about it. Set up deployment notifications For all APM agents, you can record deployments by using webhooks or by using the New Relic REST API (v2). Some agents also have specific methods, such as the Java agent jar or the Python agent's newrelic-admin script. View deployment details After you configure the deployment information, you can view and drill down into details: Go to one.newrelic.com > APM > (select an app) > Events > Deployments. Use any of New Relic's standard user interface functions to drill down into detailed information. To view details for a particular event, select its date link. To view the errors page for this deployment, select the error link. To view details for a specific deployment if applicable, select Change log or Change report. The Change log contains any detail provided through the changelog parameter when recording the deployment. The Change report displays the behavior of the top ten transactions before and after the deployment. View performance after a deployment The Deployments page link for individual deployments appears on the selected app's Summary page in the Events section. For time frames shorter than 14 days, a blue vertical bar on a chart will indicate a deployment. To view summary information about the deployment, mouse over the blue bar. Tip You can also use the Compare with option on your APM summary page to select a time period to compare the same data. If you enable Compare with, the UI does not show deployment markers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.35774,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Deployments <em>page</em>: View impact on your app and users",
        "sections": "Deployments <em>page</em>: View impact on your app and users",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the deployment information, you can view and drill down into details: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Deployments. Use any of New Relic&#x27;s standard user interface functions to drill down into detailed information. To view details for a particular <em>event</em>, select its date link. To view"
      },
      "id": "603ebe19e7b9d2bc362a07cc"
    },
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.9235,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "In <em>APM</em>, when transaction traces are collected, there may be additional Slow query data available on the Databases <em>page</em>. Let&#x27;s look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different"
      },
      "id": "604407dae7b9d26489579a05"
    }
  ],
  "/docs/apm/applications-menu/features/configure-request-queue-reporting": [
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.8429,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "In <em>APM</em>, when transaction traces are collected, there may be additional Slow query data available on the Databases <em>page</em>. Let&#x27;s look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different"
      },
      "id": "604407dae7b9d26489579a05"
    },
    {
      "sections": [
        "Request queue server configuration examples",
        "Apache",
        "Nginx",
        "F5 load balancers",
        "Network timing"
      ],
      "title": "Request queue server configuration examples",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c7a069b8875af411530a34aaef67155d20d7fb19",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/features/request-queue-server-configuration-examples/",
      "published_at": "2022-01-12T08:50:25Z",
      "updated_at": "2021-07-09T08:23:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to report request queuing, New Relic agents depend on an HTTP header set by the front-end web server (such as Apache or Nginx) or load balancer (such as HAProxy or F5). These examples use the X-Request-Start header, since it is has broader support across platforms. If this does not work with your server configuration for request queuing, try using the X-Queue-Start header. The syntax should otherwise be the same. Apache Apache's mod_headers module includes a %t variable that is formatted correctly. To enable request queue reporting, add this code to your Apache config: RequestHeader set X-Request-Start \"%t\" Copy Nginx If you are using Nginx version 1.2.6 or higher and the latest version of the Ruby, Python, or PHP agent, Nginx can easily be configured to report queue time. (For Nginx versions 1.2.6 or lower, you must recompile Nginx with a module or patch.) Configuring with Nginx 1.2.6 or higher uses the ${msec} variable, which is a number in seconds with milliseconds resolution. For more information, see http://nginx.org/en/docs/http/ngx_http_core_module.html#variables. Add the appropriate information to your Nginx config: Nginx configuration Values General Nginx use proxy_set_header X-Request-Start \"t=${msec}\"; Copy Passenger Version 5 or higher: >passenger_set_header X-REQUEST-START \"t=${msec}\"; Copy Older versions: passenger_set_cgi_param X_REQUEST_START \"t=${msec}\"; Copy fastcgi fastcgi_param HTTP_X_REQUEST_START \"t=${msec}\"; Copy uWSGI uwsgi_param HTTP_X_REQUEST_START \"t=${msec}\"; Copy F5 load balancers For F5 load balancers, use this configuration snippet: when HTTP_REQUEST_SEND { # TCL 8.4 so we have to calculate the time in millisecond resolution # Calculation from: https://groups.google.com/forum/? fromgroups=#!topic/comp.lang.tcl/tV9H6TDv0t8 set secs [clock seconds] set ms [clock clicks -milliseconds] set base [expr { $secs * 1000 }] set fract [expr { $ms - $base }] if { $fract >= 1000 } { set diff [expr { $fract / 1000 }] incr secs $diff incr fract [expr { -1000 * $diff }] } set micros [format \"%d%03d000\" $secs $fract] # Want this header inserted as if coming from the client clientside { HTTP::header insert X-Request-Start \"t=${micros}\" } } Copy Network timing Even with request queuing configured, the front-end server's setup can still affect network time in your browser data. This is because the front-end server does not add the queuing time header until after it actually accepts and processes the request. The queuing time headers can never account for backlog in the listener socket used to accept requests. For example, if the front-end server's configuration results in a backlog of requests that queue in the listener socket, page load timing will show an increase in network time.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.61797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the queuing time header until after it actually accepts and processes the request. The queuing time headers can never account for backlog in the listener socket used to accept requests. For example, if the front-end server&#x27;s configuration results in a backlog of requests that queue in the listener socket, <em>page</em> load timing will show an increase in network time."
      },
      "id": "603eb84a28ccbc1734eba7a5"
    },
    {
      "sections": [
        "Request queuing and tracking front-end time",
        "Use request queuing to identify scaling problems",
        "Apdex calculations",
        "Clock skew"
      ],
      "title": "Request queuing and tracking front-end time",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "73285326db3b9d5e7d6477e83e45aeac1b541efa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/features/request-queuing-tracking-front-end-time/",
      "published_at": "2022-01-12T08:47:06Z",
      "updated_at": "2021-03-16T06:46:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM tracks the time after a request enters your production systems and before it reaches your application. We call this portion of your request's life cycle request queuing. Depending on the specifics of your production systems, this measurement of time may or may not include an actual queue that requests enter. It may also represent other functions (such as load balancing or internal network latency). Use request queuing to identify scaling problems Tracking time spent in request queuing is useful for identifying certain types of performance and scaling problems; for example: When your front-end web server is spending time waiting for application workers to become available When extra time is spent warming up application workers after a deploy or restart You must configure your New Relic agent and server to report request queuing. Then the information will appear in the selected application's Requests time chart for web transactions (from APM's Applications list, select the app), as well as other places in the user interface. The chart's legend indicates which color represents request queueing. Apdex calculations Request queuing is the time from when the browser requests content to the time it receives the content. Since your Apdex score will reflect these calculations, you can select whether to report request queue time separately or not. For more information, see Agent configuration. Clock skew If the front-end web server (such as Nginx) and your application do not reside on the same physical server, reported request queuing may be affected by clock skew. NTP provides an excellent way to keep server clocks in sync. However, they still will drift relative to each other. Since New Relic agents rely on a timestamp set by the front-end server, it may over- or under-report request queuing if the clock on that server is not closely synchronized with the clock on the app server. This may seem like a major problem with the feature; however, clock skew is unlikely to result in sudden spikes in reported request queuing. Sudden spikes generally occur when an app is restarted or becomes overloaded with requests. Our experience is that request queue reporting can be useful to identify real performance problems, but be sure to consider clock skew when interpreting this data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.93288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em> tracks the time after a request enters your production systems and before it reaches your application. We call this portion of your request&#x27;s life cycle request queuing. Depending on the specifics of your production systems, this measurement of time may or may not include an actual queue"
      },
      "id": "603eb84a196a678358a83dcc"
    }
  ],
  "/docs/apm/applications-menu/features/request-queue-server-configuration-examples": [
    {
      "sections": [
        "View slow query details",
        "Slow query data samples",
        "View slow query data",
        "Tip",
        "Configuration",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Slow queries metrics",
        "Troubleshooting: No slow query data"
      ],
      "title": "View slow query details",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "877f2ba64963875fce3cc4b656f5a66f43563cdd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/view-slow-query-details/",
      "published_at": "2022-01-12T08:49:09Z",
      "updated_at": "2021-12-30T02:57:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, when transaction traces are collected, there may be additional Slow query data available on the Databases page. Let's look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different metrics. This is useful to understand slow page performance. To learn how, watch this short video (4:18 minutes). Slow query data samples When transaction traces are reported, the slow queries feature samples the slowest database queries in those traces and reports data about them on the Databases page. Slow query data can include: Duration of query segments Query/explain plans (if recognized) Host and instance level details (if supported by agent) View slow query data Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. To see your slow query data: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Databases. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Databases. Select a database transaction. If available, select any available slow queries listed on the page. If you do not see expected slow query data, follow the troubleshooting tips. Configuration In general, you can configure your slow query settings either of these ways: Agent configuration Server-side configuration (if available for your agent) Agent configuration gives you more options than server-side configuration does. How you choose to configure slow queries will depend on your own setup and preferences. For more information, see the documentation for the specific agent: C SDK You can report slow query traces for SQL databases only. For more information, see Instrument your application with the C SDK. Go Agent configuration options: Enable/disable: SlowQuery.Enabled Slow query threshold: SlowQuery.Threshold For other datastore config options, see Datastore tracer configuration. Java Agent configuration: Slow query threshold: explain_threshold. For other settings related to slow transactions and queries, see the Transaction tracer config options. You can also edit basic slow query settings via server-side configuration. .NET Agent configuration: Enable/disable: slowSql enabled Slow query threshold: explainThreshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Node.js Agent configuration: Enable/disable: enabled Threshold: explain_threshold Maximum slow query samples: max_samples For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration of slow query data is not possible for the Node.js agent. PHP Agent configuration: Enable/disable: slow_sql Threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options. Server-side configuration is not possible for the PHP agent. Python Agent configuration: Slow query threshold: explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Datastore tracer options. You can also edit basic slow query settings via server-side configuration. Ruby Agent configuration: Enable/disable: slow_sql.enabled Slow query threshold: slow_sql.explain_threshold For other settings related to slow transactions and queries, see the Transaction tracer config options and the Slow SQL config options. If applicable for your application's agent language, you can also edit basic slow query settings by using server-side configuration. Slow queries metrics The slow queries list contains the following metrics: Metric Description Response time The average response time for the statements sampled. Sample count The number of slow queries identified in the sample. To view additional details, select an individual slow query: Metric Description Start time When the stack trace began collecting the data shown. Max time The maximum time for all similar query statements in the sample. Action The action or process invoking the query. Query The query that is being reported as slow. Depending on your configuration, some parts of the query may be obfuscated. Stack trace Where in the code the statement was called. For MySQL, we provide a query analysis, which explains what happened in your query and what you might do to speed it up. Other databases display an explain plan whenever possible. Troubleshooting: No slow query data If you do not see slow query data, it may be for any of these reasons: The slow query feature has been disabled. The threshold is set to too high a duration and no slow queries are being reported. The query obfuscation setting (usually record_sql or similar) may be set to Off. To solve the problem, try adjusting the configuration options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.8429,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "In <em>APM</em>, when transaction traces are collected, there may be additional Slow query data available on the Databases <em>page</em>. Let&#x27;s look at what slow query data is, where to find it, and how to configure it. You can also use histograms and heatmaps to visualize the distribution of values for different"
      },
      "id": "604407dae7b9d26489579a05"
    },
    {
      "sections": [
        "Configure request queue reporting",
        "HTTP header",
        "Tip",
        "C SDK",
        "Go agent",
        "Java, Node.js, Python, Ruby agents",
        ".NET agent",
        "PHP agent"
      ],
      "title": "Configure request queue reporting",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "3226477ad8d63af87fd5947589af31d0d679b89b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/features/configure-request-queue-reporting/",
      "published_at": "2022-01-12T08:49:54Z",
      "updated_at": "2021-03-16T08:18:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Request queuing occurs before the request reaches your application (where the agent resides). This is why you need to do some straightforward configuration of the agent and your production hosts to take advantage of this feature. HTTP header In order to report request queuing, most New Relic agents depend on an HTTP header set by the front-end web server (such as Apache or Nginx) or load balancer (such as HAProxy or F5). You can configure these front-end servers to set the timestamp in the HTTP header that represents when the request first entered your production infrastructure. Tip Set this header as soon after the request enters your infrastructure as possible so that you are less likely to miss performance problems in your infrastructure that occur before the header is set. Most New Relic agents will interpret an X-Queue-Start or X-Request-Start header and use it to calculate Request Queuing. The agents treat these headers identically. Include a value in the format t=MICROSECONDS_SINCE_EPOCH where MICROSECONDS_SINCE_EPOCH is an integer value of the number of microseconds that have elapsed since the beginning of the Unix epoch (for example, January 1, 1970). Nearly any front-end HTTP server or load balancer can be configured to add this header. Additional details depend on your specific agent and server configuration. For more information, see the request queue configuration examples. C SDK The C SDK does not support request queuing. Go agent With the Go agent, set either header to record a metric for it. Java, Node.js, Python, Ruby agents The most recent versions of the Java, Node.js, Python, and Ruby agents provide more flexibility in the format of the X-Request-Start or X-Queue-Start header. These agents allow the timestamp to be submitted in seconds, milliseconds, or microseconds as an integer or floating point value. These agents also allow the leading t= in the header value to be omitted. Based on the order of magnitude, these agents automatically interpret the time unit as seconds, milliseconds, or microseconds. New Relic can do this reliably since a millisecond timestamp, interpreted as microseconds, would result in a queue time over 40 years. Python agent only: When using Apache/mod_wsgi 3.4 or higher, mod_wsgi will automatically insert an equivalent to the X-Queue-Start header into the WSGI environ dictionary for each request. This will mark the specific point in time where Apache first accepted the request. The value set by mod_wsgi will be picked up and used by the Python agent if no separate X-Request-Start or X-Queue-Start header has been manually configured into a web server's front end or in Apache itself. .NET agent The .NET agent does not require (and will ignore) any configuration of HTTP headers to calculate queue time. It works by instrumenting the IIS-queuing mechanism directly and reports queue time as the difference between when the HttpContext constructor executes and when the HttpApplication.BeginRequest event fires. Request queue time is only reported for .NET Framework applications hosted on IIS (for example: ASP.NET applications). It is not reported for ASP .NET Core applications (targeting .NET Core or Framework), nor for self-hosted OWIN applications. PHP agent The PHP agent only supports the X-Request-Start header. This identifies the timestamp in microseconds as an integer, with an optional t= in the header value. To ensure that the header is read properly, check your phpinfo() under the PHP Variables section, and verify that _SERVER[\"HTTP_X_REQUEST_START\"] exists and is in the expected format. If you are using Nginx, see Request queue server configuration examples for additional information on setting the header.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.9338,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>"
      },
      "id": "603eb8ba28ccbc4b1deba769"
    },
    {
      "sections": [
        "Request queuing and tracking front-end time",
        "Use request queuing to identify scaling problems",
        "Apdex calculations",
        "Clock skew"
      ],
      "title": "Request queuing and tracking front-end time",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "73285326db3b9d5e7d6477e83e45aeac1b541efa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/features/request-queuing-tracking-front-end-time/",
      "published_at": "2022-01-12T08:47:06Z",
      "updated_at": "2021-03-16T06:46:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM tracks the time after a request enters your production systems and before it reaches your application. We call this portion of your request's life cycle request queuing. Depending on the specifics of your production systems, this measurement of time may or may not include an actual queue that requests enter. It may also represent other functions (such as load balancing or internal network latency). Use request queuing to identify scaling problems Tracking time spent in request queuing is useful for identifying certain types of performance and scaling problems; for example: When your front-end web server is spending time waiting for application workers to become available When extra time is spent warming up application workers after a deploy or restart You must configure your New Relic agent and server to report request queuing. Then the information will appear in the selected application's Requests time chart for web transactions (from APM's Applications list, select the app), as well as other places in the user interface. The chart's legend indicates which color represents request queueing. Apdex calculations Request queuing is the time from when the browser requests content to the time it receives the content. Since your Apdex score will reflect these calculations, you can select whether to report request queue time separately or not. For more information, see Agent configuration. Clock skew If the front-end web server (such as Nginx) and your application do not reside on the same physical server, reported request queuing may be affected by clock skew. NTP provides an excellent way to keep server clocks in sync. However, they still will drift relative to each other. Since New Relic agents rely on a timestamp set by the front-end server, it may over- or under-report request queuing if the clock on that server is not closely synchronized with the clock on the app server. This may seem like a major problem with the feature; however, clock skew is unlikely to result in sudden spikes in reported request queuing. Sudden spikes generally occur when an app is restarted or becomes overloaded with requests. Our experience is that request queue reporting can be useful to identify real performance problems, but be sure to consider clock skew when interpreting this data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.93288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em> tracks the time after a request enters your production systems and before it reaches your application. We call this portion of your request&#x27;s life cycle request queuing. Depending on the specifics of your production systems, this measurement of time may or may not include an actual queue"
      },
      "id": "603eb84a196a678358a83dcc"
    }
  ]
}