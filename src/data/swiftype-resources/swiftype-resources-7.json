{
  "/docs/alerts-applied-intelligence/new-relic-alerts/alert-notifications/notification-channels-control-where-send-alerts": [
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 282.0382,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Custom metric examples for <em>alert</em> <em>notifications</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> <em>notifications</em> If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Manage alert notification channels",
        "Tip",
        "Reference for updating channels",
        "View email channels",
        "Add or update email channels",
        "Create more channels",
        "Add or remove policies assigned to a channel",
        "Assign a channel to a policy",
        "Change a channel's name",
        "Check for policies assigned to a user",
        "Check how many policies are assigned to a channel",
        "View assigned alert policies",
        "Delete a channel",
        "Basic process"
      ],
      "title": "Manage alert notification channels",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert notifications"
      ],
      "external_id": "521bed5aa6fdcea5c1cffd11d01e6dad19bc7c40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-notifications/update-alert-notification-channels/",
      "published_at": "2021-09-13T19:36:03Z",
      "updated_at": "2021-09-08T15:38:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To keep alert notifications consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add policies to an existing channel, create a new channel entirely, and more. Tip Your selected channel type determines the communication method that appears. For example, if your channel type is email, then the channel will include an email address value. For more information, see channel types. Reference for updating channels Here's a quick reference for updating channels which also includes links to more detailed information and procedures. View email channels Alerts automatically includes the email addresses for all users in the selected account as individual notification channels. If the account is a child account, the list shows only the users on the child account, not the users in the parent account. To view or search the list of user names and emails: Go to one.newrelic.com, in the top nav click Alerts & AI, then click Notification channels. In the search field, search for 'user'. Add or update email channels Users can't unsubscribe from email notifications. The account Owner or Admin must remove them from the policy's notification channel. To add or update account users as notification channels for a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, and then choose the policy you want to change. Optional: You can update notification channels for specific users. On the Notification channels page, select a user, select any policy subscription already associated with the user as applicable to view policy details. Click Notification channels, then follow standard procedures to add notification channels. Click Update policy. Create more channels To create a new notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Click New notification channel. Add or remove policies assigned to a channel To add or remove policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Choose a channel, and then click Alert policies. From the selected policy, use the windows to select, remove, or clear all notification channels. Assign a channel to a policy To add a notification channel to one or more policies: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies. Choose a policy, click Notification channels, and then click Add notification channels. Choose a channel, and then click Update policy. Change a channel's name To rename an existing notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details, change the name (maximum 64 characters) based on the channel type if applicable, and then save. Check for policies assigned to a user To check whether an account user has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Optional: Search by \"user\" to browse users or a specific username or email. Choose the user, then click Alert policies. Check how many policies are assigned to a channel To check whether a notification channel has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. The Policy subscriptions column lists how many policies are assigned to the channel. View assigned alert policies To view the policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, choose a channel, and then click Alert policies. OR To view the notification channels assigned to a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, choose a policy, then click Notification channels. Delete a channel To delete a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. In the list, click the Delete icon. Basic process Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details page, make any necessary changes, and then save. The user interface shows a Last modified time stamp for any changes to policies, including their conditions and notification channels.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 248.92032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>alert</em> <em>notification</em> channels",
        "sections": "Manage <em>alert</em> <em>notification</em> channels",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": "To keep <em>alert</em> <em>notifications</em> consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add policies to an existing channel, create a <em>new</em> channel entirely, and more. Tip Your selected channel type determines the communication method that appears"
      },
      "id": "603eca45e7b9d2d1d82a0806"
    },
    {
      "sections": [
        "Create NRQL alert conditions",
        "Tip",
        "Create a NRQL alert condition",
        "Create a condition from a chart",
        "Caution",
        "NRQL alert syntax",
        "Important",
        "Reformatting incompatible NRQL",
        "NRQL alert threshold examples",
        "Alert on specific segments of your data",
        "Alert on Nth percentile of your data",
        "Alert on max, min, avg of your data",
        "Alert on a percentage of your data",
        "Alert on Apdex with any T-value",
        "Alert conditions and query order of operations",
        "Example: null value returned",
        "Example: zero value returned",
        "Nested aggregation NRQL alerts",
        "Nested queries with a non-faceted innermost query are not currently supported",
        "Queries at all levels must have the same aggregation window size",
        "Signal loss is not yet supported for nested queries",
        "Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported",
        "NRQL condition creation tips",
        "Alert threshold types",
        "Sum of query results (limited or intermittent data)",
        "Set the loss of signal threshold",
        "Advanced signal settings",
        "Aggregation window",
        "Evaluation offset",
        "Fill data gaps"
      ],
      "title": "Create NRQL alert conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "2872f770a5fc8a802f99b9f848906f7e351ad761",
      "image": "https://docs.newrelic.com/static/eb8e1b2d826f9fd9cf46fe3dd5455217/c1b63/nr1_nrql_alert_conditions.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/",
      "published_at": "2021-09-14T07:20:17Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use NRQL queries to create alert conditions. Once you've defined your signal, you can further define your warning and critical threshold levels. This determines when an alerts violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Click NRQL, and then Next, define thresholds. Tip For more information on key concepts relating to NRQL alert conditions and streaming alerts, see Streaming alerts: key terms and concepts. Create a NRQL alert condition To create a NRQL alert condition for a policy: On one.newrelic.com, in the header click Alerts & AI, then in the left sidebar click Policies. Select an existing policy or click New alert policy to create a new policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define thresholds. Create a condition from a chart You can use a chart to create a NRQL alert condition. To create a NRQL alerts condition from a chart, click the chart menu , then click Create alert condition. Once you've named and customized your condition, you can add it to an existing policy or create a new one. Caution A small number of our older charts don't include the option to create an alert condition. NRQL alert syntax Here's the basic syntax for creating all NRQL alert conditions. The FACET clause is required for outlier threshold types. It's optional for static and baseline. SELECT function(attribute) FROM Event WHERE attribute [comparison] [AND|OR ...] Copy Clause Notes SELECT function(attribute) Required Supported functions that return numbers include: apdex average count latest max min percentage percentile sum uniqueCount Tip If you use the percentile aggregator in a faceted alert condition with many facets, this may cause the following error to appear: An error occurred while fetching chart data. If you see this error, use average instead. FROM data type Required Only one data type can be targeted. Supported data types: Event Metric (RAW data points will be returned) WHERE attribute [comparison] [AND|OR ...] Use the WHERE clause to specify a series of one or more conditions. All the operators are supported. FACET attribute Required for outlier conditions Include an optional FACET clause in your NRQL syntax depending on the threshold type: static or baseline. Use the FACET clause to separate your results by attribute and alert on each attribute independently. No LIMIT clause is allowed, but all queries will receive the maximum number of facets possible. Faceted queries can return a maximum of 5000 values for static and baseline conditions and a maximum of 500 values for outlier conditions. Important If the query returns more than the maximum number of values, the alert condition can't be created. If you create the condition and the query returns more than this number later, the alert will fail. Modify your query so that it returns a fewer number of values. Reformatting incompatible NRQL Some elements of NRQL used in charts don’t make sense in the streaming context of alerts. Here’s a list of the most common incompatible elements and suggestions for reformatting a NRQL alert query to achieve the same effect. Element Notes SINCE and UNTIL Example: SELECT percentile(largestContentfulPaint, 75) FROM PageViewTiming WHERE (appId = 837807) SINCE yesterday Copy NRQL Alerting produces a never-ending stream of windowed query results, so the SINCE and UNTIL keywords to scope the query to a point in time are not compatible. As a convenience, we automatically strip SINCE and UNTIL from a query when creating a NRQL Alert Condition from the context of a chart. TIMESERIES In NRQL queries, the TIMESERIES clause is used to return data as a time series broken out by a specified period of time. For NRQL alerts, the equivalent property of a signal is the aggregation window. histogram() The histogram() aggregation function is used to generate histograms. histogram() is not compatible with NRQL alerting: histogram aggregations can not be formatted as a time series. To create an alert from a portion of a histogram (e.g. 95th percentile), use the percentile() aggregation function. Multiple Aggregation Functions Each alert condition can only target a single aggregated stream of data. To alert on multiple streams simultaneously, you’ll need to decompose them into individual conditions within the same policy. Original Query: SELECT count(foo), average(bar), max(baz) from Transaction Copy Decomposed: SELECT count(foo) from Transaction SELECT average(bar) from Transaction SELECT max(baz) from Transaction Copy COMPARE WITH The COMPARE WITH clause is used to compare the values for two different time ranges. This type of query is incompatible with NRQL alerting. We recommend using a Baseline Alert Condition to dynamically detect deviations for a particular signal. SLIDE BY The SLIDE BY clause supports a feature known as sliding windows. With sliding windows, SLIDE BY data is gathered into \"windows\" of time that overlap with each other. These windows can help to smooth out line graphs with a lot of variation in cases where the rolling aggregate (such as a rolling mean) is more important than aggregates from narrow windows of time. Sliding windows are not currently supported in NRQL alerts. LIMIT In NRQL queries, the LIMIT clause is used to control the amount of data a query returns, either the maximum number of facet values returned by FACET queries or the maximum number of items returned by SELECT * queries. LIMIT is not compatible with NRQL alerting: evaluation is always performed on the full result set. NRQL alert threshold examples Here are some common use cases for NRQL alert conditions. These queries will work for static and baseline threshold types. The outlier threshold type will require additional FACET clauses. Alert on specific segments of your data Create constrained alerts that target a specific segment of your data, such as a few key customers or a range of data. Use the WHERE clause to define those conditions. SELECT average(duration) FROM Transaction WHERE account_id in (91290, 102021, 20230) Copy SELECT percentile(duration, 95) FROM Transaction WHERE name LIKE 'Controller/checkout/%' Copy Alert on Nth percentile of your data Create alerts when an Nth percentile of your data hits a specified threshold; for example, maintaining SLA service levels. Since we evaluate the NRQL query in one-minute time windows, percentiles will be calculated for each minute separately. SELECT percentile(duration, 95) FROM Transaction Copy SELECT percentile(databaseDuration, 75) FROM Transaction Copy Alert on max, min, avg of your data Create alerts when your data hits a certain maximum, minimum, or average; for example, ensuring that a duration or response time does not pass a certain threshold. SELECT max(duration) FROM Transaction Copy SELECT average(duration) FROM Transaction Copy Alert on a percentage of your data Create alerts when a proportion of your data goes above or below a certain threshold. SELECT percentage(count(*), WHERE duration > 2) FROM Transaction Copy SELECT percentage(count(*), WHERE httpResponseCode = '500') FROM Transaction Copy Alert on Apdex with any T-value Create alerts on Apdex, applying your own T-value for certain transactions. For example, get an alert notification when your Apdex for a T-value of 500ms on transactions for production apps goes below 0.8. SELECT apdex(duration, t:0.5) FROM Transaction WHERE appName like '%prod%' Copy Alert conditions and query order of operations By default, the aggregation window is 1 minute, but you can change the window to suit your needs. Whatever the aggregation window, New Relic will collect data for that window using the function in the NRQL alert condition’s query. The query is parsed and executed by our systems in the following order: FROM clause – which event type needs to be grabbed? WHERE clause – what can be filtered out? SELECT clause – what information needs to be returned from the now-filtered data set? Example: null value returned Let's say this is your alert condition query: SELECT count(*) FROM SyntheticCheck WHERE monitorName = 'My Cool Monitor' AND result = 'FAILURE' Copy If there are no failures for the aggregation window: The system will execute the FROM clause by grabbing all SyntheticCheck events on your account. Then it will execute the WHERE clause to filter through those events by looking only for the ones that match the monitor name and result specified. If there are still events left to scan through after completing the FROM and WHERE operations, the SELECT clause will be executed. If there are no remaining events, the SELECT clause will not be executed. This means that aggregators like count() and uniqueCount() will never return a zero value. When there is a count of 0, the SELECT clause is ignored and no data is returned, resulting in a value of NULL. Example: zero value returned If you have a data source delivering legitimate numeric zeroes, the query will return zero values and not null values. Let's say this is your alert condition query, and that MyCoolEvent is an attribute that can sometimes return a zero value. SELECT average(MyCoolAttribute) FROM MyCoolEvent Copy If, in the aggregation window being evaluated, there's at least one instance of MyCoolEvent and if the average value of all MyCoolAttribute attributes from that window is equal to zero, then a 0 value will be returned. If there are no MyCoolEvent events during that minute, then a NULL will be returned due to the order of operations. Tip For more information about this topic, you can check out our blog post on troubleshooting for zero versus null values. Tip You can determine how null values will be handled by adjusting loss of signal and gap filling settings in the Alert Conditions UI. Tip You can avoid NULL values entirely with a query order of operations shortcut. Do this by using a filter sub-clause, then including all filter elements within that sub-clause. The main body of the query will run and return data, at which point the SELECT clause will then run and apply the filter elements. The query will return a value of 0 if the filter elements result in no matching data. Here's an example: SELECT filter(count(*), WHERE result = 'SUCCESS' AND monitorName = 'My Favorite Monitor') FROM SyntheticCheck Copy Nested aggregation NRQL alerts Nested aggregation queries are a powerful way to query your data. However, they have a few restrictions that are important to note. Nested queries with a non-faceted innermost query are not currently supported Without a FACET, the inner query produces a single result, giving the outer query nothing to aggregate. If you're using a nested query, make sure your inner query is faceted. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu) ​​​​​ Copy Queries at all levels must have the same aggregation window size With an alert aggregation window of 1 minute, the inner query would produce two smaller windows of 30 seconds. In theory, these two windows could be aggregated by the outer query. However, this is not currently supported. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu TIMESERIES 30 seconds)​​ Copy Signal loss is not yet supported for nested queries For more information on signal loss, see NerdGraph API: Loss of signal and gap filling. Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported You can't use a nested query containing the WITH METRIC_FORMAT in the inner query to create NRQL alert conditions. NRQL condition creation tips Here are some tips for creating and using a NRQL condition: Topic Tips Condition threshold types NRQL condition threshold types include static, baseline, and outlier. Create a description For NRQL conditions, you can create a custom description to add to each violation. Descriptions can be enhanced with variable substitution based on metadata in the specific violation. For details, see Description Query results Queries must return a number. The condition evaluates the returned number against the thresholds you've set. Time period As with all alert conditions, NRQL conditions evaluate one single minute at a time. The implicit SINCE ... UNTIL clause specifying which minute to evaluate is controlled by your Evaluation offset setting. Since very recent data may be incomplete, you may want to query data from 3 minutes ago or longer, especially for: Applications that run on multiple hosts. SyntheticCheck data: Timeouts can take 3 minutes, so 5 minutes or more is recommended. Also, if a query will generate intermittent data, consider using the sum of query results option. Lost signal threshold (loss of signal detection) You can use loss of signal detection to alert on when your data (a telemetry signal) should be considered lost. A signal loss can indicate that a service or entity is no longer online or that a periodic job failed to run. You can also use this to make sure that violations for sporadic data, such as error counts, are closed when no signal is coming in. Advanced signal settings These settings give you options for better handling continuous, streaming data signals that may sometimes be missing. These settings include the aggregation window, the evaluation offset, and an option for filling data gaps. For more on using these, see Advanced signal settings. Condition settings Use the Condition settings to: Create a concise, descriptive condition name. Provide a custom violation description for the condition that will be included in violations and notifications. Add the runbook URL to include your organization's procedures for handling incidents. You may also add this information to the custom violation description. Limits on conditions See the maximum values. Health status NRQL alert conditions don't affect an entity's health status display. Examples For more information, see: Expected NRQL syntax Examples of NRQL condition queries Alert threshold types When you create a NRQL alert, you can choose from different types of thresholds: NRQL alert threshold types Description Static This is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value. Optional: Include a FACET clause. Baseline (Dynamic) Uses a self-adjusting condition based on the past behavior of the monitored values. Uses the same NRQL query form as the static type. Outlier Looks for group behavior and values that are outliers from those groups. Uses the same NRQL query form as the static type, but requires a FACET clause. Sum of query results (limited or intermittent data) Important Available only for static (basic) threshold types. If a query returns intermittent or limited data, it may be difficult to set a meaningful threshold. Missing or limited data will sometimes generate false positives or false negatives. You can use loss of signal, aggregation duration, and gap filling settings to minimize these false notifications. To avoid this problem when using the static threshold type, you can set the selector to sum of query results. This lets you set the alert on an aggregated sum instead of a value from a single harvest cycle. Up to two hours of one-minute data checks can be aggregated. The duration you select determines the width of the rolling sum and the preview chart will update accordingly. Set the loss of signal threshold Loss of signal occurs when no data matches the NRQL condition over a specific period of time. You can set your loss of signal threshold duration and and also what happens when the threshold is crossed. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Loss of signal is only available for NRQL conditions. You may also manage these settings using the GraphQL API (recommended), or the REST API. Go here for specific GraphQL API examples. Loss of signal settings: Loss of signal settings include a time duration and two possible actions. Signal loss expiration time UI label: Signal is lost after: GraphQL Node: expiration.expirationDuration Expiration duration is a timer that starts and resets when we receive a data point in the streaming alerts pipeline. If we don't receive another data point before your 'expiration time' expires, we consider that signal to be lost. This can be because no data is being sent to New Relic or the WHERE clause of your NRQL query is filtering that data out before it is streamed to the alerts pipeline. The loss of signal expiration time is independent of the threshold duration and triggers as soon as the timer expires. The maximum expiration duration is 48 hours. This is helpful when monitoring for the execution of infrequent jobs. The minimum is 30 seconds, but we recommend using at least 3-5 minutes. Loss of signal actions Once a signal is considered lost, you can close open violations, open new violations, or both. Close all current open violations: This closes all open violations that are related to a specific signal. It won't necessarily close all violations for a condition. If you're alerting on an ephemeral service, or on a sporadic signal, you'll want to choose this action to ensure that violations are closed properly. The GraphQL node name for this is \"closeViolationsOnExpiration\" Open new violations: This will open a new violation when the signal is considered lost. These violations will indicate that they are due to a loss of signal. Based on your incident preferences, this should trigger a notification. The graphQL node name for this is \"openViolationOnExpiration\" When you enable both actions, we'll close all open violations first, and then open a new violation for loss of signal. To create a NRQL alert configured with loss of signal detection in the UI: For a policy, when you create a condition, under Select a product, click NRQL, then click Next, define thresholds. Write a NRQL query that returns the values you want to alert on. For Threshold type, select Static or Baseline. Click + Add lost signal threshold, then set the signal expiration duration time in minutes or seconds in the Signal is lost after field. Choose what you want to happen when the signal is lost. You can check one or both of Close all current open violations and Open new \"lost signal\" violation. These control how loss of signal violations will be handled for the condition. Make sure you name your condition before you save it. Violations open due to loss of signal close when the signal comes back. Newly opened lost signal violations will close immediately when new data is evaluated. the condition they belong to expires. By default, conditions expire after 3 days. you manually close the violation with the Close all current open violations option. Tip Loss of signal detection doesn't work on NRQL queries that use nested aggregation or sub-queries. Advanced signal settings When creating a NRQL alert condition, the advanced signal settings gives you better control over streaming alert data and helps you avoid false alarms. When creating a NRQL condition, there are several advanced signal settings: Aggregation window Evaluation offset Fill data gaps To read an explanation of what these settings are and how they relate to each other, see Streaming alerts concepts. Below are instructions and tips on how to configure them. Aggregation window You can set the aggregation window duration to choose how long data is accumulated in a streaming time window before it's aggregated. You can set it to anything between one second and 15 minutes. The default is one minute. Tip Baseline alert condition thresholds don't support editing the aggregation window. They use the 1 minute default. Evaluation offset You can adjust the evaluation offset to coordinate our streaming alerting algorithm with your data's latency. If it takes a while for your data to arrive, then you may need to increase the evaluation offset. The total supported latency is the product of the aggregation window duration multiplied by the evaluation offset. In the example screenshot above, the supported latency is 3 minutes (a 1-minute aggregation window multiplied by three windows). If the data type comes from an APM language agent and is aggregated from many app instances (for example, Transactions, TransactionErrors, etc.), we recommend using an evaluation offset of 3 with 1 minute aggregation windows. Important When creating NRQL conditions for data collected from Infrastructure Cloud Integrations such as AWS Cloudwatch or Azure, we recommend that you start with an evaluation offset of 15 minutes, then adjust up or down depending on how long it takes to collect your data. Fill data gaps Gap filling lets you customize the values to use when your signals don't have any data. You can fill gaps in your data streams with one of these settings: None: (Default) Choose this if you don't want to take any action on empty aggregation windows. On evaluation, an empty aggregation window will reset the threshold duration timer. For example, if a condition says that all aggregation windows must have data points above the threshold for 5 minutes, and 1 of the 5 aggregation windows is empty, then the condition won't be in violation. Custom static value: Choose this if you'd like to insert a custom static value into the empty aggregation windows before they're evaluated. This option has an additional, required parameter of fillValue (as named in the API) that specifies what static value should be used. This defaults to 0. Last known value: This option inserts the last seen value before evaluation occurs. We maintain the state of the last seen value for 2 hours. Tip The alerts system fills gaps in actively reported signals. This signal history is dropped after 2 hours of inactivity. For gap filling, data points received after this period of inactivity are treated as new signals. To learn more about signal loss, gap filling, and how to request access to these features, see this Explorers Hub post. Options for editing data gap settings: In the NRQL conditions UI, go to Condition settings > Advanced signal settings > fill data gaps with and choose an option. If using our Nerdgraph API (preferred), this node is located at: actor : account : alerts : nrqlCondition : signal : fillOption | fillValue NerdGraph is our recommended API for this but if you're using our REST API, you can find this setting in the REST API explorer under the \"signal\" section of the Alert NRQL conditions API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.66203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create NRQL <em>alert</em> conditions",
        "sections": "<em>Alert</em> conditions <em>and</em> query order of operations",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " a NRQL <em>alert</em> condition for a policy: On one.newrelic.com, in the header click <em>Alerts</em> &amp; AI, then in the left sidebar click Policies. Select an existing policy or click <em>New</em> <em>alert</em> policy to create a <em>new</em> policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define"
      },
      "id": "603ef04864441fbc114e8883"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/alert-notifications/test-alert-notification-channels": [
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 282.0382,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Custom metric examples for <em>alert</em> <em>notifications</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> <em>notifications</em> If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Manage alert notification channels",
        "Tip",
        "Reference for updating channels",
        "View email channels",
        "Add or update email channels",
        "Create more channels",
        "Add or remove policies assigned to a channel",
        "Assign a channel to a policy",
        "Change a channel's name",
        "Check for policies assigned to a user",
        "Check how many policies are assigned to a channel",
        "View assigned alert policies",
        "Delete a channel",
        "Basic process"
      ],
      "title": "Manage alert notification channels",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert notifications"
      ],
      "external_id": "521bed5aa6fdcea5c1cffd11d01e6dad19bc7c40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-notifications/update-alert-notification-channels/",
      "published_at": "2021-09-13T19:36:03Z",
      "updated_at": "2021-09-08T15:38:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To keep alert notifications consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add policies to an existing channel, create a new channel entirely, and more. Tip Your selected channel type determines the communication method that appears. For example, if your channel type is email, then the channel will include an email address value. For more information, see channel types. Reference for updating channels Here's a quick reference for updating channels which also includes links to more detailed information and procedures. View email channels Alerts automatically includes the email addresses for all users in the selected account as individual notification channels. If the account is a child account, the list shows only the users on the child account, not the users in the parent account. To view or search the list of user names and emails: Go to one.newrelic.com, in the top nav click Alerts & AI, then click Notification channels. In the search field, search for 'user'. Add or update email channels Users can't unsubscribe from email notifications. The account Owner or Admin must remove them from the policy's notification channel. To add or update account users as notification channels for a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, and then choose the policy you want to change. Optional: You can update notification channels for specific users. On the Notification channels page, select a user, select any policy subscription already associated with the user as applicable to view policy details. Click Notification channels, then follow standard procedures to add notification channels. Click Update policy. Create more channels To create a new notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Click New notification channel. Add or remove policies assigned to a channel To add or remove policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Choose a channel, and then click Alert policies. From the selected policy, use the windows to select, remove, or clear all notification channels. Assign a channel to a policy To add a notification channel to one or more policies: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies. Choose a policy, click Notification channels, and then click Add notification channels. Choose a channel, and then click Update policy. Change a channel's name To rename an existing notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details, change the name (maximum 64 characters) based on the channel type if applicable, and then save. Check for policies assigned to a user To check whether an account user has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Optional: Search by \"user\" to browse users or a specific username or email. Choose the user, then click Alert policies. Check how many policies are assigned to a channel To check whether a notification channel has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. The Policy subscriptions column lists how many policies are assigned to the channel. View assigned alert policies To view the policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, choose a channel, and then click Alert policies. OR To view the notification channels assigned to a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, choose a policy, then click Notification channels. Delete a channel To delete a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. In the list, click the Delete icon. Basic process Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details page, make any necessary changes, and then save. The user interface shows a Last modified time stamp for any changes to policies, including their conditions and notification channels.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 248.92032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>alert</em> <em>notification</em> channels",
        "sections": "Manage <em>alert</em> <em>notification</em> channels",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": "To keep <em>alert</em> <em>notifications</em> consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add policies to an existing channel, create a <em>new</em> channel entirely, and more. Tip Your selected channel type determines the communication method that appears"
      },
      "id": "603eca45e7b9d2d1d82a0806"
    },
    {
      "sections": [
        "Create NRQL alert conditions",
        "Tip",
        "Create a NRQL alert condition",
        "Create a condition from a chart",
        "Caution",
        "NRQL alert syntax",
        "Important",
        "Reformatting incompatible NRQL",
        "NRQL alert threshold examples",
        "Alert on specific segments of your data",
        "Alert on Nth percentile of your data",
        "Alert on max, min, avg of your data",
        "Alert on a percentage of your data",
        "Alert on Apdex with any T-value",
        "Alert conditions and query order of operations",
        "Example: null value returned",
        "Example: zero value returned",
        "Nested aggregation NRQL alerts",
        "Nested queries with a non-faceted innermost query are not currently supported",
        "Queries at all levels must have the same aggregation window size",
        "Signal loss is not yet supported for nested queries",
        "Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported",
        "NRQL condition creation tips",
        "Alert threshold types",
        "Sum of query results (limited or intermittent data)",
        "Set the loss of signal threshold",
        "Advanced signal settings",
        "Aggregation window",
        "Evaluation offset",
        "Fill data gaps"
      ],
      "title": "Create NRQL alert conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "2872f770a5fc8a802f99b9f848906f7e351ad761",
      "image": "https://docs.newrelic.com/static/eb8e1b2d826f9fd9cf46fe3dd5455217/c1b63/nr1_nrql_alert_conditions.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/",
      "published_at": "2021-09-14T07:20:17Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use NRQL queries to create alert conditions. Once you've defined your signal, you can further define your warning and critical threshold levels. This determines when an alerts violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Click NRQL, and then Next, define thresholds. Tip For more information on key concepts relating to NRQL alert conditions and streaming alerts, see Streaming alerts: key terms and concepts. Create a NRQL alert condition To create a NRQL alert condition for a policy: On one.newrelic.com, in the header click Alerts & AI, then in the left sidebar click Policies. Select an existing policy or click New alert policy to create a new policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define thresholds. Create a condition from a chart You can use a chart to create a NRQL alert condition. To create a NRQL alerts condition from a chart, click the chart menu , then click Create alert condition. Once you've named and customized your condition, you can add it to an existing policy or create a new one. Caution A small number of our older charts don't include the option to create an alert condition. NRQL alert syntax Here's the basic syntax for creating all NRQL alert conditions. The FACET clause is required for outlier threshold types. It's optional for static and baseline. SELECT function(attribute) FROM Event WHERE attribute [comparison] [AND|OR ...] Copy Clause Notes SELECT function(attribute) Required Supported functions that return numbers include: apdex average count latest max min percentage percentile sum uniqueCount Tip If you use the percentile aggregator in a faceted alert condition with many facets, this may cause the following error to appear: An error occurred while fetching chart data. If you see this error, use average instead. FROM data type Required Only one data type can be targeted. Supported data types: Event Metric (RAW data points will be returned) WHERE attribute [comparison] [AND|OR ...] Use the WHERE clause to specify a series of one or more conditions. All the operators are supported. FACET attribute Required for outlier conditions Include an optional FACET clause in your NRQL syntax depending on the threshold type: static or baseline. Use the FACET clause to separate your results by attribute and alert on each attribute independently. No LIMIT clause is allowed, but all queries will receive the maximum number of facets possible. Faceted queries can return a maximum of 5000 values for static and baseline conditions and a maximum of 500 values for outlier conditions. Important If the query returns more than the maximum number of values, the alert condition can't be created. If you create the condition and the query returns more than this number later, the alert will fail. Modify your query so that it returns a fewer number of values. Reformatting incompatible NRQL Some elements of NRQL used in charts don’t make sense in the streaming context of alerts. Here’s a list of the most common incompatible elements and suggestions for reformatting a NRQL alert query to achieve the same effect. Element Notes SINCE and UNTIL Example: SELECT percentile(largestContentfulPaint, 75) FROM PageViewTiming WHERE (appId = 837807) SINCE yesterday Copy NRQL Alerting produces a never-ending stream of windowed query results, so the SINCE and UNTIL keywords to scope the query to a point in time are not compatible. As a convenience, we automatically strip SINCE and UNTIL from a query when creating a NRQL Alert Condition from the context of a chart. TIMESERIES In NRQL queries, the TIMESERIES clause is used to return data as a time series broken out by a specified period of time. For NRQL alerts, the equivalent property of a signal is the aggregation window. histogram() The histogram() aggregation function is used to generate histograms. histogram() is not compatible with NRQL alerting: histogram aggregations can not be formatted as a time series. To create an alert from a portion of a histogram (e.g. 95th percentile), use the percentile() aggregation function. Multiple Aggregation Functions Each alert condition can only target a single aggregated stream of data. To alert on multiple streams simultaneously, you’ll need to decompose them into individual conditions within the same policy. Original Query: SELECT count(foo), average(bar), max(baz) from Transaction Copy Decomposed: SELECT count(foo) from Transaction SELECT average(bar) from Transaction SELECT max(baz) from Transaction Copy COMPARE WITH The COMPARE WITH clause is used to compare the values for two different time ranges. This type of query is incompatible with NRQL alerting. We recommend using a Baseline Alert Condition to dynamically detect deviations for a particular signal. SLIDE BY The SLIDE BY clause supports a feature known as sliding windows. With sliding windows, SLIDE BY data is gathered into \"windows\" of time that overlap with each other. These windows can help to smooth out line graphs with a lot of variation in cases where the rolling aggregate (such as a rolling mean) is more important than aggregates from narrow windows of time. Sliding windows are not currently supported in NRQL alerts. LIMIT In NRQL queries, the LIMIT clause is used to control the amount of data a query returns, either the maximum number of facet values returned by FACET queries or the maximum number of items returned by SELECT * queries. LIMIT is not compatible with NRQL alerting: evaluation is always performed on the full result set. NRQL alert threshold examples Here are some common use cases for NRQL alert conditions. These queries will work for static and baseline threshold types. The outlier threshold type will require additional FACET clauses. Alert on specific segments of your data Create constrained alerts that target a specific segment of your data, such as a few key customers or a range of data. Use the WHERE clause to define those conditions. SELECT average(duration) FROM Transaction WHERE account_id in (91290, 102021, 20230) Copy SELECT percentile(duration, 95) FROM Transaction WHERE name LIKE 'Controller/checkout/%' Copy Alert on Nth percentile of your data Create alerts when an Nth percentile of your data hits a specified threshold; for example, maintaining SLA service levels. Since we evaluate the NRQL query in one-minute time windows, percentiles will be calculated for each minute separately. SELECT percentile(duration, 95) FROM Transaction Copy SELECT percentile(databaseDuration, 75) FROM Transaction Copy Alert on max, min, avg of your data Create alerts when your data hits a certain maximum, minimum, or average; for example, ensuring that a duration or response time does not pass a certain threshold. SELECT max(duration) FROM Transaction Copy SELECT average(duration) FROM Transaction Copy Alert on a percentage of your data Create alerts when a proportion of your data goes above or below a certain threshold. SELECT percentage(count(*), WHERE duration > 2) FROM Transaction Copy SELECT percentage(count(*), WHERE httpResponseCode = '500') FROM Transaction Copy Alert on Apdex with any T-value Create alerts on Apdex, applying your own T-value for certain transactions. For example, get an alert notification when your Apdex for a T-value of 500ms on transactions for production apps goes below 0.8. SELECT apdex(duration, t:0.5) FROM Transaction WHERE appName like '%prod%' Copy Alert conditions and query order of operations By default, the aggregation window is 1 minute, but you can change the window to suit your needs. Whatever the aggregation window, New Relic will collect data for that window using the function in the NRQL alert condition’s query. The query is parsed and executed by our systems in the following order: FROM clause – which event type needs to be grabbed? WHERE clause – what can be filtered out? SELECT clause – what information needs to be returned from the now-filtered data set? Example: null value returned Let's say this is your alert condition query: SELECT count(*) FROM SyntheticCheck WHERE monitorName = 'My Cool Monitor' AND result = 'FAILURE' Copy If there are no failures for the aggregation window: The system will execute the FROM clause by grabbing all SyntheticCheck events on your account. Then it will execute the WHERE clause to filter through those events by looking only for the ones that match the monitor name and result specified. If there are still events left to scan through after completing the FROM and WHERE operations, the SELECT clause will be executed. If there are no remaining events, the SELECT clause will not be executed. This means that aggregators like count() and uniqueCount() will never return a zero value. When there is a count of 0, the SELECT clause is ignored and no data is returned, resulting in a value of NULL. Example: zero value returned If you have a data source delivering legitimate numeric zeroes, the query will return zero values and not null values. Let's say this is your alert condition query, and that MyCoolEvent is an attribute that can sometimes return a zero value. SELECT average(MyCoolAttribute) FROM MyCoolEvent Copy If, in the aggregation window being evaluated, there's at least one instance of MyCoolEvent and if the average value of all MyCoolAttribute attributes from that window is equal to zero, then a 0 value will be returned. If there are no MyCoolEvent events during that minute, then a NULL will be returned due to the order of operations. Tip For more information about this topic, you can check out our blog post on troubleshooting for zero versus null values. Tip You can determine how null values will be handled by adjusting loss of signal and gap filling settings in the Alert Conditions UI. Tip You can avoid NULL values entirely with a query order of operations shortcut. Do this by using a filter sub-clause, then including all filter elements within that sub-clause. The main body of the query will run and return data, at which point the SELECT clause will then run and apply the filter elements. The query will return a value of 0 if the filter elements result in no matching data. Here's an example: SELECT filter(count(*), WHERE result = 'SUCCESS' AND monitorName = 'My Favorite Monitor') FROM SyntheticCheck Copy Nested aggregation NRQL alerts Nested aggregation queries are a powerful way to query your data. However, they have a few restrictions that are important to note. Nested queries with a non-faceted innermost query are not currently supported Without a FACET, the inner query produces a single result, giving the outer query nothing to aggregate. If you're using a nested query, make sure your inner query is faceted. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu) ​​​​​ Copy Queries at all levels must have the same aggregation window size With an alert aggregation window of 1 minute, the inner query would produce two smaller windows of 30 seconds. In theory, these two windows could be aggregated by the outer query. However, this is not currently supported. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu TIMESERIES 30 seconds)​​ Copy Signal loss is not yet supported for nested queries For more information on signal loss, see NerdGraph API: Loss of signal and gap filling. Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported You can't use a nested query containing the WITH METRIC_FORMAT in the inner query to create NRQL alert conditions. NRQL condition creation tips Here are some tips for creating and using a NRQL condition: Topic Tips Condition threshold types NRQL condition threshold types include static, baseline, and outlier. Create a description For NRQL conditions, you can create a custom description to add to each violation. Descriptions can be enhanced with variable substitution based on metadata in the specific violation. For details, see Description Query results Queries must return a number. The condition evaluates the returned number against the thresholds you've set. Time period As with all alert conditions, NRQL conditions evaluate one single minute at a time. The implicit SINCE ... UNTIL clause specifying which minute to evaluate is controlled by your Evaluation offset setting. Since very recent data may be incomplete, you may want to query data from 3 minutes ago or longer, especially for: Applications that run on multiple hosts. SyntheticCheck data: Timeouts can take 3 minutes, so 5 minutes or more is recommended. Also, if a query will generate intermittent data, consider using the sum of query results option. Lost signal threshold (loss of signal detection) You can use loss of signal detection to alert on when your data (a telemetry signal) should be considered lost. A signal loss can indicate that a service or entity is no longer online or that a periodic job failed to run. You can also use this to make sure that violations for sporadic data, such as error counts, are closed when no signal is coming in. Advanced signal settings These settings give you options for better handling continuous, streaming data signals that may sometimes be missing. These settings include the aggregation window, the evaluation offset, and an option for filling data gaps. For more on using these, see Advanced signal settings. Condition settings Use the Condition settings to: Create a concise, descriptive condition name. Provide a custom violation description for the condition that will be included in violations and notifications. Add the runbook URL to include your organization's procedures for handling incidents. You may also add this information to the custom violation description. Limits on conditions See the maximum values. Health status NRQL alert conditions don't affect an entity's health status display. Examples For more information, see: Expected NRQL syntax Examples of NRQL condition queries Alert threshold types When you create a NRQL alert, you can choose from different types of thresholds: NRQL alert threshold types Description Static This is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value. Optional: Include a FACET clause. Baseline (Dynamic) Uses a self-adjusting condition based on the past behavior of the monitored values. Uses the same NRQL query form as the static type. Outlier Looks for group behavior and values that are outliers from those groups. Uses the same NRQL query form as the static type, but requires a FACET clause. Sum of query results (limited or intermittent data) Important Available only for static (basic) threshold types. If a query returns intermittent or limited data, it may be difficult to set a meaningful threshold. Missing or limited data will sometimes generate false positives or false negatives. You can use loss of signal, aggregation duration, and gap filling settings to minimize these false notifications. To avoid this problem when using the static threshold type, you can set the selector to sum of query results. This lets you set the alert on an aggregated sum instead of a value from a single harvest cycle. Up to two hours of one-minute data checks can be aggregated. The duration you select determines the width of the rolling sum and the preview chart will update accordingly. Set the loss of signal threshold Loss of signal occurs when no data matches the NRQL condition over a specific period of time. You can set your loss of signal threshold duration and and also what happens when the threshold is crossed. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Loss of signal is only available for NRQL conditions. You may also manage these settings using the GraphQL API (recommended), or the REST API. Go here for specific GraphQL API examples. Loss of signal settings: Loss of signal settings include a time duration and two possible actions. Signal loss expiration time UI label: Signal is lost after: GraphQL Node: expiration.expirationDuration Expiration duration is a timer that starts and resets when we receive a data point in the streaming alerts pipeline. If we don't receive another data point before your 'expiration time' expires, we consider that signal to be lost. This can be because no data is being sent to New Relic or the WHERE clause of your NRQL query is filtering that data out before it is streamed to the alerts pipeline. The loss of signal expiration time is independent of the threshold duration and triggers as soon as the timer expires. The maximum expiration duration is 48 hours. This is helpful when monitoring for the execution of infrequent jobs. The minimum is 30 seconds, but we recommend using at least 3-5 minutes. Loss of signal actions Once a signal is considered lost, you can close open violations, open new violations, or both. Close all current open violations: This closes all open violations that are related to a specific signal. It won't necessarily close all violations for a condition. If you're alerting on an ephemeral service, or on a sporadic signal, you'll want to choose this action to ensure that violations are closed properly. The GraphQL node name for this is \"closeViolationsOnExpiration\" Open new violations: This will open a new violation when the signal is considered lost. These violations will indicate that they are due to a loss of signal. Based on your incident preferences, this should trigger a notification. The graphQL node name for this is \"openViolationOnExpiration\" When you enable both actions, we'll close all open violations first, and then open a new violation for loss of signal. To create a NRQL alert configured with loss of signal detection in the UI: For a policy, when you create a condition, under Select a product, click NRQL, then click Next, define thresholds. Write a NRQL query that returns the values you want to alert on. For Threshold type, select Static or Baseline. Click + Add lost signal threshold, then set the signal expiration duration time in minutes or seconds in the Signal is lost after field. Choose what you want to happen when the signal is lost. You can check one or both of Close all current open violations and Open new \"lost signal\" violation. These control how loss of signal violations will be handled for the condition. Make sure you name your condition before you save it. Violations open due to loss of signal close when the signal comes back. Newly opened lost signal violations will close immediately when new data is evaluated. the condition they belong to expires. By default, conditions expire after 3 days. you manually close the violation with the Close all current open violations option. Tip Loss of signal detection doesn't work on NRQL queries that use nested aggregation or sub-queries. Advanced signal settings When creating a NRQL alert condition, the advanced signal settings gives you better control over streaming alert data and helps you avoid false alarms. When creating a NRQL condition, there are several advanced signal settings: Aggregation window Evaluation offset Fill data gaps To read an explanation of what these settings are and how they relate to each other, see Streaming alerts concepts. Below are instructions and tips on how to configure them. Aggregation window You can set the aggregation window duration to choose how long data is accumulated in a streaming time window before it's aggregated. You can set it to anything between one second and 15 minutes. The default is one minute. Tip Baseline alert condition thresholds don't support editing the aggregation window. They use the 1 minute default. Evaluation offset You can adjust the evaluation offset to coordinate our streaming alerting algorithm with your data's latency. If it takes a while for your data to arrive, then you may need to increase the evaluation offset. The total supported latency is the product of the aggregation window duration multiplied by the evaluation offset. In the example screenshot above, the supported latency is 3 minutes (a 1-minute aggregation window multiplied by three windows). If the data type comes from an APM language agent and is aggregated from many app instances (for example, Transactions, TransactionErrors, etc.), we recommend using an evaluation offset of 3 with 1 minute aggregation windows. Important When creating NRQL conditions for data collected from Infrastructure Cloud Integrations such as AWS Cloudwatch or Azure, we recommend that you start with an evaluation offset of 15 minutes, then adjust up or down depending on how long it takes to collect your data. Fill data gaps Gap filling lets you customize the values to use when your signals don't have any data. You can fill gaps in your data streams with one of these settings: None: (Default) Choose this if you don't want to take any action on empty aggregation windows. On evaluation, an empty aggregation window will reset the threshold duration timer. For example, if a condition says that all aggregation windows must have data points above the threshold for 5 minutes, and 1 of the 5 aggregation windows is empty, then the condition won't be in violation. Custom static value: Choose this if you'd like to insert a custom static value into the empty aggregation windows before they're evaluated. This option has an additional, required parameter of fillValue (as named in the API) that specifies what static value should be used. This defaults to 0. Last known value: This option inserts the last seen value before evaluation occurs. We maintain the state of the last seen value for 2 hours. Tip The alerts system fills gaps in actively reported signals. This signal history is dropped after 2 hours of inactivity. For gap filling, data points received after this period of inactivity are treated as new signals. To learn more about signal loss, gap filling, and how to request access to these features, see this Explorers Hub post. Options for editing data gap settings: In the NRQL conditions UI, go to Condition settings > Advanced signal settings > fill data gaps with and choose an option. If using our Nerdgraph API (preferred), this node is located at: actor : account : alerts : nrqlCondition : signal : fillOption | fillValue NerdGraph is our recommended API for this but if you're using our REST API, you can find this setting in the REST API explorer under the \"signal\" section of the Alert NRQL conditions API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.66203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create NRQL <em>alert</em> conditions",
        "sections": "<em>Alert</em> conditions <em>and</em> query order of operations",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " a NRQL <em>alert</em> condition for a policy: On one.newrelic.com, in the header click <em>Alerts</em> &amp; AI, then in the left sidebar click Policies. Select an existing policy or click <em>New</em> <em>alert</em> policy to create a <em>new</em> policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define"
      },
      "id": "603ef04864441fbc114e8883"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/alert-notifications/update-alert-notification-channels": [
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 282.03796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Custom metric examples for <em>alert</em> <em>notifications</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> <em>notifications</em> If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Create NRQL alert conditions",
        "Tip",
        "Create a NRQL alert condition",
        "Create a condition from a chart",
        "Caution",
        "NRQL alert syntax",
        "Important",
        "Reformatting incompatible NRQL",
        "NRQL alert threshold examples",
        "Alert on specific segments of your data",
        "Alert on Nth percentile of your data",
        "Alert on max, min, avg of your data",
        "Alert on a percentage of your data",
        "Alert on Apdex with any T-value",
        "Alert conditions and query order of operations",
        "Example: null value returned",
        "Example: zero value returned",
        "Nested aggregation NRQL alerts",
        "Nested queries with a non-faceted innermost query are not currently supported",
        "Queries at all levels must have the same aggregation window size",
        "Signal loss is not yet supported for nested queries",
        "Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported",
        "NRQL condition creation tips",
        "Alert threshold types",
        "Sum of query results (limited or intermittent data)",
        "Set the loss of signal threshold",
        "Advanced signal settings",
        "Aggregation window",
        "Evaluation offset",
        "Fill data gaps"
      ],
      "title": "Create NRQL alert conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "2872f770a5fc8a802f99b9f848906f7e351ad761",
      "image": "https://docs.newrelic.com/static/eb8e1b2d826f9fd9cf46fe3dd5455217/c1b63/nr1_nrql_alert_conditions.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/",
      "published_at": "2021-09-14T07:20:17Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use NRQL queries to create alert conditions. Once you've defined your signal, you can further define your warning and critical threshold levels. This determines when an alerts violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Click NRQL, and then Next, define thresholds. Tip For more information on key concepts relating to NRQL alert conditions and streaming alerts, see Streaming alerts: key terms and concepts. Create a NRQL alert condition To create a NRQL alert condition for a policy: On one.newrelic.com, in the header click Alerts & AI, then in the left sidebar click Policies. Select an existing policy or click New alert policy to create a new policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define thresholds. Create a condition from a chart You can use a chart to create a NRQL alert condition. To create a NRQL alerts condition from a chart, click the chart menu , then click Create alert condition. Once you've named and customized your condition, you can add it to an existing policy or create a new one. Caution A small number of our older charts don't include the option to create an alert condition. NRQL alert syntax Here's the basic syntax for creating all NRQL alert conditions. The FACET clause is required for outlier threshold types. It's optional for static and baseline. SELECT function(attribute) FROM Event WHERE attribute [comparison] [AND|OR ...] Copy Clause Notes SELECT function(attribute) Required Supported functions that return numbers include: apdex average count latest max min percentage percentile sum uniqueCount Tip If you use the percentile aggregator in a faceted alert condition with many facets, this may cause the following error to appear: An error occurred while fetching chart data. If you see this error, use average instead. FROM data type Required Only one data type can be targeted. Supported data types: Event Metric (RAW data points will be returned) WHERE attribute [comparison] [AND|OR ...] Use the WHERE clause to specify a series of one or more conditions. All the operators are supported. FACET attribute Required for outlier conditions Include an optional FACET clause in your NRQL syntax depending on the threshold type: static or baseline. Use the FACET clause to separate your results by attribute and alert on each attribute independently. No LIMIT clause is allowed, but all queries will receive the maximum number of facets possible. Faceted queries can return a maximum of 5000 values for static and baseline conditions and a maximum of 500 values for outlier conditions. Important If the query returns more than the maximum number of values, the alert condition can't be created. If you create the condition and the query returns more than this number later, the alert will fail. Modify your query so that it returns a fewer number of values. Reformatting incompatible NRQL Some elements of NRQL used in charts don’t make sense in the streaming context of alerts. Here’s a list of the most common incompatible elements and suggestions for reformatting a NRQL alert query to achieve the same effect. Element Notes SINCE and UNTIL Example: SELECT percentile(largestContentfulPaint, 75) FROM PageViewTiming WHERE (appId = 837807) SINCE yesterday Copy NRQL Alerting produces a never-ending stream of windowed query results, so the SINCE and UNTIL keywords to scope the query to a point in time are not compatible. As a convenience, we automatically strip SINCE and UNTIL from a query when creating a NRQL Alert Condition from the context of a chart. TIMESERIES In NRQL queries, the TIMESERIES clause is used to return data as a time series broken out by a specified period of time. For NRQL alerts, the equivalent property of a signal is the aggregation window. histogram() The histogram() aggregation function is used to generate histograms. histogram() is not compatible with NRQL alerting: histogram aggregations can not be formatted as a time series. To create an alert from a portion of a histogram (e.g. 95th percentile), use the percentile() aggregation function. Multiple Aggregation Functions Each alert condition can only target a single aggregated stream of data. To alert on multiple streams simultaneously, you’ll need to decompose them into individual conditions within the same policy. Original Query: SELECT count(foo), average(bar), max(baz) from Transaction Copy Decomposed: SELECT count(foo) from Transaction SELECT average(bar) from Transaction SELECT max(baz) from Transaction Copy COMPARE WITH The COMPARE WITH clause is used to compare the values for two different time ranges. This type of query is incompatible with NRQL alerting. We recommend using a Baseline Alert Condition to dynamically detect deviations for a particular signal. SLIDE BY The SLIDE BY clause supports a feature known as sliding windows. With sliding windows, SLIDE BY data is gathered into \"windows\" of time that overlap with each other. These windows can help to smooth out line graphs with a lot of variation in cases where the rolling aggregate (such as a rolling mean) is more important than aggregates from narrow windows of time. Sliding windows are not currently supported in NRQL alerts. LIMIT In NRQL queries, the LIMIT clause is used to control the amount of data a query returns, either the maximum number of facet values returned by FACET queries or the maximum number of items returned by SELECT * queries. LIMIT is not compatible with NRQL alerting: evaluation is always performed on the full result set. NRQL alert threshold examples Here are some common use cases for NRQL alert conditions. These queries will work for static and baseline threshold types. The outlier threshold type will require additional FACET clauses. Alert on specific segments of your data Create constrained alerts that target a specific segment of your data, such as a few key customers or a range of data. Use the WHERE clause to define those conditions. SELECT average(duration) FROM Transaction WHERE account_id in (91290, 102021, 20230) Copy SELECT percentile(duration, 95) FROM Transaction WHERE name LIKE 'Controller/checkout/%' Copy Alert on Nth percentile of your data Create alerts when an Nth percentile of your data hits a specified threshold; for example, maintaining SLA service levels. Since we evaluate the NRQL query in one-minute time windows, percentiles will be calculated for each minute separately. SELECT percentile(duration, 95) FROM Transaction Copy SELECT percentile(databaseDuration, 75) FROM Transaction Copy Alert on max, min, avg of your data Create alerts when your data hits a certain maximum, minimum, or average; for example, ensuring that a duration or response time does not pass a certain threshold. SELECT max(duration) FROM Transaction Copy SELECT average(duration) FROM Transaction Copy Alert on a percentage of your data Create alerts when a proportion of your data goes above or below a certain threshold. SELECT percentage(count(*), WHERE duration > 2) FROM Transaction Copy SELECT percentage(count(*), WHERE httpResponseCode = '500') FROM Transaction Copy Alert on Apdex with any T-value Create alerts on Apdex, applying your own T-value for certain transactions. For example, get an alert notification when your Apdex for a T-value of 500ms on transactions for production apps goes below 0.8. SELECT apdex(duration, t:0.5) FROM Transaction WHERE appName like '%prod%' Copy Alert conditions and query order of operations By default, the aggregation window is 1 minute, but you can change the window to suit your needs. Whatever the aggregation window, New Relic will collect data for that window using the function in the NRQL alert condition’s query. The query is parsed and executed by our systems in the following order: FROM clause – which event type needs to be grabbed? WHERE clause – what can be filtered out? SELECT clause – what information needs to be returned from the now-filtered data set? Example: null value returned Let's say this is your alert condition query: SELECT count(*) FROM SyntheticCheck WHERE monitorName = 'My Cool Monitor' AND result = 'FAILURE' Copy If there are no failures for the aggregation window: The system will execute the FROM clause by grabbing all SyntheticCheck events on your account. Then it will execute the WHERE clause to filter through those events by looking only for the ones that match the monitor name and result specified. If there are still events left to scan through after completing the FROM and WHERE operations, the SELECT clause will be executed. If there are no remaining events, the SELECT clause will not be executed. This means that aggregators like count() and uniqueCount() will never return a zero value. When there is a count of 0, the SELECT clause is ignored and no data is returned, resulting in a value of NULL. Example: zero value returned If you have a data source delivering legitimate numeric zeroes, the query will return zero values and not null values. Let's say this is your alert condition query, and that MyCoolEvent is an attribute that can sometimes return a zero value. SELECT average(MyCoolAttribute) FROM MyCoolEvent Copy If, in the aggregation window being evaluated, there's at least one instance of MyCoolEvent and if the average value of all MyCoolAttribute attributes from that window is equal to zero, then a 0 value will be returned. If there are no MyCoolEvent events during that minute, then a NULL will be returned due to the order of operations. Tip For more information about this topic, you can check out our blog post on troubleshooting for zero versus null values. Tip You can determine how null values will be handled by adjusting loss of signal and gap filling settings in the Alert Conditions UI. Tip You can avoid NULL values entirely with a query order of operations shortcut. Do this by using a filter sub-clause, then including all filter elements within that sub-clause. The main body of the query will run and return data, at which point the SELECT clause will then run and apply the filter elements. The query will return a value of 0 if the filter elements result in no matching data. Here's an example: SELECT filter(count(*), WHERE result = 'SUCCESS' AND monitorName = 'My Favorite Monitor') FROM SyntheticCheck Copy Nested aggregation NRQL alerts Nested aggregation queries are a powerful way to query your data. However, they have a few restrictions that are important to note. Nested queries with a non-faceted innermost query are not currently supported Without a FACET, the inner query produces a single result, giving the outer query nothing to aggregate. If you're using a nested query, make sure your inner query is faceted. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu) ​​​​​ Copy Queries at all levels must have the same aggregation window size With an alert aggregation window of 1 minute, the inner query would produce two smaller windows of 30 seconds. In theory, these two windows could be aggregated by the outer query. However, this is not currently supported. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu TIMESERIES 30 seconds)​​ Copy Signal loss is not yet supported for nested queries For more information on signal loss, see NerdGraph API: Loss of signal and gap filling. Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported You can't use a nested query containing the WITH METRIC_FORMAT in the inner query to create NRQL alert conditions. NRQL condition creation tips Here are some tips for creating and using a NRQL condition: Topic Tips Condition threshold types NRQL condition threshold types include static, baseline, and outlier. Create a description For NRQL conditions, you can create a custom description to add to each violation. Descriptions can be enhanced with variable substitution based on metadata in the specific violation. For details, see Description Query results Queries must return a number. The condition evaluates the returned number against the thresholds you've set. Time period As with all alert conditions, NRQL conditions evaluate one single minute at a time. The implicit SINCE ... UNTIL clause specifying which minute to evaluate is controlled by your Evaluation offset setting. Since very recent data may be incomplete, you may want to query data from 3 minutes ago or longer, especially for: Applications that run on multiple hosts. SyntheticCheck data: Timeouts can take 3 minutes, so 5 minutes or more is recommended. Also, if a query will generate intermittent data, consider using the sum of query results option. Lost signal threshold (loss of signal detection) You can use loss of signal detection to alert on when your data (a telemetry signal) should be considered lost. A signal loss can indicate that a service or entity is no longer online or that a periodic job failed to run. You can also use this to make sure that violations for sporadic data, such as error counts, are closed when no signal is coming in. Advanced signal settings These settings give you options for better handling continuous, streaming data signals that may sometimes be missing. These settings include the aggregation window, the evaluation offset, and an option for filling data gaps. For more on using these, see Advanced signal settings. Condition settings Use the Condition settings to: Create a concise, descriptive condition name. Provide a custom violation description for the condition that will be included in violations and notifications. Add the runbook URL to include your organization's procedures for handling incidents. You may also add this information to the custom violation description. Limits on conditions See the maximum values. Health status NRQL alert conditions don't affect an entity's health status display. Examples For more information, see: Expected NRQL syntax Examples of NRQL condition queries Alert threshold types When you create a NRQL alert, you can choose from different types of thresholds: NRQL alert threshold types Description Static This is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value. Optional: Include a FACET clause. Baseline (Dynamic) Uses a self-adjusting condition based on the past behavior of the monitored values. Uses the same NRQL query form as the static type. Outlier Looks for group behavior and values that are outliers from those groups. Uses the same NRQL query form as the static type, but requires a FACET clause. Sum of query results (limited or intermittent data) Important Available only for static (basic) threshold types. If a query returns intermittent or limited data, it may be difficult to set a meaningful threshold. Missing or limited data will sometimes generate false positives or false negatives. You can use loss of signal, aggregation duration, and gap filling settings to minimize these false notifications. To avoid this problem when using the static threshold type, you can set the selector to sum of query results. This lets you set the alert on an aggregated sum instead of a value from a single harvest cycle. Up to two hours of one-minute data checks can be aggregated. The duration you select determines the width of the rolling sum and the preview chart will update accordingly. Set the loss of signal threshold Loss of signal occurs when no data matches the NRQL condition over a specific period of time. You can set your loss of signal threshold duration and and also what happens when the threshold is crossed. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Loss of signal is only available for NRQL conditions. You may also manage these settings using the GraphQL API (recommended), or the REST API. Go here for specific GraphQL API examples. Loss of signal settings: Loss of signal settings include a time duration and two possible actions. Signal loss expiration time UI label: Signal is lost after: GraphQL Node: expiration.expirationDuration Expiration duration is a timer that starts and resets when we receive a data point in the streaming alerts pipeline. If we don't receive another data point before your 'expiration time' expires, we consider that signal to be lost. This can be because no data is being sent to New Relic or the WHERE clause of your NRQL query is filtering that data out before it is streamed to the alerts pipeline. The loss of signal expiration time is independent of the threshold duration and triggers as soon as the timer expires. The maximum expiration duration is 48 hours. This is helpful when monitoring for the execution of infrequent jobs. The minimum is 30 seconds, but we recommend using at least 3-5 minutes. Loss of signal actions Once a signal is considered lost, you can close open violations, open new violations, or both. Close all current open violations: This closes all open violations that are related to a specific signal. It won't necessarily close all violations for a condition. If you're alerting on an ephemeral service, or on a sporadic signal, you'll want to choose this action to ensure that violations are closed properly. The GraphQL node name for this is \"closeViolationsOnExpiration\" Open new violations: This will open a new violation when the signal is considered lost. These violations will indicate that they are due to a loss of signal. Based on your incident preferences, this should trigger a notification. The graphQL node name for this is \"openViolationOnExpiration\" When you enable both actions, we'll close all open violations first, and then open a new violation for loss of signal. To create a NRQL alert configured with loss of signal detection in the UI: For a policy, when you create a condition, under Select a product, click NRQL, then click Next, define thresholds. Write a NRQL query that returns the values you want to alert on. For Threshold type, select Static or Baseline. Click + Add lost signal threshold, then set the signal expiration duration time in minutes or seconds in the Signal is lost after field. Choose what you want to happen when the signal is lost. You can check one or both of Close all current open violations and Open new \"lost signal\" violation. These control how loss of signal violations will be handled for the condition. Make sure you name your condition before you save it. Violations open due to loss of signal close when the signal comes back. Newly opened lost signal violations will close immediately when new data is evaluated. the condition they belong to expires. By default, conditions expire after 3 days. you manually close the violation with the Close all current open violations option. Tip Loss of signal detection doesn't work on NRQL queries that use nested aggregation or sub-queries. Advanced signal settings When creating a NRQL alert condition, the advanced signal settings gives you better control over streaming alert data and helps you avoid false alarms. When creating a NRQL condition, there are several advanced signal settings: Aggregation window Evaluation offset Fill data gaps To read an explanation of what these settings are and how they relate to each other, see Streaming alerts concepts. Below are instructions and tips on how to configure them. Aggregation window You can set the aggregation window duration to choose how long data is accumulated in a streaming time window before it's aggregated. You can set it to anything between one second and 15 minutes. The default is one minute. Tip Baseline alert condition thresholds don't support editing the aggregation window. They use the 1 minute default. Evaluation offset You can adjust the evaluation offset to coordinate our streaming alerting algorithm with your data's latency. If it takes a while for your data to arrive, then you may need to increase the evaluation offset. The total supported latency is the product of the aggregation window duration multiplied by the evaluation offset. In the example screenshot above, the supported latency is 3 minutes (a 1-minute aggregation window multiplied by three windows). If the data type comes from an APM language agent and is aggregated from many app instances (for example, Transactions, TransactionErrors, etc.), we recommend using an evaluation offset of 3 with 1 minute aggregation windows. Important When creating NRQL conditions for data collected from Infrastructure Cloud Integrations such as AWS Cloudwatch or Azure, we recommend that you start with an evaluation offset of 15 minutes, then adjust up or down depending on how long it takes to collect your data. Fill data gaps Gap filling lets you customize the values to use when your signals don't have any data. You can fill gaps in your data streams with one of these settings: None: (Default) Choose this if you don't want to take any action on empty aggregation windows. On evaluation, an empty aggregation window will reset the threshold duration timer. For example, if a condition says that all aggregation windows must have data points above the threshold for 5 minutes, and 1 of the 5 aggregation windows is empty, then the condition won't be in violation. Custom static value: Choose this if you'd like to insert a custom static value into the empty aggregation windows before they're evaluated. This option has an additional, required parameter of fillValue (as named in the API) that specifies what static value should be used. This defaults to 0. Last known value: This option inserts the last seen value before evaluation occurs. We maintain the state of the last seen value for 2 hours. Tip The alerts system fills gaps in actively reported signals. This signal history is dropped after 2 hours of inactivity. For gap filling, data points received after this period of inactivity are treated as new signals. To learn more about signal loss, gap filling, and how to request access to these features, see this Explorers Hub post. Options for editing data gap settings: In the NRQL conditions UI, go to Condition settings > Advanced signal settings > fill data gaps with and choose an option. If using our Nerdgraph API (preferred), this node is located at: actor : account : alerts : nrqlCondition : signal : fillOption | fillValue NerdGraph is our recommended API for this but if you're using our REST API, you can find this setting in the REST API explorer under the \"signal\" section of the Alert NRQL conditions API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.6619,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create NRQL <em>alert</em> conditions",
        "sections": "<em>Alert</em> conditions <em>and</em> query order of operations",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " a NRQL <em>alert</em> condition for a policy: On one.newrelic.com, in the header click <em>Alerts</em> &amp; AI, then in the left sidebar click Policies. Select an existing policy or click <em>New</em> <em>alert</em> policy to create a <em>new</em> policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define"
      },
      "id": "603ef04864441fbc114e8883"
    },
    {
      "sections": [
        "Introduction to Applied Intelligence",
        "Why use Applied Intelligence?",
        "Determine root causes with Incident Intelligence",
        "Find unknowns with Proactive Detection"
      ],
      "title": "Introduction to Applied Intelligence",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Get started"
      ],
      "external_id": "68af5032ebe9c91467f78169bb5d30976d7f67ee",
      "image": "https://docs.newrelic.com/static/c95c61f5a259d33c01781273aed8311d/30c92/diagram-applied-intelligence-workflow.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/get-started/introduction-applied-intelligence/",
      "published_at": "2021-09-14T07:20:16Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applied Intelligence (AI) is our AIOps solution for DevOps, site reliability engineers, and on-call teams. At its core, Applied Intelligence helps you find, troubleshoot, and resolve problems more quickly. Specifically, it’s a hybrid machine learning engine that reduces alert noise, correlates incidents, and automatically detects anomalies. By applying machine learning to your data and feedback, Applied Intelligence is designed to improve functionality and deliver smarter context over time. After connecting your data sources to Applied Intelligence, it looks for potential problems and improves based on your feedback. Why use Applied Intelligence? How you respond to an incident can mean thousands of dollars or clicks for your company. Applied Intelligence helps you solve problems faster. Feature Description Troubleshoot and respond to incidents Our solution helps you understand your incidents and gives you ideas for what to do next. Here are a few examples: Automatically classifies incidents based on the golden signals of site reliability engineering. Identifies entities in your stack that may relate to the underlying issue. Suggests responses for incidents based on historical context. Less noise, more focus As tools and systems become more complex, alert noise can overwhelm DevOps and SRE teams. Applied Intelligence correlates related incidents and suppresses noise, so you're only notified when human action is required. Incidents with a hybrid approach Applied Intelligence streamlines your incidents by combining its built-in inputs with your knowledge and feedback. Over time, the system delivers more accurate insights. For example: Our correlation and classification engine adjusts based on your feedback. The system automatically suggests new correlation rules based on your production data. You can create custom logic using the decision builder. Automatic anomaly detection Applied Intelligence provides automatic anomaly detection on all your APM-monitored applications. We detect anomalies in throughput, latency, and error rate, with no action required from you. Benefits include: No setup required. See anomalies surfaced automatically in the anomalies feed. See them in various New Relic activity streams (for example, on the New Relic One home page). Ability to run NRQL queries of anomalies and create custom dashboards with that data. Determine root causes with Incident Intelligence As part of Applied Intelligence, Incident Intelligence helps you correlate incident events and reduce noise in your environment. With it, you can get an overview of all your issues, see suggested responders, and configure your own correlation logic. To get started, see Incident Intelligence. Find unknowns with Proactive Detection Another feature of Applied Intelligence is Proactive Detection. Proactive Detection is, by default, always on and detecting anomalies. These anomalies are surfaced in the Applied Intelligence anomalies feed, New Relic One activity streams, and can be queried, alerted on, and added to dashboards. Anomalies can be sent to Slack or via webhooks, and/or added as a source for Incident Intelligence correlation and issue notification. Proactive Detection also provides automatic analysis of anomalies and alerts via the analysis page. To get started, see Proactive Detection.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.6619,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "sections": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " Incident <em>Intelligence</em>. Find unknowns with Proactive Detection Another feature of <em>Applied</em> <em>Intelligence</em> is Proactive Detection. Proactive Detection is, by default, always on and detecting anomalies. These anomalies are surfaced in the <em>Applied</em> <em>Intelligence</em> anomalies feed, <em>New</em> <em>Relic</em> One activity streams"
      },
      "id": "603ea67c64441ffd1c4e8860"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/create-edit-or-find-alert-policy": [
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 318.62067,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Define custom metrics for an <em>alert</em> condition",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> <em>policies</em>, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Update or disable conditions",
        "Condition maintenance quick reference",
        "Add more conditions",
        "Copy a condition",
        "Change a condition",
        "Disable or delete conditions",
        "Disable or re-enable a condition",
        "Tip",
        "Delete conditions"
      ],
      "title": "Update or disable conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert policies"
      ],
      "external_id": "4a6c5107cd6af696df6a3fb0651c6a1bde7daf36",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/update-or-disable-policies-conditions/",
      "published_at": "2021-09-13T19:38:09Z",
      "updated_at": "2021-09-07T18:02:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here's a quick reference for maintaining conditions. This includes the condition's entities (targets), Warning (yellow) and Critical (red) thresholds, and runbook URL. Condition maintenance quick reference Add more conditions To add more conditions to a policy: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, (select a policy), then click Add a condition. OR To copy a condition from any policy and add it to another policy: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, (select a policy), then click Copy. Copy a condition To copy an existing condition, including its targets and thresholds, and add it to another policy for the selected account: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). From the policy's list of one or more Alert conditions, click Copy. From the Copy alert condition list, search or scroll the list to select the policy where you want to add this condition. Optional: Change the condition's name if necessary. Select Save. By default, the copied condition will be added to the selected alert policy in a Disabled state. Follow standard procedures to add or copy additional conditions to the alert policy, and then Enable the condition as needed. Change a condition To change a policy condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Then, from the list of Alert conditions for the selected policy: To change the condition's name, click Edit. To add, change, or remove targets (entities), select the name or number of targets for the condition, and then select Browse and select targets. To update the values for the required Critical (red) or optional Warning (yellow) thresholds, select the existing value. To update the condition's runbook URL, select the condition's Thresholds. Disable or delete conditions Disable or re-enable a condition You can enable or disable any policy conditions, and the policy will continue to apply. To disable or re-enable a condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Then, from the list of Alert conditions, (select a condition). Click the On/Off switch to toggle it. Tip For Infrastructure conditions, use the checkbox at the bottom of the condition edit screen, then save the condition. If you copy a condition, it is automatically saved in the new policy as disabled (Off), even if the condition was enabled (On) in the original policy. Delete conditions If a policy has multiple conditions, you can delete any or all of them, and the remaining conditions for the policy will continue to apply. To turn a condition off but keep it with the policy, disable it. To delete one or more conditions: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). From the list of Alert conditions, (select a condition), enable the condition if disabled, then click Delete. Tip If you don't see the delete button, your account admin may have disabled condition deletion for your organization.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 266.03586,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": ", click <em>Alerts</em> &amp; AI, click <em>Alert</em> <em>policies</em>, (select a policy), then click Add a condition. OR To copy a condition from any policy and add it to another policy: In the one.newrelic.com top nav, click <em>Alerts</em> &amp; AI, click <em>Alert</em> <em>policies</em>, (select a policy), then click Copy. Copy a condition To copy an existing"
      },
      "id": "604404ec28ccbc62492c6098"
    },
    {
      "sections": [
        "Manage alert notification channels",
        "Tip",
        "Reference for updating channels",
        "View email channels",
        "Add or update email channels",
        "Create more channels",
        "Add or remove policies assigned to a channel",
        "Assign a channel to a policy",
        "Change a channel's name",
        "Check for policies assigned to a user",
        "Check how many policies are assigned to a channel",
        "View assigned alert policies",
        "Delete a channel",
        "Basic process"
      ],
      "title": "Manage alert notification channels",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert notifications"
      ],
      "external_id": "521bed5aa6fdcea5c1cffd11d01e6dad19bc7c40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-notifications/update-alert-notification-channels/",
      "published_at": "2021-09-13T19:36:03Z",
      "updated_at": "2021-09-08T15:38:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To keep alert notifications consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add policies to an existing channel, create a new channel entirely, and more. Tip Your selected channel type determines the communication method that appears. For example, if your channel type is email, then the channel will include an email address value. For more information, see channel types. Reference for updating channels Here's a quick reference for updating channels which also includes links to more detailed information and procedures. View email channels Alerts automatically includes the email addresses for all users in the selected account as individual notification channels. If the account is a child account, the list shows only the users on the child account, not the users in the parent account. To view or search the list of user names and emails: Go to one.newrelic.com, in the top nav click Alerts & AI, then click Notification channels. In the search field, search for 'user'. Add or update email channels Users can't unsubscribe from email notifications. The account Owner or Admin must remove them from the policy's notification channel. To add or update account users as notification channels for a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, and then choose the policy you want to change. Optional: You can update notification channels for specific users. On the Notification channels page, select a user, select any policy subscription already associated with the user as applicable to view policy details. Click Notification channels, then follow standard procedures to add notification channels. Click Update policy. Create more channels To create a new notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Click New notification channel. Add or remove policies assigned to a channel To add or remove policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Choose a channel, and then click Alert policies. From the selected policy, use the windows to select, remove, or clear all notification channels. Assign a channel to a policy To add a notification channel to one or more policies: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies. Choose a policy, click Notification channels, and then click Add notification channels. Choose a channel, and then click Update policy. Change a channel's name To rename an existing notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details, change the name (maximum 64 characters) based on the channel type if applicable, and then save. Check for policies assigned to a user To check whether an account user has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Optional: Search by \"user\" to browse users or a specific username or email. Choose the user, then click Alert policies. Check how many policies are assigned to a channel To check whether a notification channel has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. The Policy subscriptions column lists how many policies are assigned to the channel. View assigned alert policies To view the policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, choose a channel, and then click Alert policies. OR To view the notification channels assigned to a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, choose a policy, then click Notification channels. Delete a channel To delete a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. In the list, click the Delete icon. Basic process Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details page, make any necessary changes, and then save. The user interface shows a Last modified time stamp for any changes to policies, including their conditions and notification channels.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 259.2778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>alert</em> notification channels",
        "sections": "View assigned <em>alert</em> <em>policies</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": "To keep <em>alert</em> notifications consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add <em>policies</em> to an existing channel, create a <em>new</em> channel entirely, and more. Tip Your selected channel type determines the communication method that appears"
      },
      "id": "603eca45e7b9d2d1d82a0806"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/specify-when-alerts-create-incidents": [
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 318.62042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Define custom metrics for an <em>alert</em> condition",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> <em>policies</em>, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Update or disable conditions",
        "Condition maintenance quick reference",
        "Add more conditions",
        "Copy a condition",
        "Change a condition",
        "Disable or delete conditions",
        "Disable or re-enable a condition",
        "Tip",
        "Delete conditions"
      ],
      "title": "Update or disable conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert policies"
      ],
      "external_id": "4a6c5107cd6af696df6a3fb0651c6a1bde7daf36",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/update-or-disable-policies-conditions/",
      "published_at": "2021-09-13T19:38:09Z",
      "updated_at": "2021-09-07T18:02:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here's a quick reference for maintaining conditions. This includes the condition's entities (targets), Warning (yellow) and Critical (red) thresholds, and runbook URL. Condition maintenance quick reference Add more conditions To add more conditions to a policy: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, (select a policy), then click Add a condition. OR To copy a condition from any policy and add it to another policy: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, (select a policy), then click Copy. Copy a condition To copy an existing condition, including its targets and thresholds, and add it to another policy for the selected account: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). From the policy's list of one or more Alert conditions, click Copy. From the Copy alert condition list, search or scroll the list to select the policy where you want to add this condition. Optional: Change the condition's name if necessary. Select Save. By default, the copied condition will be added to the selected alert policy in a Disabled state. Follow standard procedures to add or copy additional conditions to the alert policy, and then Enable the condition as needed. Change a condition To change a policy condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Then, from the list of Alert conditions for the selected policy: To change the condition's name, click Edit. To add, change, or remove targets (entities), select the name or number of targets for the condition, and then select Browse and select targets. To update the values for the required Critical (red) or optional Warning (yellow) thresholds, select the existing value. To update the condition's runbook URL, select the condition's Thresholds. Disable or delete conditions Disable or re-enable a condition You can enable or disable any policy conditions, and the policy will continue to apply. To disable or re-enable a condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Then, from the list of Alert conditions, (select a condition). Click the On/Off switch to toggle it. Tip For Infrastructure conditions, use the checkbox at the bottom of the condition edit screen, then save the condition. If you copy a condition, it is automatically saved in the new policy as disabled (Off), even if the condition was enabled (On) in the original policy. Delete conditions If a policy has multiple conditions, you can delete any or all of them, and the remaining conditions for the policy will continue to apply. To turn a condition off but keep it with the policy, disable it. To delete one or more conditions: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). From the list of Alert conditions, (select a condition), enable the condition if disabled, then click Delete. Tip If you don't see the delete button, your account admin may have disabled condition deletion for your organization.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 266.03577,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": ", click <em>Alerts</em> &amp; AI, click <em>Alert</em> <em>policies</em>, (select a policy), then click Add a condition. OR To copy a condition from any policy and add it to another policy: In the one.newrelic.com top nav, click <em>Alerts</em> &amp; AI, click <em>Alert</em> <em>policies</em>, (select a policy), then click Copy. Copy a condition To copy an existing"
      },
      "id": "604404ec28ccbc62492c6098"
    },
    {
      "sections": [
        "Manage alert notification channels",
        "Tip",
        "Reference for updating channels",
        "View email channels",
        "Add or update email channels",
        "Create more channels",
        "Add or remove policies assigned to a channel",
        "Assign a channel to a policy",
        "Change a channel's name",
        "Check for policies assigned to a user",
        "Check how many policies are assigned to a channel",
        "View assigned alert policies",
        "Delete a channel",
        "Basic process"
      ],
      "title": "Manage alert notification channels",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert notifications"
      ],
      "external_id": "521bed5aa6fdcea5c1cffd11d01e6dad19bc7c40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-notifications/update-alert-notification-channels/",
      "published_at": "2021-09-13T19:36:03Z",
      "updated_at": "2021-09-08T15:38:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To keep alert notifications consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add policies to an existing channel, create a new channel entirely, and more. Tip Your selected channel type determines the communication method that appears. For example, if your channel type is email, then the channel will include an email address value. For more information, see channel types. Reference for updating channels Here's a quick reference for updating channels which also includes links to more detailed information and procedures. View email channels Alerts automatically includes the email addresses for all users in the selected account as individual notification channels. If the account is a child account, the list shows only the users on the child account, not the users in the parent account. To view or search the list of user names and emails: Go to one.newrelic.com, in the top nav click Alerts & AI, then click Notification channels. In the search field, search for 'user'. Add or update email channels Users can't unsubscribe from email notifications. The account Owner or Admin must remove them from the policy's notification channel. To add or update account users as notification channels for a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, and then choose the policy you want to change. Optional: You can update notification channels for specific users. On the Notification channels page, select a user, select any policy subscription already associated with the user as applicable to view policy details. Click Notification channels, then follow standard procedures to add notification channels. Click Update policy. Create more channels To create a new notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Click New notification channel. Add or remove policies assigned to a channel To add or remove policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Choose a channel, and then click Alert policies. From the selected policy, use the windows to select, remove, or clear all notification channels. Assign a channel to a policy To add a notification channel to one or more policies: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies. Choose a policy, click Notification channels, and then click Add notification channels. Choose a channel, and then click Update policy. Change a channel's name To rename an existing notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details, change the name (maximum 64 characters) based on the channel type if applicable, and then save. Check for policies assigned to a user To check whether an account user has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Optional: Search by \"user\" to browse users or a specific username or email. Choose the user, then click Alert policies. Check how many policies are assigned to a channel To check whether a notification channel has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. The Policy subscriptions column lists how many policies are assigned to the channel. View assigned alert policies To view the policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, choose a channel, and then click Alert policies. OR To view the notification channels assigned to a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, choose a policy, then click Notification channels. Delete a channel To delete a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. In the list, click the Delete icon. Basic process Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details page, make any necessary changes, and then save. The user interface shows a Last modified time stamp for any changes to policies, including their conditions and notification channels.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 259.2777,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>alert</em> notification channels",
        "sections": "View assigned <em>alert</em> <em>policies</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": "To keep <em>alert</em> notifications consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add <em>policies</em> to an existing channel, create a <em>new</em> channel entirely, and more. Tip Your selected channel type determines the communication method that appears"
      },
      "id": "603eca45e7b9d2d1d82a0806"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/update-or-disable-policies-conditions": [
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 318.62042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Define custom metrics for an <em>alert</em> condition",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> <em>policies</em>, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Manage alert notification channels",
        "Tip",
        "Reference for updating channels",
        "View email channels",
        "Add or update email channels",
        "Create more channels",
        "Add or remove policies assigned to a channel",
        "Assign a channel to a policy",
        "Change a channel's name",
        "Check for policies assigned to a user",
        "Check how many policies are assigned to a channel",
        "View assigned alert policies",
        "Delete a channel",
        "Basic process"
      ],
      "title": "Manage alert notification channels",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert notifications"
      ],
      "external_id": "521bed5aa6fdcea5c1cffd11d01e6dad19bc7c40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-notifications/update-alert-notification-channels/",
      "published_at": "2021-09-13T19:36:03Z",
      "updated_at": "2021-09-08T15:38:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To keep alert notifications consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add policies to an existing channel, create a new channel entirely, and more. Tip Your selected channel type determines the communication method that appears. For example, if your channel type is email, then the channel will include an email address value. For more information, see channel types. Reference for updating channels Here's a quick reference for updating channels which also includes links to more detailed information and procedures. View email channels Alerts automatically includes the email addresses for all users in the selected account as individual notification channels. If the account is a child account, the list shows only the users on the child account, not the users in the parent account. To view or search the list of user names and emails: Go to one.newrelic.com, in the top nav click Alerts & AI, then click Notification channels. In the search field, search for 'user'. Add or update email channels Users can't unsubscribe from email notifications. The account Owner or Admin must remove them from the policy's notification channel. To add or update account users as notification channels for a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, and then choose the policy you want to change. Optional: You can update notification channels for specific users. On the Notification channels page, select a user, select any policy subscription already associated with the user as applicable to view policy details. Click Notification channels, then follow standard procedures to add notification channels. Click Update policy. Create more channels To create a new notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Click New notification channel. Add or remove policies assigned to a channel To add or remove policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Choose a channel, and then click Alert policies. From the selected policy, use the windows to select, remove, or clear all notification channels. Assign a channel to a policy To add a notification channel to one or more policies: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies. Choose a policy, click Notification channels, and then click Add notification channels. Choose a channel, and then click Update policy. Change a channel's name To rename an existing notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details, change the name (maximum 64 characters) based on the channel type if applicable, and then save. Check for policies assigned to a user To check whether an account user has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Optional: Search by \"user\" to browse users or a specific username or email. Choose the user, then click Alert policies. Check how many policies are assigned to a channel To check whether a notification channel has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. The Policy subscriptions column lists how many policies are assigned to the channel. View assigned alert policies To view the policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, choose a channel, and then click Alert policies. OR To view the notification channels assigned to a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, choose a policy, then click Notification channels. Delete a channel To delete a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. In the list, click the Delete icon. Basic process Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details page, make any necessary changes, and then save. The user interface shows a Last modified time stamp for any changes to policies, including their conditions and notification channels.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 259.2777,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>alert</em> notification channels",
        "sections": "View assigned <em>alert</em> <em>policies</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": "To keep <em>alert</em> notifications consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add <em>policies</em> to an existing channel, create a <em>new</em> channel entirely, and more. Tip Your selected channel type determines the communication method that appears"
      },
      "id": "603eca45e7b9d2d1d82a0806"
    },
    {
      "sections": [
        "Manage your policies",
        "Tip",
        "Best practices for naming policies",
        "Create an alert policy",
        "Change a policy name",
        "View existing policies",
        "Policy maintenance quick reference",
        "Add or remove policies assigned to a channel",
        "Check policy user assignment",
        "Check policy channel assignment",
        "Create a new policy",
        "Disable a policy",
        "Delete a policy",
        "Check for entities (targets) assigned to a policy",
        "Change how threshold violations roll up into incidents",
        "Get context for alert violations with Incident Intelligence"
      ],
      "title": "Manage your policies",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert policies"
      ],
      "external_id": "2a61779963772ca7e3a2cf2e0739f4e4c3990304",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/create-edit-or-find-alert-policy/",
      "published_at": "2021-09-13T19:37:08Z",
      "updated_at": "2021-09-07T18:03:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A policy is a group of one or more conditions. This document explains how to create a policy and how to view existing policies. You can also use the REST API. For an explanation of how policies interact with conditions and other components, see Concepts and workflow. Tip The basic setup process is the same, regardless of which product (APM, browser, etc.) uses the policy. The types of metrics and thresholds for conditions vary depending on the monitored data source. Best practices for naming policies We recommend three common patterns and practices for structuring and naming policies: Targets or resources in your architecture that have people responsible for their well being Teams that are responsible for part of the architecture Individual policies for specific users Policies organized by... Comments Architecture Targets or resources in your organization may have different people responsible for their well-being. Common segments may include the environment type (production, staging, integration, development) or the target or resource type (app server code, client-side code, databases, hosts, etc.). To make these types of policies easier to identify, you can give them names based on your architecture. For example: Product A website (production) Product B website (staging) Mobile product app (iOS) Hosts (production) Databases (production) Teams Specific teams may be responsible for parts of your architecture. For example, you may want to name their policy Team: Site engineering, Team: Website development, etc. Individuals Policies set up for specific individuals may be useful when they want to personally keep an eye on a particular resource or metric. This provides them the freedom to add and remove conditions as well as adjust thresholds whenever they want, without having to communicate those changes to others. To make these policies easier to identify, you can include the person's name; for example, User: John Doe's metrics, User: Jane Doe (production), etc. Create an alert policy As part of the policy workflow, start by giving the policy a meaningful name: In the one.newrelic.com top nav, click Alerts & AI, then click Policies. On the policy index page, click New alert policy. Type a meaningful name for the policy (maximum 64 characters). Select the incident preference. Select Create alert policy. You can continue from here to define the conditions and assign one or more notification channels. If you decide to continue later, select the policy name from the Alert policies index. Change a policy name For your convenience, we allow you to use the same name for different policies, conditions, and notification channels. If you want to use unique names, review or search the index before adding or changing a name. To rename an existing policy: In the one.newrelic.com top nav, click Alerts & AI, then click Policies, and then (select a policy). Click the policy name to edit it, then type a meaningful name for the policy (maximum 64 characters). Alerts automatically updates any of the policy's conditions and notification channels. View existing policies The policies index lists policies in alphabetical order. To view or search for existing policies: In the one.newrelic.com top nav, click Alerts & AI, then click Policies. Use the search box, sort any column, or scroll the list. To view detailed information, click a policy name. Tip To view policy and condition information for a specific entity, select the Settings > Alert conditions page from the entity's product UI. Policy maintenance quick reference After you create a policy, you can: Add more conditions to the policy. Edit the conditions' names, targets, or thresholds. Disable conditions. Add one or more notification channels to a policy. Rename or delete the policy. The user interface shows a Last modified timestamp for any changes to policies, including their conditions and notification channels. Here is a quick reference which also includes links to more detailed information and procedures for maintaining your policies. Add or remove policies assigned to a channel To add or remove policies assigned to a channel: In the one.newrelic.com top nav, click Alerts & AI, click Notification channels, then (select a channel). Click Alert policies, then (select a policy). From the selected policy, use the windows to select, remove, or clear all. Change a policy name To rename a policy: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click the policy name to edit it, then type a meaningful name for the policy (maximum 64 characters). Check policy user assignment To check whether an account user has been assigned any policies: In the one.newrelic.com top nav, click Alerts & AI, click Policies, (select a policy), then click Notification channels. Select a user, and then click Alert policies. Check policy channel assignment To check whether a notification channel has any policies assigned to it: In the one.newrelic.com top nav, click Alerts & AI, click Notification channels. The Policy subscriptions column lists how many policies are assigned to the channel. Create a new policy To create a new alert policy: In the one.newrelic.com top nav, click Alerts & AI, click Policies. Click New alert policy. Follow standard procedures to complete the basic setup process. Disable a policy You can't disable a policy directly. However, you can disable all of the policy's conditions. When you disable all of the conditions, the policy remains the Alert policies index. The policy itself isn't disabled, and you can re-enable any or all of its conditions at any time. Delete a policy If you delete a policy, we'll continue to apply any other policies assigned to the product entity (target). If you remove all policies for the entity, its color-coded health status indicator will appear light green with an icon. If you delete any of your account's policies, you can't restore them. Instead, you must re-create them if necessary. To delete a policy completely: In the one.newrelic.com top nav, click Alerts & AI, then click Alert policies. From the policy row, click the delete icon. Any notification channels associated with a deleted or disabled policy will remain. You must delete notification channels or remove them individually as necessary. In a deleted policy, incidents and event violations are provided as a read only resource. Check for entities (targets) assigned to a policy To check whether an entity (target) has any policies assigned: Go to the product (APM, browser, etc.). From the selected product's index, check whether the entity's color-coded health status is light green with an icon. Tip Exception: Infrastructure does not use this feature. Change how threshold violations roll up into incidents To select how violations to your thresholds are grouped into incident records (by policy, by condition, or by target and condition): In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click Incident preference. Get context for alert violations with Incident Intelligence If you use Applied Intelligence, you can connect your conditions to Incident Intelligence. From one.newrelic.com, click Alerts. On the left under Incident Intelligence, click Sources and then click Alerts. Select the policies you want to connect to Applied Intelligence, and click Connect. You can add additional alerts policies or remove policies you've already connected in Sources > New Relic Alerts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 256.99487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage your <em>policies</em>",
        "sections": "Get context for <em>alert</em> violations with Incident <em>Intelligence</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": ". From one.newrelic.com, click <em>Alerts</em>. On the left under Incident <em>Intelligence</em>, click Sources and then click <em>Alerts</em>. Select the <em>policies</em> you want to connect to <em>Applied</em> <em>Intelligence</em>, and click Connect. You can add additional <em>alerts</em> <em>policies</em> or remove <em>policies</em> you&#x27;ve already connected in Sources &gt; <em>New</em> <em>Relic</em> <em>Alerts</em>."
      },
      "id": "603ed08e28ccbc7be9eba76a"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/view-policies-conditions-our-products": [
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 318.62018,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Define custom metrics for an <em>alert</em> condition",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> <em>policies</em>, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Update or disable conditions",
        "Condition maintenance quick reference",
        "Add more conditions",
        "Copy a condition",
        "Change a condition",
        "Disable or delete conditions",
        "Disable or re-enable a condition",
        "Tip",
        "Delete conditions"
      ],
      "title": "Update or disable conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert policies"
      ],
      "external_id": "4a6c5107cd6af696df6a3fb0651c6a1bde7daf36",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/update-or-disable-policies-conditions/",
      "published_at": "2021-09-13T19:38:09Z",
      "updated_at": "2021-09-07T18:02:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here's a quick reference for maintaining conditions. This includes the condition's entities (targets), Warning (yellow) and Critical (red) thresholds, and runbook URL. Condition maintenance quick reference Add more conditions To add more conditions to a policy: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, (select a policy), then click Add a condition. OR To copy a condition from any policy and add it to another policy: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, (select a policy), then click Copy. Copy a condition To copy an existing condition, including its targets and thresholds, and add it to another policy for the selected account: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). From the policy's list of one or more Alert conditions, click Copy. From the Copy alert condition list, search or scroll the list to select the policy where you want to add this condition. Optional: Change the condition's name if necessary. Select Save. By default, the copied condition will be added to the selected alert policy in a Disabled state. Follow standard procedures to add or copy additional conditions to the alert policy, and then Enable the condition as needed. Change a condition To change a policy condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Then, from the list of Alert conditions for the selected policy: To change the condition's name, click Edit. To add, change, or remove targets (entities), select the name or number of targets for the condition, and then select Browse and select targets. To update the values for the required Critical (red) or optional Warning (yellow) thresholds, select the existing value. To update the condition's runbook URL, select the condition's Thresholds. Disable or delete conditions Disable or re-enable a condition You can enable or disable any policy conditions, and the policy will continue to apply. To disable or re-enable a condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Then, from the list of Alert conditions, (select a condition). Click the On/Off switch to toggle it. Tip For Infrastructure conditions, use the checkbox at the bottom of the condition edit screen, then save the condition. If you copy a condition, it is automatically saved in the new policy as disabled (Off), even if the condition was enabled (On) in the original policy. Delete conditions If a policy has multiple conditions, you can delete any or all of them, and the remaining conditions for the policy will continue to apply. To turn a condition off but keep it with the policy, disable it. To delete one or more conditions: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). From the list of Alert conditions, (select a condition), enable the condition if disabled, then click Delete. Tip If you don't see the delete button, your account admin may have disabled condition deletion for your organization.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 266.0357,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": ", click <em>Alerts</em> &amp; AI, click <em>Alert</em> <em>policies</em>, (select a policy), then click Add a condition. OR To copy a condition from any policy and add it to another policy: In the one.newrelic.com top nav, click <em>Alerts</em> &amp; AI, click <em>Alert</em> <em>policies</em>, (select a policy), then click Copy. Copy a condition To copy an existing"
      },
      "id": "604404ec28ccbc62492c6098"
    },
    {
      "sections": [
        "Manage alert notification channels",
        "Tip",
        "Reference for updating channels",
        "View email channels",
        "Add or update email channels",
        "Create more channels",
        "Add or remove policies assigned to a channel",
        "Assign a channel to a policy",
        "Change a channel's name",
        "Check for policies assigned to a user",
        "Check how many policies are assigned to a channel",
        "View assigned alert policies",
        "Delete a channel",
        "Basic process"
      ],
      "title": "Manage alert notification channels",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert notifications"
      ],
      "external_id": "521bed5aa6fdcea5c1cffd11d01e6dad19bc7c40",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-notifications/update-alert-notification-channels/",
      "published_at": "2021-09-13T19:36:03Z",
      "updated_at": "2021-09-08T15:38:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To keep alert notifications consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add policies to an existing channel, create a new channel entirely, and more. Tip Your selected channel type determines the communication method that appears. For example, if your channel type is email, then the channel will include an email address value. For more information, see channel types. Reference for updating channels Here's a quick reference for updating channels which also includes links to more detailed information and procedures. View email channels Alerts automatically includes the email addresses for all users in the selected account as individual notification channels. If the account is a child account, the list shows only the users on the child account, not the users in the parent account. To view or search the list of user names and emails: Go to one.newrelic.com, in the top nav click Alerts & AI, then click Notification channels. In the search field, search for 'user'. Add or update email channels Users can't unsubscribe from email notifications. The account Owner or Admin must remove them from the policy's notification channel. To add or update account users as notification channels for a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, and then choose the policy you want to change. Optional: You can update notification channels for specific users. On the Notification channels page, select a user, select any policy subscription already associated with the user as applicable to view policy details. Click Notification channels, then follow standard procedures to add notification channels. Click Update policy. Create more channels To create a new notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Click New notification channel. Add or remove policies assigned to a channel To add or remove policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Choose a channel, and then click Alert policies. From the selected policy, use the windows to select, remove, or clear all notification channels. Assign a channel to a policy To add a notification channel to one or more policies: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies. Choose a policy, click Notification channels, and then click Add notification channels. Choose a channel, and then click Update policy. Change a channel's name To rename an existing notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details, change the name (maximum 64 characters) based on the channel type if applicable, and then save. Check for policies assigned to a user To check whether an account user has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. Optional: Search by \"user\" to browse users or a specific username or email. Choose the user, then click Alert policies. Check how many policies are assigned to a channel To check whether a notification channel has any policies assigned: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. The Policy subscriptions column lists how many policies are assigned to the channel. View assigned alert policies To view the policies assigned to a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, choose a channel, and then click Alert policies. OR To view the notification channels assigned to a policy: Go to one.newrelic.com, in the top nav click Alerts & AI, click Policies, choose a policy, then click Notification channels. Delete a channel To delete a notification channel: Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels. In the list, click the Delete icon. Basic process Go to one.newrelic.com, in the top nav click Alerts & AI, click Notification channels, then choose a channel. From the Channel details page, make any necessary changes, and then save. The user interface shows a Last modified time stamp for any changes to policies, including their conditions and notification channels.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 259.27765,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>alert</em> notification channels",
        "sections": "View assigned <em>alert</em> <em>policies</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": "To keep <em>alert</em> notifications consistent with your business needs, manage your channels. When you make updates, you can rename a channel, add <em>policies</em> to an existing channel, create a <em>new</em> channel entirely, and more. Tip Your selected channel type determines the communication method that appears"
      },
      "id": "603eca45e7b9d2d1d82a0806"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/alert-violations/how-alert-condition-violations-are-closed": [
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.7945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Define custom metrics for an <em>alert</em> condition",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Create NRQL alert conditions",
        "Tip",
        "Create a NRQL alert condition",
        "Create a condition from a chart",
        "Caution",
        "NRQL alert syntax",
        "Important",
        "Reformatting incompatible NRQL",
        "NRQL alert threshold examples",
        "Alert on specific segments of your data",
        "Alert on Nth percentile of your data",
        "Alert on max, min, avg of your data",
        "Alert on a percentage of your data",
        "Alert on Apdex with any T-value",
        "Alert conditions and query order of operations",
        "Example: null value returned",
        "Example: zero value returned",
        "Nested aggregation NRQL alerts",
        "Nested queries with a non-faceted innermost query are not currently supported",
        "Queries at all levels must have the same aggregation window size",
        "Signal loss is not yet supported for nested queries",
        "Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported",
        "NRQL condition creation tips",
        "Alert threshold types",
        "Sum of query results (limited or intermittent data)",
        "Set the loss of signal threshold",
        "Advanced signal settings",
        "Aggregation window",
        "Evaluation offset",
        "Fill data gaps"
      ],
      "title": "Create NRQL alert conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "2872f770a5fc8a802f99b9f848906f7e351ad761",
      "image": "https://docs.newrelic.com/static/eb8e1b2d826f9fd9cf46fe3dd5455217/c1b63/nr1_nrql_alert_conditions.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/",
      "published_at": "2021-09-14T07:20:17Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use NRQL queries to create alert conditions. Once you've defined your signal, you can further define your warning and critical threshold levels. This determines when an alerts violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Click NRQL, and then Next, define thresholds. Tip For more information on key concepts relating to NRQL alert conditions and streaming alerts, see Streaming alerts: key terms and concepts. Create a NRQL alert condition To create a NRQL alert condition for a policy: On one.newrelic.com, in the header click Alerts & AI, then in the left sidebar click Policies. Select an existing policy or click New alert policy to create a new policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define thresholds. Create a condition from a chart You can use a chart to create a NRQL alert condition. To create a NRQL alerts condition from a chart, click the chart menu , then click Create alert condition. Once you've named and customized your condition, you can add it to an existing policy or create a new one. Caution A small number of our older charts don't include the option to create an alert condition. NRQL alert syntax Here's the basic syntax for creating all NRQL alert conditions. The FACET clause is required for outlier threshold types. It's optional for static and baseline. SELECT function(attribute) FROM Event WHERE attribute [comparison] [AND|OR ...] Copy Clause Notes SELECT function(attribute) Required Supported functions that return numbers include: apdex average count latest max min percentage percentile sum uniqueCount Tip If you use the percentile aggregator in a faceted alert condition with many facets, this may cause the following error to appear: An error occurred while fetching chart data. If you see this error, use average instead. FROM data type Required Only one data type can be targeted. Supported data types: Event Metric (RAW data points will be returned) WHERE attribute [comparison] [AND|OR ...] Use the WHERE clause to specify a series of one or more conditions. All the operators are supported. FACET attribute Required for outlier conditions Include an optional FACET clause in your NRQL syntax depending on the threshold type: static or baseline. Use the FACET clause to separate your results by attribute and alert on each attribute independently. No LIMIT clause is allowed, but all queries will receive the maximum number of facets possible. Faceted queries can return a maximum of 5000 values for static and baseline conditions and a maximum of 500 values for outlier conditions. Important If the query returns more than the maximum number of values, the alert condition can't be created. If you create the condition and the query returns more than this number later, the alert will fail. Modify your query so that it returns a fewer number of values. Reformatting incompatible NRQL Some elements of NRQL used in charts don’t make sense in the streaming context of alerts. Here’s a list of the most common incompatible elements and suggestions for reformatting a NRQL alert query to achieve the same effect. Element Notes SINCE and UNTIL Example: SELECT percentile(largestContentfulPaint, 75) FROM PageViewTiming WHERE (appId = 837807) SINCE yesterday Copy NRQL Alerting produces a never-ending stream of windowed query results, so the SINCE and UNTIL keywords to scope the query to a point in time are not compatible. As a convenience, we automatically strip SINCE and UNTIL from a query when creating a NRQL Alert Condition from the context of a chart. TIMESERIES In NRQL queries, the TIMESERIES clause is used to return data as a time series broken out by a specified period of time. For NRQL alerts, the equivalent property of a signal is the aggregation window. histogram() The histogram() aggregation function is used to generate histograms. histogram() is not compatible with NRQL alerting: histogram aggregations can not be formatted as a time series. To create an alert from a portion of a histogram (e.g. 95th percentile), use the percentile() aggregation function. Multiple Aggregation Functions Each alert condition can only target a single aggregated stream of data. To alert on multiple streams simultaneously, you’ll need to decompose them into individual conditions within the same policy. Original Query: SELECT count(foo), average(bar), max(baz) from Transaction Copy Decomposed: SELECT count(foo) from Transaction SELECT average(bar) from Transaction SELECT max(baz) from Transaction Copy COMPARE WITH The COMPARE WITH clause is used to compare the values for two different time ranges. This type of query is incompatible with NRQL alerting. We recommend using a Baseline Alert Condition to dynamically detect deviations for a particular signal. SLIDE BY The SLIDE BY clause supports a feature known as sliding windows. With sliding windows, SLIDE BY data is gathered into \"windows\" of time that overlap with each other. These windows can help to smooth out line graphs with a lot of variation in cases where the rolling aggregate (such as a rolling mean) is more important than aggregates from narrow windows of time. Sliding windows are not currently supported in NRQL alerts. LIMIT In NRQL queries, the LIMIT clause is used to control the amount of data a query returns, either the maximum number of facet values returned by FACET queries or the maximum number of items returned by SELECT * queries. LIMIT is not compatible with NRQL alerting: evaluation is always performed on the full result set. NRQL alert threshold examples Here are some common use cases for NRQL alert conditions. These queries will work for static and baseline threshold types. The outlier threshold type will require additional FACET clauses. Alert on specific segments of your data Create constrained alerts that target a specific segment of your data, such as a few key customers or a range of data. Use the WHERE clause to define those conditions. SELECT average(duration) FROM Transaction WHERE account_id in (91290, 102021, 20230) Copy SELECT percentile(duration, 95) FROM Transaction WHERE name LIKE 'Controller/checkout/%' Copy Alert on Nth percentile of your data Create alerts when an Nth percentile of your data hits a specified threshold; for example, maintaining SLA service levels. Since we evaluate the NRQL query in one-minute time windows, percentiles will be calculated for each minute separately. SELECT percentile(duration, 95) FROM Transaction Copy SELECT percentile(databaseDuration, 75) FROM Transaction Copy Alert on max, min, avg of your data Create alerts when your data hits a certain maximum, minimum, or average; for example, ensuring that a duration or response time does not pass a certain threshold. SELECT max(duration) FROM Transaction Copy SELECT average(duration) FROM Transaction Copy Alert on a percentage of your data Create alerts when a proportion of your data goes above or below a certain threshold. SELECT percentage(count(*), WHERE duration > 2) FROM Transaction Copy SELECT percentage(count(*), WHERE httpResponseCode = '500') FROM Transaction Copy Alert on Apdex with any T-value Create alerts on Apdex, applying your own T-value for certain transactions. For example, get an alert notification when your Apdex for a T-value of 500ms on transactions for production apps goes below 0.8. SELECT apdex(duration, t:0.5) FROM Transaction WHERE appName like '%prod%' Copy Alert conditions and query order of operations By default, the aggregation window is 1 minute, but you can change the window to suit your needs. Whatever the aggregation window, New Relic will collect data for that window using the function in the NRQL alert condition’s query. The query is parsed and executed by our systems in the following order: FROM clause – which event type needs to be grabbed? WHERE clause – what can be filtered out? SELECT clause – what information needs to be returned from the now-filtered data set? Example: null value returned Let's say this is your alert condition query: SELECT count(*) FROM SyntheticCheck WHERE monitorName = 'My Cool Monitor' AND result = 'FAILURE' Copy If there are no failures for the aggregation window: The system will execute the FROM clause by grabbing all SyntheticCheck events on your account. Then it will execute the WHERE clause to filter through those events by looking only for the ones that match the monitor name and result specified. If there are still events left to scan through after completing the FROM and WHERE operations, the SELECT clause will be executed. If there are no remaining events, the SELECT clause will not be executed. This means that aggregators like count() and uniqueCount() will never return a zero value. When there is a count of 0, the SELECT clause is ignored and no data is returned, resulting in a value of NULL. Example: zero value returned If you have a data source delivering legitimate numeric zeroes, the query will return zero values and not null values. Let's say this is your alert condition query, and that MyCoolEvent is an attribute that can sometimes return a zero value. SELECT average(MyCoolAttribute) FROM MyCoolEvent Copy If, in the aggregation window being evaluated, there's at least one instance of MyCoolEvent and if the average value of all MyCoolAttribute attributes from that window is equal to zero, then a 0 value will be returned. If there are no MyCoolEvent events during that minute, then a NULL will be returned due to the order of operations. Tip For more information about this topic, you can check out our blog post on troubleshooting for zero versus null values. Tip You can determine how null values will be handled by adjusting loss of signal and gap filling settings in the Alert Conditions UI. Tip You can avoid NULL values entirely with a query order of operations shortcut. Do this by using a filter sub-clause, then including all filter elements within that sub-clause. The main body of the query will run and return data, at which point the SELECT clause will then run and apply the filter elements. The query will return a value of 0 if the filter elements result in no matching data. Here's an example: SELECT filter(count(*), WHERE result = 'SUCCESS' AND monitorName = 'My Favorite Monitor') FROM SyntheticCheck Copy Nested aggregation NRQL alerts Nested aggregation queries are a powerful way to query your data. However, they have a few restrictions that are important to note. Nested queries with a non-faceted innermost query are not currently supported Without a FACET, the inner query produces a single result, giving the outer query nothing to aggregate. If you're using a nested query, make sure your inner query is faceted. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu) ​​​​​ Copy Queries at all levels must have the same aggregation window size With an alert aggregation window of 1 minute, the inner query would produce two smaller windows of 30 seconds. In theory, these two windows could be aggregated by the outer query. However, this is not currently supported. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu TIMESERIES 30 seconds)​​ Copy Signal loss is not yet supported for nested queries For more information on signal loss, see NerdGraph API: Loss of signal and gap filling. Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported You can't use a nested query containing the WITH METRIC_FORMAT in the inner query to create NRQL alert conditions. NRQL condition creation tips Here are some tips for creating and using a NRQL condition: Topic Tips Condition threshold types NRQL condition threshold types include static, baseline, and outlier. Create a description For NRQL conditions, you can create a custom description to add to each violation. Descriptions can be enhanced with variable substitution based on metadata in the specific violation. For details, see Description Query results Queries must return a number. The condition evaluates the returned number against the thresholds you've set. Time period As with all alert conditions, NRQL conditions evaluate one single minute at a time. The implicit SINCE ... UNTIL clause specifying which minute to evaluate is controlled by your Evaluation offset setting. Since very recent data may be incomplete, you may want to query data from 3 minutes ago or longer, especially for: Applications that run on multiple hosts. SyntheticCheck data: Timeouts can take 3 minutes, so 5 minutes or more is recommended. Also, if a query will generate intermittent data, consider using the sum of query results option. Lost signal threshold (loss of signal detection) You can use loss of signal detection to alert on when your data (a telemetry signal) should be considered lost. A signal loss can indicate that a service or entity is no longer online or that a periodic job failed to run. You can also use this to make sure that violations for sporadic data, such as error counts, are closed when no signal is coming in. Advanced signal settings These settings give you options for better handling continuous, streaming data signals that may sometimes be missing. These settings include the aggregation window, the evaluation offset, and an option for filling data gaps. For more on using these, see Advanced signal settings. Condition settings Use the Condition settings to: Create a concise, descriptive condition name. Provide a custom violation description for the condition that will be included in violations and notifications. Add the runbook URL to include your organization's procedures for handling incidents. You may also add this information to the custom violation description. Limits on conditions See the maximum values. Health status NRQL alert conditions don't affect an entity's health status display. Examples For more information, see: Expected NRQL syntax Examples of NRQL condition queries Alert threshold types When you create a NRQL alert, you can choose from different types of thresholds: NRQL alert threshold types Description Static This is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value. Optional: Include a FACET clause. Baseline (Dynamic) Uses a self-adjusting condition based on the past behavior of the monitored values. Uses the same NRQL query form as the static type. Outlier Looks for group behavior and values that are outliers from those groups. Uses the same NRQL query form as the static type, but requires a FACET clause. Sum of query results (limited or intermittent data) Important Available only for static (basic) threshold types. If a query returns intermittent or limited data, it may be difficult to set a meaningful threshold. Missing or limited data will sometimes generate false positives or false negatives. You can use loss of signal, aggregation duration, and gap filling settings to minimize these false notifications. To avoid this problem when using the static threshold type, you can set the selector to sum of query results. This lets you set the alert on an aggregated sum instead of a value from a single harvest cycle. Up to two hours of one-minute data checks can be aggregated. The duration you select determines the width of the rolling sum and the preview chart will update accordingly. Set the loss of signal threshold Loss of signal occurs when no data matches the NRQL condition over a specific period of time. You can set your loss of signal threshold duration and and also what happens when the threshold is crossed. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Loss of signal is only available for NRQL conditions. You may also manage these settings using the GraphQL API (recommended), or the REST API. Go here for specific GraphQL API examples. Loss of signal settings: Loss of signal settings include a time duration and two possible actions. Signal loss expiration time UI label: Signal is lost after: GraphQL Node: expiration.expirationDuration Expiration duration is a timer that starts and resets when we receive a data point in the streaming alerts pipeline. If we don't receive another data point before your 'expiration time' expires, we consider that signal to be lost. This can be because no data is being sent to New Relic or the WHERE clause of your NRQL query is filtering that data out before it is streamed to the alerts pipeline. The loss of signal expiration time is independent of the threshold duration and triggers as soon as the timer expires. The maximum expiration duration is 48 hours. This is helpful when monitoring for the execution of infrequent jobs. The minimum is 30 seconds, but we recommend using at least 3-5 minutes. Loss of signal actions Once a signal is considered lost, you can close open violations, open new violations, or both. Close all current open violations: This closes all open violations that are related to a specific signal. It won't necessarily close all violations for a condition. If you're alerting on an ephemeral service, or on a sporadic signal, you'll want to choose this action to ensure that violations are closed properly. The GraphQL node name for this is \"closeViolationsOnExpiration\" Open new violations: This will open a new violation when the signal is considered lost. These violations will indicate that they are due to a loss of signal. Based on your incident preferences, this should trigger a notification. The graphQL node name for this is \"openViolationOnExpiration\" When you enable both actions, we'll close all open violations first, and then open a new violation for loss of signal. To create a NRQL alert configured with loss of signal detection in the UI: For a policy, when you create a condition, under Select a product, click NRQL, then click Next, define thresholds. Write a NRQL query that returns the values you want to alert on. For Threshold type, select Static or Baseline. Click + Add lost signal threshold, then set the signal expiration duration time in minutes or seconds in the Signal is lost after field. Choose what you want to happen when the signal is lost. You can check one or both of Close all current open violations and Open new \"lost signal\" violation. These control how loss of signal violations will be handled for the condition. Make sure you name your condition before you save it. Violations open due to loss of signal close when the signal comes back. Newly opened lost signal violations will close immediately when new data is evaluated. the condition they belong to expires. By default, conditions expire after 3 days. you manually close the violation with the Close all current open violations option. Tip Loss of signal detection doesn't work on NRQL queries that use nested aggregation or sub-queries. Advanced signal settings When creating a NRQL alert condition, the advanced signal settings gives you better control over streaming alert data and helps you avoid false alarms. When creating a NRQL condition, there are several advanced signal settings: Aggregation window Evaluation offset Fill data gaps To read an explanation of what these settings are and how they relate to each other, see Streaming alerts concepts. Below are instructions and tips on how to configure them. Aggregation window You can set the aggregation window duration to choose how long data is accumulated in a streaming time window before it's aggregated. You can set it to anything between one second and 15 minutes. The default is one minute. Tip Baseline alert condition thresholds don't support editing the aggregation window. They use the 1 minute default. Evaluation offset You can adjust the evaluation offset to coordinate our streaming alerting algorithm with your data's latency. If it takes a while for your data to arrive, then you may need to increase the evaluation offset. The total supported latency is the product of the aggregation window duration multiplied by the evaluation offset. In the example screenshot above, the supported latency is 3 minutes (a 1-minute aggregation window multiplied by three windows). If the data type comes from an APM language agent and is aggregated from many app instances (for example, Transactions, TransactionErrors, etc.), we recommend using an evaluation offset of 3 with 1 minute aggregation windows. Important When creating NRQL conditions for data collected from Infrastructure Cloud Integrations such as AWS Cloudwatch or Azure, we recommend that you start with an evaluation offset of 15 minutes, then adjust up or down depending on how long it takes to collect your data. Fill data gaps Gap filling lets you customize the values to use when your signals don't have any data. You can fill gaps in your data streams with one of these settings: None: (Default) Choose this if you don't want to take any action on empty aggregation windows. On evaluation, an empty aggregation window will reset the threshold duration timer. For example, if a condition says that all aggregation windows must have data points above the threshold for 5 minutes, and 1 of the 5 aggregation windows is empty, then the condition won't be in violation. Custom static value: Choose this if you'd like to insert a custom static value into the empty aggregation windows before they're evaluated. This option has an additional, required parameter of fillValue (as named in the API) that specifies what static value should be used. This defaults to 0. Last known value: This option inserts the last seen value before evaluation occurs. We maintain the state of the last seen value for 2 hours. Tip The alerts system fills gaps in actively reported signals. This signal history is dropped after 2 hours of inactivity. For gap filling, data points received after this period of inactivity are treated as new signals. To learn more about signal loss, gap filling, and how to request access to these features, see this Explorers Hub post. Options for editing data gap settings: In the NRQL conditions UI, go to Condition settings > Advanced signal settings > fill data gaps with and choose an option. If using our Nerdgraph API (preferred), this node is located at: actor : account : alerts : nrqlCondition : signal : fillOption | fillValue NerdGraph is our recommended API for this but if you're using our REST API, you can find this setting in the REST API explorer under the \"signal\" section of the Alert NRQL conditions API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 219.59042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create NRQL <em>alert</em> conditions",
        "sections": "<em>Alert</em> conditions <em>and</em> query order of operations",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " a NRQL <em>alert</em> condition for a policy: On one.newrelic.com, in the header click <em>Alerts</em> &amp; AI, then in the left sidebar click Policies. Select an existing policy or click <em>New</em> <em>alert</em> policy to create a <em>new</em> policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define"
      },
      "id": "603ef04864441fbc114e8883"
    },
    {
      "sections": [
        "Introduction to Applied Intelligence",
        "Why use Applied Intelligence?",
        "Determine root causes with Incident Intelligence",
        "Find unknowns with Proactive Detection"
      ],
      "title": "Introduction to Applied Intelligence",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Get started"
      ],
      "external_id": "68af5032ebe9c91467f78169bb5d30976d7f67ee",
      "image": "https://docs.newrelic.com/static/c95c61f5a259d33c01781273aed8311d/30c92/diagram-applied-intelligence-workflow.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/get-started/introduction-applied-intelligence/",
      "published_at": "2021-09-14T07:20:16Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applied Intelligence (AI) is our AIOps solution for DevOps, site reliability engineers, and on-call teams. At its core, Applied Intelligence helps you find, troubleshoot, and resolve problems more quickly. Specifically, it’s a hybrid machine learning engine that reduces alert noise, correlates incidents, and automatically detects anomalies. By applying machine learning to your data and feedback, Applied Intelligence is designed to improve functionality and deliver smarter context over time. After connecting your data sources to Applied Intelligence, it looks for potential problems and improves based on your feedback. Why use Applied Intelligence? How you respond to an incident can mean thousands of dollars or clicks for your company. Applied Intelligence helps you solve problems faster. Feature Description Troubleshoot and respond to incidents Our solution helps you understand your incidents and gives you ideas for what to do next. Here are a few examples: Automatically classifies incidents based on the golden signals of site reliability engineering. Identifies entities in your stack that may relate to the underlying issue. Suggests responses for incidents based on historical context. Less noise, more focus As tools and systems become more complex, alert noise can overwhelm DevOps and SRE teams. Applied Intelligence correlates related incidents and suppresses noise, so you're only notified when human action is required. Incidents with a hybrid approach Applied Intelligence streamlines your incidents by combining its built-in inputs with your knowledge and feedback. Over time, the system delivers more accurate insights. For example: Our correlation and classification engine adjusts based on your feedback. The system automatically suggests new correlation rules based on your production data. You can create custom logic using the decision builder. Automatic anomaly detection Applied Intelligence provides automatic anomaly detection on all your APM-monitored applications. We detect anomalies in throughput, latency, and error rate, with no action required from you. Benefits include: No setup required. See anomalies surfaced automatically in the anomalies feed. See them in various New Relic activity streams (for example, on the New Relic One home page). Ability to run NRQL queries of anomalies and create custom dashboards with that data. Determine root causes with Incident Intelligence As part of Applied Intelligence, Incident Intelligence helps you correlate incident events and reduce noise in your environment. With it, you can get an overview of all your issues, see suggested responders, and configure your own correlation logic. To get started, see Incident Intelligence. Find unknowns with Proactive Detection Another feature of Applied Intelligence is Proactive Detection. Proactive Detection is, by default, always on and detecting anomalies. These anomalies are surfaced in the Applied Intelligence anomalies feed, New Relic One activity streams, and can be queried, alerted on, and added to dashboards. Anomalies can be sent to Slack or via webhooks, and/or added as a source for Incident Intelligence correlation and issue notification. Proactive Detection also provides automatic analysis of anomalies and alerts via the analysis page. To get started, see Proactive Detection.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 219.59042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "sections": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " Incident <em>Intelligence</em>. Find unknowns with Proactive Detection Another feature of <em>Applied</em> <em>Intelligence</em> is Proactive Detection. Proactive Detection is, by default, always on and detecting anomalies. These anomalies are surfaced in the <em>Applied</em> <em>Intelligence</em> anomalies feed, <em>New</em> <em>Relic</em> One activity streams"
      },
      "id": "603ea67c64441ffd1c4e8860"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/alert-violations/view-alert-violations-our-products": [
    {
      "sections": [
        "How alert condition violations are closed",
        "How violations automatically close",
        "Manually close a violation",
        "Important",
        "Set a time limit for long-lasting violations"
      ],
      "title": "How alert condition violations are closed",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert violations"
      ],
      "external_id": "41e9d59a43c91f2364ae832f472f4c395986c355",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-violations/how-alert-condition-violations-are-closed/",
      "published_at": "2021-09-13T19:38:08Z",
      "updated_at": "2021-09-02T05:02:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains the different ways violations can be closed. How violations automatically close A violation will automatically close when the targeted signal returns to a non-violating state for the time period indicated in the condition's thresholds. This wait time is called the recovery period. For example: If the violating behavior is \"Apdex score below 0.80 at least once in 5 minutes,\" then the violation will automatically close when the Apdex score is equal to or higher than .80 for 5 consecutive minutes. The same applies to a \"for at least x minutes\" threshold: x minutes of non-violating behavior are required to automatically close the violation. When a violation closes automatically: The closing timestamp is backdated to the start of the recovery period. The evaluation resets and restarts from when the previous violation ended. All conditions have a violation time limit setting that will automatically force-close a long-lasting violation. Manually close a violation You can manually close an open violation. This is useful, for example, when a signal has violated the threshold, but it no longer exists and also doesn't have a violation time limit. (A time limit would automatically close a long-lasting violation.) To close a violation: Go to the open violation you want to close. Click Manually close violation. To close all violations associated with a condition: Go to the condition you want to close. Disable the condition and then re-enable it. Important An incident will close automatically when all of its associated critical violations have been closed. Set a time limit for long-lasting violations The violation time limit setting will automatically force-close a long-lasting violation after the number of days/hours you select. This is most useful for ephemeral entities that, when they disappear, cause a continual violation that won't automatically close. Limits and Defaults All alert violations will have a violation time limit applied to them. Most alert conditions will allow you to edit this field. The default value, if one is not supplied during configuration, is 3 days (24 hours for Infrastructure conditions). The violation time limit for non-Infrastructure conditions can be set as low as 5 minutes, and as high as 30 days. If, for some reason, the signal is still violating in 30 days, the violation will close, and a new violation will open. Infrastructure conditions can be set to the following hours: 1, 2, 4, 8, 12, 24, 48, or 72. Examples: You set the violation time limit to 12 hours. If that violation lasts for 12 hours, it will be closed at 12 hours and the condition's evaluation of that entity will be reset. Your JVM has a CPU spike and this creates a violation. The JVM then crashes and is replaced by a new JVM. If you have not set a violation time limit, the crashed JVM’s violation will never close.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 234.57285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "How <em>alert</em> condition <em>violations</em> are closed",
        "sections": "How <em>alert</em> condition <em>violations</em> are closed",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " for ephemeral entities that, when they disappear, cause a continual violation that won&#x27;t automatically close. Limits and Defaults All <em>alert</em> <em>violations</em> will have a violation time limit <em>applied</em> to them. Most <em>alert</em> conditions will allow you to edit this field. The default value, if one is not supplied during"
      },
      "id": "6043fcf2196a67dcce960f80"
    },
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.79434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Define custom metrics for an <em>alert</em> condition",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Create NRQL alert conditions",
        "Tip",
        "Create a NRQL alert condition",
        "Create a condition from a chart",
        "Caution",
        "NRQL alert syntax",
        "Important",
        "Reformatting incompatible NRQL",
        "NRQL alert threshold examples",
        "Alert on specific segments of your data",
        "Alert on Nth percentile of your data",
        "Alert on max, min, avg of your data",
        "Alert on a percentage of your data",
        "Alert on Apdex with any T-value",
        "Alert conditions and query order of operations",
        "Example: null value returned",
        "Example: zero value returned",
        "Nested aggregation NRQL alerts",
        "Nested queries with a non-faceted innermost query are not currently supported",
        "Queries at all levels must have the same aggregation window size",
        "Signal loss is not yet supported for nested queries",
        "Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported",
        "NRQL condition creation tips",
        "Alert threshold types",
        "Sum of query results (limited or intermittent data)",
        "Set the loss of signal threshold",
        "Advanced signal settings",
        "Aggregation window",
        "Evaluation offset",
        "Fill data gaps"
      ],
      "title": "Create NRQL alert conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "2872f770a5fc8a802f99b9f848906f7e351ad761",
      "image": "https://docs.newrelic.com/static/eb8e1b2d826f9fd9cf46fe3dd5455217/c1b63/nr1_nrql_alert_conditions.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/",
      "published_at": "2021-09-14T07:20:17Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use NRQL queries to create alert conditions. Once you've defined your signal, you can further define your warning and critical threshold levels. This determines when an alerts violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Click NRQL, and then Next, define thresholds. Tip For more information on key concepts relating to NRQL alert conditions and streaming alerts, see Streaming alerts: key terms and concepts. Create a NRQL alert condition To create a NRQL alert condition for a policy: On one.newrelic.com, in the header click Alerts & AI, then in the left sidebar click Policies. Select an existing policy or click New alert policy to create a new policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define thresholds. Create a condition from a chart You can use a chart to create a NRQL alert condition. To create a NRQL alerts condition from a chart, click the chart menu , then click Create alert condition. Once you've named and customized your condition, you can add it to an existing policy or create a new one. Caution A small number of our older charts don't include the option to create an alert condition. NRQL alert syntax Here's the basic syntax for creating all NRQL alert conditions. The FACET clause is required for outlier threshold types. It's optional for static and baseline. SELECT function(attribute) FROM Event WHERE attribute [comparison] [AND|OR ...] Copy Clause Notes SELECT function(attribute) Required Supported functions that return numbers include: apdex average count latest max min percentage percentile sum uniqueCount Tip If you use the percentile aggregator in a faceted alert condition with many facets, this may cause the following error to appear: An error occurred while fetching chart data. If you see this error, use average instead. FROM data type Required Only one data type can be targeted. Supported data types: Event Metric (RAW data points will be returned) WHERE attribute [comparison] [AND|OR ...] Use the WHERE clause to specify a series of one or more conditions. All the operators are supported. FACET attribute Required for outlier conditions Include an optional FACET clause in your NRQL syntax depending on the threshold type: static or baseline. Use the FACET clause to separate your results by attribute and alert on each attribute independently. No LIMIT clause is allowed, but all queries will receive the maximum number of facets possible. Faceted queries can return a maximum of 5000 values for static and baseline conditions and a maximum of 500 values for outlier conditions. Important If the query returns more than the maximum number of values, the alert condition can't be created. If you create the condition and the query returns more than this number later, the alert will fail. Modify your query so that it returns a fewer number of values. Reformatting incompatible NRQL Some elements of NRQL used in charts don’t make sense in the streaming context of alerts. Here’s a list of the most common incompatible elements and suggestions for reformatting a NRQL alert query to achieve the same effect. Element Notes SINCE and UNTIL Example: SELECT percentile(largestContentfulPaint, 75) FROM PageViewTiming WHERE (appId = 837807) SINCE yesterday Copy NRQL Alerting produces a never-ending stream of windowed query results, so the SINCE and UNTIL keywords to scope the query to a point in time are not compatible. As a convenience, we automatically strip SINCE and UNTIL from a query when creating a NRQL Alert Condition from the context of a chart. TIMESERIES In NRQL queries, the TIMESERIES clause is used to return data as a time series broken out by a specified period of time. For NRQL alerts, the equivalent property of a signal is the aggregation window. histogram() The histogram() aggregation function is used to generate histograms. histogram() is not compatible with NRQL alerting: histogram aggregations can not be formatted as a time series. To create an alert from a portion of a histogram (e.g. 95th percentile), use the percentile() aggregation function. Multiple Aggregation Functions Each alert condition can only target a single aggregated stream of data. To alert on multiple streams simultaneously, you’ll need to decompose them into individual conditions within the same policy. Original Query: SELECT count(foo), average(bar), max(baz) from Transaction Copy Decomposed: SELECT count(foo) from Transaction SELECT average(bar) from Transaction SELECT max(baz) from Transaction Copy COMPARE WITH The COMPARE WITH clause is used to compare the values for two different time ranges. This type of query is incompatible with NRQL alerting. We recommend using a Baseline Alert Condition to dynamically detect deviations for a particular signal. SLIDE BY The SLIDE BY clause supports a feature known as sliding windows. With sliding windows, SLIDE BY data is gathered into \"windows\" of time that overlap with each other. These windows can help to smooth out line graphs with a lot of variation in cases where the rolling aggregate (such as a rolling mean) is more important than aggregates from narrow windows of time. Sliding windows are not currently supported in NRQL alerts. LIMIT In NRQL queries, the LIMIT clause is used to control the amount of data a query returns, either the maximum number of facet values returned by FACET queries or the maximum number of items returned by SELECT * queries. LIMIT is not compatible with NRQL alerting: evaluation is always performed on the full result set. NRQL alert threshold examples Here are some common use cases for NRQL alert conditions. These queries will work for static and baseline threshold types. The outlier threshold type will require additional FACET clauses. Alert on specific segments of your data Create constrained alerts that target a specific segment of your data, such as a few key customers or a range of data. Use the WHERE clause to define those conditions. SELECT average(duration) FROM Transaction WHERE account_id in (91290, 102021, 20230) Copy SELECT percentile(duration, 95) FROM Transaction WHERE name LIKE 'Controller/checkout/%' Copy Alert on Nth percentile of your data Create alerts when an Nth percentile of your data hits a specified threshold; for example, maintaining SLA service levels. Since we evaluate the NRQL query in one-minute time windows, percentiles will be calculated for each minute separately. SELECT percentile(duration, 95) FROM Transaction Copy SELECT percentile(databaseDuration, 75) FROM Transaction Copy Alert on max, min, avg of your data Create alerts when your data hits a certain maximum, minimum, or average; for example, ensuring that a duration or response time does not pass a certain threshold. SELECT max(duration) FROM Transaction Copy SELECT average(duration) FROM Transaction Copy Alert on a percentage of your data Create alerts when a proportion of your data goes above or below a certain threshold. SELECT percentage(count(*), WHERE duration > 2) FROM Transaction Copy SELECT percentage(count(*), WHERE httpResponseCode = '500') FROM Transaction Copy Alert on Apdex with any T-value Create alerts on Apdex, applying your own T-value for certain transactions. For example, get an alert notification when your Apdex for a T-value of 500ms on transactions for production apps goes below 0.8. SELECT apdex(duration, t:0.5) FROM Transaction WHERE appName like '%prod%' Copy Alert conditions and query order of operations By default, the aggregation window is 1 minute, but you can change the window to suit your needs. Whatever the aggregation window, New Relic will collect data for that window using the function in the NRQL alert condition’s query. The query is parsed and executed by our systems in the following order: FROM clause – which event type needs to be grabbed? WHERE clause – what can be filtered out? SELECT clause – what information needs to be returned from the now-filtered data set? Example: null value returned Let's say this is your alert condition query: SELECT count(*) FROM SyntheticCheck WHERE monitorName = 'My Cool Monitor' AND result = 'FAILURE' Copy If there are no failures for the aggregation window: The system will execute the FROM clause by grabbing all SyntheticCheck events on your account. Then it will execute the WHERE clause to filter through those events by looking only for the ones that match the monitor name and result specified. If there are still events left to scan through after completing the FROM and WHERE operations, the SELECT clause will be executed. If there are no remaining events, the SELECT clause will not be executed. This means that aggregators like count() and uniqueCount() will never return a zero value. When there is a count of 0, the SELECT clause is ignored and no data is returned, resulting in a value of NULL. Example: zero value returned If you have a data source delivering legitimate numeric zeroes, the query will return zero values and not null values. Let's say this is your alert condition query, and that MyCoolEvent is an attribute that can sometimes return a zero value. SELECT average(MyCoolAttribute) FROM MyCoolEvent Copy If, in the aggregation window being evaluated, there's at least one instance of MyCoolEvent and if the average value of all MyCoolAttribute attributes from that window is equal to zero, then a 0 value will be returned. If there are no MyCoolEvent events during that minute, then a NULL will be returned due to the order of operations. Tip For more information about this topic, you can check out our blog post on troubleshooting for zero versus null values. Tip You can determine how null values will be handled by adjusting loss of signal and gap filling settings in the Alert Conditions UI. Tip You can avoid NULL values entirely with a query order of operations shortcut. Do this by using a filter sub-clause, then including all filter elements within that sub-clause. The main body of the query will run and return data, at which point the SELECT clause will then run and apply the filter elements. The query will return a value of 0 if the filter elements result in no matching data. Here's an example: SELECT filter(count(*), WHERE result = 'SUCCESS' AND monitorName = 'My Favorite Monitor') FROM SyntheticCheck Copy Nested aggregation NRQL alerts Nested aggregation queries are a powerful way to query your data. However, they have a few restrictions that are important to note. Nested queries with a non-faceted innermost query are not currently supported Without a FACET, the inner query produces a single result, giving the outer query nothing to aggregate. If you're using a nested query, make sure your inner query is faceted. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu) ​​​​​ Copy Queries at all levels must have the same aggregation window size With an alert aggregation window of 1 minute, the inner query would produce two smaller windows of 30 seconds. In theory, these two windows could be aggregated by the outer query. However, this is not currently supported. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu TIMESERIES 30 seconds)​​ Copy Signal loss is not yet supported for nested queries For more information on signal loss, see NerdGraph API: Loss of signal and gap filling. Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported You can't use a nested query containing the WITH METRIC_FORMAT in the inner query to create NRQL alert conditions. NRQL condition creation tips Here are some tips for creating and using a NRQL condition: Topic Tips Condition threshold types NRQL condition threshold types include static, baseline, and outlier. Create a description For NRQL conditions, you can create a custom description to add to each violation. Descriptions can be enhanced with variable substitution based on metadata in the specific violation. For details, see Description Query results Queries must return a number. The condition evaluates the returned number against the thresholds you've set. Time period As with all alert conditions, NRQL conditions evaluate one single minute at a time. The implicit SINCE ... UNTIL clause specifying which minute to evaluate is controlled by your Evaluation offset setting. Since very recent data may be incomplete, you may want to query data from 3 minutes ago or longer, especially for: Applications that run on multiple hosts. SyntheticCheck data: Timeouts can take 3 minutes, so 5 minutes or more is recommended. Also, if a query will generate intermittent data, consider using the sum of query results option. Lost signal threshold (loss of signal detection) You can use loss of signal detection to alert on when your data (a telemetry signal) should be considered lost. A signal loss can indicate that a service or entity is no longer online or that a periodic job failed to run. You can also use this to make sure that violations for sporadic data, such as error counts, are closed when no signal is coming in. Advanced signal settings These settings give you options for better handling continuous, streaming data signals that may sometimes be missing. These settings include the aggregation window, the evaluation offset, and an option for filling data gaps. For more on using these, see Advanced signal settings. Condition settings Use the Condition settings to: Create a concise, descriptive condition name. Provide a custom violation description for the condition that will be included in violations and notifications. Add the runbook URL to include your organization's procedures for handling incidents. You may also add this information to the custom violation description. Limits on conditions See the maximum values. Health status NRQL alert conditions don't affect an entity's health status display. Examples For more information, see: Expected NRQL syntax Examples of NRQL condition queries Alert threshold types When you create a NRQL alert, you can choose from different types of thresholds: NRQL alert threshold types Description Static This is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value. Optional: Include a FACET clause. Baseline (Dynamic) Uses a self-adjusting condition based on the past behavior of the monitored values. Uses the same NRQL query form as the static type. Outlier Looks for group behavior and values that are outliers from those groups. Uses the same NRQL query form as the static type, but requires a FACET clause. Sum of query results (limited or intermittent data) Important Available only for static (basic) threshold types. If a query returns intermittent or limited data, it may be difficult to set a meaningful threshold. Missing or limited data will sometimes generate false positives or false negatives. You can use loss of signal, aggregation duration, and gap filling settings to minimize these false notifications. To avoid this problem when using the static threshold type, you can set the selector to sum of query results. This lets you set the alert on an aggregated sum instead of a value from a single harvest cycle. Up to two hours of one-minute data checks can be aggregated. The duration you select determines the width of the rolling sum and the preview chart will update accordingly. Set the loss of signal threshold Loss of signal occurs when no data matches the NRQL condition over a specific period of time. You can set your loss of signal threshold duration and and also what happens when the threshold is crossed. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Loss of signal is only available for NRQL conditions. You may also manage these settings using the GraphQL API (recommended), or the REST API. Go here for specific GraphQL API examples. Loss of signal settings: Loss of signal settings include a time duration and two possible actions. Signal loss expiration time UI label: Signal is lost after: GraphQL Node: expiration.expirationDuration Expiration duration is a timer that starts and resets when we receive a data point in the streaming alerts pipeline. If we don't receive another data point before your 'expiration time' expires, we consider that signal to be lost. This can be because no data is being sent to New Relic or the WHERE clause of your NRQL query is filtering that data out before it is streamed to the alerts pipeline. The loss of signal expiration time is independent of the threshold duration and triggers as soon as the timer expires. The maximum expiration duration is 48 hours. This is helpful when monitoring for the execution of infrequent jobs. The minimum is 30 seconds, but we recommend using at least 3-5 minutes. Loss of signal actions Once a signal is considered lost, you can close open violations, open new violations, or both. Close all current open violations: This closes all open violations that are related to a specific signal. It won't necessarily close all violations for a condition. If you're alerting on an ephemeral service, or on a sporadic signal, you'll want to choose this action to ensure that violations are closed properly. The GraphQL node name for this is \"closeViolationsOnExpiration\" Open new violations: This will open a new violation when the signal is considered lost. These violations will indicate that they are due to a loss of signal. Based on your incident preferences, this should trigger a notification. The graphQL node name for this is \"openViolationOnExpiration\" When you enable both actions, we'll close all open violations first, and then open a new violation for loss of signal. To create a NRQL alert configured with loss of signal detection in the UI: For a policy, when you create a condition, under Select a product, click NRQL, then click Next, define thresholds. Write a NRQL query that returns the values you want to alert on. For Threshold type, select Static or Baseline. Click + Add lost signal threshold, then set the signal expiration duration time in minutes or seconds in the Signal is lost after field. Choose what you want to happen when the signal is lost. You can check one or both of Close all current open violations and Open new \"lost signal\" violation. These control how loss of signal violations will be handled for the condition. Make sure you name your condition before you save it. Violations open due to loss of signal close when the signal comes back. Newly opened lost signal violations will close immediately when new data is evaluated. the condition they belong to expires. By default, conditions expire after 3 days. you manually close the violation with the Close all current open violations option. Tip Loss of signal detection doesn't work on NRQL queries that use nested aggregation or sub-queries. Advanced signal settings When creating a NRQL alert condition, the advanced signal settings gives you better control over streaming alert data and helps you avoid false alarms. When creating a NRQL condition, there are several advanced signal settings: Aggregation window Evaluation offset Fill data gaps To read an explanation of what these settings are and how they relate to each other, see Streaming alerts concepts. Below are instructions and tips on how to configure them. Aggregation window You can set the aggregation window duration to choose how long data is accumulated in a streaming time window before it's aggregated. You can set it to anything between one second and 15 minutes. The default is one minute. Tip Baseline alert condition thresholds don't support editing the aggregation window. They use the 1 minute default. Evaluation offset You can adjust the evaluation offset to coordinate our streaming alerting algorithm with your data's latency. If it takes a while for your data to arrive, then you may need to increase the evaluation offset. The total supported latency is the product of the aggregation window duration multiplied by the evaluation offset. In the example screenshot above, the supported latency is 3 minutes (a 1-minute aggregation window multiplied by three windows). If the data type comes from an APM language agent and is aggregated from many app instances (for example, Transactions, TransactionErrors, etc.), we recommend using an evaluation offset of 3 with 1 minute aggregation windows. Important When creating NRQL conditions for data collected from Infrastructure Cloud Integrations such as AWS Cloudwatch or Azure, we recommend that you start with an evaluation offset of 15 minutes, then adjust up or down depending on how long it takes to collect your data. Fill data gaps Gap filling lets you customize the values to use when your signals don't have any data. You can fill gaps in your data streams with one of these settings: None: (Default) Choose this if you don't want to take any action on empty aggregation windows. On evaluation, an empty aggregation window will reset the threshold duration timer. For example, if a condition says that all aggregation windows must have data points above the threshold for 5 minutes, and 1 of the 5 aggregation windows is empty, then the condition won't be in violation. Custom static value: Choose this if you'd like to insert a custom static value into the empty aggregation windows before they're evaluated. This option has an additional, required parameter of fillValue (as named in the API) that specifies what static value should be used. This defaults to 0. Last known value: This option inserts the last seen value before evaluation occurs. We maintain the state of the last seen value for 2 hours. Tip The alerts system fills gaps in actively reported signals. This signal history is dropped after 2 hours of inactivity. For gap filling, data points received after this period of inactivity are treated as new signals. To learn more about signal loss, gap filling, and how to request access to these features, see this Explorers Hub post. Options for editing data gap settings: In the NRQL conditions UI, go to Condition settings > Advanced signal settings > fill data gaps with and choose an option. If using our Nerdgraph API (preferred), this node is located at: actor : account : alerts : nrqlCondition : signal : fillOption | fillValue NerdGraph is our recommended API for this but if you're using our REST API, you can find this setting in the REST API explorer under the \"signal\" section of the Alert NRQL conditions API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 219.59027,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create NRQL <em>alert</em> conditions",
        "sections": "<em>Alert</em> conditions <em>and</em> query order of operations",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " a NRQL <em>alert</em> condition for a policy: On one.newrelic.com, in the header click <em>Alerts</em> &amp; AI, then in the left sidebar click Policies. Select an existing policy or click <em>New</em> <em>alert</em> policy to create a <em>new</em> policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define"
      },
      "id": "603ef04864441fbc114e8883"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/get-started/alerts-ai-overview-page": [
    {
      "sections": [
        "Introduction to Applied Intelligence",
        "Why use Applied Intelligence?",
        "Determine root causes with Incident Intelligence",
        "Find unknowns with Proactive Detection"
      ],
      "title": "Introduction to Applied Intelligence",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Get started"
      ],
      "external_id": "68af5032ebe9c91467f78169bb5d30976d7f67ee",
      "image": "https://docs.newrelic.com/static/c95c61f5a259d33c01781273aed8311d/30c92/diagram-applied-intelligence-workflow.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/get-started/introduction-applied-intelligence/",
      "published_at": "2021-09-14T07:20:16Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applied Intelligence (AI) is our AIOps solution for DevOps, site reliability engineers, and on-call teams. At its core, Applied Intelligence helps you find, troubleshoot, and resolve problems more quickly. Specifically, it’s a hybrid machine learning engine that reduces alert noise, correlates incidents, and automatically detects anomalies. By applying machine learning to your data and feedback, Applied Intelligence is designed to improve functionality and deliver smarter context over time. After connecting your data sources to Applied Intelligence, it looks for potential problems and improves based on your feedback. Why use Applied Intelligence? How you respond to an incident can mean thousands of dollars or clicks for your company. Applied Intelligence helps you solve problems faster. Feature Description Troubleshoot and respond to incidents Our solution helps you understand your incidents and gives you ideas for what to do next. Here are a few examples: Automatically classifies incidents based on the golden signals of site reliability engineering. Identifies entities in your stack that may relate to the underlying issue. Suggests responses for incidents based on historical context. Less noise, more focus As tools and systems become more complex, alert noise can overwhelm DevOps and SRE teams. Applied Intelligence correlates related incidents and suppresses noise, so you're only notified when human action is required. Incidents with a hybrid approach Applied Intelligence streamlines your incidents by combining its built-in inputs with your knowledge and feedback. Over time, the system delivers more accurate insights. For example: Our correlation and classification engine adjusts based on your feedback. The system automatically suggests new correlation rules based on your production data. You can create custom logic using the decision builder. Automatic anomaly detection Applied Intelligence provides automatic anomaly detection on all your APM-monitored applications. We detect anomalies in throughput, latency, and error rate, with no action required from you. Benefits include: No setup required. See anomalies surfaced automatically in the anomalies feed. See them in various New Relic activity streams (for example, on the New Relic One home page). Ability to run NRQL queries of anomalies and create custom dashboards with that data. Determine root causes with Incident Intelligence As part of Applied Intelligence, Incident Intelligence helps you correlate incident events and reduce noise in your environment. With it, you can get an overview of all your issues, see suggested responders, and configure your own correlation logic. To get started, see Incident Intelligence. Find unknowns with Proactive Detection Another feature of Applied Intelligence is Proactive Detection. Proactive Detection is, by default, always on and detecting anomalies. These anomalies are surfaced in the Applied Intelligence anomalies feed, New Relic One activity streams, and can be queried, alerted on, and added to dashboards. Anomalies can be sent to Slack or via webhooks, and/or added as a source for Incident Intelligence correlation and issue notification. Proactive Detection also provides automatic analysis of anomalies and alerts via the analysis page. To get started, see Proactive Detection.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 272.4967,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "sections": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " with Incident <em>Intelligence</em> As part of <em>Applied</em> <em>Intelligence</em>, Incident <em>Intelligence</em> helps you correlate incident events and reduce noise in your environment. With it, you can <em>get</em> an overview of all your issues, see suggested responders, and configure your own correlation logic. To <em>get</em> <em>started</em>, see"
      },
      "id": "603ea67c64441ffd1c4e8860"
    },
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.77588,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Define custom metrics for an <em>alert</em> condition",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Create NRQL alert conditions",
        "Tip",
        "Create a NRQL alert condition",
        "Create a condition from a chart",
        "Caution",
        "NRQL alert syntax",
        "Important",
        "Reformatting incompatible NRQL",
        "NRQL alert threshold examples",
        "Alert on specific segments of your data",
        "Alert on Nth percentile of your data",
        "Alert on max, min, avg of your data",
        "Alert on a percentage of your data",
        "Alert on Apdex with any T-value",
        "Alert conditions and query order of operations",
        "Example: null value returned",
        "Example: zero value returned",
        "Nested aggregation NRQL alerts",
        "Nested queries with a non-faceted innermost query are not currently supported",
        "Queries at all levels must have the same aggregation window size",
        "Signal loss is not yet supported for nested queries",
        "Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported",
        "NRQL condition creation tips",
        "Alert threshold types",
        "Sum of query results (limited or intermittent data)",
        "Set the loss of signal threshold",
        "Advanced signal settings",
        "Aggregation window",
        "Evaluation offset",
        "Fill data gaps"
      ],
      "title": "Create NRQL alert conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "2872f770a5fc8a802f99b9f848906f7e351ad761",
      "image": "https://docs.newrelic.com/static/eb8e1b2d826f9fd9cf46fe3dd5455217/c1b63/nr1_nrql_alert_conditions.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/",
      "published_at": "2021-09-14T07:20:17Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use NRQL queries to create alert conditions. Once you've defined your signal, you can further define your warning and critical threshold levels. This determines when an alerts violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Click NRQL, and then Next, define thresholds. Tip For more information on key concepts relating to NRQL alert conditions and streaming alerts, see Streaming alerts: key terms and concepts. Create a NRQL alert condition To create a NRQL alert condition for a policy: On one.newrelic.com, in the header click Alerts & AI, then in the left sidebar click Policies. Select an existing policy or click New alert policy to create a new policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define thresholds. Create a condition from a chart You can use a chart to create a NRQL alert condition. To create a NRQL alerts condition from a chart, click the chart menu , then click Create alert condition. Once you've named and customized your condition, you can add it to an existing policy or create a new one. Caution A small number of our older charts don't include the option to create an alert condition. NRQL alert syntax Here's the basic syntax for creating all NRQL alert conditions. The FACET clause is required for outlier threshold types. It's optional for static and baseline. SELECT function(attribute) FROM Event WHERE attribute [comparison] [AND|OR ...] Copy Clause Notes SELECT function(attribute) Required Supported functions that return numbers include: apdex average count latest max min percentage percentile sum uniqueCount Tip If you use the percentile aggregator in a faceted alert condition with many facets, this may cause the following error to appear: An error occurred while fetching chart data. If you see this error, use average instead. FROM data type Required Only one data type can be targeted. Supported data types: Event Metric (RAW data points will be returned) WHERE attribute [comparison] [AND|OR ...] Use the WHERE clause to specify a series of one or more conditions. All the operators are supported. FACET attribute Required for outlier conditions Include an optional FACET clause in your NRQL syntax depending on the threshold type: static or baseline. Use the FACET clause to separate your results by attribute and alert on each attribute independently. No LIMIT clause is allowed, but all queries will receive the maximum number of facets possible. Faceted queries can return a maximum of 5000 values for static and baseline conditions and a maximum of 500 values for outlier conditions. Important If the query returns more than the maximum number of values, the alert condition can't be created. If you create the condition and the query returns more than this number later, the alert will fail. Modify your query so that it returns a fewer number of values. Reformatting incompatible NRQL Some elements of NRQL used in charts don’t make sense in the streaming context of alerts. Here’s a list of the most common incompatible elements and suggestions for reformatting a NRQL alert query to achieve the same effect. Element Notes SINCE and UNTIL Example: SELECT percentile(largestContentfulPaint, 75) FROM PageViewTiming WHERE (appId = 837807) SINCE yesterday Copy NRQL Alerting produces a never-ending stream of windowed query results, so the SINCE and UNTIL keywords to scope the query to a point in time are not compatible. As a convenience, we automatically strip SINCE and UNTIL from a query when creating a NRQL Alert Condition from the context of a chart. TIMESERIES In NRQL queries, the TIMESERIES clause is used to return data as a time series broken out by a specified period of time. For NRQL alerts, the equivalent property of a signal is the aggregation window. histogram() The histogram() aggregation function is used to generate histograms. histogram() is not compatible with NRQL alerting: histogram aggregations can not be formatted as a time series. To create an alert from a portion of a histogram (e.g. 95th percentile), use the percentile() aggregation function. Multiple Aggregation Functions Each alert condition can only target a single aggregated stream of data. To alert on multiple streams simultaneously, you’ll need to decompose them into individual conditions within the same policy. Original Query: SELECT count(foo), average(bar), max(baz) from Transaction Copy Decomposed: SELECT count(foo) from Transaction SELECT average(bar) from Transaction SELECT max(baz) from Transaction Copy COMPARE WITH The COMPARE WITH clause is used to compare the values for two different time ranges. This type of query is incompatible with NRQL alerting. We recommend using a Baseline Alert Condition to dynamically detect deviations for a particular signal. SLIDE BY The SLIDE BY clause supports a feature known as sliding windows. With sliding windows, SLIDE BY data is gathered into \"windows\" of time that overlap with each other. These windows can help to smooth out line graphs with a lot of variation in cases where the rolling aggregate (such as a rolling mean) is more important than aggregates from narrow windows of time. Sliding windows are not currently supported in NRQL alerts. LIMIT In NRQL queries, the LIMIT clause is used to control the amount of data a query returns, either the maximum number of facet values returned by FACET queries or the maximum number of items returned by SELECT * queries. LIMIT is not compatible with NRQL alerting: evaluation is always performed on the full result set. NRQL alert threshold examples Here are some common use cases for NRQL alert conditions. These queries will work for static and baseline threshold types. The outlier threshold type will require additional FACET clauses. Alert on specific segments of your data Create constrained alerts that target a specific segment of your data, such as a few key customers or a range of data. Use the WHERE clause to define those conditions. SELECT average(duration) FROM Transaction WHERE account_id in (91290, 102021, 20230) Copy SELECT percentile(duration, 95) FROM Transaction WHERE name LIKE 'Controller/checkout/%' Copy Alert on Nth percentile of your data Create alerts when an Nth percentile of your data hits a specified threshold; for example, maintaining SLA service levels. Since we evaluate the NRQL query in one-minute time windows, percentiles will be calculated for each minute separately. SELECT percentile(duration, 95) FROM Transaction Copy SELECT percentile(databaseDuration, 75) FROM Transaction Copy Alert on max, min, avg of your data Create alerts when your data hits a certain maximum, minimum, or average; for example, ensuring that a duration or response time does not pass a certain threshold. SELECT max(duration) FROM Transaction Copy SELECT average(duration) FROM Transaction Copy Alert on a percentage of your data Create alerts when a proportion of your data goes above or below a certain threshold. SELECT percentage(count(*), WHERE duration > 2) FROM Transaction Copy SELECT percentage(count(*), WHERE httpResponseCode = '500') FROM Transaction Copy Alert on Apdex with any T-value Create alerts on Apdex, applying your own T-value for certain transactions. For example, get an alert notification when your Apdex for a T-value of 500ms on transactions for production apps goes below 0.8. SELECT apdex(duration, t:0.5) FROM Transaction WHERE appName like '%prod%' Copy Alert conditions and query order of operations By default, the aggregation window is 1 minute, but you can change the window to suit your needs. Whatever the aggregation window, New Relic will collect data for that window using the function in the NRQL alert condition’s query. The query is parsed and executed by our systems in the following order: FROM clause – which event type needs to be grabbed? WHERE clause – what can be filtered out? SELECT clause – what information needs to be returned from the now-filtered data set? Example: null value returned Let's say this is your alert condition query: SELECT count(*) FROM SyntheticCheck WHERE monitorName = 'My Cool Monitor' AND result = 'FAILURE' Copy If there are no failures for the aggregation window: The system will execute the FROM clause by grabbing all SyntheticCheck events on your account. Then it will execute the WHERE clause to filter through those events by looking only for the ones that match the monitor name and result specified. If there are still events left to scan through after completing the FROM and WHERE operations, the SELECT clause will be executed. If there are no remaining events, the SELECT clause will not be executed. This means that aggregators like count() and uniqueCount() will never return a zero value. When there is a count of 0, the SELECT clause is ignored and no data is returned, resulting in a value of NULL. Example: zero value returned If you have a data source delivering legitimate numeric zeroes, the query will return zero values and not null values. Let's say this is your alert condition query, and that MyCoolEvent is an attribute that can sometimes return a zero value. SELECT average(MyCoolAttribute) FROM MyCoolEvent Copy If, in the aggregation window being evaluated, there's at least one instance of MyCoolEvent and if the average value of all MyCoolAttribute attributes from that window is equal to zero, then a 0 value will be returned. If there are no MyCoolEvent events during that minute, then a NULL will be returned due to the order of operations. Tip For more information about this topic, you can check out our blog post on troubleshooting for zero versus null values. Tip You can determine how null values will be handled by adjusting loss of signal and gap filling settings in the Alert Conditions UI. Tip You can avoid NULL values entirely with a query order of operations shortcut. Do this by using a filter sub-clause, then including all filter elements within that sub-clause. The main body of the query will run and return data, at which point the SELECT clause will then run and apply the filter elements. The query will return a value of 0 if the filter elements result in no matching data. Here's an example: SELECT filter(count(*), WHERE result = 'SUCCESS' AND monitorName = 'My Favorite Monitor') FROM SyntheticCheck Copy Nested aggregation NRQL alerts Nested aggregation queries are a powerful way to query your data. However, they have a few restrictions that are important to note. Nested queries with a non-faceted innermost query are not currently supported Without a FACET, the inner query produces a single result, giving the outer query nothing to aggregate. If you're using a nested query, make sure your inner query is faceted. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu) ​​​​​ Copy Queries at all levels must have the same aggregation window size With an alert aggregation window of 1 minute, the inner query would produce two smaller windows of 30 seconds. In theory, these two windows could be aggregated by the outer query. However, this is not currently supported. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu TIMESERIES 30 seconds)​​ Copy Signal loss is not yet supported for nested queries For more information on signal loss, see NerdGraph API: Loss of signal and gap filling. Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported You can't use a nested query containing the WITH METRIC_FORMAT in the inner query to create NRQL alert conditions. NRQL condition creation tips Here are some tips for creating and using a NRQL condition: Topic Tips Condition threshold types NRQL condition threshold types include static, baseline, and outlier. Create a description For NRQL conditions, you can create a custom description to add to each violation. Descriptions can be enhanced with variable substitution based on metadata in the specific violation. For details, see Description Query results Queries must return a number. The condition evaluates the returned number against the thresholds you've set. Time period As with all alert conditions, NRQL conditions evaluate one single minute at a time. The implicit SINCE ... UNTIL clause specifying which minute to evaluate is controlled by your Evaluation offset setting. Since very recent data may be incomplete, you may want to query data from 3 minutes ago or longer, especially for: Applications that run on multiple hosts. SyntheticCheck data: Timeouts can take 3 minutes, so 5 minutes or more is recommended. Also, if a query will generate intermittent data, consider using the sum of query results option. Lost signal threshold (loss of signal detection) You can use loss of signal detection to alert on when your data (a telemetry signal) should be considered lost. A signal loss can indicate that a service or entity is no longer online or that a periodic job failed to run. You can also use this to make sure that violations for sporadic data, such as error counts, are closed when no signal is coming in. Advanced signal settings These settings give you options for better handling continuous, streaming data signals that may sometimes be missing. These settings include the aggregation window, the evaluation offset, and an option for filling data gaps. For more on using these, see Advanced signal settings. Condition settings Use the Condition settings to: Create a concise, descriptive condition name. Provide a custom violation description for the condition that will be included in violations and notifications. Add the runbook URL to include your organization's procedures for handling incidents. You may also add this information to the custom violation description. Limits on conditions See the maximum values. Health status NRQL alert conditions don't affect an entity's health status display. Examples For more information, see: Expected NRQL syntax Examples of NRQL condition queries Alert threshold types When you create a NRQL alert, you can choose from different types of thresholds: NRQL alert threshold types Description Static This is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value. Optional: Include a FACET clause. Baseline (Dynamic) Uses a self-adjusting condition based on the past behavior of the monitored values. Uses the same NRQL query form as the static type. Outlier Looks for group behavior and values that are outliers from those groups. Uses the same NRQL query form as the static type, but requires a FACET clause. Sum of query results (limited or intermittent data) Important Available only for static (basic) threshold types. If a query returns intermittent or limited data, it may be difficult to set a meaningful threshold. Missing or limited data will sometimes generate false positives or false negatives. You can use loss of signal, aggregation duration, and gap filling settings to minimize these false notifications. To avoid this problem when using the static threshold type, you can set the selector to sum of query results. This lets you set the alert on an aggregated sum instead of a value from a single harvest cycle. Up to two hours of one-minute data checks can be aggregated. The duration you select determines the width of the rolling sum and the preview chart will update accordingly. Set the loss of signal threshold Loss of signal occurs when no data matches the NRQL condition over a specific period of time. You can set your loss of signal threshold duration and and also what happens when the threshold is crossed. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Loss of signal is only available for NRQL conditions. You may also manage these settings using the GraphQL API (recommended), or the REST API. Go here for specific GraphQL API examples. Loss of signal settings: Loss of signal settings include a time duration and two possible actions. Signal loss expiration time UI label: Signal is lost after: GraphQL Node: expiration.expirationDuration Expiration duration is a timer that starts and resets when we receive a data point in the streaming alerts pipeline. If we don't receive another data point before your 'expiration time' expires, we consider that signal to be lost. This can be because no data is being sent to New Relic or the WHERE clause of your NRQL query is filtering that data out before it is streamed to the alerts pipeline. The loss of signal expiration time is independent of the threshold duration and triggers as soon as the timer expires. The maximum expiration duration is 48 hours. This is helpful when monitoring for the execution of infrequent jobs. The minimum is 30 seconds, but we recommend using at least 3-5 minutes. Loss of signal actions Once a signal is considered lost, you can close open violations, open new violations, or both. Close all current open violations: This closes all open violations that are related to a specific signal. It won't necessarily close all violations for a condition. If you're alerting on an ephemeral service, or on a sporadic signal, you'll want to choose this action to ensure that violations are closed properly. The GraphQL node name for this is \"closeViolationsOnExpiration\" Open new violations: This will open a new violation when the signal is considered lost. These violations will indicate that they are due to a loss of signal. Based on your incident preferences, this should trigger a notification. The graphQL node name for this is \"openViolationOnExpiration\" When you enable both actions, we'll close all open violations first, and then open a new violation for loss of signal. To create a NRQL alert configured with loss of signal detection in the UI: For a policy, when you create a condition, under Select a product, click NRQL, then click Next, define thresholds. Write a NRQL query that returns the values you want to alert on. For Threshold type, select Static or Baseline. Click + Add lost signal threshold, then set the signal expiration duration time in minutes or seconds in the Signal is lost after field. Choose what you want to happen when the signal is lost. You can check one or both of Close all current open violations and Open new \"lost signal\" violation. These control how loss of signal violations will be handled for the condition. Make sure you name your condition before you save it. Violations open due to loss of signal close when the signal comes back. Newly opened lost signal violations will close immediately when new data is evaluated. the condition they belong to expires. By default, conditions expire after 3 days. you manually close the violation with the Close all current open violations option. Tip Loss of signal detection doesn't work on NRQL queries that use nested aggregation or sub-queries. Advanced signal settings When creating a NRQL alert condition, the advanced signal settings gives you better control over streaming alert data and helps you avoid false alarms. When creating a NRQL condition, there are several advanced signal settings: Aggregation window Evaluation offset Fill data gaps To read an explanation of what these settings are and how they relate to each other, see Streaming alerts concepts. Below are instructions and tips on how to configure them. Aggregation window You can set the aggregation window duration to choose how long data is accumulated in a streaming time window before it's aggregated. You can set it to anything between one second and 15 minutes. The default is one minute. Tip Baseline alert condition thresholds don't support editing the aggregation window. They use the 1 minute default. Evaluation offset You can adjust the evaluation offset to coordinate our streaming alerting algorithm with your data's latency. If it takes a while for your data to arrive, then you may need to increase the evaluation offset. The total supported latency is the product of the aggregation window duration multiplied by the evaluation offset. In the example screenshot above, the supported latency is 3 minutes (a 1-minute aggregation window multiplied by three windows). If the data type comes from an APM language agent and is aggregated from many app instances (for example, Transactions, TransactionErrors, etc.), we recommend using an evaluation offset of 3 with 1 minute aggregation windows. Important When creating NRQL conditions for data collected from Infrastructure Cloud Integrations such as AWS Cloudwatch or Azure, we recommend that you start with an evaluation offset of 15 minutes, then adjust up or down depending on how long it takes to collect your data. Fill data gaps Gap filling lets you customize the values to use when your signals don't have any data. You can fill gaps in your data streams with one of these settings: None: (Default) Choose this if you don't want to take any action on empty aggregation windows. On evaluation, an empty aggregation window will reset the threshold duration timer. For example, if a condition says that all aggregation windows must have data points above the threshold for 5 minutes, and 1 of the 5 aggregation windows is empty, then the condition won't be in violation. Custom static value: Choose this if you'd like to insert a custom static value into the empty aggregation windows before they're evaluated. This option has an additional, required parameter of fillValue (as named in the API) that specifies what static value should be used. This defaults to 0. Last known value: This option inserts the last seen value before evaluation occurs. We maintain the state of the last seen value for 2 hours. Tip The alerts system fills gaps in actively reported signals. This signal history is dropped after 2 hours of inactivity. For gap filling, data points received after this period of inactivity are treated as new signals. To learn more about signal loss, gap filling, and how to request access to these features, see this Explorers Hub post. Options for editing data gap settings: In the NRQL conditions UI, go to Condition settings > Advanced signal settings > fill data gaps with and choose an option. If using our Nerdgraph API (preferred), this node is located at: actor : account : alerts : nrqlCondition : signal : fillOption | fillValue NerdGraph is our recommended API for this but if you're using our REST API, you can find this setting in the REST API explorer under the \"signal\" section of the Alert NRQL conditions API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.66144,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create NRQL <em>alert</em> conditions",
        "sections": "<em>Alert</em> conditions <em>and</em> query order of operations",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " a NRQL <em>alert</em> condition for a policy: On one.newrelic.com, in the header click <em>Alerts</em> &amp; AI, then in the left sidebar click Policies. Select an existing policy or click <em>New</em> <em>alert</em> policy to create a <em>new</em> policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define"
      },
      "id": "603ef04864441fbc114e8883"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/get-started/condition-recommendations": [
    {
      "sections": [
        "Set proactive alerts and align teams, tools, and processes for incident response",
        "Prerequisites",
        "1. Define policies",
        "Example questions and KPI solutions",
        "2. Set specific alerts",
        "3. Identify groups",
        "4. Determine thresholds",
        "5. Set notification channels",
        "6. Automate resolution",
        "7. Establish reviews",
        "Example post mortem report",
        "8. Fine-tune process",
        "Expert tip"
      ],
      "title": "Set proactive alerts and align teams, tools, and processes for incident response ",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Optimize your cloud native environment"
      ],
      "external_id": "454d902dd8ff1ace1070b7ad42489dda5405845c",
      "image": "https://docs.newrelic.com/static/ecb7124a85903b58a0fbb042ddb29cc6/c483d/proactive-baseline-alerts-devops_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/optimize-your-cloud-native-environment/set-proactive-alerts-align-teams-tools-processes-incident-response/",
      "published_at": "2021-09-14T06:09:20Z",
      "updated_at": "2021-09-14T06:09:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The term alerting often carries some negative connotations: many developers correlate alerting with errors, mistakes, and ongoing issues. However, developers who are proactive about alerting, know they don't have to stare at dashboards all day because effective alerts tell them when to check in. Well-defined alerts help you understand the health of your systems, so you can respond to performance problems before they affect your customers. Further, a focused alerts policy helps you pinpoint any degradation that could impact performance in your application or environment. With proactive alerting, you'll decrease user-reported incidents, and your teams will spend less time firefighting and more time deploying significant changes to your product. After you define the right alerts, proper incident orchestration aligns your teams, tools, and processes to prepare for incidents and outages in your software. The goal is to provide your teams a predictable framework and process to: Maximize efficiency in communication and effort. Minimize the overall impact to your business. Prerequisites This tutorial assumes you have: Instrumented your applications in New Relic. Reviewed the Establish objectives and baselines tutorial. Optionally added custom attributes and events. 1. Define policies Define required alerting policies based on SLOs. A service level objective (SLO) is an agreed upon means of measuring the performance of your service. The SLO defines a target value of a specified quantitative measure, which is called a service level indicator (SLI). Examples of service level indicators could be average response time, response time percentile, and application availability. SLOs would then clarify a target value for those SLIs such as: Average response time should be less than 200 ms. 95% of requests should be completed within 250 ms. Availability of the service should be 99.99%. These SLOs can also be logically grouped together to provide an overall boolean indicator of whether the service is meeting expectations or not (for example, 95% of requests completed within 250 ms AND availability is 99.99%), which can be helpful for alerting purposes. Use these SLIs as key performance indicators (KPIs) so your team and organization can measure your service and ensure it's meeting customer expectations. By breaking down the quantitative performance metrics that are required of your services, you can then identify what kinds of alerts you should set for each. For instance, you could set an alert to notify you if web transaction times go above half a millisecond, or if the error rate goes higher than 0.20%. However, not every SLO needs to become an alert. A strong alerting strategy takes SLOs and creates a set of simple, actionable alerts. New Relic often finds that our most mature customers set fewer alerts in general and focus those alerts on a core set of metrics that indicate when their customer experience is truly degraded. As a result, New Relic customers often use Apdex as part of their alerting strategy to align alerts with signs of degraded user satisfaction. As you design your alerting strategy, keep this question in mind: “If the customer isn’t impacted, is it worth waking someone up?” Example questions and KPI solutions For a simple framework of areas to set alerts for, use the following questions and advised metrics and KPIs: Questions Metrics and KPIs Are we open for business? Use browser monitoring and APM to alert on site availability. How's our underlying infrastructure? Set KPIs for key hardware, network, and storage components. How's the health of our application? Track metrics for JVM performance, queuing, caching, and similar dependencies. How’s the overall quality of our application? Use an Apdex score to quickly access an application’s quality. How are our customers doing? Consider real end-user metrics (browser or APM), synthetic users (Synthetics), and Apdex scores. How's our overall business doing? Focus on key transactions within an application, and tie them to expected business outcomes to illustrate correlation between your application and business performance. 2. Set specific alerts Set specific alerts for performance, correctness, throughput, availability, and dependencies With New Relic you can set alerts on your instrumented applications, end-user experience, infrastructure, databases, and more. New Relic will alert you if your site's availability dips or if your error rate spikes above acceptable levels, as defined by your SLOs. You can set warning thresholds to monitor issues that may be approaching a critical severity but don't yet warrant a pager notification. Setting thresholds for when alerts should notify teams can be challenging. Thresholds that are too tight will create alert fatigue while thresholds that are too loose will lead to unhappy customers. Baseline alerts allow you to set dynamic thresholds for alerts based on historical performance. Use baselines to tune your alert to the right threshold. For example, an alert in APM can notify incident response teams if web transaction times deviate from historical performance for an allotted amount of time. alerts.newrelic.com > (selected alert policy) > (selected alert condition) > Define thresholds You can set this same kind of alert in browser to catch sub-optimal performance. In the following example, we've set both a warning and a violation for throughput: alerts.newrelic.com > (selected alert policy) > (selected alert condition) > Define thresholds As you develop smaller, independent services running on increasingly ephemeral architectures, your environments become significantly more complex. Visibility into outliers can be an important tool for understanding likely performance issues. You should set alerts to automatically fire when you have an outlier, which can indicate misbehaving hosts, load balancers, or apps. For example, a load balancer divides web traffic across five different servers. You can set an alert based on a NRQL query and receive a notification if any server starts getting significantly more or less traffic than the other servers. Here is an example chart: And here's a sample NRQL query: SELECT average(cpuPercent) FROM SystemSample WHERE apmApplicationNames = 'MY-APP-NAME' FACET hostname Copy Now you have set static, baseline, and outlier alerts. This can provide a comprehensive awareness of your ecosystem. Refer to the New Relic Alerts documentation for more details about optimizing your alerts. 3. Identify groups Identify groups to alert, set broadcasting methods, and assign first responders to team dashboards Alerting without the proper broadcasting methods leaves you vulnerable. Your alerting strategy should include a notification channel to ensure the appropriate teams are notified if your application or architecture encounters issues. New Relic has many notification integrations, but we recommend that you start simple and add more complexity later. We recommend that you first send alerts to a group chat channel (for example, using Slack or PagerDuty). Evaluate these alerts in real time for several weeks to understand which alerts are indicative of important or problematic issues. These are the types of alerts that warrant waking someone up. Recommendation: For each team dashboard, make sure: It has an owner who assumes responsibility for the health of the applications and features it monitors. There is no ambiguity about who is responsible for attending to and resolving an alert condition. This policy will vary between organizations depending on size, structure, and culture. For example, some teams may prefer to assign dashboards and alerts based on de-facto features or application ownership. Other teams may prefer to adopt an on-call rotation (often referred to as pager duty). In on-call rotations, designated team members handle all first-line incident responses, and they resolve or delegate responsibilities based on predetermined incident thresholds. 4. Determine thresholds Determine incident thresholds for alert conditions For each of your applications: Identify the thresholds for what is officially considered an incident. Make sure each set of threshold criteria is context-dependent. Document incident evaluation and known remediation procedures in runbooks. Include links to your runbooks when you define conditions and thresholds for your alert policies. For instance, a certain alert condition may be dismissable during low-traffic periods but require active remediation during peak hours. 5. Set notification channels Ensure alerts have auditable notification channels Make sure that communications during critical incidents take place in easily accessible and highly visible channels. A group chat room dedicated to incident communication is usually a great choice. This allows all stakeholders to participate or observe and provides a chronology of notifications, key decisions, and actions for postmortem analysis. Use any of the available notification channels in New Relic Alerts. For example, to set up a notification channel in Slack: Make sure your organization has completed New Relic's integration requirements with Slack. In the Slack app, select the dropdown in the top-left corner of the app, and select Customize Slack. Click Configure apps. From the list of app integrations, select New Relic. Expand the instructions for New Relic Alerts, and follow the steps to configure notifications from New Relic. 6. Automate resolution Automate triage and resolution steps Automation of simple or repeatable incident response tasks will increase efficiency and minimize the impact of incidents. With proper automation in place, you can disable or isolate faulty application components as soon as an alert threshold is reached, rather than after a notification has been issued. For example, a team managing an application for a digital media company wants to be able to remove commenting abilities from the website if the system has errors. In this case, they could: Add an endpoint to their front-end web application that will toggle a feature flag enabling or disabling the UI components associated with posting comments on an article. Create an alert policy with a threshold set on the sustained error rate in the commenting service. Assign a webhook notification channel that will send a POST request to this endpoint, as well as to the standard team notification channels. In this scenario, errors in the commenting system will trigger the webhook and remove the commenting UI from the website. Users can still use core functionality of the site without seeing errors generated by the commenting service. The application will maintain a stable but degraded state, allowing the team to focus on recovery without the pressure of preventing users from accessing the site. You can also use webhooks to create issues and action items in ticketing systems that have REST APIs, such as Zendesk. Use New Relic Alerts to create a webhook notification channel, and customize the webhook payload as needed. New Relic also provides integrations for common ticketing systems. You can use any of these integrations to file tickets from APM. 7. Establish reviews Establish a post mortem process After the incident has been resolved, key stakeholders and participants must capture accurate and thorough documentation of the incident. At a minimum, we recommend that the retro documentation includes: A root cause analysis A chronology and summary of remediation steps and their result, whether they were successful or not A measure of the impact to the business in terms of user experience and financial losses, if possible Recommendations for system or feature improvements to prevent a recurrence Recommendations for process and communication improvements Store post mortem reports in a highly visible, searchable repository, such as a shared drive folder or wiki. Culturally, it's essential that this process focuses on constructive learning and improvement rather than punishment or blame. Example post mortem report Here is a brief example of a post mortem report: Post mortem Comments Date March 1, 2018 Executive summary From approximately 1:45PM until 2:30PM, users could not add items to their carts, which prevented any checkouts from occurring during the incident period. Root cause We determined that a change was made to the CSS rules on the product detail page that effectively disabled the Add to cart button. Timeline 1:50PM: Successful checkouts < 10 for 5 minutes alert triggered; assigned to Alice. 1:55PM: After reviewing the ecommerce team dashboard, Alice determined that the threshold was breached immediately following a deploy by Bob. She notified him of the incident. 2:00PM: Alice and Bob began troubleshooting. Attempts at recreating the issue in production were successful. 2:20PM: Bob determined that his change to the CSS on the product detail page disabled the Add to cart button. He deployed a hotfix. 2:30PM: Functionality was restored and the incident was resolved. Impact No checkouts were completed during the duration of the incident. Our typical revenue for a Thursday during this timeframe is $30,000. Recommendations We have been discussing implementing New Relic Synthetics for awhile now. If we had a Synthetic check on the checkout process, this issue would have been detected immediately. We should also implement more thorough unit tests in the front-end web app. 8. Fine-tune process Fine-tune alerts and thresholds As you use New Relic to optimize your application and infrastructure performance, tighten your New Relic Alerts policy conditions to keep pace with your improved performance. When rolling out new code or modifications that could negatively impact performance over a period of time, loosen your threshold conditions to allow for these short-term changes. For instance, we recommend using pre-established baselines and thresholds to increase efficiency during high-impact times for your business, such as annual events and major releases. Fine-tuning gives you the flexibility you need to increase efficiencies and extend your notification channels. As noted earlier, we recommend you start with a group chat service when you first establish notifications. Once you've identified other tools you'd like to integrate with, set up a notification channel to maintain your momentum. Tools such as xMatters and PagerDuty provide popular integrations, but don't overlook simple methods, such as webhooks. The goal is to continuously improve your alerting scheme. Be sure to check your alerts and confirm that they're firing regularly and are still relevant for your customer satisfaction metrics. Use the New Relic platform to create dashboards centered around alerts and incidents for the most common policy conditions and violations. insights.newrelic.com > All dashboards > (selected dashboard) Use the New Relic query language and the Insights query API to create your dashboards. The dashboard above was created using the following NRQL queries. It's recommended you recreate them as needed for your alerting dashboards. Incidents by condition: SELECT count(*) FROM ALERT_NAME WHERE current_state = 'open' FACET condition_name SINCE 1 week ago Copy Incidents by policy: SELECT count(*) FROM ALERT_NAME where current_state = 'open' FACET policy_name SINCE 60 MINUTES AGO TIMESERIES Copy Alert trends over time: SELECT count(*) FROM ALERT_NAME WHERE current_state IS NOT NULL FACET policy_name SINCE 1 week ago TIMESERIES Copy Incident details: SELECT timestamp, incident_id, policy_name, condition_name, details, severity FROM ALERT_NAME SINCE 1 week ago LIMIT 40 Copy Visualizing this data provides a resource you can share with others to refine the alerts and thresholds you're using. Expert tip In addition to instrumenting and measuring application and infrastructure metrics, mature DevOps organizations often measure and optimize the efficiency of incident response processes. For example, you can use webhooks to send alert events to New Relic Insights. This allows you to supplement your team dashboards with New Relic Alerts data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.3884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". At a minimum, we <em>recommend</em> that the retro documentation includes: A root cause analysis A chronology and summary of remediation steps and their result, whether they were successful or not A measure of the impact to the business in terms of user experience and financial losses, if possible <em>Recommendations</em>"
      },
      "id": "603ebf0be7b9d2b3982a07a9"
    },
    {
      "sections": [
        "Errors while using other APM software",
        "Problem",
        "Solution"
      ],
      "title": "Errors while using other APM software",
      "type": "docs",
      "tags": [
        "APM",
        "Troubleshooting"
      ],
      "external_id": "585c393ba05316bfb72d665760e1cb2d7e0e0631",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/troubleshooting/errors-while-using-other-apm-software/",
      "published_at": "2021-09-14T10:19:01Z",
      "updated_at": "2021-09-14T10:19:00Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem When other monitoring software is running alongside one of our APM agents, we cannot guarantee that our agents will work correctly. In some cases, running more than one type of APM software can cause issues such as unreliable metrics and agent crashes. For specifics, see the requirements and compatibility documentation for a specific APM agent. Solution If you think that running other monitoring software might be causing an issue, here are some recommendations: Read the requirements and compatibility documentation for the APM agent you're using. To troubleshoot if this is causing an issue, temporarily disable or uninstall other APM software to see if the issue is still present.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.00212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " and compatibility documentation for a specific APM agent. Solution If you think that running other monitoring software might be causing an issue, here are some <em>recommendations</em>: Read the requirements and compatibility documentation for the APM agent you&#x27;re using. To troubleshoot if this is causing an issue, temporarily disable or uninstall other APM software to see if the issue is still present."
      },
      "id": "603ea87828ccbc65f2eba74a"
    },
    {
      "image": "https://docs.newrelic.com/static/2ddf926e6e8fbdbcd9ee04a60e75c38b/ae694/add-alert.png",
      "url": "https://docs.newrelic.com/whats-new/2021/07/alert-conditions/",
      "sections": [
        "Recommended Alert Conditions",
        "Using recommended conditions"
      ],
      "published_at": "2021-09-14T10:49:04Z",
      "title": "Recommended Alert Conditions",
      "updated_at": "2021-07-26T13:38:19Z",
      "type": "docs",
      "external_id": "3a955d434afd832f8115e0274596f78045c9e6ea",
      "document_type": "nr1_announcement",
      "popularity": 1,
      "body": "Configuring incident detection consistently across your entire estate helps you track the overall health of your systems, avoid blindspots, and reduce the time it takes to identify and resolve issues. We know that creating accurate alert conditions is anything but simple. Knowing which metrics to monitor, and setting the thresholds accordingly, is a task that few have the necessary knowledge of both their systems and of New Relic to feel confident executing. This results in teams only applying incident detection practices to a subset of critical services. Good news: New Relic One now has an alert condition recommendation service that uses AI and machine learning (ML) to recommend specific metrics and signals to monitor for your specific entities. You can use the provided recommendations or modify them to fit your specific needs. Here’s how you can add recommended alerts to APM entities that do not currently have alert coverage. Using recommended conditions Go to Services - APM in New Relic Navigator and you’ll see a high-density view of the health of your system. With the traffic-light visual, it’s easy to view which entities are healthy, which entities have violations, and which entities do not have any alerts coverage. If an entity does not have alert coverage, its hexagon will be gray. Recommended conditions helps you automatically add alerts to entities that do not have alerts coverage, those gray hexagons. Select an entity: Click an uncovered entity (gray hexagon). A new option will appear on the right-hand side of the screen. Click Create alert condition as shown in the image below. Choose a number of recommended conditions. The recommendations will depend on the quality of the tags associated with an entity. The more accurate and informative the tags are, the more precise the recommendations will be. The image below shows a few possible recommendations based on error percentage, Apdex, and response time. Learn more about recent innovations in alerting with our PM Brian Goleno here!.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.4499,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Recommended</em> Alert <em>Conditions</em>",
        "sections": "<em>Recommended</em> Alert <em>Conditions</em>",
        "body": " an alert <em>condition</em> recommendation service that uses AI and machine learning (ML) to <em>recommend</em> specific metrics and signals to monitor for your specific entities. You can use the provided <em>recommendations</em> or modify them to fit your specific needs. Here’s how you can add recommended alerts to APM entities"
      },
      "id": "60febacb64441f990447ac4f"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/get-started/introduction-applied-intelligence": [
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.77573,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Define custom metrics for an <em>alert</em> condition",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Create NRQL alert conditions",
        "Tip",
        "Create a NRQL alert condition",
        "Create a condition from a chart",
        "Caution",
        "NRQL alert syntax",
        "Important",
        "Reformatting incompatible NRQL",
        "NRQL alert threshold examples",
        "Alert on specific segments of your data",
        "Alert on Nth percentile of your data",
        "Alert on max, min, avg of your data",
        "Alert on a percentage of your data",
        "Alert on Apdex with any T-value",
        "Alert conditions and query order of operations",
        "Example: null value returned",
        "Example: zero value returned",
        "Nested aggregation NRQL alerts",
        "Nested queries with a non-faceted innermost query are not currently supported",
        "Queries at all levels must have the same aggregation window size",
        "Signal loss is not yet supported for nested queries",
        "Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported",
        "NRQL condition creation tips",
        "Alert threshold types",
        "Sum of query results (limited or intermittent data)",
        "Set the loss of signal threshold",
        "Advanced signal settings",
        "Aggregation window",
        "Evaluation offset",
        "Fill data gaps"
      ],
      "title": "Create NRQL alert conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "2872f770a5fc8a802f99b9f848906f7e351ad761",
      "image": "https://docs.newrelic.com/static/eb8e1b2d826f9fd9cf46fe3dd5455217/c1b63/nr1_nrql_alert_conditions.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/",
      "published_at": "2021-09-14T07:20:17Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use NRQL queries to create alert conditions. Once you've defined your signal, you can further define your warning and critical threshold levels. This determines when an alerts violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Click NRQL, and then Next, define thresholds. Tip For more information on key concepts relating to NRQL alert conditions and streaming alerts, see Streaming alerts: key terms and concepts. Create a NRQL alert condition To create a NRQL alert condition for a policy: On one.newrelic.com, in the header click Alerts & AI, then in the left sidebar click Policies. Select an existing policy or click New alert policy to create a new policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define thresholds. Create a condition from a chart You can use a chart to create a NRQL alert condition. To create a NRQL alerts condition from a chart, click the chart menu , then click Create alert condition. Once you've named and customized your condition, you can add it to an existing policy or create a new one. Caution A small number of our older charts don't include the option to create an alert condition. NRQL alert syntax Here's the basic syntax for creating all NRQL alert conditions. The FACET clause is required for outlier threshold types. It's optional for static and baseline. SELECT function(attribute) FROM Event WHERE attribute [comparison] [AND|OR ...] Copy Clause Notes SELECT function(attribute) Required Supported functions that return numbers include: apdex average count latest max min percentage percentile sum uniqueCount Tip If you use the percentile aggregator in a faceted alert condition with many facets, this may cause the following error to appear: An error occurred while fetching chart data. If you see this error, use average instead. FROM data type Required Only one data type can be targeted. Supported data types: Event Metric (RAW data points will be returned) WHERE attribute [comparison] [AND|OR ...] Use the WHERE clause to specify a series of one or more conditions. All the operators are supported. FACET attribute Required for outlier conditions Include an optional FACET clause in your NRQL syntax depending on the threshold type: static or baseline. Use the FACET clause to separate your results by attribute and alert on each attribute independently. No LIMIT clause is allowed, but all queries will receive the maximum number of facets possible. Faceted queries can return a maximum of 5000 values for static and baseline conditions and a maximum of 500 values for outlier conditions. Important If the query returns more than the maximum number of values, the alert condition can't be created. If you create the condition and the query returns more than this number later, the alert will fail. Modify your query so that it returns a fewer number of values. Reformatting incompatible NRQL Some elements of NRQL used in charts don’t make sense in the streaming context of alerts. Here’s a list of the most common incompatible elements and suggestions for reformatting a NRQL alert query to achieve the same effect. Element Notes SINCE and UNTIL Example: SELECT percentile(largestContentfulPaint, 75) FROM PageViewTiming WHERE (appId = 837807) SINCE yesterday Copy NRQL Alerting produces a never-ending stream of windowed query results, so the SINCE and UNTIL keywords to scope the query to a point in time are not compatible. As a convenience, we automatically strip SINCE and UNTIL from a query when creating a NRQL Alert Condition from the context of a chart. TIMESERIES In NRQL queries, the TIMESERIES clause is used to return data as a time series broken out by a specified period of time. For NRQL alerts, the equivalent property of a signal is the aggregation window. histogram() The histogram() aggregation function is used to generate histograms. histogram() is not compatible with NRQL alerting: histogram aggregations can not be formatted as a time series. To create an alert from a portion of a histogram (e.g. 95th percentile), use the percentile() aggregation function. Multiple Aggregation Functions Each alert condition can only target a single aggregated stream of data. To alert on multiple streams simultaneously, you’ll need to decompose them into individual conditions within the same policy. Original Query: SELECT count(foo), average(bar), max(baz) from Transaction Copy Decomposed: SELECT count(foo) from Transaction SELECT average(bar) from Transaction SELECT max(baz) from Transaction Copy COMPARE WITH The COMPARE WITH clause is used to compare the values for two different time ranges. This type of query is incompatible with NRQL alerting. We recommend using a Baseline Alert Condition to dynamically detect deviations for a particular signal. SLIDE BY The SLIDE BY clause supports a feature known as sliding windows. With sliding windows, SLIDE BY data is gathered into \"windows\" of time that overlap with each other. These windows can help to smooth out line graphs with a lot of variation in cases where the rolling aggregate (such as a rolling mean) is more important than aggregates from narrow windows of time. Sliding windows are not currently supported in NRQL alerts. LIMIT In NRQL queries, the LIMIT clause is used to control the amount of data a query returns, either the maximum number of facet values returned by FACET queries or the maximum number of items returned by SELECT * queries. LIMIT is not compatible with NRQL alerting: evaluation is always performed on the full result set. NRQL alert threshold examples Here are some common use cases for NRQL alert conditions. These queries will work for static and baseline threshold types. The outlier threshold type will require additional FACET clauses. Alert on specific segments of your data Create constrained alerts that target a specific segment of your data, such as a few key customers or a range of data. Use the WHERE clause to define those conditions. SELECT average(duration) FROM Transaction WHERE account_id in (91290, 102021, 20230) Copy SELECT percentile(duration, 95) FROM Transaction WHERE name LIKE 'Controller/checkout/%' Copy Alert on Nth percentile of your data Create alerts when an Nth percentile of your data hits a specified threshold; for example, maintaining SLA service levels. Since we evaluate the NRQL query in one-minute time windows, percentiles will be calculated for each minute separately. SELECT percentile(duration, 95) FROM Transaction Copy SELECT percentile(databaseDuration, 75) FROM Transaction Copy Alert on max, min, avg of your data Create alerts when your data hits a certain maximum, minimum, or average; for example, ensuring that a duration or response time does not pass a certain threshold. SELECT max(duration) FROM Transaction Copy SELECT average(duration) FROM Transaction Copy Alert on a percentage of your data Create alerts when a proportion of your data goes above or below a certain threshold. SELECT percentage(count(*), WHERE duration > 2) FROM Transaction Copy SELECT percentage(count(*), WHERE httpResponseCode = '500') FROM Transaction Copy Alert on Apdex with any T-value Create alerts on Apdex, applying your own T-value for certain transactions. For example, get an alert notification when your Apdex for a T-value of 500ms on transactions for production apps goes below 0.8. SELECT apdex(duration, t:0.5) FROM Transaction WHERE appName like '%prod%' Copy Alert conditions and query order of operations By default, the aggregation window is 1 minute, but you can change the window to suit your needs. Whatever the aggregation window, New Relic will collect data for that window using the function in the NRQL alert condition’s query. The query is parsed and executed by our systems in the following order: FROM clause – which event type needs to be grabbed? WHERE clause – what can be filtered out? SELECT clause – what information needs to be returned from the now-filtered data set? Example: null value returned Let's say this is your alert condition query: SELECT count(*) FROM SyntheticCheck WHERE monitorName = 'My Cool Monitor' AND result = 'FAILURE' Copy If there are no failures for the aggregation window: The system will execute the FROM clause by grabbing all SyntheticCheck events on your account. Then it will execute the WHERE clause to filter through those events by looking only for the ones that match the monitor name and result specified. If there are still events left to scan through after completing the FROM and WHERE operations, the SELECT clause will be executed. If there are no remaining events, the SELECT clause will not be executed. This means that aggregators like count() and uniqueCount() will never return a zero value. When there is a count of 0, the SELECT clause is ignored and no data is returned, resulting in a value of NULL. Example: zero value returned If you have a data source delivering legitimate numeric zeroes, the query will return zero values and not null values. Let's say this is your alert condition query, and that MyCoolEvent is an attribute that can sometimes return a zero value. SELECT average(MyCoolAttribute) FROM MyCoolEvent Copy If, in the aggregation window being evaluated, there's at least one instance of MyCoolEvent and if the average value of all MyCoolAttribute attributes from that window is equal to zero, then a 0 value will be returned. If there are no MyCoolEvent events during that minute, then a NULL will be returned due to the order of operations. Tip For more information about this topic, you can check out our blog post on troubleshooting for zero versus null values. Tip You can determine how null values will be handled by adjusting loss of signal and gap filling settings in the Alert Conditions UI. Tip You can avoid NULL values entirely with a query order of operations shortcut. Do this by using a filter sub-clause, then including all filter elements within that sub-clause. The main body of the query will run and return data, at which point the SELECT clause will then run and apply the filter elements. The query will return a value of 0 if the filter elements result in no matching data. Here's an example: SELECT filter(count(*), WHERE result = 'SUCCESS' AND monitorName = 'My Favorite Monitor') FROM SyntheticCheck Copy Nested aggregation NRQL alerts Nested aggregation queries are a powerful way to query your data. However, they have a few restrictions that are important to note. Nested queries with a non-faceted innermost query are not currently supported Without a FACET, the inner query produces a single result, giving the outer query nothing to aggregate. If you're using a nested query, make sure your inner query is faceted. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu) ​​​​​ Copy Queries at all levels must have the same aggregation window size With an alert aggregation window of 1 minute, the inner query would produce two smaller windows of 30 seconds. In theory, these two windows could be aggregated by the outer query. However, this is not currently supported. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu TIMESERIES 30 seconds)​​ Copy Signal loss is not yet supported for nested queries For more information on signal loss, see NerdGraph API: Loss of signal and gap filling. Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported You can't use a nested query containing the WITH METRIC_FORMAT in the inner query to create NRQL alert conditions. NRQL condition creation tips Here are some tips for creating and using a NRQL condition: Topic Tips Condition threshold types NRQL condition threshold types include static, baseline, and outlier. Create a description For NRQL conditions, you can create a custom description to add to each violation. Descriptions can be enhanced with variable substitution based on metadata in the specific violation. For details, see Description Query results Queries must return a number. The condition evaluates the returned number against the thresholds you've set. Time period As with all alert conditions, NRQL conditions evaluate one single minute at a time. The implicit SINCE ... UNTIL clause specifying which minute to evaluate is controlled by your Evaluation offset setting. Since very recent data may be incomplete, you may want to query data from 3 minutes ago or longer, especially for: Applications that run on multiple hosts. SyntheticCheck data: Timeouts can take 3 minutes, so 5 minutes or more is recommended. Also, if a query will generate intermittent data, consider using the sum of query results option. Lost signal threshold (loss of signal detection) You can use loss of signal detection to alert on when your data (a telemetry signal) should be considered lost. A signal loss can indicate that a service or entity is no longer online or that a periodic job failed to run. You can also use this to make sure that violations for sporadic data, such as error counts, are closed when no signal is coming in. Advanced signal settings These settings give you options for better handling continuous, streaming data signals that may sometimes be missing. These settings include the aggregation window, the evaluation offset, and an option for filling data gaps. For more on using these, see Advanced signal settings. Condition settings Use the Condition settings to: Create a concise, descriptive condition name. Provide a custom violation description for the condition that will be included in violations and notifications. Add the runbook URL to include your organization's procedures for handling incidents. You may also add this information to the custom violation description. Limits on conditions See the maximum values. Health status NRQL alert conditions don't affect an entity's health status display. Examples For more information, see: Expected NRQL syntax Examples of NRQL condition queries Alert threshold types When you create a NRQL alert, you can choose from different types of thresholds: NRQL alert threshold types Description Static This is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value. Optional: Include a FACET clause. Baseline (Dynamic) Uses a self-adjusting condition based on the past behavior of the monitored values. Uses the same NRQL query form as the static type. Outlier Looks for group behavior and values that are outliers from those groups. Uses the same NRQL query form as the static type, but requires a FACET clause. Sum of query results (limited or intermittent data) Important Available only for static (basic) threshold types. If a query returns intermittent or limited data, it may be difficult to set a meaningful threshold. Missing or limited data will sometimes generate false positives or false negatives. You can use loss of signal, aggregation duration, and gap filling settings to minimize these false notifications. To avoid this problem when using the static threshold type, you can set the selector to sum of query results. This lets you set the alert on an aggregated sum instead of a value from a single harvest cycle. Up to two hours of one-minute data checks can be aggregated. The duration you select determines the width of the rolling sum and the preview chart will update accordingly. Set the loss of signal threshold Loss of signal occurs when no data matches the NRQL condition over a specific period of time. You can set your loss of signal threshold duration and and also what happens when the threshold is crossed. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Loss of signal is only available for NRQL conditions. You may also manage these settings using the GraphQL API (recommended), or the REST API. Go here for specific GraphQL API examples. Loss of signal settings: Loss of signal settings include a time duration and two possible actions. Signal loss expiration time UI label: Signal is lost after: GraphQL Node: expiration.expirationDuration Expiration duration is a timer that starts and resets when we receive a data point in the streaming alerts pipeline. If we don't receive another data point before your 'expiration time' expires, we consider that signal to be lost. This can be because no data is being sent to New Relic or the WHERE clause of your NRQL query is filtering that data out before it is streamed to the alerts pipeline. The loss of signal expiration time is independent of the threshold duration and triggers as soon as the timer expires. The maximum expiration duration is 48 hours. This is helpful when monitoring for the execution of infrequent jobs. The minimum is 30 seconds, but we recommend using at least 3-5 minutes. Loss of signal actions Once a signal is considered lost, you can close open violations, open new violations, or both. Close all current open violations: This closes all open violations that are related to a specific signal. It won't necessarily close all violations for a condition. If you're alerting on an ephemeral service, or on a sporadic signal, you'll want to choose this action to ensure that violations are closed properly. The GraphQL node name for this is \"closeViolationsOnExpiration\" Open new violations: This will open a new violation when the signal is considered lost. These violations will indicate that they are due to a loss of signal. Based on your incident preferences, this should trigger a notification. The graphQL node name for this is \"openViolationOnExpiration\" When you enable both actions, we'll close all open violations first, and then open a new violation for loss of signal. To create a NRQL alert configured with loss of signal detection in the UI: For a policy, when you create a condition, under Select a product, click NRQL, then click Next, define thresholds. Write a NRQL query that returns the values you want to alert on. For Threshold type, select Static or Baseline. Click + Add lost signal threshold, then set the signal expiration duration time in minutes or seconds in the Signal is lost after field. Choose what you want to happen when the signal is lost. You can check one or both of Close all current open violations and Open new \"lost signal\" violation. These control how loss of signal violations will be handled for the condition. Make sure you name your condition before you save it. Violations open due to loss of signal close when the signal comes back. Newly opened lost signal violations will close immediately when new data is evaluated. the condition they belong to expires. By default, conditions expire after 3 days. you manually close the violation with the Close all current open violations option. Tip Loss of signal detection doesn't work on NRQL queries that use nested aggregation or sub-queries. Advanced signal settings When creating a NRQL alert condition, the advanced signal settings gives you better control over streaming alert data and helps you avoid false alarms. When creating a NRQL condition, there are several advanced signal settings: Aggregation window Evaluation offset Fill data gaps To read an explanation of what these settings are and how they relate to each other, see Streaming alerts concepts. Below are instructions and tips on how to configure them. Aggregation window You can set the aggregation window duration to choose how long data is accumulated in a streaming time window before it's aggregated. You can set it to anything between one second and 15 minutes. The default is one minute. Tip Baseline alert condition thresholds don't support editing the aggregation window. They use the 1 minute default. Evaluation offset You can adjust the evaluation offset to coordinate our streaming alerting algorithm with your data's latency. If it takes a while for your data to arrive, then you may need to increase the evaluation offset. The total supported latency is the product of the aggregation window duration multiplied by the evaluation offset. In the example screenshot above, the supported latency is 3 minutes (a 1-minute aggregation window multiplied by three windows). If the data type comes from an APM language agent and is aggregated from many app instances (for example, Transactions, TransactionErrors, etc.), we recommend using an evaluation offset of 3 with 1 minute aggregation windows. Important When creating NRQL conditions for data collected from Infrastructure Cloud Integrations such as AWS Cloudwatch or Azure, we recommend that you start with an evaluation offset of 15 minutes, then adjust up or down depending on how long it takes to collect your data. Fill data gaps Gap filling lets you customize the values to use when your signals don't have any data. You can fill gaps in your data streams with one of these settings: None: (Default) Choose this if you don't want to take any action on empty aggregation windows. On evaluation, an empty aggregation window will reset the threshold duration timer. For example, if a condition says that all aggregation windows must have data points above the threshold for 5 minutes, and 1 of the 5 aggregation windows is empty, then the condition won't be in violation. Custom static value: Choose this if you'd like to insert a custom static value into the empty aggregation windows before they're evaluated. This option has an additional, required parameter of fillValue (as named in the API) that specifies what static value should be used. This defaults to 0. Last known value: This option inserts the last seen value before evaluation occurs. We maintain the state of the last seen value for 2 hours. Tip The alerts system fills gaps in actively reported signals. This signal history is dropped after 2 hours of inactivity. For gap filling, data points received after this period of inactivity are treated as new signals. To learn more about signal loss, gap filling, and how to request access to these features, see this Explorers Hub post. Options for editing data gap settings: In the NRQL conditions UI, go to Condition settings > Advanced signal settings > fill data gaps with and choose an option. If using our Nerdgraph API (preferred), this node is located at: actor : account : alerts : nrqlCondition : signal : fillOption | fillValue NerdGraph is our recommended API for this but if you're using our REST API, you can find this setting in the REST API explorer under the \"signal\" section of the Alert NRQL conditions API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.66129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create NRQL <em>alert</em> conditions",
        "sections": "<em>Alert</em> conditions <em>and</em> query order of operations",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " a NRQL <em>alert</em> condition for a policy: On one.newrelic.com, in the header click <em>Alerts</em> &amp; AI, then in the left sidebar click Policies. Select an existing policy or click <em>New</em> <em>alert</em> policy to create a <em>new</em> policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define"
      },
      "id": "603ef04864441fbc114e8883"
    },
    {
      "sections": [
        "Expanded anomaly detection",
        "Important",
        "Requirements",
        "Why it matters",
        "Get started with anomaly detection",
        "Detect anomalies with a faceted NRQL query",
        "See your anomalies in one place",
        "Tip",
        "Query anomaly data",
        "Reduce the number of detected anomalies"
      ],
      "title": "Expanded anomaly detection",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "Applied intelligence",
        "Proactive detection"
      ],
      "external_id": "0b07c0b6ce27f39b5edb3e112a0f949835cbb8c6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/applied-intelligence/proactive-detection/expanded-anomaly-detection/",
      "published_at": "2021-09-14T10:33:48Z",
      "updated_at": "2021-09-14T10:33:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This feature is a limited release. We’ve expanded anomaly detection coverage beyond your APM applications. Configure anomaly detection for your browser applications, mobile applications, infrastructure hosts, and nearly anything you want to monitor. Requirements Expanded anomaly detection is available as a limited beta. You can request access here. Why it matters When starting to configure alert conditions for a variety of applications and hosts, it can be difficult to know what you’ll want to be notified about ahead of time. Anomaly detection helps you distinguish between what’s typical performance in your system and where you’re starting to have trouble. Instead of creating your alert conditions manually, you can simply tell us what you want to monitor. Anomaly detection will help you identify baseline performance in your system and flags anomalous activity in your system. Get started with anomaly detection To get started with expanded anomaly detection: From one.newrelic.com, go to Alerts & AI > Proactive Detection > Settings. Click the Custom tab, and then click + Add a configuration. Select the account you want to use to record anomaly data, then select the workload or entities you’d like to monitor. Select the detection sensitivity. We recommend Low sensitivity so that you don’t see too many anomalies. Finally, name your configuration and save. Detect anomalies with a faceted NRQL query To detect anomalies with a faceted NRQL query: From one.newrelic.com, go to Alerts & AI > Proactive Detection > Settings. Click the Custom tab, and then click + Add a configuration. Click Use a query instead. You may need to select an account, if you have more than one. Add one or more queries with a FACET clause. Name the query and confirm the facets you want to monitor for anomalies. Select the detection sensitivity. We recommend Low sensitivity so that you don’t see too many anomalies. Finally, name the configuration and save. See your anomalies in one place When you set up anomaly detection, New Relic starts analyzing the golden signals of your entities and workloads. Anomalies appear in your activity feeds throughout New Relic One and the Anomalies tab as soon as they’re detected. Click any anomaly to get more detail about it, including analysis and context for the anomaly. Tip For this limited release, anomaly detection won’t generate notifications. However, you can configure a NRQL alert condition for the NrAiAnomaly event. To view anomalies, from one.newrelic.com, go to Alerts & AI > Issues & activity > Anomalies. Query anomaly data Detected anomalies are written to the NrAiAnomaly event in your NRDB account. You can learn more about this event and how to query it here. Reduce the number of detected anomalies If you’re seeing too many anomalies, the first step is to make sure your sensitivity level is set to Low. If it’s already set to Low, you can define specific thresholds to distinguish between normal and anomalous behavior. To define custom thresholds: From one.newrelic.com, go to Alerts & AI > Proactive Detection > Settings. Click the Custom tab and the configuration you want to modify. Select an entity or workload, and then change the sensitivity level. You can use custom sensitivity to define specific thresholds for different entity types.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 199.50952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Get</em> <em>started</em> with anomaly detection",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": ". <em>Get</em> <em>started</em> with anomaly detection To <em>get</em> <em>started</em> with expanded anomaly detection: From one.newrelic.com, go to <em>Alerts</em> &amp; AI &gt; Proactive Detection &gt; Settings. Click the Custom tab, and then click + Add a configuration. Select the account you want to use to record anomaly data, then select the workload"
      },
      "id": "60b5124064441ff965e2cb01"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/get-started/your-first-nrql-condition": [
    {
      "sections": [
        "Create NRQL alert conditions",
        "Tip",
        "Create a NRQL alert condition",
        "Create a condition from a chart",
        "Caution",
        "NRQL alert syntax",
        "Important",
        "Reformatting incompatible NRQL",
        "NRQL alert threshold examples",
        "Alert on specific segments of your data",
        "Alert on Nth percentile of your data",
        "Alert on max, min, avg of your data",
        "Alert on a percentage of your data",
        "Alert on Apdex with any T-value",
        "Alert conditions and query order of operations",
        "Example: null value returned",
        "Example: zero value returned",
        "Nested aggregation NRQL alerts",
        "Nested queries with a non-faceted innermost query are not currently supported",
        "Queries at all levels must have the same aggregation window size",
        "Signal loss is not yet supported for nested queries",
        "Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported",
        "NRQL condition creation tips",
        "Alert threshold types",
        "Sum of query results (limited or intermittent data)",
        "Set the loss of signal threshold",
        "Advanced signal settings",
        "Aggregation window",
        "Evaluation offset",
        "Fill data gaps"
      ],
      "title": "Create NRQL alert conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "2872f770a5fc8a802f99b9f848906f7e351ad761",
      "image": "https://docs.newrelic.com/static/eb8e1b2d826f9fd9cf46fe3dd5455217/c1b63/nr1_nrql_alert_conditions.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/",
      "published_at": "2021-09-14T07:20:17Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use NRQL queries to create alert conditions. Once you've defined your signal, you can further define your warning and critical threshold levels. This determines when an alerts violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Click NRQL, and then Next, define thresholds. Tip For more information on key concepts relating to NRQL alert conditions and streaming alerts, see Streaming alerts: key terms and concepts. Create a NRQL alert condition To create a NRQL alert condition for a policy: On one.newrelic.com, in the header click Alerts & AI, then in the left sidebar click Policies. Select an existing policy or click New alert policy to create a new policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define thresholds. Create a condition from a chart You can use a chart to create a NRQL alert condition. To create a NRQL alerts condition from a chart, click the chart menu , then click Create alert condition. Once you've named and customized your condition, you can add it to an existing policy or create a new one. Caution A small number of our older charts don't include the option to create an alert condition. NRQL alert syntax Here's the basic syntax for creating all NRQL alert conditions. The FACET clause is required for outlier threshold types. It's optional for static and baseline. SELECT function(attribute) FROM Event WHERE attribute [comparison] [AND|OR ...] Copy Clause Notes SELECT function(attribute) Required Supported functions that return numbers include: apdex average count latest max min percentage percentile sum uniqueCount Tip If you use the percentile aggregator in a faceted alert condition with many facets, this may cause the following error to appear: An error occurred while fetching chart data. If you see this error, use average instead. FROM data type Required Only one data type can be targeted. Supported data types: Event Metric (RAW data points will be returned) WHERE attribute [comparison] [AND|OR ...] Use the WHERE clause to specify a series of one or more conditions. All the operators are supported. FACET attribute Required for outlier conditions Include an optional FACET clause in your NRQL syntax depending on the threshold type: static or baseline. Use the FACET clause to separate your results by attribute and alert on each attribute independently. No LIMIT clause is allowed, but all queries will receive the maximum number of facets possible. Faceted queries can return a maximum of 5000 values for static and baseline conditions and a maximum of 500 values for outlier conditions. Important If the query returns more than the maximum number of values, the alert condition can't be created. If you create the condition and the query returns more than this number later, the alert will fail. Modify your query so that it returns a fewer number of values. Reformatting incompatible NRQL Some elements of NRQL used in charts don’t make sense in the streaming context of alerts. Here’s a list of the most common incompatible elements and suggestions for reformatting a NRQL alert query to achieve the same effect. Element Notes SINCE and UNTIL Example: SELECT percentile(largestContentfulPaint, 75) FROM PageViewTiming WHERE (appId = 837807) SINCE yesterday Copy NRQL Alerting produces a never-ending stream of windowed query results, so the SINCE and UNTIL keywords to scope the query to a point in time are not compatible. As a convenience, we automatically strip SINCE and UNTIL from a query when creating a NRQL Alert Condition from the context of a chart. TIMESERIES In NRQL queries, the TIMESERIES clause is used to return data as a time series broken out by a specified period of time. For NRQL alerts, the equivalent property of a signal is the aggregation window. histogram() The histogram() aggregation function is used to generate histograms. histogram() is not compatible with NRQL alerting: histogram aggregations can not be formatted as a time series. To create an alert from a portion of a histogram (e.g. 95th percentile), use the percentile() aggregation function. Multiple Aggregation Functions Each alert condition can only target a single aggregated stream of data. To alert on multiple streams simultaneously, you’ll need to decompose them into individual conditions within the same policy. Original Query: SELECT count(foo), average(bar), max(baz) from Transaction Copy Decomposed: SELECT count(foo) from Transaction SELECT average(bar) from Transaction SELECT max(baz) from Transaction Copy COMPARE WITH The COMPARE WITH clause is used to compare the values for two different time ranges. This type of query is incompatible with NRQL alerting. We recommend using a Baseline Alert Condition to dynamically detect deviations for a particular signal. SLIDE BY The SLIDE BY clause supports a feature known as sliding windows. With sliding windows, SLIDE BY data is gathered into \"windows\" of time that overlap with each other. These windows can help to smooth out line graphs with a lot of variation in cases where the rolling aggregate (such as a rolling mean) is more important than aggregates from narrow windows of time. Sliding windows are not currently supported in NRQL alerts. LIMIT In NRQL queries, the LIMIT clause is used to control the amount of data a query returns, either the maximum number of facet values returned by FACET queries or the maximum number of items returned by SELECT * queries. LIMIT is not compatible with NRQL alerting: evaluation is always performed on the full result set. NRQL alert threshold examples Here are some common use cases for NRQL alert conditions. These queries will work for static and baseline threshold types. The outlier threshold type will require additional FACET clauses. Alert on specific segments of your data Create constrained alerts that target a specific segment of your data, such as a few key customers or a range of data. Use the WHERE clause to define those conditions. SELECT average(duration) FROM Transaction WHERE account_id in (91290, 102021, 20230) Copy SELECT percentile(duration, 95) FROM Transaction WHERE name LIKE 'Controller/checkout/%' Copy Alert on Nth percentile of your data Create alerts when an Nth percentile of your data hits a specified threshold; for example, maintaining SLA service levels. Since we evaluate the NRQL query in one-minute time windows, percentiles will be calculated for each minute separately. SELECT percentile(duration, 95) FROM Transaction Copy SELECT percentile(databaseDuration, 75) FROM Transaction Copy Alert on max, min, avg of your data Create alerts when your data hits a certain maximum, minimum, or average; for example, ensuring that a duration or response time does not pass a certain threshold. SELECT max(duration) FROM Transaction Copy SELECT average(duration) FROM Transaction Copy Alert on a percentage of your data Create alerts when a proportion of your data goes above or below a certain threshold. SELECT percentage(count(*), WHERE duration > 2) FROM Transaction Copy SELECT percentage(count(*), WHERE httpResponseCode = '500') FROM Transaction Copy Alert on Apdex with any T-value Create alerts on Apdex, applying your own T-value for certain transactions. For example, get an alert notification when your Apdex for a T-value of 500ms on transactions for production apps goes below 0.8. SELECT apdex(duration, t:0.5) FROM Transaction WHERE appName like '%prod%' Copy Alert conditions and query order of operations By default, the aggregation window is 1 minute, but you can change the window to suit your needs. Whatever the aggregation window, New Relic will collect data for that window using the function in the NRQL alert condition’s query. The query is parsed and executed by our systems in the following order: FROM clause – which event type needs to be grabbed? WHERE clause – what can be filtered out? SELECT clause – what information needs to be returned from the now-filtered data set? Example: null value returned Let's say this is your alert condition query: SELECT count(*) FROM SyntheticCheck WHERE monitorName = 'My Cool Monitor' AND result = 'FAILURE' Copy If there are no failures for the aggregation window: The system will execute the FROM clause by grabbing all SyntheticCheck events on your account. Then it will execute the WHERE clause to filter through those events by looking only for the ones that match the monitor name and result specified. If there are still events left to scan through after completing the FROM and WHERE operations, the SELECT clause will be executed. If there are no remaining events, the SELECT clause will not be executed. This means that aggregators like count() and uniqueCount() will never return a zero value. When there is a count of 0, the SELECT clause is ignored and no data is returned, resulting in a value of NULL. Example: zero value returned If you have a data source delivering legitimate numeric zeroes, the query will return zero values and not null values. Let's say this is your alert condition query, and that MyCoolEvent is an attribute that can sometimes return a zero value. SELECT average(MyCoolAttribute) FROM MyCoolEvent Copy If, in the aggregation window being evaluated, there's at least one instance of MyCoolEvent and if the average value of all MyCoolAttribute attributes from that window is equal to zero, then a 0 value will be returned. If there are no MyCoolEvent events during that minute, then a NULL will be returned due to the order of operations. Tip For more information about this topic, you can check out our blog post on troubleshooting for zero versus null values. Tip You can determine how null values will be handled by adjusting loss of signal and gap filling settings in the Alert Conditions UI. Tip You can avoid NULL values entirely with a query order of operations shortcut. Do this by using a filter sub-clause, then including all filter elements within that sub-clause. The main body of the query will run and return data, at which point the SELECT clause will then run and apply the filter elements. The query will return a value of 0 if the filter elements result in no matching data. Here's an example: SELECT filter(count(*), WHERE result = 'SUCCESS' AND monitorName = 'My Favorite Monitor') FROM SyntheticCheck Copy Nested aggregation NRQL alerts Nested aggregation queries are a powerful way to query your data. However, they have a few restrictions that are important to note. Nested queries with a non-faceted innermost query are not currently supported Without a FACET, the inner query produces a single result, giving the outer query nothing to aggregate. If you're using a nested query, make sure your inner query is faceted. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu) ​​​​​ Copy Queries at all levels must have the same aggregation window size With an alert aggregation window of 1 minute, the inner query would produce two smaller windows of 30 seconds. In theory, these two windows could be aggregated by the outer query. However, this is not currently supported. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu TIMESERIES 30 seconds)​​ Copy Signal loss is not yet supported for nested queries For more information on signal loss, see NerdGraph API: Loss of signal and gap filling. Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported You can't use a nested query containing the WITH METRIC_FORMAT in the inner query to create NRQL alert conditions. NRQL condition creation tips Here are some tips for creating and using a NRQL condition: Topic Tips Condition threshold types NRQL condition threshold types include static, baseline, and outlier. Create a description For NRQL conditions, you can create a custom description to add to each violation. Descriptions can be enhanced with variable substitution based on metadata in the specific violation. For details, see Description Query results Queries must return a number. The condition evaluates the returned number against the thresholds you've set. Time period As with all alert conditions, NRQL conditions evaluate one single minute at a time. The implicit SINCE ... UNTIL clause specifying which minute to evaluate is controlled by your Evaluation offset setting. Since very recent data may be incomplete, you may want to query data from 3 minutes ago or longer, especially for: Applications that run on multiple hosts. SyntheticCheck data: Timeouts can take 3 minutes, so 5 minutes or more is recommended. Also, if a query will generate intermittent data, consider using the sum of query results option. Lost signal threshold (loss of signal detection) You can use loss of signal detection to alert on when your data (a telemetry signal) should be considered lost. A signal loss can indicate that a service or entity is no longer online or that a periodic job failed to run. You can also use this to make sure that violations for sporadic data, such as error counts, are closed when no signal is coming in. Advanced signal settings These settings give you options for better handling continuous, streaming data signals that may sometimes be missing. These settings include the aggregation window, the evaluation offset, and an option for filling data gaps. For more on using these, see Advanced signal settings. Condition settings Use the Condition settings to: Create a concise, descriptive condition name. Provide a custom violation description for the condition that will be included in violations and notifications. Add the runbook URL to include your organization's procedures for handling incidents. You may also add this information to the custom violation description. Limits on conditions See the maximum values. Health status NRQL alert conditions don't affect an entity's health status display. Examples For more information, see: Expected NRQL syntax Examples of NRQL condition queries Alert threshold types When you create a NRQL alert, you can choose from different types of thresholds: NRQL alert threshold types Description Static This is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value. Optional: Include a FACET clause. Baseline (Dynamic) Uses a self-adjusting condition based on the past behavior of the monitored values. Uses the same NRQL query form as the static type. Outlier Looks for group behavior and values that are outliers from those groups. Uses the same NRQL query form as the static type, but requires a FACET clause. Sum of query results (limited or intermittent data) Important Available only for static (basic) threshold types. If a query returns intermittent or limited data, it may be difficult to set a meaningful threshold. Missing or limited data will sometimes generate false positives or false negatives. You can use loss of signal, aggregation duration, and gap filling settings to minimize these false notifications. To avoid this problem when using the static threshold type, you can set the selector to sum of query results. This lets you set the alert on an aggregated sum instead of a value from a single harvest cycle. Up to two hours of one-minute data checks can be aggregated. The duration you select determines the width of the rolling sum and the preview chart will update accordingly. Set the loss of signal threshold Loss of signal occurs when no data matches the NRQL condition over a specific period of time. You can set your loss of signal threshold duration and and also what happens when the threshold is crossed. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Loss of signal is only available for NRQL conditions. You may also manage these settings using the GraphQL API (recommended), or the REST API. Go here for specific GraphQL API examples. Loss of signal settings: Loss of signal settings include a time duration and two possible actions. Signal loss expiration time UI label: Signal is lost after: GraphQL Node: expiration.expirationDuration Expiration duration is a timer that starts and resets when we receive a data point in the streaming alerts pipeline. If we don't receive another data point before your 'expiration time' expires, we consider that signal to be lost. This can be because no data is being sent to New Relic or the WHERE clause of your NRQL query is filtering that data out before it is streamed to the alerts pipeline. The loss of signal expiration time is independent of the threshold duration and triggers as soon as the timer expires. The maximum expiration duration is 48 hours. This is helpful when monitoring for the execution of infrequent jobs. The minimum is 30 seconds, but we recommend using at least 3-5 minutes. Loss of signal actions Once a signal is considered lost, you can close open violations, open new violations, or both. Close all current open violations: This closes all open violations that are related to a specific signal. It won't necessarily close all violations for a condition. If you're alerting on an ephemeral service, or on a sporadic signal, you'll want to choose this action to ensure that violations are closed properly. The GraphQL node name for this is \"closeViolationsOnExpiration\" Open new violations: This will open a new violation when the signal is considered lost. These violations will indicate that they are due to a loss of signal. Based on your incident preferences, this should trigger a notification. The graphQL node name for this is \"openViolationOnExpiration\" When you enable both actions, we'll close all open violations first, and then open a new violation for loss of signal. To create a NRQL alert configured with loss of signal detection in the UI: For a policy, when you create a condition, under Select a product, click NRQL, then click Next, define thresholds. Write a NRQL query that returns the values you want to alert on. For Threshold type, select Static or Baseline. Click + Add lost signal threshold, then set the signal expiration duration time in minutes or seconds in the Signal is lost after field. Choose what you want to happen when the signal is lost. You can check one or both of Close all current open violations and Open new \"lost signal\" violation. These control how loss of signal violations will be handled for the condition. Make sure you name your condition before you save it. Violations open due to loss of signal close when the signal comes back. Newly opened lost signal violations will close immediately when new data is evaluated. the condition they belong to expires. By default, conditions expire after 3 days. you manually close the violation with the Close all current open violations option. Tip Loss of signal detection doesn't work on NRQL queries that use nested aggregation or sub-queries. Advanced signal settings When creating a NRQL alert condition, the advanced signal settings gives you better control over streaming alert data and helps you avoid false alarms. When creating a NRQL condition, there are several advanced signal settings: Aggregation window Evaluation offset Fill data gaps To read an explanation of what these settings are and how they relate to each other, see Streaming alerts concepts. Below are instructions and tips on how to configure them. Aggregation window You can set the aggregation window duration to choose how long data is accumulated in a streaming time window before it's aggregated. You can set it to anything between one second and 15 minutes. The default is one minute. Tip Baseline alert condition thresholds don't support editing the aggregation window. They use the 1 minute default. Evaluation offset You can adjust the evaluation offset to coordinate our streaming alerting algorithm with your data's latency. If it takes a while for your data to arrive, then you may need to increase the evaluation offset. The total supported latency is the product of the aggregation window duration multiplied by the evaluation offset. In the example screenshot above, the supported latency is 3 minutes (a 1-minute aggregation window multiplied by three windows). If the data type comes from an APM language agent and is aggregated from many app instances (for example, Transactions, TransactionErrors, etc.), we recommend using an evaluation offset of 3 with 1 minute aggregation windows. Important When creating NRQL conditions for data collected from Infrastructure Cloud Integrations such as AWS Cloudwatch or Azure, we recommend that you start with an evaluation offset of 15 minutes, then adjust up or down depending on how long it takes to collect your data. Fill data gaps Gap filling lets you customize the values to use when your signals don't have any data. You can fill gaps in your data streams with one of these settings: None: (Default) Choose this if you don't want to take any action on empty aggregation windows. On evaluation, an empty aggregation window will reset the threshold duration timer. For example, if a condition says that all aggregation windows must have data points above the threshold for 5 minutes, and 1 of the 5 aggregation windows is empty, then the condition won't be in violation. Custom static value: Choose this if you'd like to insert a custom static value into the empty aggregation windows before they're evaluated. This option has an additional, required parameter of fillValue (as named in the API) that specifies what static value should be used. This defaults to 0. Last known value: This option inserts the last seen value before evaluation occurs. We maintain the state of the last seen value for 2 hours. Tip The alerts system fills gaps in actively reported signals. This signal history is dropped after 2 hours of inactivity. For gap filling, data points received after this period of inactivity are treated as new signals. To learn more about signal loss, gap filling, and how to request access to these features, see this Explorers Hub post. Options for editing data gap settings: In the NRQL conditions UI, go to Condition settings > Advanced signal settings > fill data gaps with and choose an option. If using our Nerdgraph API (preferred), this node is located at: actor : account : alerts : nrqlCondition : signal : fillOption | fillValue NerdGraph is our recommended API for this but if you're using our REST API, you can find this setting in the REST API explorer under the \"signal\" section of the Alert NRQL conditions API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 368.94427,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create <em>NRQL</em> <em>alert</em> <em>conditions</em>",
        "sections": "Create <em>NRQL</em> <em>alert</em> <em>conditions</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": "You can use <em>NRQL</em> queries to create <em>alert</em> <em>conditions</em>. Once you&#x27;ve defined your signal, you can further define your warning and critical threshold levels. This determines when an <em>alerts</em> violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click <em>Alerts</em> &amp; AI"
      },
      "id": "603ef04864441fbc114e8883"
    },
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 323.44983,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> <em>condition</em>",
        "sections": "Define custom metrics for an <em>alert</em> <em>condition</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": ") for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click <em>Alerts</em> &amp; AI, click <em>Alert</em> policies, then (select a policy) or add a <em>new</em> <em>alert</em> policy. From the policy&#x27;s <em>Alert</em> <em>conditions</em> page, click Add a condition"
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Expanded anomaly detection",
        "Important",
        "Requirements",
        "Why it matters",
        "Get started with anomaly detection",
        "Detect anomalies with a faceted NRQL query",
        "See your anomalies in one place",
        "Tip",
        "Query anomaly data",
        "Reduce the number of detected anomalies"
      ],
      "title": "Expanded anomaly detection",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "Applied intelligence",
        "Proactive detection"
      ],
      "external_id": "0b07c0b6ce27f39b5edb3e112a0f949835cbb8c6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/applied-intelligence/proactive-detection/expanded-anomaly-detection/",
      "published_at": "2021-09-14T10:33:48Z",
      "updated_at": "2021-09-14T10:33:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This feature is a limited release. We’ve expanded anomaly detection coverage beyond your APM applications. Configure anomaly detection for your browser applications, mobile applications, infrastructure hosts, and nearly anything you want to monitor. Requirements Expanded anomaly detection is available as a limited beta. You can request access here. Why it matters When starting to configure alert conditions for a variety of applications and hosts, it can be difficult to know what you’ll want to be notified about ahead of time. Anomaly detection helps you distinguish between what’s typical performance in your system and where you’re starting to have trouble. Instead of creating your alert conditions manually, you can simply tell us what you want to monitor. Anomaly detection will help you identify baseline performance in your system and flags anomalous activity in your system. Get started with anomaly detection To get started with expanded anomaly detection: From one.newrelic.com, go to Alerts & AI > Proactive Detection > Settings. Click the Custom tab, and then click + Add a configuration. Select the account you want to use to record anomaly data, then select the workload or entities you’d like to monitor. Select the detection sensitivity. We recommend Low sensitivity so that you don’t see too many anomalies. Finally, name your configuration and save. Detect anomalies with a faceted NRQL query To detect anomalies with a faceted NRQL query: From one.newrelic.com, go to Alerts & AI > Proactive Detection > Settings. Click the Custom tab, and then click + Add a configuration. Click Use a query instead. You may need to select an account, if you have more than one. Add one or more queries with a FACET clause. Name the query and confirm the facets you want to monitor for anomalies. Select the detection sensitivity. We recommend Low sensitivity so that you don’t see too many anomalies. Finally, name the configuration and save. See your anomalies in one place When you set up anomaly detection, New Relic starts analyzing the golden signals of your entities and workloads. Anomalies appear in your activity feeds throughout New Relic One and the Anomalies tab as soon as they’re detected. Click any anomaly to get more detail about it, including analysis and context for the anomaly. Tip For this limited release, anomaly detection won’t generate notifications. However, you can configure a NRQL alert condition for the NrAiAnomaly event. To view anomalies, from one.newrelic.com, go to Alerts & AI > Issues & activity > Anomalies. Query anomaly data Detected anomalies are written to the NrAiAnomaly event in your NRDB account. You can learn more about this event and how to query it here. Reduce the number of detected anomalies If you’re seeing too many anomalies, the first step is to make sure your sensitivity level is set to Low. If it’s already set to Low, you can define specific thresholds to distinguish between normal and anomalous behavior. To define custom thresholds: From one.newrelic.com, go to Alerts & AI > Proactive Detection > Settings. Click the Custom tab and the configuration you want to modify. Select an entity or workload, and then change the sensitivity level. You can use custom sensitivity to define specific thresholds for different entity types.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 293.51602,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Detect anomalies with a faceted <em>NRQL</em> query",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": ". However, you can configure a <em>NRQL</em> <em>alert</em> condition for the NrAiAnomaly event. To view anomalies, from one.newrelic.com, go to <em>Alerts</em> &amp; AI &gt; Issues &amp; activity &gt; Anomalies. Query anomaly data Detected anomalies are written to the NrAiAnomaly event in your NRDB account. You can learn more about this event"
      },
      "id": "60b5124064441ff965e2cb01"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/learn-alerts/alerts-concepts-workflow": [
    {
      "sections": [
        "Introduction to Applied Intelligence",
        "Why use Applied Intelligence?",
        "Determine root causes with Incident Intelligence",
        "Find unknowns with Proactive Detection"
      ],
      "title": "Introduction to Applied Intelligence",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Get started"
      ],
      "external_id": "68af5032ebe9c91467f78169bb5d30976d7f67ee",
      "image": "https://docs.newrelic.com/static/c95c61f5a259d33c01781273aed8311d/30c92/diagram-applied-intelligence-workflow.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/get-started/introduction-applied-intelligence/",
      "published_at": "2021-09-14T07:20:16Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applied Intelligence (AI) is our AIOps solution for DevOps, site reliability engineers, and on-call teams. At its core, Applied Intelligence helps you find, troubleshoot, and resolve problems more quickly. Specifically, it’s a hybrid machine learning engine that reduces alert noise, correlates incidents, and automatically detects anomalies. By applying machine learning to your data and feedback, Applied Intelligence is designed to improve functionality and deliver smarter context over time. After connecting your data sources to Applied Intelligence, it looks for potential problems and improves based on your feedback. Why use Applied Intelligence? How you respond to an incident can mean thousands of dollars or clicks for your company. Applied Intelligence helps you solve problems faster. Feature Description Troubleshoot and respond to incidents Our solution helps you understand your incidents and gives you ideas for what to do next. Here are a few examples: Automatically classifies incidents based on the golden signals of site reliability engineering. Identifies entities in your stack that may relate to the underlying issue. Suggests responses for incidents based on historical context. Less noise, more focus As tools and systems become more complex, alert noise can overwhelm DevOps and SRE teams. Applied Intelligence correlates related incidents and suppresses noise, so you're only notified when human action is required. Incidents with a hybrid approach Applied Intelligence streamlines your incidents by combining its built-in inputs with your knowledge and feedback. Over time, the system delivers more accurate insights. For example: Our correlation and classification engine adjusts based on your feedback. The system automatically suggests new correlation rules based on your production data. You can create custom logic using the decision builder. Automatic anomaly detection Applied Intelligence provides automatic anomaly detection on all your APM-monitored applications. We detect anomalies in throughput, latency, and error rate, with no action required from you. Benefits include: No setup required. See anomalies surfaced automatically in the anomalies feed. See them in various New Relic activity streams (for example, on the New Relic One home page). Ability to run NRQL queries of anomalies and create custom dashboards with that data. Determine root causes with Incident Intelligence As part of Applied Intelligence, Incident Intelligence helps you correlate incident events and reduce noise in your environment. With it, you can get an overview of all your issues, see suggested responders, and configure your own correlation logic. To get started, see Incident Intelligence. Find unknowns with Proactive Detection Another feature of Applied Intelligence is Proactive Detection. Proactive Detection is, by default, always on and detecting anomalies. These anomalies are surfaced in the Applied Intelligence anomalies feed, New Relic One activity streams, and can be queried, alerted on, and added to dashboards. Anomalies can be sent to Slack or via webhooks, and/or added as a source for Incident Intelligence correlation and issue notification. Proactive Detection also provides automatic analysis of anomalies and alerts via the analysis page. To get started, see Proactive Detection.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 272.49634,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "sections": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " with Incident <em>Intelligence</em> As part of <em>Applied</em> <em>Intelligence</em>, Incident <em>Intelligence</em> helps you correlate incident events and reduce noise in your environment. With it, you can <em>get</em> an overview of all your issues, see suggested responders, and configure your own correlation logic. To <em>get</em> <em>started</em>, see"
      },
      "id": "603ea67c64441ffd1c4e8860"
    },
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.77557,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Define custom metrics for an <em>alert</em> condition",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Create NRQL alert conditions",
        "Tip",
        "Create a NRQL alert condition",
        "Create a condition from a chart",
        "Caution",
        "NRQL alert syntax",
        "Important",
        "Reformatting incompatible NRQL",
        "NRQL alert threshold examples",
        "Alert on specific segments of your data",
        "Alert on Nth percentile of your data",
        "Alert on max, min, avg of your data",
        "Alert on a percentage of your data",
        "Alert on Apdex with any T-value",
        "Alert conditions and query order of operations",
        "Example: null value returned",
        "Example: zero value returned",
        "Nested aggregation NRQL alerts",
        "Nested queries with a non-faceted innermost query are not currently supported",
        "Queries at all levels must have the same aggregation window size",
        "Signal loss is not yet supported for nested queries",
        "Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported",
        "NRQL condition creation tips",
        "Alert threshold types",
        "Sum of query results (limited or intermittent data)",
        "Set the loss of signal threshold",
        "Advanced signal settings",
        "Aggregation window",
        "Evaluation offset",
        "Fill data gaps"
      ],
      "title": "Create NRQL alert conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "2872f770a5fc8a802f99b9f848906f7e351ad761",
      "image": "https://docs.newrelic.com/static/eb8e1b2d826f9fd9cf46fe3dd5455217/c1b63/nr1_nrql_alert_conditions.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/",
      "published_at": "2021-09-14T07:20:17Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use NRQL queries to create alert conditions. Once you've defined your signal, you can further define your warning and critical threshold levels. This determines when an alerts violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Click NRQL, and then Next, define thresholds. Tip For more information on key concepts relating to NRQL alert conditions and streaming alerts, see Streaming alerts: key terms and concepts. Create a NRQL alert condition To create a NRQL alert condition for a policy: On one.newrelic.com, in the header click Alerts & AI, then in the left sidebar click Policies. Select an existing policy or click New alert policy to create a new policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define thresholds. Create a condition from a chart You can use a chart to create a NRQL alert condition. To create a NRQL alerts condition from a chart, click the chart menu , then click Create alert condition. Once you've named and customized your condition, you can add it to an existing policy or create a new one. Caution A small number of our older charts don't include the option to create an alert condition. NRQL alert syntax Here's the basic syntax for creating all NRQL alert conditions. The FACET clause is required for outlier threshold types. It's optional for static and baseline. SELECT function(attribute) FROM Event WHERE attribute [comparison] [AND|OR ...] Copy Clause Notes SELECT function(attribute) Required Supported functions that return numbers include: apdex average count latest max min percentage percentile sum uniqueCount Tip If you use the percentile aggregator in a faceted alert condition with many facets, this may cause the following error to appear: An error occurred while fetching chart data. If you see this error, use average instead. FROM data type Required Only one data type can be targeted. Supported data types: Event Metric (RAW data points will be returned) WHERE attribute [comparison] [AND|OR ...] Use the WHERE clause to specify a series of one or more conditions. All the operators are supported. FACET attribute Required for outlier conditions Include an optional FACET clause in your NRQL syntax depending on the threshold type: static or baseline. Use the FACET clause to separate your results by attribute and alert on each attribute independently. No LIMIT clause is allowed, but all queries will receive the maximum number of facets possible. Faceted queries can return a maximum of 5000 values for static and baseline conditions and a maximum of 500 values for outlier conditions. Important If the query returns more than the maximum number of values, the alert condition can't be created. If you create the condition and the query returns more than this number later, the alert will fail. Modify your query so that it returns a fewer number of values. Reformatting incompatible NRQL Some elements of NRQL used in charts don’t make sense in the streaming context of alerts. Here’s a list of the most common incompatible elements and suggestions for reformatting a NRQL alert query to achieve the same effect. Element Notes SINCE and UNTIL Example: SELECT percentile(largestContentfulPaint, 75) FROM PageViewTiming WHERE (appId = 837807) SINCE yesterday Copy NRQL Alerting produces a never-ending stream of windowed query results, so the SINCE and UNTIL keywords to scope the query to a point in time are not compatible. As a convenience, we automatically strip SINCE and UNTIL from a query when creating a NRQL Alert Condition from the context of a chart. TIMESERIES In NRQL queries, the TIMESERIES clause is used to return data as a time series broken out by a specified period of time. For NRQL alerts, the equivalent property of a signal is the aggregation window. histogram() The histogram() aggregation function is used to generate histograms. histogram() is not compatible with NRQL alerting: histogram aggregations can not be formatted as a time series. To create an alert from a portion of a histogram (e.g. 95th percentile), use the percentile() aggregation function. Multiple Aggregation Functions Each alert condition can only target a single aggregated stream of data. To alert on multiple streams simultaneously, you’ll need to decompose them into individual conditions within the same policy. Original Query: SELECT count(foo), average(bar), max(baz) from Transaction Copy Decomposed: SELECT count(foo) from Transaction SELECT average(bar) from Transaction SELECT max(baz) from Transaction Copy COMPARE WITH The COMPARE WITH clause is used to compare the values for two different time ranges. This type of query is incompatible with NRQL alerting. We recommend using a Baseline Alert Condition to dynamically detect deviations for a particular signal. SLIDE BY The SLIDE BY clause supports a feature known as sliding windows. With sliding windows, SLIDE BY data is gathered into \"windows\" of time that overlap with each other. These windows can help to smooth out line graphs with a lot of variation in cases where the rolling aggregate (such as a rolling mean) is more important than aggregates from narrow windows of time. Sliding windows are not currently supported in NRQL alerts. LIMIT In NRQL queries, the LIMIT clause is used to control the amount of data a query returns, either the maximum number of facet values returned by FACET queries or the maximum number of items returned by SELECT * queries. LIMIT is not compatible with NRQL alerting: evaluation is always performed on the full result set. NRQL alert threshold examples Here are some common use cases for NRQL alert conditions. These queries will work for static and baseline threshold types. The outlier threshold type will require additional FACET clauses. Alert on specific segments of your data Create constrained alerts that target a specific segment of your data, such as a few key customers or a range of data. Use the WHERE clause to define those conditions. SELECT average(duration) FROM Transaction WHERE account_id in (91290, 102021, 20230) Copy SELECT percentile(duration, 95) FROM Transaction WHERE name LIKE 'Controller/checkout/%' Copy Alert on Nth percentile of your data Create alerts when an Nth percentile of your data hits a specified threshold; for example, maintaining SLA service levels. Since we evaluate the NRQL query in one-minute time windows, percentiles will be calculated for each minute separately. SELECT percentile(duration, 95) FROM Transaction Copy SELECT percentile(databaseDuration, 75) FROM Transaction Copy Alert on max, min, avg of your data Create alerts when your data hits a certain maximum, minimum, or average; for example, ensuring that a duration or response time does not pass a certain threshold. SELECT max(duration) FROM Transaction Copy SELECT average(duration) FROM Transaction Copy Alert on a percentage of your data Create alerts when a proportion of your data goes above or below a certain threshold. SELECT percentage(count(*), WHERE duration > 2) FROM Transaction Copy SELECT percentage(count(*), WHERE httpResponseCode = '500') FROM Transaction Copy Alert on Apdex with any T-value Create alerts on Apdex, applying your own T-value for certain transactions. For example, get an alert notification when your Apdex for a T-value of 500ms on transactions for production apps goes below 0.8. SELECT apdex(duration, t:0.5) FROM Transaction WHERE appName like '%prod%' Copy Alert conditions and query order of operations By default, the aggregation window is 1 minute, but you can change the window to suit your needs. Whatever the aggregation window, New Relic will collect data for that window using the function in the NRQL alert condition’s query. The query is parsed and executed by our systems in the following order: FROM clause – which event type needs to be grabbed? WHERE clause – what can be filtered out? SELECT clause – what information needs to be returned from the now-filtered data set? Example: null value returned Let's say this is your alert condition query: SELECT count(*) FROM SyntheticCheck WHERE monitorName = 'My Cool Monitor' AND result = 'FAILURE' Copy If there are no failures for the aggregation window: The system will execute the FROM clause by grabbing all SyntheticCheck events on your account. Then it will execute the WHERE clause to filter through those events by looking only for the ones that match the monitor name and result specified. If there are still events left to scan through after completing the FROM and WHERE operations, the SELECT clause will be executed. If there are no remaining events, the SELECT clause will not be executed. This means that aggregators like count() and uniqueCount() will never return a zero value. When there is a count of 0, the SELECT clause is ignored and no data is returned, resulting in a value of NULL. Example: zero value returned If you have a data source delivering legitimate numeric zeroes, the query will return zero values and not null values. Let's say this is your alert condition query, and that MyCoolEvent is an attribute that can sometimes return a zero value. SELECT average(MyCoolAttribute) FROM MyCoolEvent Copy If, in the aggregation window being evaluated, there's at least one instance of MyCoolEvent and if the average value of all MyCoolAttribute attributes from that window is equal to zero, then a 0 value will be returned. If there are no MyCoolEvent events during that minute, then a NULL will be returned due to the order of operations. Tip For more information about this topic, you can check out our blog post on troubleshooting for zero versus null values. Tip You can determine how null values will be handled by adjusting loss of signal and gap filling settings in the Alert Conditions UI. Tip You can avoid NULL values entirely with a query order of operations shortcut. Do this by using a filter sub-clause, then including all filter elements within that sub-clause. The main body of the query will run and return data, at which point the SELECT clause will then run and apply the filter elements. The query will return a value of 0 if the filter elements result in no matching data. Here's an example: SELECT filter(count(*), WHERE result = 'SUCCESS' AND monitorName = 'My Favorite Monitor') FROM SyntheticCheck Copy Nested aggregation NRQL alerts Nested aggregation queries are a powerful way to query your data. However, they have a few restrictions that are important to note. Nested queries with a non-faceted innermost query are not currently supported Without a FACET, the inner query produces a single result, giving the outer query nothing to aggregate. If you're using a nested query, make sure your inner query is faceted. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu) ​​​​​ Copy Queries at all levels must have the same aggregation window size With an alert aggregation window of 1 minute, the inner query would produce two smaller windows of 30 seconds. In theory, these two windows could be aggregated by the outer query. However, this is not currently supported. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu TIMESERIES 30 seconds)​​ Copy Signal loss is not yet supported for nested queries For more information on signal loss, see NerdGraph API: Loss of signal and gap filling. Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported You can't use a nested query containing the WITH METRIC_FORMAT in the inner query to create NRQL alert conditions. NRQL condition creation tips Here are some tips for creating and using a NRQL condition: Topic Tips Condition threshold types NRQL condition threshold types include static, baseline, and outlier. Create a description For NRQL conditions, you can create a custom description to add to each violation. Descriptions can be enhanced with variable substitution based on metadata in the specific violation. For details, see Description Query results Queries must return a number. The condition evaluates the returned number against the thresholds you've set. Time period As with all alert conditions, NRQL conditions evaluate one single minute at a time. The implicit SINCE ... UNTIL clause specifying which minute to evaluate is controlled by your Evaluation offset setting. Since very recent data may be incomplete, you may want to query data from 3 minutes ago or longer, especially for: Applications that run on multiple hosts. SyntheticCheck data: Timeouts can take 3 minutes, so 5 minutes or more is recommended. Also, if a query will generate intermittent data, consider using the sum of query results option. Lost signal threshold (loss of signal detection) You can use loss of signal detection to alert on when your data (a telemetry signal) should be considered lost. A signal loss can indicate that a service or entity is no longer online or that a periodic job failed to run. You can also use this to make sure that violations for sporadic data, such as error counts, are closed when no signal is coming in. Advanced signal settings These settings give you options for better handling continuous, streaming data signals that may sometimes be missing. These settings include the aggregation window, the evaluation offset, and an option for filling data gaps. For more on using these, see Advanced signal settings. Condition settings Use the Condition settings to: Create a concise, descriptive condition name. Provide a custom violation description for the condition that will be included in violations and notifications. Add the runbook URL to include your organization's procedures for handling incidents. You may also add this information to the custom violation description. Limits on conditions See the maximum values. Health status NRQL alert conditions don't affect an entity's health status display. Examples For more information, see: Expected NRQL syntax Examples of NRQL condition queries Alert threshold types When you create a NRQL alert, you can choose from different types of thresholds: NRQL alert threshold types Description Static This is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value. Optional: Include a FACET clause. Baseline (Dynamic) Uses a self-adjusting condition based on the past behavior of the monitored values. Uses the same NRQL query form as the static type. Outlier Looks for group behavior and values that are outliers from those groups. Uses the same NRQL query form as the static type, but requires a FACET clause. Sum of query results (limited or intermittent data) Important Available only for static (basic) threshold types. If a query returns intermittent or limited data, it may be difficult to set a meaningful threshold. Missing or limited data will sometimes generate false positives or false negatives. You can use loss of signal, aggregation duration, and gap filling settings to minimize these false notifications. To avoid this problem when using the static threshold type, you can set the selector to sum of query results. This lets you set the alert on an aggregated sum instead of a value from a single harvest cycle. Up to two hours of one-minute data checks can be aggregated. The duration you select determines the width of the rolling sum and the preview chart will update accordingly. Set the loss of signal threshold Loss of signal occurs when no data matches the NRQL condition over a specific period of time. You can set your loss of signal threshold duration and and also what happens when the threshold is crossed. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Loss of signal is only available for NRQL conditions. You may also manage these settings using the GraphQL API (recommended), or the REST API. Go here for specific GraphQL API examples. Loss of signal settings: Loss of signal settings include a time duration and two possible actions. Signal loss expiration time UI label: Signal is lost after: GraphQL Node: expiration.expirationDuration Expiration duration is a timer that starts and resets when we receive a data point in the streaming alerts pipeline. If we don't receive another data point before your 'expiration time' expires, we consider that signal to be lost. This can be because no data is being sent to New Relic or the WHERE clause of your NRQL query is filtering that data out before it is streamed to the alerts pipeline. The loss of signal expiration time is independent of the threshold duration and triggers as soon as the timer expires. The maximum expiration duration is 48 hours. This is helpful when monitoring for the execution of infrequent jobs. The minimum is 30 seconds, but we recommend using at least 3-5 minutes. Loss of signal actions Once a signal is considered lost, you can close open violations, open new violations, or both. Close all current open violations: This closes all open violations that are related to a specific signal. It won't necessarily close all violations for a condition. If you're alerting on an ephemeral service, or on a sporadic signal, you'll want to choose this action to ensure that violations are closed properly. The GraphQL node name for this is \"closeViolationsOnExpiration\" Open new violations: This will open a new violation when the signal is considered lost. These violations will indicate that they are due to a loss of signal. Based on your incident preferences, this should trigger a notification. The graphQL node name for this is \"openViolationOnExpiration\" When you enable both actions, we'll close all open violations first, and then open a new violation for loss of signal. To create a NRQL alert configured with loss of signal detection in the UI: For a policy, when you create a condition, under Select a product, click NRQL, then click Next, define thresholds. Write a NRQL query that returns the values you want to alert on. For Threshold type, select Static or Baseline. Click + Add lost signal threshold, then set the signal expiration duration time in minutes or seconds in the Signal is lost after field. Choose what you want to happen when the signal is lost. You can check one or both of Close all current open violations and Open new \"lost signal\" violation. These control how loss of signal violations will be handled for the condition. Make sure you name your condition before you save it. Violations open due to loss of signal close when the signal comes back. Newly opened lost signal violations will close immediately when new data is evaluated. the condition they belong to expires. By default, conditions expire after 3 days. you manually close the violation with the Close all current open violations option. Tip Loss of signal detection doesn't work on NRQL queries that use nested aggregation or sub-queries. Advanced signal settings When creating a NRQL alert condition, the advanced signal settings gives you better control over streaming alert data and helps you avoid false alarms. When creating a NRQL condition, there are several advanced signal settings: Aggregation window Evaluation offset Fill data gaps To read an explanation of what these settings are and how they relate to each other, see Streaming alerts concepts. Below are instructions and tips on how to configure them. Aggregation window You can set the aggregation window duration to choose how long data is accumulated in a streaming time window before it's aggregated. You can set it to anything between one second and 15 minutes. The default is one minute. Tip Baseline alert condition thresholds don't support editing the aggregation window. They use the 1 minute default. Evaluation offset You can adjust the evaluation offset to coordinate our streaming alerting algorithm with your data's latency. If it takes a while for your data to arrive, then you may need to increase the evaluation offset. The total supported latency is the product of the aggregation window duration multiplied by the evaluation offset. In the example screenshot above, the supported latency is 3 minutes (a 1-minute aggregation window multiplied by three windows). If the data type comes from an APM language agent and is aggregated from many app instances (for example, Transactions, TransactionErrors, etc.), we recommend using an evaluation offset of 3 with 1 minute aggregation windows. Important When creating NRQL conditions for data collected from Infrastructure Cloud Integrations such as AWS Cloudwatch or Azure, we recommend that you start with an evaluation offset of 15 minutes, then adjust up or down depending on how long it takes to collect your data. Fill data gaps Gap filling lets you customize the values to use when your signals don't have any data. You can fill gaps in your data streams with one of these settings: None: (Default) Choose this if you don't want to take any action on empty aggregation windows. On evaluation, an empty aggregation window will reset the threshold duration timer. For example, if a condition says that all aggregation windows must have data points above the threshold for 5 minutes, and 1 of the 5 aggregation windows is empty, then the condition won't be in violation. Custom static value: Choose this if you'd like to insert a custom static value into the empty aggregation windows before they're evaluated. This option has an additional, required parameter of fillValue (as named in the API) that specifies what static value should be used. This defaults to 0. Last known value: This option inserts the last seen value before evaluation occurs. We maintain the state of the last seen value for 2 hours. Tip The alerts system fills gaps in actively reported signals. This signal history is dropped after 2 hours of inactivity. For gap filling, data points received after this period of inactivity are treated as new signals. To learn more about signal loss, gap filling, and how to request access to these features, see this Explorers Hub post. Options for editing data gap settings: In the NRQL conditions UI, go to Condition settings > Advanced signal settings > fill data gaps with and choose an option. If using our Nerdgraph API (preferred), this node is located at: actor : account : alerts : nrqlCondition : signal : fillOption | fillValue NerdGraph is our recommended API for this but if you're using our REST API, you can find this setting in the REST API explorer under the \"signal\" section of the Alert NRQL conditions API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.66113,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create NRQL <em>alert</em> conditions",
        "sections": "<em>Alert</em> conditions <em>and</em> query order of operations",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " a NRQL <em>alert</em> condition for a policy: On one.newrelic.com, in the header click <em>Alerts</em> &amp; AI, then in the left sidebar click Policies. Select an existing policy or click <em>New</em> <em>alert</em> policy to create a <em>new</em> policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define"
      },
      "id": "603ef04864441fbc114e8883"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/learn-alerts/introduction-alerts": [
    {
      "sections": [
        "Introduction to Applied Intelligence",
        "Why use Applied Intelligence?",
        "Determine root causes with Incident Intelligence",
        "Find unknowns with Proactive Detection"
      ],
      "title": "Introduction to Applied Intelligence",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Get started"
      ],
      "external_id": "68af5032ebe9c91467f78169bb5d30976d7f67ee",
      "image": "https://docs.newrelic.com/static/c95c61f5a259d33c01781273aed8311d/30c92/diagram-applied-intelligence-workflow.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/get-started/introduction-applied-intelligence/",
      "published_at": "2021-09-14T07:20:16Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applied Intelligence (AI) is our AIOps solution for DevOps, site reliability engineers, and on-call teams. At its core, Applied Intelligence helps you find, troubleshoot, and resolve problems more quickly. Specifically, it’s a hybrid machine learning engine that reduces alert noise, correlates incidents, and automatically detects anomalies. By applying machine learning to your data and feedback, Applied Intelligence is designed to improve functionality and deliver smarter context over time. After connecting your data sources to Applied Intelligence, it looks for potential problems and improves based on your feedback. Why use Applied Intelligence? How you respond to an incident can mean thousands of dollars or clicks for your company. Applied Intelligence helps you solve problems faster. Feature Description Troubleshoot and respond to incidents Our solution helps you understand your incidents and gives you ideas for what to do next. Here are a few examples: Automatically classifies incidents based on the golden signals of site reliability engineering. Identifies entities in your stack that may relate to the underlying issue. Suggests responses for incidents based on historical context. Less noise, more focus As tools and systems become more complex, alert noise can overwhelm DevOps and SRE teams. Applied Intelligence correlates related incidents and suppresses noise, so you're only notified when human action is required. Incidents with a hybrid approach Applied Intelligence streamlines your incidents by combining its built-in inputs with your knowledge and feedback. Over time, the system delivers more accurate insights. For example: Our correlation and classification engine adjusts based on your feedback. The system automatically suggests new correlation rules based on your production data. You can create custom logic using the decision builder. Automatic anomaly detection Applied Intelligence provides automatic anomaly detection on all your APM-monitored applications. We detect anomalies in throughput, latency, and error rate, with no action required from you. Benefits include: No setup required. See anomalies surfaced automatically in the anomalies feed. See them in various New Relic activity streams (for example, on the New Relic One home page). Ability to run NRQL queries of anomalies and create custom dashboards with that data. Determine root causes with Incident Intelligence As part of Applied Intelligence, Incident Intelligence helps you correlate incident events and reduce noise in your environment. With it, you can get an overview of all your issues, see suggested responders, and configure your own correlation logic. To get started, see Incident Intelligence. Find unknowns with Proactive Detection Another feature of Applied Intelligence is Proactive Detection. Proactive Detection is, by default, always on and detecting anomalies. These anomalies are surfaced in the Applied Intelligence anomalies feed, New Relic One activity streams, and can be queried, alerted on, and added to dashboards. Anomalies can be sent to Slack or via webhooks, and/or added as a source for Incident Intelligence correlation and issue notification. Proactive Detection also provides automatic analysis of anomalies and alerts via the analysis page. To get started, see Proactive Detection.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 272.49615,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "sections": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " with Incident <em>Intelligence</em> As part of <em>Applied</em> <em>Intelligence</em>, Incident <em>Intelligence</em> helps you correlate incident events and reduce noise in your environment. With it, you can <em>get</em> an overview of all your issues, see suggested responders, and configure your own correlation logic. To <em>get</em> <em>started</em>, see"
      },
      "id": "603ea67c64441ffd1c4e8860"
    },
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.77542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Define custom metrics for an <em>alert</em> condition",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Create NRQL alert conditions",
        "Tip",
        "Create a NRQL alert condition",
        "Create a condition from a chart",
        "Caution",
        "NRQL alert syntax",
        "Important",
        "Reformatting incompatible NRQL",
        "NRQL alert threshold examples",
        "Alert on specific segments of your data",
        "Alert on Nth percentile of your data",
        "Alert on max, min, avg of your data",
        "Alert on a percentage of your data",
        "Alert on Apdex with any T-value",
        "Alert conditions and query order of operations",
        "Example: null value returned",
        "Example: zero value returned",
        "Nested aggregation NRQL alerts",
        "Nested queries with a non-faceted innermost query are not currently supported",
        "Queries at all levels must have the same aggregation window size",
        "Signal loss is not yet supported for nested queries",
        "Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported",
        "NRQL condition creation tips",
        "Alert threshold types",
        "Sum of query results (limited or intermittent data)",
        "Set the loss of signal threshold",
        "Advanced signal settings",
        "Aggregation window",
        "Evaluation offset",
        "Fill data gaps"
      ],
      "title": "Create NRQL alert conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "2872f770a5fc8a802f99b9f848906f7e351ad761",
      "image": "https://docs.newrelic.com/static/eb8e1b2d826f9fd9cf46fe3dd5455217/c1b63/nr1_nrql_alert_conditions.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/",
      "published_at": "2021-09-14T07:20:17Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use NRQL queries to create alert conditions. Once you've defined your signal, you can further define your warning and critical threshold levels. This determines when an alerts violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Click NRQL, and then Next, define thresholds. Tip For more information on key concepts relating to NRQL alert conditions and streaming alerts, see Streaming alerts: key terms and concepts. Create a NRQL alert condition To create a NRQL alert condition for a policy: On one.newrelic.com, in the header click Alerts & AI, then in the left sidebar click Policies. Select an existing policy or click New alert policy to create a new policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define thresholds. Create a condition from a chart You can use a chart to create a NRQL alert condition. To create a NRQL alerts condition from a chart, click the chart menu , then click Create alert condition. Once you've named and customized your condition, you can add it to an existing policy or create a new one. Caution A small number of our older charts don't include the option to create an alert condition. NRQL alert syntax Here's the basic syntax for creating all NRQL alert conditions. The FACET clause is required for outlier threshold types. It's optional for static and baseline. SELECT function(attribute) FROM Event WHERE attribute [comparison] [AND|OR ...] Copy Clause Notes SELECT function(attribute) Required Supported functions that return numbers include: apdex average count latest max min percentage percentile sum uniqueCount Tip If you use the percentile aggregator in a faceted alert condition with many facets, this may cause the following error to appear: An error occurred while fetching chart data. If you see this error, use average instead. FROM data type Required Only one data type can be targeted. Supported data types: Event Metric (RAW data points will be returned) WHERE attribute [comparison] [AND|OR ...] Use the WHERE clause to specify a series of one or more conditions. All the operators are supported. FACET attribute Required for outlier conditions Include an optional FACET clause in your NRQL syntax depending on the threshold type: static or baseline. Use the FACET clause to separate your results by attribute and alert on each attribute independently. No LIMIT clause is allowed, but all queries will receive the maximum number of facets possible. Faceted queries can return a maximum of 5000 values for static and baseline conditions and a maximum of 500 values for outlier conditions. Important If the query returns more than the maximum number of values, the alert condition can't be created. If you create the condition and the query returns more than this number later, the alert will fail. Modify your query so that it returns a fewer number of values. Reformatting incompatible NRQL Some elements of NRQL used in charts don’t make sense in the streaming context of alerts. Here’s a list of the most common incompatible elements and suggestions for reformatting a NRQL alert query to achieve the same effect. Element Notes SINCE and UNTIL Example: SELECT percentile(largestContentfulPaint, 75) FROM PageViewTiming WHERE (appId = 837807) SINCE yesterday Copy NRQL Alerting produces a never-ending stream of windowed query results, so the SINCE and UNTIL keywords to scope the query to a point in time are not compatible. As a convenience, we automatically strip SINCE and UNTIL from a query when creating a NRQL Alert Condition from the context of a chart. TIMESERIES In NRQL queries, the TIMESERIES clause is used to return data as a time series broken out by a specified period of time. For NRQL alerts, the equivalent property of a signal is the aggregation window. histogram() The histogram() aggregation function is used to generate histograms. histogram() is not compatible with NRQL alerting: histogram aggregations can not be formatted as a time series. To create an alert from a portion of a histogram (e.g. 95th percentile), use the percentile() aggregation function. Multiple Aggregation Functions Each alert condition can only target a single aggregated stream of data. To alert on multiple streams simultaneously, you’ll need to decompose them into individual conditions within the same policy. Original Query: SELECT count(foo), average(bar), max(baz) from Transaction Copy Decomposed: SELECT count(foo) from Transaction SELECT average(bar) from Transaction SELECT max(baz) from Transaction Copy COMPARE WITH The COMPARE WITH clause is used to compare the values for two different time ranges. This type of query is incompatible with NRQL alerting. We recommend using a Baseline Alert Condition to dynamically detect deviations for a particular signal. SLIDE BY The SLIDE BY clause supports a feature known as sliding windows. With sliding windows, SLIDE BY data is gathered into \"windows\" of time that overlap with each other. These windows can help to smooth out line graphs with a lot of variation in cases where the rolling aggregate (such as a rolling mean) is more important than aggregates from narrow windows of time. Sliding windows are not currently supported in NRQL alerts. LIMIT In NRQL queries, the LIMIT clause is used to control the amount of data a query returns, either the maximum number of facet values returned by FACET queries or the maximum number of items returned by SELECT * queries. LIMIT is not compatible with NRQL alerting: evaluation is always performed on the full result set. NRQL alert threshold examples Here are some common use cases for NRQL alert conditions. These queries will work for static and baseline threshold types. The outlier threshold type will require additional FACET clauses. Alert on specific segments of your data Create constrained alerts that target a specific segment of your data, such as a few key customers or a range of data. Use the WHERE clause to define those conditions. SELECT average(duration) FROM Transaction WHERE account_id in (91290, 102021, 20230) Copy SELECT percentile(duration, 95) FROM Transaction WHERE name LIKE 'Controller/checkout/%' Copy Alert on Nth percentile of your data Create alerts when an Nth percentile of your data hits a specified threshold; for example, maintaining SLA service levels. Since we evaluate the NRQL query in one-minute time windows, percentiles will be calculated for each minute separately. SELECT percentile(duration, 95) FROM Transaction Copy SELECT percentile(databaseDuration, 75) FROM Transaction Copy Alert on max, min, avg of your data Create alerts when your data hits a certain maximum, minimum, or average; for example, ensuring that a duration or response time does not pass a certain threshold. SELECT max(duration) FROM Transaction Copy SELECT average(duration) FROM Transaction Copy Alert on a percentage of your data Create alerts when a proportion of your data goes above or below a certain threshold. SELECT percentage(count(*), WHERE duration > 2) FROM Transaction Copy SELECT percentage(count(*), WHERE httpResponseCode = '500') FROM Transaction Copy Alert on Apdex with any T-value Create alerts on Apdex, applying your own T-value for certain transactions. For example, get an alert notification when your Apdex for a T-value of 500ms on transactions for production apps goes below 0.8. SELECT apdex(duration, t:0.5) FROM Transaction WHERE appName like '%prod%' Copy Alert conditions and query order of operations By default, the aggregation window is 1 minute, but you can change the window to suit your needs. Whatever the aggregation window, New Relic will collect data for that window using the function in the NRQL alert condition’s query. The query is parsed and executed by our systems in the following order: FROM clause – which event type needs to be grabbed? WHERE clause – what can be filtered out? SELECT clause – what information needs to be returned from the now-filtered data set? Example: null value returned Let's say this is your alert condition query: SELECT count(*) FROM SyntheticCheck WHERE monitorName = 'My Cool Monitor' AND result = 'FAILURE' Copy If there are no failures for the aggregation window: The system will execute the FROM clause by grabbing all SyntheticCheck events on your account. Then it will execute the WHERE clause to filter through those events by looking only for the ones that match the monitor name and result specified. If there are still events left to scan through after completing the FROM and WHERE operations, the SELECT clause will be executed. If there are no remaining events, the SELECT clause will not be executed. This means that aggregators like count() and uniqueCount() will never return a zero value. When there is a count of 0, the SELECT clause is ignored and no data is returned, resulting in a value of NULL. Example: zero value returned If you have a data source delivering legitimate numeric zeroes, the query will return zero values and not null values. Let's say this is your alert condition query, and that MyCoolEvent is an attribute that can sometimes return a zero value. SELECT average(MyCoolAttribute) FROM MyCoolEvent Copy If, in the aggregation window being evaluated, there's at least one instance of MyCoolEvent and if the average value of all MyCoolAttribute attributes from that window is equal to zero, then a 0 value will be returned. If there are no MyCoolEvent events during that minute, then a NULL will be returned due to the order of operations. Tip For more information about this topic, you can check out our blog post on troubleshooting for zero versus null values. Tip You can determine how null values will be handled by adjusting loss of signal and gap filling settings in the Alert Conditions UI. Tip You can avoid NULL values entirely with a query order of operations shortcut. Do this by using a filter sub-clause, then including all filter elements within that sub-clause. The main body of the query will run and return data, at which point the SELECT clause will then run and apply the filter elements. The query will return a value of 0 if the filter elements result in no matching data. Here's an example: SELECT filter(count(*), WHERE result = 'SUCCESS' AND monitorName = 'My Favorite Monitor') FROM SyntheticCheck Copy Nested aggregation NRQL alerts Nested aggregation queries are a powerful way to query your data. However, they have a few restrictions that are important to note. Nested queries with a non-faceted innermost query are not currently supported Without a FACET, the inner query produces a single result, giving the outer query nothing to aggregate. If you're using a nested query, make sure your inner query is faceted. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu) ​​​​​ Copy Queries at all levels must have the same aggregation window size With an alert aggregation window of 1 minute, the inner query would produce two smaller windows of 30 seconds. In theory, these two windows could be aggregated by the outer query. However, this is not currently supported. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu TIMESERIES 30 seconds)​​ Copy Signal loss is not yet supported for nested queries For more information on signal loss, see NerdGraph API: Loss of signal and gap filling. Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported You can't use a nested query containing the WITH METRIC_FORMAT in the inner query to create NRQL alert conditions. NRQL condition creation tips Here are some tips for creating and using a NRQL condition: Topic Tips Condition threshold types NRQL condition threshold types include static, baseline, and outlier. Create a description For NRQL conditions, you can create a custom description to add to each violation. Descriptions can be enhanced with variable substitution based on metadata in the specific violation. For details, see Description Query results Queries must return a number. The condition evaluates the returned number against the thresholds you've set. Time period As with all alert conditions, NRQL conditions evaluate one single minute at a time. The implicit SINCE ... UNTIL clause specifying which minute to evaluate is controlled by your Evaluation offset setting. Since very recent data may be incomplete, you may want to query data from 3 minutes ago or longer, especially for: Applications that run on multiple hosts. SyntheticCheck data: Timeouts can take 3 minutes, so 5 minutes or more is recommended. Also, if a query will generate intermittent data, consider using the sum of query results option. Lost signal threshold (loss of signal detection) You can use loss of signal detection to alert on when your data (a telemetry signal) should be considered lost. A signal loss can indicate that a service or entity is no longer online or that a periodic job failed to run. You can also use this to make sure that violations for sporadic data, such as error counts, are closed when no signal is coming in. Advanced signal settings These settings give you options for better handling continuous, streaming data signals that may sometimes be missing. These settings include the aggregation window, the evaluation offset, and an option for filling data gaps. For more on using these, see Advanced signal settings. Condition settings Use the Condition settings to: Create a concise, descriptive condition name. Provide a custom violation description for the condition that will be included in violations and notifications. Add the runbook URL to include your organization's procedures for handling incidents. You may also add this information to the custom violation description. Limits on conditions See the maximum values. Health status NRQL alert conditions don't affect an entity's health status display. Examples For more information, see: Expected NRQL syntax Examples of NRQL condition queries Alert threshold types When you create a NRQL alert, you can choose from different types of thresholds: NRQL alert threshold types Description Static This is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value. Optional: Include a FACET clause. Baseline (Dynamic) Uses a self-adjusting condition based on the past behavior of the monitored values. Uses the same NRQL query form as the static type. Outlier Looks for group behavior and values that are outliers from those groups. Uses the same NRQL query form as the static type, but requires a FACET clause. Sum of query results (limited or intermittent data) Important Available only for static (basic) threshold types. If a query returns intermittent or limited data, it may be difficult to set a meaningful threshold. Missing or limited data will sometimes generate false positives or false negatives. You can use loss of signal, aggregation duration, and gap filling settings to minimize these false notifications. To avoid this problem when using the static threshold type, you can set the selector to sum of query results. This lets you set the alert on an aggregated sum instead of a value from a single harvest cycle. Up to two hours of one-minute data checks can be aggregated. The duration you select determines the width of the rolling sum and the preview chart will update accordingly. Set the loss of signal threshold Loss of signal occurs when no data matches the NRQL condition over a specific period of time. You can set your loss of signal threshold duration and and also what happens when the threshold is crossed. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Loss of signal is only available for NRQL conditions. You may also manage these settings using the GraphQL API (recommended), or the REST API. Go here for specific GraphQL API examples. Loss of signal settings: Loss of signal settings include a time duration and two possible actions. Signal loss expiration time UI label: Signal is lost after: GraphQL Node: expiration.expirationDuration Expiration duration is a timer that starts and resets when we receive a data point in the streaming alerts pipeline. If we don't receive another data point before your 'expiration time' expires, we consider that signal to be lost. This can be because no data is being sent to New Relic or the WHERE clause of your NRQL query is filtering that data out before it is streamed to the alerts pipeline. The loss of signal expiration time is independent of the threshold duration and triggers as soon as the timer expires. The maximum expiration duration is 48 hours. This is helpful when monitoring for the execution of infrequent jobs. The minimum is 30 seconds, but we recommend using at least 3-5 minutes. Loss of signal actions Once a signal is considered lost, you can close open violations, open new violations, or both. Close all current open violations: This closes all open violations that are related to a specific signal. It won't necessarily close all violations for a condition. If you're alerting on an ephemeral service, or on a sporadic signal, you'll want to choose this action to ensure that violations are closed properly. The GraphQL node name for this is \"closeViolationsOnExpiration\" Open new violations: This will open a new violation when the signal is considered lost. These violations will indicate that they are due to a loss of signal. Based on your incident preferences, this should trigger a notification. The graphQL node name for this is \"openViolationOnExpiration\" When you enable both actions, we'll close all open violations first, and then open a new violation for loss of signal. To create a NRQL alert configured with loss of signal detection in the UI: For a policy, when you create a condition, under Select a product, click NRQL, then click Next, define thresholds. Write a NRQL query that returns the values you want to alert on. For Threshold type, select Static or Baseline. Click + Add lost signal threshold, then set the signal expiration duration time in minutes or seconds in the Signal is lost after field. Choose what you want to happen when the signal is lost. You can check one or both of Close all current open violations and Open new \"lost signal\" violation. These control how loss of signal violations will be handled for the condition. Make sure you name your condition before you save it. Violations open due to loss of signal close when the signal comes back. Newly opened lost signal violations will close immediately when new data is evaluated. the condition they belong to expires. By default, conditions expire after 3 days. you manually close the violation with the Close all current open violations option. Tip Loss of signal detection doesn't work on NRQL queries that use nested aggregation or sub-queries. Advanced signal settings When creating a NRQL alert condition, the advanced signal settings gives you better control over streaming alert data and helps you avoid false alarms. When creating a NRQL condition, there are several advanced signal settings: Aggregation window Evaluation offset Fill data gaps To read an explanation of what these settings are and how they relate to each other, see Streaming alerts concepts. Below are instructions and tips on how to configure them. Aggregation window You can set the aggregation window duration to choose how long data is accumulated in a streaming time window before it's aggregated. You can set it to anything between one second and 15 minutes. The default is one minute. Tip Baseline alert condition thresholds don't support editing the aggregation window. They use the 1 minute default. Evaluation offset You can adjust the evaluation offset to coordinate our streaming alerting algorithm with your data's latency. If it takes a while for your data to arrive, then you may need to increase the evaluation offset. The total supported latency is the product of the aggregation window duration multiplied by the evaluation offset. In the example screenshot above, the supported latency is 3 minutes (a 1-minute aggregation window multiplied by three windows). If the data type comes from an APM language agent and is aggregated from many app instances (for example, Transactions, TransactionErrors, etc.), we recommend using an evaluation offset of 3 with 1 minute aggregation windows. Important When creating NRQL conditions for data collected from Infrastructure Cloud Integrations such as AWS Cloudwatch or Azure, we recommend that you start with an evaluation offset of 15 minutes, then adjust up or down depending on how long it takes to collect your data. Fill data gaps Gap filling lets you customize the values to use when your signals don't have any data. You can fill gaps in your data streams with one of these settings: None: (Default) Choose this if you don't want to take any action on empty aggregation windows. On evaluation, an empty aggregation window will reset the threshold duration timer. For example, if a condition says that all aggregation windows must have data points above the threshold for 5 minutes, and 1 of the 5 aggregation windows is empty, then the condition won't be in violation. Custom static value: Choose this if you'd like to insert a custom static value into the empty aggregation windows before they're evaluated. This option has an additional, required parameter of fillValue (as named in the API) that specifies what static value should be used. This defaults to 0. Last known value: This option inserts the last seen value before evaluation occurs. We maintain the state of the last seen value for 2 hours. Tip The alerts system fills gaps in actively reported signals. This signal history is dropped after 2 hours of inactivity. For gap filling, data points received after this period of inactivity are treated as new signals. To learn more about signal loss, gap filling, and how to request access to these features, see this Explorers Hub post. Options for editing data gap settings: In the NRQL conditions UI, go to Condition settings > Advanced signal settings > fill data gaps with and choose an option. If using our Nerdgraph API (preferred), this node is located at: actor : account : alerts : nrqlCondition : signal : fillOption | fillValue NerdGraph is our recommended API for this but if you're using our REST API, you can find this setting in the REST API explorer under the \"signal\" section of the Alert NRQL conditions API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create NRQL <em>alert</em> conditions",
        "sections": "<em>Alert</em> conditions <em>and</em> query order of operations",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " a NRQL <em>alert</em> condition for a policy: On one.newrelic.com, in the header click <em>Alerts</em> &amp; AI, then in the left sidebar click Policies. Select an existing policy or click <em>New</em> <em>alert</em> policy to create a <em>new</em> policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define"
      },
      "id": "603ef04864441fbc114e8883"
    }
  ],
  "/docs/alerts-applied-intelligence/new-relic-alerts/learn-alerts/rules-limits-alerts": [
    {
      "sections": [
        "Define custom metrics for an alert condition",
        "Requirements for custom metrics",
        "Create a custom metric condition",
        "Tip",
        "View or update custom metric conditions",
        "Custom metric examples for alert notifications"
      ],
      "title": "Define custom metrics for an alert condition",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "482f099e7b03c251b5165f3e647959db37788650",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/advanced-techniques/define-custom-metrics-alert-condition/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To alert on custom metrics, follow standard procedures to add a condition to a policy. The condition's Thresholds section includes the option to select Custom > Search metric name, where you define your specific metric values. You can start typing the custom metric name or select from the list that automatically appears. Requirements for custom metrics Use the policy's Thresholds section to define the custom metric values. These include: The exact custom metric name for the selected product category and targets. Note: wildcard characters are not allowed. Selected threshold value function. The options are average, minimum, maximum, count, and rate. Selected threshold level. The options are above, below, and equal to. Critical (required) and Warning (optional) threshold value and duration that will open a violation. For example, 5 units for at least 5 minutes. Condition name (required) for the custom metric. Create a custom metric condition To define the custom metric values for your condition: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy) or add a new alert policy. From the policy's Alert conditions page, click Add a condition. From the Categorize section, select the product and type of condition for the custom metric. From the Select entities section, add one or more targets (entities) that use your custom metric. From the Define thresholds > When target application section, select Custom > Search metric name, and begin typing the custom metric name, select from the list, or type the exact metric name. Tip Exception: The custom metric search is not enabled for: Labels for APM apps New Relic Plugins To find the metric name in these situations, use the Data explorer. Then type the exact metric name in the Alerts Define thresholds page. Provide the required threshold values for your custom metric. From the Define thresholds > Condition name section, provide a meaningful name for your custom metric condition, maximum 100 characters. Optional: Include the URL with runbook instructions for handling the situation. Click Create condition. Repeat these steps as necessary to create additional conditions for custom metrics. View or update custom metric conditions After you save the condition, you can view the selected policy's Alert conditions page with a list of each condition. From here you can follow standard procedures to select and update the custom metric condition. The Condition name does not appear in the Thresholds section for a saved condition. If you want to change the condition name for a custom metric, edit it from the selected policy's Alert conditions page: In the one.newrelic.com top nav, click Alerts & AI, click Alert policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for alert notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to alert on received and transmitted network stats), visit the New Relic Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.77542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Define custom metrics for an <em>alert</em> condition",
        "sections": "Define custom metrics for an <em>alert</em> condition",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " <em>Alerts</em> &amp; AI, click <em>Alert</em> policies, then (select a policy). Click a condition name to edit it, and then type a meaningful name for the condition. Custom metric examples for <em>alert</em> notifications If you have created a plugin or custom dashboard for your custom metric, you can view your custom metric name there. For other ideas about how to apply custom metrics (for example, to <em>alert</em> on received and transmitted network stats), visit the <em>New</em> <em>Relic</em> Explorers Hub."
      },
      "id": "6130bdf428ccbceda556a826"
    },
    {
      "sections": [
        "Create NRQL alert conditions",
        "Tip",
        "Create a NRQL alert condition",
        "Create a condition from a chart",
        "Caution",
        "NRQL alert syntax",
        "Important",
        "Reformatting incompatible NRQL",
        "NRQL alert threshold examples",
        "Alert on specific segments of your data",
        "Alert on Nth percentile of your data",
        "Alert on max, min, avg of your data",
        "Alert on a percentage of your data",
        "Alert on Apdex with any T-value",
        "Alert conditions and query order of operations",
        "Example: null value returned",
        "Example: zero value returned",
        "Nested aggregation NRQL alerts",
        "Nested queries with a non-faceted innermost query are not currently supported",
        "Queries at all levels must have the same aggregation window size",
        "Signal loss is not yet supported for nested queries",
        "Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported",
        "NRQL condition creation tips",
        "Alert threshold types",
        "Sum of query results (limited or intermittent data)",
        "Set the loss of signal threshold",
        "Advanced signal settings",
        "Aggregation window",
        "Evaluation offset",
        "Fill data gaps"
      ],
      "title": "Create NRQL alert conditions",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alert conditions"
      ],
      "external_id": "2872f770a5fc8a802f99b9f848906f7e351ad761",
      "image": "https://docs.newrelic.com/static/eb8e1b2d826f9fd9cf46fe3dd5455217/c1b63/nr1_nrql_alert_conditions.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/",
      "published_at": "2021-09-14T07:20:17Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use NRQL queries to create alert conditions. Once you've defined your signal, you can further define your warning and critical threshold levels. This determines when an alerts violation is created. Read on to learn more about how to do this. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Click NRQL, and then Next, define thresholds. Tip For more information on key concepts relating to NRQL alert conditions and streaming alerts, see Streaming alerts: key terms and concepts. Create a NRQL alert condition To create a NRQL alert condition for a policy: On one.newrelic.com, in the header click Alerts & AI, then in the left sidebar click Policies. Select an existing policy or click New alert policy to create a new policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define thresholds. Create a condition from a chart You can use a chart to create a NRQL alert condition. To create a NRQL alerts condition from a chart, click the chart menu , then click Create alert condition. Once you've named and customized your condition, you can add it to an existing policy or create a new one. Caution A small number of our older charts don't include the option to create an alert condition. NRQL alert syntax Here's the basic syntax for creating all NRQL alert conditions. The FACET clause is required for outlier threshold types. It's optional for static and baseline. SELECT function(attribute) FROM Event WHERE attribute [comparison] [AND|OR ...] Copy Clause Notes SELECT function(attribute) Required Supported functions that return numbers include: apdex average count latest max min percentage percentile sum uniqueCount Tip If you use the percentile aggregator in a faceted alert condition with many facets, this may cause the following error to appear: An error occurred while fetching chart data. If you see this error, use average instead. FROM data type Required Only one data type can be targeted. Supported data types: Event Metric (RAW data points will be returned) WHERE attribute [comparison] [AND|OR ...] Use the WHERE clause to specify a series of one or more conditions. All the operators are supported. FACET attribute Required for outlier conditions Include an optional FACET clause in your NRQL syntax depending on the threshold type: static or baseline. Use the FACET clause to separate your results by attribute and alert on each attribute independently. No LIMIT clause is allowed, but all queries will receive the maximum number of facets possible. Faceted queries can return a maximum of 5000 values for static and baseline conditions and a maximum of 500 values for outlier conditions. Important If the query returns more than the maximum number of values, the alert condition can't be created. If you create the condition and the query returns more than this number later, the alert will fail. Modify your query so that it returns a fewer number of values. Reformatting incompatible NRQL Some elements of NRQL used in charts don’t make sense in the streaming context of alerts. Here’s a list of the most common incompatible elements and suggestions for reformatting a NRQL alert query to achieve the same effect. Element Notes SINCE and UNTIL Example: SELECT percentile(largestContentfulPaint, 75) FROM PageViewTiming WHERE (appId = 837807) SINCE yesterday Copy NRQL Alerting produces a never-ending stream of windowed query results, so the SINCE and UNTIL keywords to scope the query to a point in time are not compatible. As a convenience, we automatically strip SINCE and UNTIL from a query when creating a NRQL Alert Condition from the context of a chart. TIMESERIES In NRQL queries, the TIMESERIES clause is used to return data as a time series broken out by a specified period of time. For NRQL alerts, the equivalent property of a signal is the aggregation window. histogram() The histogram() aggregation function is used to generate histograms. histogram() is not compatible with NRQL alerting: histogram aggregations can not be formatted as a time series. To create an alert from a portion of a histogram (e.g. 95th percentile), use the percentile() aggregation function. Multiple Aggregation Functions Each alert condition can only target a single aggregated stream of data. To alert on multiple streams simultaneously, you’ll need to decompose them into individual conditions within the same policy. Original Query: SELECT count(foo), average(bar), max(baz) from Transaction Copy Decomposed: SELECT count(foo) from Transaction SELECT average(bar) from Transaction SELECT max(baz) from Transaction Copy COMPARE WITH The COMPARE WITH clause is used to compare the values for two different time ranges. This type of query is incompatible with NRQL alerting. We recommend using a Baseline Alert Condition to dynamically detect deviations for a particular signal. SLIDE BY The SLIDE BY clause supports a feature known as sliding windows. With sliding windows, SLIDE BY data is gathered into \"windows\" of time that overlap with each other. These windows can help to smooth out line graphs with a lot of variation in cases where the rolling aggregate (such as a rolling mean) is more important than aggregates from narrow windows of time. Sliding windows are not currently supported in NRQL alerts. LIMIT In NRQL queries, the LIMIT clause is used to control the amount of data a query returns, either the maximum number of facet values returned by FACET queries or the maximum number of items returned by SELECT * queries. LIMIT is not compatible with NRQL alerting: evaluation is always performed on the full result set. NRQL alert threshold examples Here are some common use cases for NRQL alert conditions. These queries will work for static and baseline threshold types. The outlier threshold type will require additional FACET clauses. Alert on specific segments of your data Create constrained alerts that target a specific segment of your data, such as a few key customers or a range of data. Use the WHERE clause to define those conditions. SELECT average(duration) FROM Transaction WHERE account_id in (91290, 102021, 20230) Copy SELECT percentile(duration, 95) FROM Transaction WHERE name LIKE 'Controller/checkout/%' Copy Alert on Nth percentile of your data Create alerts when an Nth percentile of your data hits a specified threshold; for example, maintaining SLA service levels. Since we evaluate the NRQL query in one-minute time windows, percentiles will be calculated for each minute separately. SELECT percentile(duration, 95) FROM Transaction Copy SELECT percentile(databaseDuration, 75) FROM Transaction Copy Alert on max, min, avg of your data Create alerts when your data hits a certain maximum, minimum, or average; for example, ensuring that a duration or response time does not pass a certain threshold. SELECT max(duration) FROM Transaction Copy SELECT average(duration) FROM Transaction Copy Alert on a percentage of your data Create alerts when a proportion of your data goes above or below a certain threshold. SELECT percentage(count(*), WHERE duration > 2) FROM Transaction Copy SELECT percentage(count(*), WHERE httpResponseCode = '500') FROM Transaction Copy Alert on Apdex with any T-value Create alerts on Apdex, applying your own T-value for certain transactions. For example, get an alert notification when your Apdex for a T-value of 500ms on transactions for production apps goes below 0.8. SELECT apdex(duration, t:0.5) FROM Transaction WHERE appName like '%prod%' Copy Alert conditions and query order of operations By default, the aggregation window is 1 minute, but you can change the window to suit your needs. Whatever the aggregation window, New Relic will collect data for that window using the function in the NRQL alert condition’s query. The query is parsed and executed by our systems in the following order: FROM clause – which event type needs to be grabbed? WHERE clause – what can be filtered out? SELECT clause – what information needs to be returned from the now-filtered data set? Example: null value returned Let's say this is your alert condition query: SELECT count(*) FROM SyntheticCheck WHERE monitorName = 'My Cool Monitor' AND result = 'FAILURE' Copy If there are no failures for the aggregation window: The system will execute the FROM clause by grabbing all SyntheticCheck events on your account. Then it will execute the WHERE clause to filter through those events by looking only for the ones that match the monitor name and result specified. If there are still events left to scan through after completing the FROM and WHERE operations, the SELECT clause will be executed. If there are no remaining events, the SELECT clause will not be executed. This means that aggregators like count() and uniqueCount() will never return a zero value. When there is a count of 0, the SELECT clause is ignored and no data is returned, resulting in a value of NULL. Example: zero value returned If you have a data source delivering legitimate numeric zeroes, the query will return zero values and not null values. Let's say this is your alert condition query, and that MyCoolEvent is an attribute that can sometimes return a zero value. SELECT average(MyCoolAttribute) FROM MyCoolEvent Copy If, in the aggregation window being evaluated, there's at least one instance of MyCoolEvent and if the average value of all MyCoolAttribute attributes from that window is equal to zero, then a 0 value will be returned. If there are no MyCoolEvent events during that minute, then a NULL will be returned due to the order of operations. Tip For more information about this topic, you can check out our blog post on troubleshooting for zero versus null values. Tip You can determine how null values will be handled by adjusting loss of signal and gap filling settings in the Alert Conditions UI. Tip You can avoid NULL values entirely with a query order of operations shortcut. Do this by using a filter sub-clause, then including all filter elements within that sub-clause. The main body of the query will run and return data, at which point the SELECT clause will then run and apply the filter elements. The query will return a value of 0 if the filter elements result in no matching data. Here's an example: SELECT filter(count(*), WHERE result = 'SUCCESS' AND monitorName = 'My Favorite Monitor') FROM SyntheticCheck Copy Nested aggregation NRQL alerts Nested aggregation queries are a powerful way to query your data. However, they have a few restrictions that are important to note. Nested queries with a non-faceted innermost query are not currently supported Without a FACET, the inner query produces a single result, giving the outer query nothing to aggregate. If you're using a nested query, make sure your inner query is faceted. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu) ​​​​​ Copy Queries at all levels must have the same aggregation window size With an alert aggregation window of 1 minute, the inner query would produce two smaller windows of 30 seconds. In theory, these two windows could be aggregated by the outer query. However, this is not currently supported. SELECT max(cpu) FROM (FROM Event SELECT min(cpuTime) as cpu TIMESERIES 30 seconds)​​ Copy Signal loss is not yet supported for nested queries For more information on signal loss, see NerdGraph API: Loss of signal and gap filling. Nested queries containing 'WITH METRIC_FORMAT' in the inner query are not currently supported You can't use a nested query containing the WITH METRIC_FORMAT in the inner query to create NRQL alert conditions. NRQL condition creation tips Here are some tips for creating and using a NRQL condition: Topic Tips Condition threshold types NRQL condition threshold types include static, baseline, and outlier. Create a description For NRQL conditions, you can create a custom description to add to each violation. Descriptions can be enhanced with variable substitution based on metadata in the specific violation. For details, see Description Query results Queries must return a number. The condition evaluates the returned number against the thresholds you've set. Time period As with all alert conditions, NRQL conditions evaluate one single minute at a time. The implicit SINCE ... UNTIL clause specifying which minute to evaluate is controlled by your Evaluation offset setting. Since very recent data may be incomplete, you may want to query data from 3 minutes ago or longer, especially for: Applications that run on multiple hosts. SyntheticCheck data: Timeouts can take 3 minutes, so 5 minutes or more is recommended. Also, if a query will generate intermittent data, consider using the sum of query results option. Lost signal threshold (loss of signal detection) You can use loss of signal detection to alert on when your data (a telemetry signal) should be considered lost. A signal loss can indicate that a service or entity is no longer online or that a periodic job failed to run. You can also use this to make sure that violations for sporadic data, such as error counts, are closed when no signal is coming in. Advanced signal settings These settings give you options for better handling continuous, streaming data signals that may sometimes be missing. These settings include the aggregation window, the evaluation offset, and an option for filling data gaps. For more on using these, see Advanced signal settings. Condition settings Use the Condition settings to: Create a concise, descriptive condition name. Provide a custom violation description for the condition that will be included in violations and notifications. Add the runbook URL to include your organization's procedures for handling incidents. You may also add this information to the custom violation description. Limits on conditions See the maximum values. Health status NRQL alert conditions don't affect an entity's health status display. Examples For more information, see: Expected NRQL syntax Examples of NRQL condition queries Alert threshold types When you create a NRQL alert, you can choose from different types of thresholds: NRQL alert threshold types Description Static This is the simplest type of NRQL threshold. It allows you to create a condition based on a NRQL query that returns a numeric value. Optional: Include a FACET clause. Baseline (Dynamic) Uses a self-adjusting condition based on the past behavior of the monitored values. Uses the same NRQL query form as the static type. Outlier Looks for group behavior and values that are outliers from those groups. Uses the same NRQL query form as the static type, but requires a FACET clause. Sum of query results (limited or intermittent data) Important Available only for static (basic) threshold types. If a query returns intermittent or limited data, it may be difficult to set a meaningful threshold. Missing or limited data will sometimes generate false positives or false negatives. You can use loss of signal, aggregation duration, and gap filling settings to minimize these false notifications. To avoid this problem when using the static threshold type, you can set the selector to sum of query results. This lets you set the alert on an aggregated sum instead of a value from a single harvest cycle. Up to two hours of one-minute data checks can be aggregated. The duration you select determines the width of the rolling sum and the preview chart will update accordingly. Set the loss of signal threshold Loss of signal occurs when no data matches the NRQL condition over a specific period of time. You can set your loss of signal threshold duration and and also what happens when the threshold is crossed. Go to one.newrelic.com, click Alerts & AI, in the left sidebar click Policies, select a policy, then Add a condition. Loss of signal is only available for NRQL conditions. You may also manage these settings using the GraphQL API (recommended), or the REST API. Go here for specific GraphQL API examples. Loss of signal settings: Loss of signal settings include a time duration and two possible actions. Signal loss expiration time UI label: Signal is lost after: GraphQL Node: expiration.expirationDuration Expiration duration is a timer that starts and resets when we receive a data point in the streaming alerts pipeline. If we don't receive another data point before your 'expiration time' expires, we consider that signal to be lost. This can be because no data is being sent to New Relic or the WHERE clause of your NRQL query is filtering that data out before it is streamed to the alerts pipeline. The loss of signal expiration time is independent of the threshold duration and triggers as soon as the timer expires. The maximum expiration duration is 48 hours. This is helpful when monitoring for the execution of infrequent jobs. The minimum is 30 seconds, but we recommend using at least 3-5 minutes. Loss of signal actions Once a signal is considered lost, you can close open violations, open new violations, or both. Close all current open violations: This closes all open violations that are related to a specific signal. It won't necessarily close all violations for a condition. If you're alerting on an ephemeral service, or on a sporadic signal, you'll want to choose this action to ensure that violations are closed properly. The GraphQL node name for this is \"closeViolationsOnExpiration\" Open new violations: This will open a new violation when the signal is considered lost. These violations will indicate that they are due to a loss of signal. Based on your incident preferences, this should trigger a notification. The graphQL node name for this is \"openViolationOnExpiration\" When you enable both actions, we'll close all open violations first, and then open a new violation for loss of signal. To create a NRQL alert configured with loss of signal detection in the UI: For a policy, when you create a condition, under Select a product, click NRQL, then click Next, define thresholds. Write a NRQL query that returns the values you want to alert on. For Threshold type, select Static or Baseline. Click + Add lost signal threshold, then set the signal expiration duration time in minutes or seconds in the Signal is lost after field. Choose what you want to happen when the signal is lost. You can check one or both of Close all current open violations and Open new \"lost signal\" violation. These control how loss of signal violations will be handled for the condition. Make sure you name your condition before you save it. Violations open due to loss of signal close when the signal comes back. Newly opened lost signal violations will close immediately when new data is evaluated. the condition they belong to expires. By default, conditions expire after 3 days. you manually close the violation with the Close all current open violations option. Tip Loss of signal detection doesn't work on NRQL queries that use nested aggregation or sub-queries. Advanced signal settings When creating a NRQL alert condition, the advanced signal settings gives you better control over streaming alert data and helps you avoid false alarms. When creating a NRQL condition, there are several advanced signal settings: Aggregation window Evaluation offset Fill data gaps To read an explanation of what these settings are and how they relate to each other, see Streaming alerts concepts. Below are instructions and tips on how to configure them. Aggregation window You can set the aggregation window duration to choose how long data is accumulated in a streaming time window before it's aggregated. You can set it to anything between one second and 15 minutes. The default is one minute. Tip Baseline alert condition thresholds don't support editing the aggregation window. They use the 1 minute default. Evaluation offset You can adjust the evaluation offset to coordinate our streaming alerting algorithm with your data's latency. If it takes a while for your data to arrive, then you may need to increase the evaluation offset. The total supported latency is the product of the aggregation window duration multiplied by the evaluation offset. In the example screenshot above, the supported latency is 3 minutes (a 1-minute aggregation window multiplied by three windows). If the data type comes from an APM language agent and is aggregated from many app instances (for example, Transactions, TransactionErrors, etc.), we recommend using an evaluation offset of 3 with 1 minute aggregation windows. Important When creating NRQL conditions for data collected from Infrastructure Cloud Integrations such as AWS Cloudwatch or Azure, we recommend that you start with an evaluation offset of 15 minutes, then adjust up or down depending on how long it takes to collect your data. Fill data gaps Gap filling lets you customize the values to use when your signals don't have any data. You can fill gaps in your data streams with one of these settings: None: (Default) Choose this if you don't want to take any action on empty aggregation windows. On evaluation, an empty aggregation window will reset the threshold duration timer. For example, if a condition says that all aggregation windows must have data points above the threshold for 5 minutes, and 1 of the 5 aggregation windows is empty, then the condition won't be in violation. Custom static value: Choose this if you'd like to insert a custom static value into the empty aggregation windows before they're evaluated. This option has an additional, required parameter of fillValue (as named in the API) that specifies what static value should be used. This defaults to 0. Last known value: This option inserts the last seen value before evaluation occurs. We maintain the state of the last seen value for 2 hours. Tip The alerts system fills gaps in actively reported signals. This signal history is dropped after 2 hours of inactivity. For gap filling, data points received after this period of inactivity are treated as new signals. To learn more about signal loss, gap filling, and how to request access to these features, see this Explorers Hub post. Options for editing data gap settings: In the NRQL conditions UI, go to Condition settings > Advanced signal settings > fill data gaps with and choose an option. If using our Nerdgraph API (preferred), this node is located at: actor : account : alerts : nrqlCondition : signal : fillOption | fillValue NerdGraph is our recommended API for this but if you're using our REST API, you can find this setting in the REST API explorer under the \"signal\" section of the Alert NRQL conditions API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create NRQL <em>alert</em> conditions",
        "sections": "<em>Alert</em> conditions <em>and</em> query order of operations",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " a NRQL <em>alert</em> condition for a policy: On one.newrelic.com, in the header click <em>Alerts</em> &amp; AI, then in the left sidebar click Policies. Select an existing policy or click <em>New</em> <em>alert</em> policy to create a <em>new</em> policy. Click Add a condition. Under Select a product click NRQL, and then click Next, define"
      },
      "id": "603ef04864441fbc114e8883"
    },
    {
      "sections": [
        "Introduction to Applied Intelligence",
        "Why use Applied Intelligence?",
        "Determine root causes with Incident Intelligence",
        "Find unknowns with Proactive Detection"
      ],
      "title": "Introduction to Applied Intelligence",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Get started"
      ],
      "external_id": "68af5032ebe9c91467f78169bb5d30976d7f67ee",
      "image": "https://docs.newrelic.com/static/c95c61f5a259d33c01781273aed8311d/30c92/diagram-applied-intelligence-workflow.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/get-started/introduction-applied-intelligence/",
      "published_at": "2021-09-14T07:20:16Z",
      "updated_at": "2021-09-14T07:20:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applied Intelligence (AI) is our AIOps solution for DevOps, site reliability engineers, and on-call teams. At its core, Applied Intelligence helps you find, troubleshoot, and resolve problems more quickly. Specifically, it’s a hybrid machine learning engine that reduces alert noise, correlates incidents, and automatically detects anomalies. By applying machine learning to your data and feedback, Applied Intelligence is designed to improve functionality and deliver smarter context over time. After connecting your data sources to Applied Intelligence, it looks for potential problems and improves based on your feedback. Why use Applied Intelligence? How you respond to an incident can mean thousands of dollars or clicks for your company. Applied Intelligence helps you solve problems faster. Feature Description Troubleshoot and respond to incidents Our solution helps you understand your incidents and gives you ideas for what to do next. Here are a few examples: Automatically classifies incidents based on the golden signals of site reliability engineering. Identifies entities in your stack that may relate to the underlying issue. Suggests responses for incidents based on historical context. Less noise, more focus As tools and systems become more complex, alert noise can overwhelm DevOps and SRE teams. Applied Intelligence correlates related incidents and suppresses noise, so you're only notified when human action is required. Incidents with a hybrid approach Applied Intelligence streamlines your incidents by combining its built-in inputs with your knowledge and feedback. Over time, the system delivers more accurate insights. For example: Our correlation and classification engine adjusts based on your feedback. The system automatically suggests new correlation rules based on your production data. You can create custom logic using the decision builder. Automatic anomaly detection Applied Intelligence provides automatic anomaly detection on all your APM-monitored applications. We detect anomalies in throughput, latency, and error rate, with no action required from you. Benefits include: No setup required. See anomalies surfaced automatically in the anomalies feed. See them in various New Relic activity streams (for example, on the New Relic One home page). Ability to run NRQL queries of anomalies and create custom dashboards with that data. Determine root causes with Incident Intelligence As part of Applied Intelligence, Incident Intelligence helps you correlate incident events and reduce noise in your environment. With it, you can get an overview of all your issues, see suggested responders, and configure your own correlation logic. To get started, see Incident Intelligence. Find unknowns with Proactive Detection Another feature of Applied Intelligence is Proactive Detection. Proactive Detection is, by default, always on and detecting anomalies. These anomalies are surfaced in the Applied Intelligence anomalies feed, New Relic One activity streams, and can be queried, alerted on, and added to dashboards. Anomalies can be sent to Slack or via webhooks, and/or added as a source for Incident Intelligence correlation and issue notification. Proactive Detection also provides automatic analysis of anomalies and alerts via the analysis page. To get started, see Proactive Detection.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "sections": "Introduction to <em>Applied</em> <em>Intelligence</em>",
        "tags": "<em>Alerts</em> <em>and</em> <em>Applied</em> <em>Intelligence</em>",
        "body": " Incident <em>Intelligence</em>. Find unknowns with Proactive Detection Another feature of <em>Applied</em> <em>Intelligence</em> is Proactive Detection. Proactive Detection is, by default, always on and detecting anomalies. These anomalies are surfaced in the <em>Applied</em> <em>Intelligence</em> anomalies feed, <em>New</em> <em>Relic</em> One activity streams"
      },
      "id": "603ea67c64441ffd1c4e8860"
    }
  ],
  "/docs/apis/index": [
    {
      "sections": [
        "Transactions in New Relic's APM",
        "What is a transaction?",
        "Types of transactions",
        "Transaction sub-types",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.JS",
        "PHP",
        "Python",
        "Ruby",
        "Transaction segments",
        "Transaction naming",
        "Monitoring transactions",
        "Tip",
        "Query transactions"
      ],
      "title": "Transactions in New Relic's APM",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Intro to transactions"
      ],
      "external_id": "2a96f455cbf6dfdc5dda2363ba4e69b6f9dba159",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/intro-transactions/transactions-new-relic-apm/",
      "published_at": "2021-09-14T02:55:13Z",
      "updated_at": "2021-09-14T02:55:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The word transaction can have several different meanings in the software industry. This document explains how the term is used by New Relic and how transactions are reported. What is a transaction? At New Relic, a transaction is defined as one logical unit of work in a software application. Specifically, it refers to the function calls and method calls that make up that unit of work. For APM, it will often refer to a web transaction, which represents activity that happens from when the application receives a web request to when the response is sent. When you install APM in a supported system, it begins automatically reporting web requests and other important functions and methods. To supplement the default level of monitoring, you can set up custom instrumentation to report additional transactions. Some frameworks do not have a natural concept of a transaction. In other words, there are no predefined pathways that can easily be recognized or monitored as transactions. To define transactions in such frameworks, you can use custom instrumentation. Types of transactions Cumulative transaction data appears in APM on the Transactions page. The two main categories of transactions are web and non-web: Web: Transactions are initiated with an HTTP request. For most organizations, these represent customer-centric interactions and thus are the most important transactions to monitor. Non-web: Non-web transactions are not initiated with a web request. They can include non-web worker processes, background processes, scripts, message queue activity, and other tasks. Transaction sub-types Our agents have these transaction sub-types: C SDK Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Function The invocation of the named function. Go Doesn't apply. Java Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. framework The invocation of a framework that is recognized by the agent. .NET Sub-type Description Action The invocation of the named framework action. Used when the agent is able to identify a framework-specific action name. ASP The invocation of an ASP.NET request. Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. MonoRail The invocation of a MonoRail request. MVC The invocation of a MVC request. OpenRasta The invocation of an OpenRasta request. StatusCode The HTTP status code returned for the transaction. Often used when a more specific transaction sub-type is unavailable. WCF The invocation of a WCF request. WebAPI The invocation of a WebAPI request. WebService The invocation of a WebService request. Node.JS Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Message Message broker or queue communication. PHP Sub-type Description Action The invocation of the named framework action. Used when the agent is able to identify a framework-specific action name. Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Function The invocation of the named function. PHP The invocation of a background PHP job. StatusCode The HTTP status code returned for the transaction. Often used when a more specific transaction sub-type is unavailable. unknown The invocation of an unknown web transaction or background job. URI The invocation of the named URI. Usually used when a framework or language level transaction name cannot be determined. Python Sub-type Description ASGIWeb WebTransaction from an ASGI application. Message Message broker or queue communication. WSGIWeb WebTransaction from a WSGI application. Ruby Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Transaction segments The individual functions and calls that make up a transaction are called segments. For example external service calls and database calls are segments, and both have their own UI pages in APM. The APM Transactions page displays aggregate transaction segment data. To add segments to a transaction, use custom instrumentation. To see the segments of a specific transaction, use transaction traces. Transaction naming For supported frameworks, transaction names can come from various sources, such as the name given to the transaction by the framework, function names detected during the transaction, or a web request's URL. For transactions that produce many names with a similar format, we consolidate those into general transaction categories. For example, a transaction might be displayed as /user/*/control_panel, where the * represents different user names. To rename transactions or adjust how names are consolidated, use custom instrumentation. Monitoring transactions Here are some other ways you can use APM to monitor transactions: If you want to monitor... Use this... Transactions important to your business Create key transactions, which emphasizes them in the UI and lets you set a custom level of monitoring for them. Async activity Follow the procedures to set up asynchronous activity for your specific APM language agent. Activity across applications Linking transactions across applications gives you more detail about business-relevant application activity. For more information, see the documentation about distributed tracing and cross application traces. Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Query transactions Transactions are available for querying with an in-depth set of default attributes attached. Using these attributes, you can run queries and create custom charts that APM does not provide by default. For information on how to query your data using our UI or NRQL, see Query New Relic data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 68.11202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " processes, background processes, scripts, message queue activity, and other tasks. Transaction sub-types Our agents have these transaction sub-types: C SDK Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation <em>APIs</em>. Function The invocation"
      },
      "id": "603e8774e7b9d2a6a42a07bc"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/java-release-notes/java-agent-720/",
      "sections": [
        "Java agent v7.2.0",
        "New features and improvements",
        "Fixes",
        "Support statement:"
      ],
      "published_at": "2021-09-14T14:44:13Z",
      "title": "Java agent v7.2.0",
      "updated_at": "2021-09-13T10:14:43Z",
      "type": "docs",
      "external_id": "51fe60e943d56f848f29fd1ce11b89c50e2210a6",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "New features and improvements Scala Library Instrumentation #362 and #363 STTP versions 2 & 3 Akka-HTTP, HTTP4s and STTP core backends Cats-effect v2 ZIO v1 HTTP4s client & server v0.21 Play 2.3-2.8 Akka-HTTP v10.1 & v10.2 For more information, see Scala instrumentation. Scala API support (see PRs above) Scala APIs provided for explicit instrumentation of several of above libraries in case auto-instrumentation is not desired Cats-effect v2 ZIO v1 AWS v2 DynamoDB Instrumentation #343 Synchronous and asynchronous AWS v2 APIs are auto-instrumented similarly to v1 APIs For more information, see Add support for AWS SDK 2 DynamoDB sync/async clients GraphQL 16 Instrumentation #396 Create meaningful transaction names Create meaningful spans Reporting GraphQL errors For more information, see GraphQL for Java JFR feature causing excessive overhead when enabled JFR #203 Refactored code to use less memory. Fixes The existing MongoDB instrumentation was partially applying when MongoDB Reactive Streams is being used. Disable weaving package when MongoDB 4.x+ reactive driver detected #341 For more information, see Spring Reactive DB Drivers - MongoDB Support Support statement: New Relic recommends that you upgrade the agent regularly to ensure that you're getting the latest features and performance benefits. Additionally, older releases will no longer be supported when they reach end-of-life.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 65.10383,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": "New features and improvements Scala Library Instrumentation #362 and #363 STTP versions 2 &amp; 3 Akka-HTTP, HTTP4s and STTP core backends Cats-effect v2 ZIO v1 HTTP4s client &amp; server v0.21 Play 2.3-2.8 Akka-HTTP v10.1 &amp; v10.2 For more information, see Scala instrumentation. Scala <em>API</em> support (see PRs"
      },
      "id": "613f2493e7b9d2dd6db6f24c"
    },
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 64.7622,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    }
  ],
  "/docs/apis/insights-apis/insights-dashboard-api": [
    {
      "sections": [
        "APM: Report custom events and attributes",
        "Data considerations",
        "Tip",
        "Record custom events and attributes",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Timestamps",
        "Limits and restricted characters",
        "Reserved words"
      ],
      "title": "APM: Report custom events and attributes",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Custom events"
      ],
      "external_id": "bbb007a010108780f8c1131e08389b8ac26c4009",
      "image": "",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/custom-data/custom-events/apm-report-custom-events-attributes/",
      "published_at": "2021-09-14T05:59:35Z",
      "updated_at": "2021-09-14T05:59:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have APM, you can report custom event data. You can then query and visualize your data in New Relic. Data considerations New Relic agents send event data to New Relic as part of the normal harvest cycle every five seconds for agent versions supporting real time streaming. Sending a lot of events can increase the memory overhead of the agent. New Relic enforces an upper limit of 833 custom events every 5 seconds. Additionally, posts greater than 1MB (10^6 bytes) in size will not be recorded, regardless of the custom event limit. You can also send custom events using the Event API (without need for APM). However, be aware that custom events sent with the agent APIs are not compatible with high security mode. Tip For more information, check out New Relic University’s tutorial Adding custom data with the APM agent API. Or, go directly to the full online course Custom data with APM. Record custom events and attributes You can add your own custom APM events and attributes, which you can then use for querying and charting. This is one of several ways to report custom data. To record a custom event, follow the procedures for your New Relic language agent. To add custom attributes to APM events, you must first enable them for your APM agent, and then make an API call to record the attribute. Follow the agent-specific custom attribute procedures. When creating your own custom events and attributes, follow data requirements for: Size limits Attribute types Reserved words C SDK To add a custom event to apps monitored by the C SDK, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For more information, see the Guide to using the C SDK API. You can then add custom attributes for your C SDK app. Go To add a custom event to apps monitored by the Go agent, use RecordCustomEvent. You can then add custom attributes for your Go app. Java Custom event collection is enabled by default in Java agent version 3.13.0 or higher. To send custom events, call recordCustomEvent. For example: Map<String, Object> eventAttributes = new HashMap<String, Object>(); NewRelic.getAgent().getInsights().recordCustomEvent(\"MyCustomEvent\", eventAttributes); Copy The first argument defines the name of your event type, and the second argument is a map with the attributes for your custom event. Event attributes must be strings or numbers. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Java agent via a configuration parameter in newrelic.yml. Specify the maximum number of events to record per minute as an integer. For example, if you want to send less than the default of 10000 events: custom_insights_events: max_samples_stored: 5000 Copy To disable custom events entirely, add the following to your newrelic.yml: custom_insights_events: enabled: false Copy You can then add custom attributes for your Java app. For Java agent versions prior to 4.1.0, use the following YAML configuration: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy .NET Custom event collection is enabled by default in .NET agent version 4.6.29.0 or higher. To send custom events, simply call RecordCustomEvent(). For example: var eventAttributes = new Dictionary<String, Object>(); NewRelic.Api.Agent.NewRelic.RecordCustomEvent('MyCustomEvent', eventAttributes); Copy The first argument defines the name of your event type, and the second argument is an IEnumerable with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your .NET app. You can turn off custom events entirely by setting customEvents.enabled to false in newrelic.config. Node.js Custom event collection is enabled by default in Node.js agent version 1.15.0 or higher. To send custom events, simply call the relevant API. For example: recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your Node.js app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.js. PHP Custom event collection is enabled by default in PHP agent version 4.18 or higher. To send custom events, simply call the relevant API function. For example: newrelic_record_custom_event(\"WidgetSale\", array(\"color\"=>\"red\", \"weight\"=>12.5)); Copy The first argument defines the name of your event type, and the second argument is an array with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. By default, the maximum number of custom events recorded per minute is 10,000. This setting cannot be changed. You can then add custom attributes for your PHP app. To disable custom events entirely, add newrelic.custom_insights_events.enabled = false to your newrelic.ini and restart the agent. Python Custom event collection is enabled by default in Python agent version 2.60.0.46 or higher. To send custom events, simply call the relevant API. For example: newrelic.agent. record_custom_event (event_type, params, application=None) Copy The event_type defines the name (or type) of the custom event. Attributes of the custom event should be passed in as a dictionary via the params keyword argument. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For limits and restrictions on event_type and params, see our documentation about limits and restricted characters and reserved words If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. You can then add custom attributes for your Python app. To disable custom events entirely, set custom_insights_events.enabled to False in your newrelic.ini configuration file. Ruby Custom event collection is enabled by default in Ruby agent version 3.9.8.273 or higher. To send custom events, simply call the relevant API. For example: ::NewRelic::Agent.record_custom_event('WidgetSale', color: 'red', weight: 12.5) Copy The first argument defines the name of your event type, and the second argument is a hash with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Ruby agent via a configuration parameter in newrelic.yml: Add custom_insights_events.max_samples_stored: to your configuration file. Specify the maximum number of events to record per minute as an integer. For example, if you want to be able to send up to 5000 events per minute, add: custom_insights_events.max_samples_stored: 5000 Copy You can then add custom attributes for your Ruby app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.yml. Timestamps You may not specify a timestamp on events that are collected and recorded via the agent. The agent will automatically assign a timestamp to events based on when they are recorded via the API. Limits and restricted characters See Custom event data requirements for size limits, data types, and naming syntax requirements. Reserved words Before creating custom attributes, review New Relic's list of reserved terms used by NRQL. Otherwise unexpected results may occur.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 268.8282,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM: Report custom <em>events</em> and attributes",
        "sections": "APM: Report custom <em>events</em> and attributes",
        "tags": "<em>Event</em> <em>data</em> <em>sources</em>",
        "body": " can then add custom attributes for your Node.js app. To disable custom events entirely, add custom_<em>insights</em>_events.enabled: false to newrelic.js. PHP Custom <em>event</em> collection is enabled by default in PHP agent version 4.18 or higher. To send custom events, simply call the relevant <em>API</em> function"
      },
      "id": "609fa629e7b9d2fa8dc3eb04"
    },
    {
      "sections": [
        "Insights query API",
        "Tip",
        "Requirements and recommendations",
        "1. Register an API key",
        "2. Create the API query request",
        "Linux",
        "Microsoft Windows",
        "3. Process the returned JSON",
        "Example",
        "Query, query API request, returned data",
        "Rate limiting guidelines"
      ],
      "title": "Insights query API",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Insights API"
      ],
      "external_id": "fa0e72f1345a7adde2418c08dc8950c970140a74",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/insights-apis/query-insights-event-data-api/",
      "published_at": "2021-09-13T14:57:47Z",
      "updated_at": "2021-07-08T23:30:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Insights query API is a REST API for making NRQL queries. Tip This API is no longer the preferred way to query New Relic data. Please use NerdGraph to do that. Requirements and recommendations This API is no longer the preferred way to query New Relic data. Please use NerdGraph to do that. Use of this API may be restricted by role-related user permissions. To add custom data to New Relic, you'd use our data ingest APIs. If your account hosts data in the EU data center, ensure you are using the proper API endpoints for EU region accounts. 1. Register an API key To use the Insights query API, you need a query key. You can have multiple query keys, and any query key can be used to initiate any Insights API query. If you have multiple systems querying Insights or different data destinations, New Relic recommends you use multiple query keys to enhance data security. For security reasons, query keys cannot be altered or read using the API. To change or read a query key, use the New Relic UI. Tip This API is no longer the preferred way to query New Relic data. Please use NerdGraph to do that. To create a new query key: Go to insights.newrelic.com > Manage data > API keys. Select the plus icon next to the Query keys heading. Enter a short description of the key. Select Save your notes. 2. Create the API query request When you create or edit a query key, you will see an example curl query that you can use as a template. The example query won't work unless you follow these query rules: The NRQL query string must be URL-encoded. The query string must be less than 4000 bytes. The URL must contain a valid account ID. The X-Query-Key must contain a valid query key. The Content-Type must be application/json. Linux Here is a curl example: curl -H \"Accept: application/json\" -H \"X-Query-Key: YOUR_QUERY_KEY\" \"https://insights-api.newrelic.com/v1/accounts/YOUR_ACCOUNT_ID/query?nrql=YOUR_URL_ENCODED_QUERY\" Copy Microsoft Windows You can use Powershell to query events via API: Invoke-WebRequest -Uri https://insights-api.newrelic.com/v1/accounts/YOUR_ACCOUNT_ID/query?nrql=YOUR_URL_ENCODED_QUERY -Headers @{\"X-Query-Key\"=\"YOUR_QUERY_KEY\"} -ContentType \"application/json\" -Method GET Copy 3. Process the returned JSON The query API returns results in JSON format. There is a limit of 2,000 results per request. The structure of the JSON data depends on the NRQL that you used in the request: Different combinations of SELECT statements, clauses, and functions each return an appropriate response. When writing your code to process the JSON, you should do a test run of your query and examine the resulting JSON. Example The Insights query API returns JSON data. Here's an example of a query, its query request format, and its returned data: Query, query API request, returned data Original NRQL query: SELECT count(appName) FROM PageView SINCE '2014-08-04 00:00:00+0500' Copy Query cURL request (with URL-encoded NRQL query): curl -H \"Accept: application/json\" -H \"X-Query-Key: YOUR_QUERY_KEY\" \"https://insights-api.newrelic.com/v1/accounts/YOUR_ACCOUNT_ID/query?nrql=SELECT+count%28appName%29+FROM+PageView+SINCE+%272014-08-04+00%3A00%3A00%2B0500%27\" Copy Returned JSON data: { \"results\": [ { \"count\": 80275388 } ], \"metadata\": { \"eventTypes\": [ \"PageView\" ], \"eventType\": \"PageView\", \"openEnded\": true, \"beginTime\": \"2014-08-03T19:00:00Z\", \"endTime\": \"2017-01-18T23:18:41Z\", \"beginTimeMillis=\": 1407092400000, \"endTimeMillis\": 1484781521198, \"rawSince\": \"'2014-08-04 00:00:00+0500'\", \"rawUntil\": \"`now`\", \"rawCompareWith\": \"\", \"clippedTimeWindows\": { \"Browser\": { \"beginTimeMillis\": 1483571921198, \"endTimeMillis\": 1484781521198, \"retentionMillis\": 1209600000 } }, \"messages\": [], \"contents\": [ { \"function\": \"count\", \"attribute\": \"appName\", \"simple\": true } ] } } Copy Rate limiting guidelines We have query rate limits. You likely won't encounter these limits, especially if you follow these general guidelines: Limit the amount of requests with complex queries (for example, queries with FACET or TIMESERIES clauses, or queries of over a million events) run at the same time. Limit the amount of requests run concurrently over extended periods of time to a maximum of 5, especially if they include complex queries. If New Relic applies rate limits on your account for the number of queries per minute, the query API returns a 429 error. If New Relic applies rate limits on your account for records inspected, the query API returns a 503 error and your charts may display timeout error messages.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.79842,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Insights</em> query <em>API</em>",
        "sections": "<em>Insights</em> query <em>API</em>",
        "tags": "<em>Event</em> <em>data</em> <em>sources</em>",
        "body": "-Key: YOUR_QUERY_KEY&quot; &quot;https:&#x2F;&#x2F;<em>insights</em>-<em>api</em>.newrelic.com&#x2F;v1&#x2F;accounts&#x2F;YOUR_ACCOUNT_ID&#x2F;query?nrql=SELECT+count%28appName%29+FROM+PageView+SINCE+%272014-08-04+00%3A00%3A00%2B0500%27&quot; Copy Returned JSON <em>data</em>: { &quot;results&quot;: [ { &quot;count&quot;: 80275388 } ], &quot;metadata&quot;: { &quot;<em>event</em>Types&quot;: [ &quot;PageView&quot; ], &quot;<em>event</em>"
      },
      "id": "609f9c86196a67e93722b170"
    },
    {
      "sections": [
        "Data requirements and limits for custom event data",
        "General requirements",
        "Important",
        "Reserved words",
        "Event type limits"
      ],
      "title": "Data requirements and limits for custom event data",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Custom events"
      ],
      "external_id": "46f2be93b0c4daf40da9b93cfe0fbf5f235eecb7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/custom-data/custom-events/data-requirements-limits-custom-event-data/",
      "published_at": "2021-09-14T12:55:56Z",
      "updated_at": "2021-07-16T03:18:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains general requirements and rules for inserting and using custom events and their associated attributes. Additional requirements may apply based on the method you use. You can report custom events to New Relic in several ways, including: APM agent APIs Event API (There are additional requirements when using the Event API.) Browser monitoring agent APIs (There are additional requirements with the custom PageAction event.) Mobile monitoring SDK General requirements When reporting custom events and attributes, follow these general requirements for supported data types, naming syntax, and size: Requirement Description Payload Total maximum size or length: 1MB (10^6 bytes) maximum per POST. We highly recommend using compression. The payload must be encoded as UTF-8. The Event API has additional HTTP rate limits. Attribute data types Attribute values can be either a string or a numeric integer or float. If your attribute values contain date information, define it as an unformatted Unix timestamp (in seconds or milliseconds) by using the Insights data formatter. Attribute size Maximum name size: 255 bytes. Maximum attribute value size: Custom attributes sent by the agent: 255 bytes Attributes attached to custom events sent using the Event API: 4096 characters Maximum total attributes per event: 254. Exception: If you use an APM agent API, the max is 64. Maximum total attributes per event type: 48,000. Important Charts may only display the first 255 characters of attribute values. For complete attribute values, use the JSON chart type or Query API. Naming syntax Attribute names can be a combination of alphanumeric characters, colons (:), periods (.), and underscores (_). Event types (using the eventType attribute) can be a combination of alphanumeric characters, colons (:), and underscores (_). Do not use words reserved for use by NRQL. Null values The database does not store any data with a null value. Reserved words Avoid using the following reserved words as names for events and attributes. Otherwise, unexpected results may occur. Important This is not a complete list. In general, avoid using MySQL-reserved words to avoid collision with future New Relic functionality. Keyword Description accountId This is a reserved attribute name. If it's included, it will be dropped during ingest. appId Value must be an integer. If it is not an integer, the attribute name and value will be dropped during ingest. eventType The event type as stored in New Relic. New Relic agents and scripts normally report this as eventType. Can be a combination of alphanumeric characters, colons (:), and underscores (_). Be sure to review the prohibited eventType values and eventType limits. Prohibited eventType values For your eventType value, avoid using: Metric, MetricRaw, and strings prefixed with Metric[0-9] (such as Metric2 or Metric1Minute). Public_ and strings prefixed with Public_. These event types are reserved for use by New Relic. Events passed in with these eventType values will be dropped. timestamp Must be a Unix epoch timestamp. You can define timestamps either in seconds or in milliseconds. It must be +/-1 day (24 hours) of the current time on the server. Log forwarding terms The following keys are reserved by the Infrastructure agent's log forwarding feature: entity.guid, log, hostname, plugin.type, fb.input. If used, they are dropped during ingest and a warning is added to the logs. NRQL syntax terms If you need to use NRQL syntax terms as attribute names, including dotted attributes, they must be enclosed in backticks; for example, `LIMIT` or `consumer.offset`. Otherwise, avoid using these reserved words: ago, and, as, auto, begin, begintime, compare, day, days, end, endtime, explain, facet, from, hour, hours, in, is, like, limit, minute, minutes, month, months, not, null, offset, or, raw, second, seconds, select, since, timeseries, until, week, weeks, where, with Event type limits The current limit for total number of eventType values is 250 per child account in a given 24-hour time period. If a user exceeds this limit, New Relic may filter or drop data. Event types include: Default events from New Relic agents Custom events from New Relic agents Custom events from Insights custom event inserter",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.95175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Data</em> requirements and limits for custom <em>event</em> <em>data</em>",
        "sections": "<em>Data</em> requirements and limits for custom <em>event</em> <em>data</em>",
        "tags": "<em>Event</em> <em>data</em> <em>sources</em>",
        "body": " (There are additional requirements when using the <em>Event</em> <em>API</em>.) Browser monitoring agent APIs (There are additional requirements with the custom PageAction <em>event</em>.) Mobile monitoring SDK General requirements When reporting custom events and attributes, follow these general requirements for supported <em>data</em> types, naming"
      },
      "id": "609fa5cfe7b9d2bf16c3eb69"
    }
  ],
  "/docs/apis/insights-apis/query-insights-event-data-api": [
    {
      "sections": [
        "APM: Report custom events and attributes",
        "Data considerations",
        "Tip",
        "Record custom events and attributes",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Timestamps",
        "Limits and restricted characters",
        "Reserved words"
      ],
      "title": "APM: Report custom events and attributes",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Custom events"
      ],
      "external_id": "bbb007a010108780f8c1131e08389b8ac26c4009",
      "image": "",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/custom-data/custom-events/apm-report-custom-events-attributes/",
      "published_at": "2021-09-14T05:59:35Z",
      "updated_at": "2021-09-14T05:59:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have APM, you can report custom event data. You can then query and visualize your data in New Relic. Data considerations New Relic agents send event data to New Relic as part of the normal harvest cycle every five seconds for agent versions supporting real time streaming. Sending a lot of events can increase the memory overhead of the agent. New Relic enforces an upper limit of 833 custom events every 5 seconds. Additionally, posts greater than 1MB (10^6 bytes) in size will not be recorded, regardless of the custom event limit. You can also send custom events using the Event API (without need for APM). However, be aware that custom events sent with the agent APIs are not compatible with high security mode. Tip For more information, check out New Relic University’s tutorial Adding custom data with the APM agent API. Or, go directly to the full online course Custom data with APM. Record custom events and attributes You can add your own custom APM events and attributes, which you can then use for querying and charting. This is one of several ways to report custom data. To record a custom event, follow the procedures for your New Relic language agent. To add custom attributes to APM events, you must first enable them for your APM agent, and then make an API call to record the attribute. Follow the agent-specific custom attribute procedures. When creating your own custom events and attributes, follow data requirements for: Size limits Attribute types Reserved words C SDK To add a custom event to apps monitored by the C SDK, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For more information, see the Guide to using the C SDK API. You can then add custom attributes for your C SDK app. Go To add a custom event to apps monitored by the Go agent, use RecordCustomEvent. You can then add custom attributes for your Go app. Java Custom event collection is enabled by default in Java agent version 3.13.0 or higher. To send custom events, call recordCustomEvent. For example: Map<String, Object> eventAttributes = new HashMap<String, Object>(); NewRelic.getAgent().getInsights().recordCustomEvent(\"MyCustomEvent\", eventAttributes); Copy The first argument defines the name of your event type, and the second argument is a map with the attributes for your custom event. Event attributes must be strings or numbers. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Java agent via a configuration parameter in newrelic.yml. Specify the maximum number of events to record per minute as an integer. For example, if you want to send less than the default of 10000 events: custom_insights_events: max_samples_stored: 5000 Copy To disable custom events entirely, add the following to your newrelic.yml: custom_insights_events: enabled: false Copy You can then add custom attributes for your Java app. For Java agent versions prior to 4.1.0, use the following YAML configuration: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy .NET Custom event collection is enabled by default in .NET agent version 4.6.29.0 or higher. To send custom events, simply call RecordCustomEvent(). For example: var eventAttributes = new Dictionary<String, Object>(); NewRelic.Api.Agent.NewRelic.RecordCustomEvent('MyCustomEvent', eventAttributes); Copy The first argument defines the name of your event type, and the second argument is an IEnumerable with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your .NET app. You can turn off custom events entirely by setting customEvents.enabled to false in newrelic.config. Node.js Custom event collection is enabled by default in Node.js agent version 1.15.0 or higher. To send custom events, simply call the relevant API. For example: recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can then add custom attributes for your Node.js app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.js. PHP Custom event collection is enabled by default in PHP agent version 4.18 or higher. To send custom events, simply call the relevant API function. For example: newrelic_record_custom_event(\"WidgetSale\", array(\"color\"=>\"red\", \"weight\"=>12.5)); Copy The first argument defines the name of your event type, and the second argument is an array with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. By default, the maximum number of custom events recorded per minute is 10,000. This setting cannot be changed. You can then add custom attributes for your PHP app. To disable custom events entirely, add newrelic.custom_insights_events.enabled = false to your newrelic.ini and restart the agent. Python Custom event collection is enabled by default in Python agent version 2.60.0.46 or higher. To send custom events, simply call the relevant API. For example: newrelic.agent. record_custom_event (event_type, params, application=None) Copy The event_type defines the name (or type) of the custom event. Attributes of the custom event should be passed in as a dictionary via the params keyword argument. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For limits and restrictions on event_type and params, see our documentation about limits and restricted characters and reserved words If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. You can then add custom attributes for your Python app. To disable custom events entirely, set custom_insights_events.enabled to False in your newrelic.ini configuration file. Ruby Custom event collection is enabled by default in Ruby agent version 3.9.8.273 or higher. To send custom events, simply call the relevant API. For example: ::NewRelic::Agent.record_custom_event('WidgetSale', color: 'red', weight: 12.5) Copy The first argument defines the name of your event type, and the second argument is a hash with the attributes for your custom event. Ensure you limit the number of unique event type names that you create, and do not generate these names dynamically. For restrictions on event type names, see our documentation about limits and restricted characters and NRQL reserved words. You can change the maximum number of events recorded by the Ruby agent via a configuration parameter in newrelic.yml: Add custom_insights_events.max_samples_stored: to your configuration file. Specify the maximum number of events to record per minute as an integer. For example, if you want to be able to send up to 5000 events per minute, add: custom_insights_events.max_samples_stored: 5000 Copy You can then add custom attributes for your Ruby app. To disable custom events entirely, add custom_insights_events.enabled: false to newrelic.yml. Timestamps You may not specify a timestamp on events that are collected and recorded via the agent. The agent will automatically assign a timestamp to events based on when they are recorded via the API. Limits and restricted characters See Custom event data requirements for size limits, data types, and naming syntax requirements. Reserved words Before creating custom attributes, review New Relic's list of reserved terms used by NRQL. Otherwise unexpected results may occur.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 268.828,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM: Report custom <em>events</em> and attributes",
        "sections": "APM: Report custom <em>events</em> and attributes",
        "tags": "<em>Event</em> <em>data</em> <em>sources</em>",
        "body": " can then add custom attributes for your Node.js app. To disable custom events entirely, add custom_<em>insights</em>_events.enabled: false to newrelic.js. PHP Custom <em>event</em> collection is enabled by default in PHP agent version 4.18 or higher. To send custom events, simply call the relevant <em>API</em> function"
      },
      "id": "609fa629e7b9d2fa8dc3eb04"
    },
    {
      "sections": [
        "Insights Dashboard API",
        "End of life notice",
        "Requirements",
        "Overview",
        "Example use cases",
        "Account and data security",
        "Use the API Explorer",
        "View Dashboard API video",
        "Use API endpoints",
        "Dashboard API schema",
        "Important",
        "Caution",
        "Example dashboard schema",
        "Dashboard data definitions",
        "Widget data definitions",
        "Supported visualizations"
      ],
      "title": "Insights Dashboard API",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Insights API"
      ],
      "external_id": "71a0104d88a3a8859513802e853850d8b0456606",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/insights-apis/insights-dashboard-api/",
      "published_at": "2021-09-13T14:56:40Z",
      "updated_at": "2021-08-02T03:52:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Do not use the Insights Dashboards API. Instead, use the New Relic One Dashboards API with NerdGraph, our GraphQL API. End of life notice The Insights Dashboard API reaches end of life in 2021. As of July 28, 2021, the CREATE and UPDATE endpoints are not available. As of August 30, 2021, the GET and DELETE endpoints are not available. To make the transition from the Insights Dashboard API to the New Relic One Dashboards API, see our migration guide. For more information, see the NerdGraph dashboards tutorial and Explorers Hub post. Requirements If your account hosts data in the EU data center, ensure you're using the proper API endpoints for EU region accounts. Overview The Insights Dashboard API allows you to list, create, read, update, and delete new or existing dashboards. New Relic's API Explorer includes the cURL request format, available parameters, response status codes, and JSON response structure for available API calls. Example use cases The Insights Dashboard API is a flexible solution for many different use cases. Here are a few examples of how you can leverage the Dashboard API to solve problems: Automatically create dashboards for new teams or services pre-populated with standard organization metrics and charts. Use the API to view dashboard schemas, and save them in a central repository for source control and backups. Create widget and dashboard templates to allow teams to self-service. Account and data security The Dashboard API includes safeguards to help ensure account and data security. Requirements Comments User key and permissions Required: This API requires a user key. You cannot use your account-level REST API key to manage dashboards. Cross-account widgets You can view cross-account widgets on a dashboard by using the Insights or New Relic One dashboards UI. However, the ability to view cross-account widgets when using the Dashboard API has these restrictions: To view the list of widgets on a specific dashboard with the Dashboard API, you must use the SHOW endpoint. To view a widget in the API payload, the widget's account ID must be the same as the account ID for the payload. If the account ID is not the same, the widget's details will not be listed. Instead, the widget's payload will show: \"visualization\": \"inaccessible\" Copy Use the API Explorer To view the Dashboard API options in the API Explorer: Log in to your New Relic account. Go to rpm.newrelic.com/api/explore. From the API Explorer's Select an account and key dropdown, select a user key. Select Dashboards, then select the API function. To use API functions with existing dashboards, include the dashboard id. To find the dashboard id, select the LIST endpoint, and apply filtering options. View Dashboard API video Follow along with this step-by-step tutorial to learn how to find your API keys, create new dashboards, view and update existing dashboards via the REST API. For a step-by-step guide to using the New Relic API Explorer to manage Insights dashboards, watch this video (approximately 6 minutes). Or, go directly to the full online course about New Relic APIs. Use API endpoints The API supports the following functions for Insights dashboards only. The API does not support these functions for data apps (collections of linked dashboards). API endpoints Comments CREATE POST /v2/dashboards Create a new dashboard. The API permits a maximum of 300 widgets when creating or updating a dashboard. Attempting to POST more than 300 widgets will produce an error. To add more widgets to the dashboard, use the Insights UI. UPDATE PUT /v2/dashboards/:id: Update an existing dashboard for the dashboard id. The API permits a maximum of 300 widgets when creating or updating a dashboard. Attempting to PUT more than 300 widgets will produce an error. To add more or edit existing widgets on the dashboard, use the Insights UI. SHOW GET /v2/dashboards/:id: View an existing dashboard and all accessible widgets for the dashboard id. To help ensure data security, the SHOW function returns only the dashboard widgets that the user has permission to view. If a dashboard includes widgets that the user is not authorized to view, the API will provide a placeholder with the visualization field set to inaccessible. LIST GET /v2/dashboards?page=:page:&per_page=:count: View a paginated list of dashboards. The list shows filterable dashboard metadata only; no widgets will appear in the list. Search options include: filter[title] as substring search filter[category] (all / favorites / mine} filter[created_after] as ISO date filter[created_before] as ISO date filter[updated_after] as ISO date filter[updated_before] as ISO date Sort options include: name recently_viewed last_edited If no sort option is provided, results will be ordered by id. Pagination options include the page and per_page fields. The per_page field controls the number of results per page with a default and maximum of 100 results. The response will include a pagination Link header, which provides next page and last page links. DELETE DELETE /v2/dashboards/:id: Delete an existing dashboard indicated by the dashboard id. Dashboard API schema JSON is the only supported format. When using API functions, be sure to add .json to the end of the request URL, as shown in the API Explorer. Important Widgets have a size limit of 3x3 (height and width may not exceed 3). Caution The Dashboard API 3-column restriction also applies to the dashboards you upload to New Relic One dashboards. If you update a dashboard with a different layout using the API, the uploaded dashboard will revert to the 3-column configuration. Example dashboard schema { \"dashboard\": { \"metadata\": { \"version\": 1 }, \"title\": \"API Widget Sample\", \"icon\":\"none|archive|bar-chart|line-chart|bullseye|user|usd|money|thumbs-up|thumbs-down|cloud|bell|bullhorn|comments-o|envelope|globe|shopping-cart|sitemap|clock-o|crosshairs|rocket|users|mobile|tablet|adjust|dashboard|flag|flask|road|bolt|cog|leaf|magic|puzzle-piece|bug|fire|legal|trophy|pie-chart|sliders|paper-plane|life-ring|heart\", \"grid_column_count\": 3|12, \"visibility\": \"owner|all\", \"editable\": \"read_only|editable_by_owner|editable_by_all\", \"filter\": { \"event_types\": [ \"Transaction\" ], \"attributes\": [ \"appName\" ] }, \"widgets\": [ { \"visualization\": \"billboard|gauge|billboard_comparison\", \"account_id\": 12345, \"data\": [ { \"nrql\": \"SELECT count(*) from Transaction since 5 minutes ago\" } ], \"presentation\": { \"title\": \"Threshold Event Chart\", \"notes\": null, \"threshold\": { \"red\": 18000000, \"yellow\": 8000000 } }, \"layout\": { \"width\": 1, \"height\": 1, \"row\": 1, \"column\": 1 } }, { \"visualization\": \"facet_bar_chart|faceted_line_chart|facet_pie_chart|facet_table|faceted_area_chart|heatmap\", \"account_id\": 12345, \"data\": [ { \"nrql\": \"SELECT count(*) from Transaction since 5 minutes ago facet appName\" } ], \"presentation\": { \"title\": \"Facet Chart\", \"notes\": null, \"drilldown_dashboard_id\": 64 }, \"layout\": { \"width\": 1, \"height\": 1, \"row\": 1, \"column\": 2 } }, { \"visualization\": \"attribute_sheet|single_event|histogram|funnel|raw_json|event_feed|event_table|uniques_list|line_chart|comparison_line_chart\", \"account_id\": 12345, \"data\": [ { \"nrql\": \"SELECT latest(appName), latest(duration) from Transaction since 5 minutes ago\" } ], \"presentation\": { \"title\": \"Simple Event Chart\", \"notes\": null }, \"layout\": { \"width\": 1, \"height\": 1, \"row\": 1, \"column\": 3 } }, { \"visualization\": \"markdown\", \"account_id\": 12345, \"data\": [ { \"source\": \"# Dashboard Note\\n\\n[link goes here](https://www.newrelic.com)\" } ], \"presentation\": { \"title\": \"\", \"notes\": null }, \"layout\": { \"width\": 1, \"height\": 1, \"row\": 2, \"column\": 1 } }, { \"visualization\": \"metric_line_chart\", \"account_id\": 12345, \"data\": [ { \"duration\": 1800000, \"end_time\": null, \"entity_ids\": [ 238575 ], \"metrics\": [ { \"name\": \"Apdex\", \"units\": null, \"scope\": \"\", \"values\": [ \"score\" ] } ], \"order_by\": \"score\", \"limit\": 10 } ], \"presentation\": { \"title\": \"Metric Line Chart\", \"notes\": null }, \"layout\": { \"width\": 1, \"height\": 1, \"row\": 2, \"column\": 2 } }, ] } } Copy Dashboard data definitions For examples of these data elements being used in a JSON call, see the Dashboard API schema. Dashboard data element Description metadata Object Specifies the version of the dashboard schema. The version must be 1. icon String Name of an icon from the Insights icon library. grid_column_count Integer Specifies the number of columns in the grid layout. title String User-supplied title of the dashboard. filter Object Specifies configuration of the smart filter on the dashboard. visibility String Specifies who can view the dashboard in the Insights UI and the API. editable String Specifies who can edit the dashboard in the Insights UI and the API. widgets Array Array of widget data element objects. Widget data definitions For examples of these data elements being used in a JSON call, see the Dashboard API schema. Widget data element Description visualization String What sort of visualization to place in the widget; for example, billboard, line_chart, area chart, etc. data Array Array of objects with chart-specific information needed to query necessary data. Currently only one data object is supported. account_id Long Source account to fetch data from, if not the current account. presentation Object Object with chart title and notes, plus chart-specific customization. layout Object Object with column, row, width, and height to determine chart layout in the dashboard. Supported visualizations The Dashboard API supports: event_table line_chart facet_table facet_bar_chart facet_pie_chart billboard faceted_area_chart faceted_line_chart event_table comparison_line_chart heatmap histogram billboard_comparison attribute_sheet funnel gauge json list Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 217.80023,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Insights</em> Dashboard <em>API</em>",
        "sections": "<em>Insights</em> Dashboard <em>API</em>",
        "tags": "<em>Event</em> <em>data</em> <em>sources</em>",
        "body": " and DELETE endpoints are not available. To make the transition from the <em>Insights</em> Dashboard <em>API</em> to the New Relic One Dashboards <em>API</em>, see our migration guide. For more information, see the NerdGraph dashboards tutorial and Explorers Hub post. Requirements If your account hosts <em>data</em> in the EU <em>data</em> center"
      },
      "id": "609f9c8664441fc63fd2a1f9"
    },
    {
      "sections": [
        "Data requirements and limits for custom event data",
        "General requirements",
        "Important",
        "Reserved words",
        "Event type limits"
      ],
      "title": "Data requirements and limits for custom event data",
      "type": "docs",
      "tags": [
        "Insights",
        "Event data sources",
        "Custom events"
      ],
      "external_id": "46f2be93b0c4daf40da9b93cfe0fbf5f235eecb7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/custom-data/custom-events/data-requirements-limits-custom-event-data/",
      "published_at": "2021-09-14T12:55:56Z",
      "updated_at": "2021-07-16T03:18:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains general requirements and rules for inserting and using custom events and their associated attributes. Additional requirements may apply based on the method you use. You can report custom events to New Relic in several ways, including: APM agent APIs Event API (There are additional requirements when using the Event API.) Browser monitoring agent APIs (There are additional requirements with the custom PageAction event.) Mobile monitoring SDK General requirements When reporting custom events and attributes, follow these general requirements for supported data types, naming syntax, and size: Requirement Description Payload Total maximum size or length: 1MB (10^6 bytes) maximum per POST. We highly recommend using compression. The payload must be encoded as UTF-8. The Event API has additional HTTP rate limits. Attribute data types Attribute values can be either a string or a numeric integer or float. If your attribute values contain date information, define it as an unformatted Unix timestamp (in seconds or milliseconds) by using the Insights data formatter. Attribute size Maximum name size: 255 bytes. Maximum attribute value size: Custom attributes sent by the agent: 255 bytes Attributes attached to custom events sent using the Event API: 4096 characters Maximum total attributes per event: 254. Exception: If you use an APM agent API, the max is 64. Maximum total attributes per event type: 48,000. Important Charts may only display the first 255 characters of attribute values. For complete attribute values, use the JSON chart type or Query API. Naming syntax Attribute names can be a combination of alphanumeric characters, colons (:), periods (.), and underscores (_). Event types (using the eventType attribute) can be a combination of alphanumeric characters, colons (:), and underscores (_). Do not use words reserved for use by NRQL. Null values The database does not store any data with a null value. Reserved words Avoid using the following reserved words as names for events and attributes. Otherwise, unexpected results may occur. Important This is not a complete list. In general, avoid using MySQL-reserved words to avoid collision with future New Relic functionality. Keyword Description accountId This is a reserved attribute name. If it's included, it will be dropped during ingest. appId Value must be an integer. If it is not an integer, the attribute name and value will be dropped during ingest. eventType The event type as stored in New Relic. New Relic agents and scripts normally report this as eventType. Can be a combination of alphanumeric characters, colons (:), and underscores (_). Be sure to review the prohibited eventType values and eventType limits. Prohibited eventType values For your eventType value, avoid using: Metric, MetricRaw, and strings prefixed with Metric[0-9] (such as Metric2 or Metric1Minute). Public_ and strings prefixed with Public_. These event types are reserved for use by New Relic. Events passed in with these eventType values will be dropped. timestamp Must be a Unix epoch timestamp. You can define timestamps either in seconds or in milliseconds. It must be +/-1 day (24 hours) of the current time on the server. Log forwarding terms The following keys are reserved by the Infrastructure agent's log forwarding feature: entity.guid, log, hostname, plugin.type, fb.input. If used, they are dropped during ingest and a warning is added to the logs. NRQL syntax terms If you need to use NRQL syntax terms as attribute names, including dotted attributes, they must be enclosed in backticks; for example, `LIMIT` or `consumer.offset`. Otherwise, avoid using these reserved words: ago, and, as, auto, begin, begintime, compare, day, days, end, endtime, explain, facet, from, hour, hours, in, is, like, limit, minute, minutes, month, months, not, null, offset, or, raw, second, seconds, select, since, timeseries, until, week, weeks, where, with Event type limits The current limit for total number of eventType values is 250 per child account in a given 24-hour time period. If a user exceeds this limit, New Relic may filter or drop data. Event types include: Default events from New Relic agents Custom events from New Relic agents Custom events from Insights custom event inserter",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.95175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Data</em> requirements and limits for custom <em>event</em> <em>data</em>",
        "sections": "<em>Data</em> requirements and limits for custom <em>event</em> <em>data</em>",
        "tags": "<em>Event</em> <em>data</em> <em>sources</em>",
        "body": " (There are additional requirements when using the <em>Event</em> <em>API</em>.) Browser monitoring agent APIs (There are additional requirements with the custom PageAction <em>event</em>.) Mobile monitoring SDK General requirements When reporting custom events and attributes, follow these general requirements for supported <em>data</em> types, naming"
      },
      "id": "609fa5cfe7b9d2bf16c3eb69"
    }
  ],
  "/docs/apis/intro-apis/introduction-new-relic-apis": [
    {
      "sections": [
        "New Relic API keys",
        "API key UI",
        "Overview of keys",
        "Keys for data ingest",
        "Keys for querying and configuration",
        "License key",
        "View and manage license key",
        "User key",
        "Browser key",
        "Insights insert key",
        "Important",
        "REST API key",
        "Insights query key",
        "Admin key",
        "Account ID"
      ],
      "title": "New Relic API keys",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "b373cd68cf21daeb5d912ffb4b1ae3f14f500fcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/new-relic-api-keys/",
      "published_at": "2021-09-13T14:57:47Z",
      "updated_at": "2021-09-07T16:54:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic has several different APIs that use different API keys. This resource explains our keys, what they're used for, and how to access them. API key UI Most of the keys can be viewed and managed via the API keys UI page: From the account dropdown, click API keys (get a direct link to the API keys page). If you're using NerdGraph, you can manage license keys and user keys from our GraphiQL explorer. Overview of keys If you're using a specific API, see the docs for that API to understand which keys are required and recommended. To learn about our APIs, see Introduction to APIs. Our keys can be broken down into two categories: Keys used for data ingest Keys used for querying and configuration Keys for data ingest There are many ways to get data into New Relic. Here are the API keys used for data ingest: License key: our primary ingest key, used for APM ingest, infrastructure monitoring ingest, and our ingest APIs and the integrations that use them. Browser key: used for browser monitoring ingest. Mobile app token: used for mobile monitoring ingest. Insights insert key: an older key that has been mostly deprecated, it has the same functionality as the license key. We recommend using the license key instead. Keys for querying and configuration Here are keys used for querying New Relic data or configuration of features: User key, also known as a \"personal API key\": used for NerdGraph (our GraphQL API) and for accessing REST API endpoints. REST API key: used for the REST API but we instead recommend using the user key because it has fewer restrictions. Insights query key: used with the Insights query API for querying New Relic data. We recommend using NerdGraph instead of this API. License key Our primary key used for data ingest is called the license key, also referenced in the UI and NerdGraph API as ingest - license. The license key is a 40-character hexadecimal string associated with a New Relic account. Each account in a New Relic organization has its own license key. When you first sign up for New Relic, that creates an organization with a single account, and that account has its own license key. If more accounts are added, each account will have its own license key. The types of data ingest the license key is used for include: APM agent data Infrastructure agent data Data sent via our core data ingest APIs (Metric API, Trace API, Event API, Log API), and the SDKs and integrations that use those APIs The license key is used for all data ingest except for browser monitoring data (which uses a browser key) and mobile monitoring data (which uses a mobile app token). Because the license key is used for data ingest, we recommend you treat your license key securely, like you would a password. This ensures no unwanted data is sent to your New Relic account. If your license key falls into the wrong hands, an attacker could send fake data to your account, which could trigger false alerts and contaminate your data so that detecting actual issues is more difficult. If you believe a license key has been exposed and has led to unwanted data, work with our Support team. View and manage license key To manage the license key: From the account dropdown, click API keys (get a direct link to the API keys page). You can't manage or delete the original license key that was created when an account was initially created. For that, contact New Relic support. You can also create additional license keys and manage them with our NerdGraph API. User key New Relic user keys, sometimes referred to as \"personal API keys\", are required for using NerdGraph and for the REST API. A user key is tied to both a specific New Relic user and a specific account. Our APIs that use this key let a user make queries for any accounts that user has been granted access to. To view and manage the user key and other API keys in the UI: From the account dropdown, click API keys (here's a direct link to the API keys page). To manage this key via API, see Manage keys with NerdGraph. You can also get or generate a user key from the NerdGraph GraphiQL explorer. Browser key One of the New Relic API keys that are used for data ingest is the browser key. The browser key allows the ingestion of data from New Relic browser monitoring. To view and manage this key: From the account dropdown, click API keys (here's a direct link to the API keys page). You can't manage or delete an original browser key that was created when your account was created. For that, contact New Relic support. Insights insert key Important This key is still in use but we highly recommend using the license key, which can be used for the same things and more. One of the New Relic API keys used for data ingest is the Insights insert key, also known as an \"insert key\"). Note that the license key is used for the same functionality and more, which is why we recommend the license key over this key. This key is used for the ingestion of data via our Event API, Log API, Metric API, and Trace API, or via tools that use those APIs. Tips on availability and access: Because these keys are associated with an account and not a specific user, anyone in the account with access to a key can use it. As a best practice for security purposes, we recommend you use different Insights insert keys for different applications or different data sources. To find and manage Insights insert keys: From the account dropdown, click API keys (get a direct link to the API keys page). Then click Insights insert keys. REST API key Important We highly recommend using a user key instead, because that key has fewer restrictions. The REST API key is for using our REST APIs for Alerts, APM, browser, infrastructure alerts, as well as mobile monitoring REST APIs and the API Explorer. Things to consider: We recommend using our newer NerdGraph API over the REST API, if possible. Requires admin-level user permissions. If you don't have access to the REST API key or the REST API explorer, it might be due to lack of permissions. Talk to your New Relic account manager, or use a user key instead. Each New Relic account can have only one REST API key. To find and manage REST API keys: From the account dropdown, click API keys (get a direct link to the API keys page). Then click REST API key. Before you configure or delete an API key, ensure you are doing so for the correct account. Insights query key The Insights query key is used for our Insights query API: we now recommend using NerdGraph for querying New Relic data. To find and manage Insights query keys: From the account dropdown, click API keys (get a direct link to the API keys page). Then click Insights query keys. Admin key Important As of December 4, 2020, all existing admin keys have been migrated to be user keys. You don’t need to do anything for existing admin keys to remain active. They will be automatically accessible via the API keys UI, labeled as user keys, and granted identical permissions. You can manage them as you would any user key via the same workflow. All migrated admin keys will have a note that says “Migrated from an admin user key” in the key table, so you’ll be able to find them easily. Account ID Looking for the account ID? See Account ID.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.93005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>API</em> keys",
        "sections": "New Relic <em>API</em> keys",
        "tags": "<em>Intro</em> <em>to</em> <em>APIs</em>",
        "body": "New Relic has several different <em>APIs</em> that use different <em>API</em> keys. This resource explains our keys, what they&#x27;re used for, and how to access them. <em>API</em> key UI Most of the keys can be viewed and managed via the <em>API</em> keys UI page: From the account dropdown, click <em>API</em> keys (<em>get</em> a direct link to the <em>API</em>"
      },
      "id": "6043fa3464441f1358378f3b"
    },
    {
      "sections": [
        "Get started with Network Performance Monitoring",
        "Types of network performance data",
        "Important",
        "High level architecture overview"
      ],
      "title": "Get started with Network Performance Monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Network Performance Monitoring",
        "Get started"
      ],
      "external_id": "96d12e2c5551a6e5eab76238cd2b787e5c188c01",
      "image": "https://docs.newrelic.com/static/eb0db7c88b717f386c4900a04e12a8ed/e5166/overview_navigator.jpg",
      "url": "https://docs.newrelic.com/docs/network-performance-monitoring/get-started/npm-introduction/",
      "published_at": "2021-09-14T11:21:45Z",
      "updated_at": "2021-09-14T01:43:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When system performance suffers, you need to know if it’s due to your code, your infrastructure, or the underlying network. And you need to know fast, so you can focus your efforts. With Network Performance Monitoring you can correlate and analyze application, infrastructure, digital experience, and network data all in one place, and understand how network performance and overall system performance impact each other. Using Navigator with Network Performance Monitoring. Network Performance Monitoring adds the context of network data to the application and infrastructure data you already collect in New Relic One. By monitoring your network data, you can: Analyze and understand the performance of your entire stack (application and infrastructure) for a holistic understanding of your system performance. Have all the data in a single platform to eliminate blind spots. See at first glance whether a network is implicated in an issue. Sign up for free! No credit card required. Already have an account? Login. Types of network performance data You can monitor the following types of network performance data: SNMP data: Simple Network Management Protocol (SNMP) is an application–layer protocol for exchanging management information between network devices. To send SNMP data to New Relic One, see Set up SNMP data monitoring. Network flow data: It captures information about the IP traffic going to and from network interfaces in your on-premises network. To send network flow data to New Relic One, see Set up network flow data monitoring. Important We recommend configuring both SNMP and network flow data for better visibility into your network. This will provide both performance metrics and traffic patterns to troubleshoot and optimize your network. High level architecture overview Our solution is based on the ktranslate docker container developed by our partner, Kentik. This single container image is hosted in your environment to collect and process your data to be exported to the Event, Metric, and Log APIs in New Relic One’s Telemetry Data Platform (TDP). Overview of Network Performance Monitoring architecture.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.927734,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Get</em> <em>started</em> with Network Performance Monitoring",
        "sections": "<em>Get</em> <em>started</em> with Network Performance Monitoring",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " solution is based on the ktranslate docker container developed by our partner, Kentik. This single container image is hosted in your environment to collect and process your data to be exported to the Event, Metric, and Log <em>APIs</em> in New Relic One’s Telemetry Data Platform (TDP). Overview of Network Performance Monitoring architecture."
      },
      "id": "6126f39b28ccbc8c49f26162"
    },
    {
      "image": "https://docs.newrelic.com/static/e8d42feaa627a4f1abd362c85a07596d/c1b63/example-doc-in-folder.png",
      "url": "https://docs.newrelic.com/docs/style-guide/processes-procedures/understand-edit-docs-site-structure/",
      "sections": [
        "Understand and edit docs site structure (nav file, sidebar, categories)",
        "Terms",
        "Understand how the docs site structure works",
        "How is the displayed structure related to the actual folders?",
        "What determines a doc's URL?",
        "What does a nav file do?",
        "Where is the docs site structure exposed?",
        "What determines a doc's sidebar?",
        "When you click a sidebar category, what determines how that auto-index page displays?",
        "Nav file format",
        "Tip",
        "Procedures",
        "Overview of steps for a large docs site restructure project",
        "Add a new category",
        "Add a new nav file",
        "Add a new category to a nav file",
        "Add a doc to sidebar/nav-file",
        "Add doc in multiple sidebar locations",
        "Move docs to other categories",
        "Move docs using nav file",
        "Move docs between folders",
        "Move or delete a folder",
        "Create a \"dummy\" sub-category of docs that don't live in that category",
        "Make a sidebar category heading clickable",
        "Troubleshoot category views not working correctly"
      ],
      "published_at": "2021-09-14T14:46:00Z",
      "title": "Understand and edit docs site structure (nav file, sidebar, categories)",
      "updated_at": "2021-09-14T14:46:00Z",
      "type": "docs",
      "external_id": "5498c89c5d5497ac899f70f86bb8bf0cda4bc840",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc contains information and procedures pertaining to the structure of the docs site, including: the nav files, the sidebar, docs category (index) views, and more. For succinct instructions, see Procedures, but it is highly recommended you understand the general concepts of how the docs site structure works if you will be doing larger docs site projects. Terms When talking about the docs site structure, sometimes people use different words for the same things. Below is a list of terms that can help us communicate about the docs site structure: Nav files: In the github docs site, there are yaml files under the nav folder that are used to determine the docs site structure that we display. This structure is exposed in the docs site left sidebar and when you view docs category views (also known as index views, like this one). Folder: In this context, \"folders\" refers to the actual docs site folder structure (those folders and files in the content section). Referring to \"folders\" can be a helpful way to differentiate between the actual folder structure and the displayed structure that's set using the nav files. Sidebar: On public-facing docs, the sidebar is what is visible on the left hand side, showing the structure of that category of docs. The sidebar and index view are both determined by the structure set in the nav file. Category or sub-category: we use these words a bit interchangeably to refer to specific areas of the docs site. For example, this view shows a list of docs in a specific category, as does this higher level category view. In this doc, we'll often use the phrase \"category view\" to indicate a page load of a specific category of docs. Auto-index pages: This is another way, the more technical way, to refer to a category view of docs (for example, this view). \"Auto-index page\" and \"category view\" are used a bit interchangably in this doc, with \"category view\" being used as it's more informal and easy to parse. (Note that this use of \"index\" is a different use of \"index\" than the authored index.mdx files, which are used to display landing pages.) Understand how the docs site structure works This section will explain some of the logic behind how the docs site structure is determined and how the structure we display to the public relates to the actual docs folder structure. How is the displayed structure related to the actual folders? The actual docs folder structure (the folders and mdx files in the content folder) is entirely separate from the docs site structure that we display (e.g., the structure shown in the sidebar and auto-index pages like this one). The displayed structure of the docs site is determined solely by the nav files (the yaml-format files in the nav folder). It's important to understand the above point. The divergence of the docs folder structure and the displayed docs site structure is necessary: we need a way to control the displayed site structure, which is used for the sidebar and auto-index pages, without requiring us to keep the folder structure and folder names and doc file names completely parallel and matching. Because these two things are so separate, it means we have some fairly complex behind-the-scenes logic to get them to work together. And this means that there can be fairly unintuitive aspects of how that logic works. We do have procedures for common use cases, but it will help you a lot to understand the specifics below of how the displayed structure is generated. What determines a doc's URL? Where a doc file (mdx file) is located in the content folder, and the associated folder and file names, are the only factors that govern that doc's URL. For example, consider the following doc file automated-user-provisioning-single-sign.mdx: This doc's URL is solely based on its folder location and the names of the folders. In this case, its URL is: docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign Copy This has important implications, including: When you move a doc from one folder to another, its URL changes, and this means that you will have to add a redirect to that doc of its original URL. If you rename an mdx file name or a folder name, that changes its URL, so that means you would have to add a redirect to that doc for its original URL. What does a nav file do? The nav files are quite simple. A nav file controls these things: The docs structure (the various levels of docs) for that category of docs. The category headers, set by title (e.g., \"On-host integrations list\") and path (e.g., \"/docs/integrations/on-host-integrations\"). The doc information, set by title (e.g., \"NGINX integration\") and path (the doc's URL). A category and a doc in a nav file have the same elements: a title and a `path. What separates a category from a doc is that: A category contains docs in the level below it. If a category has a path (which isn't required but should be present for most docs), the path points to a content docs folder that has at least one doc in it. For more on nav file format, see Nav file format Where is the docs site structure exposed? The structure set in the nav files is exposed in two places: The left sidebar of a doc that shows the structure of that category. When a category header in the sidebar is clicked, it shows a view of that docs site category. Doc category views, also sometimes called auto-index pages: for example, this view, which shows a particular section of docs. What determines a doc's sidebar? As stated above, the sidebar is just one way that the docs site structure governed by the nav files is exposed. When a doc is loaded, the docs site searches for that URL in the nav files. If it finds a match, it displays that nav file in the sidebar with that doc highlighted. If it finds that doc in more than one nav file, it attempts to find the right nav file by choosing the nav that matches the top level category in the doc URL. For example, if a doc with a relative URL /docs/accounts/accounts-billing/account-setup/create-your-new-relic-account was in two nav files, the docs site code would search to see if one of the nav files has docs/accounts as its first path field. If it finds a match, it uses that nav file. For an example of a doc that is placed in two different nav files, for this auto-index page click the Manage data doc and see how, when it loads, it displays the sidebar for the nav file that better matches its URL. When you click a sidebar category, what determines how that auto-index page displays? When you click on a docs category header in the sidebar and an auto-index page loads (like this one), what governs what is displayed there? Here is how this process works: A category header in the sidebar has an associated URL, which is set in the nav file. In the example nav file snippet below, the Get started category view has a path set to /docs/apis/intro-apis. This is what governs the sidebar heading title of \"Get started\" and tells it the URL to use. - title: APIs path: /docs/apis pages: - title: Get started path: /docs/apis/intro-apis pages: - title: New Relic APIs path: /docs/apis/intro-apis/introduction-new-relic-apis - title: API keys path: /docs/apis/intro-apis/new-relic-api-keys Copy If the associated folder of that path has an index mdx file (representing a landing page, like this one), the docs site displays that landing page. If there is no landing page, we display the docs and structure contained in that section of the nav file. For example, this view is based on the nav file section under that category header. For this to work correctly, the docs site verifies that that path matches an actual docs site folder that has at least one mdx file. Put another way: if we used a completely arbitrary URL path for a category's path, like docs/random-category/random-category-2, it would not work. To display a nav file, the path requires an existing folder with at least one doc in there. Other aspects to consider: A path is not required. A category header in the nav file does not require a path; that is just what tells it to create a link and a URL for that view. If a category in a nav file lacks a path, it won't have a link or associated URL for it (for an example, see the \"New Relic University\" category in this section). Having a category without an associated link/URL can be an acceptable choice if you are creating a category of docs that don't reside in that section and you simply want to give a helpful category view in the sidebar. Folder structure URLs aren't important. Every folder in the docs site can be the basis for a URL, but we should only consider valuable the URLs we've chosen for inclusion in the nav files. For example, here's a URL based on an actual folder containing one doc. But because there is no path in a nav file corresponding to that URL, it doesn't display anything. Nav file format Below is a snippet of the agents.yml nav file. Note that the file has indentation that corresponds to the level of the navigation hierarchy. When making changes or creating a new nav file, be sure to use the existing spacing format. yml title: Agents path: /docs/agents pages: - title: Manage APM agents path: /docs/agents/manage-apm-agents pages: - title: Agent data path: /docs/agents/manage-apm-agents/agent-data pages: - title: Real time streaming path: /docs/agents/manage-apm-agents/agent-data/real-time-streaming - title: Custom instrumentation path: /docs/agents/manage-apm-agents/agent-data/custom-instrumentation - title: Agent attributes path: /docs/agents/manage-apm-agents/agent-data/agent-attributes - title: Custom events path: /docs/agents/manage-apm-agents/agent-data/collect-custom-events - title: Custom metrics path: /docs/agents/manage-apm-agents/agent-data/collect-custom-metrics - title: Manage errors path: /docs/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected - title: Link Kubernetes path: /docs/agents/manage-apm-agents/agent-data/link-your-applications-kubernetes - title: App naming pages: - title: Name your application path: /docs/agents/manage-apm-agents/app-naming/name-your-application - title: Use multiple names for an app path: /docs/agents/manage-apm-agents/app-naming/use-multiple-names-app Copy Tip Navigation nesting is currently limited to a maximum of six levels deep. Please reach out to the engineering team if that is not enough. Here are important elements of the nav file: Key Required? Description title yes The text shown in the navigation, either of a doc or a category. path yes The URL path to the doc or the category view. Do not use trailing slashes. For docs categories in the nav file, the path is required to create an index view. Without the path, a docs category won't be clickable as a link and won't display a view of those docs. Learn more about index views. rootNav no rootNav controls whether a nav file will be displayed or hidden on the docs site home page. It is enabled by default. If you want to hide a category from the home page (as we do for our style guide docs, for example), you would set this to false, as shown below: title: Style guide path: /docs/style-guide rootNav: false Copy children no This is hardly ever used. It indicates a sub-navigation node. Procedures Below are instructions for several common procedures. It may help you to review the terms we use before starting a procedure. Procedures include: Add a new docs category Add a doc to sidebar/nav-file Move docs between folders or categories Move or delete folders Create a \"dummy\" category for docs that don’t live in that area Make a category heading clickable Troubleshoot messed up category views Overview of steps for a large docs site restructure project For some smaller docs site edits, you can sometimes simply edit the nav files and not have to touch the doc files or folders. But for larger projects, you may want to or need to edit and move the docs files and folders themselves. Below is a broad overview of the chunks of work such larger projects generally entail. Plan out what the new nav file structure will look like, and plan out the work of moving docs files or creating new folders. It can help to write down the chunks of work a large project will entail. Move the affected doc files to their new folder locations, making sure to add redirects. For more on that, see Move docs between folders. Delete any empty folders. Edit the nav files to reflect the new desired structure and point to the new doc URLs. If there are category header path URLs that are no longer needed, add those URLs as redirects to specific docs (preferred) or the taxonomy redirects file. For more specific and granular procedures, keep reading. Add a new category We'll explain two procedures: adding a subcategory of docs in an existing nav file, and adding an entirely new nav file. Add a new nav file Adding an entirely new nav file should be rare, and something we only do occasionally during large overhauls of site structure. To add an entirely new nav file: Copy an existing file nav file, or create a new nav file. Customize the new nav file with the categories and docs you want, using the structure of existing nav files as a template. For more on structure, see nav format. Tip You need at least one level of nesting inside the nav file. Without that, doc titles in the auto-generated category views will render as H2 headings. For example, src/content/level-one/level-two/doc will work, but src/content/level-one/doc will produce strange formatting. If you don't want your new nav to appear on the main landing page, add rootNav: false to your .yml file. (For an example of this, see src/nav/style-guide.yml.) Add a new category to a nav file To add a new category to a nav file: In an existing nav file, add a new category, represented by its title and path. If you're adding a path for that category (recommended), it must use the URL of an existing folder with at least one mdx file in it. Add the docs you want in that section. Ensure your new content matches the indenting of the surrounding nav file. To learn more about how this works, see: How a doc's sidebar is determined How a doc category view is determined If a category view isn't clickable, see Make category view clickable. Add a doc to sidebar/nav-file Once you create a doc, you need to place it in one or more nav files. To do this: In the nav file location where you want to locate it, add the title (its short title displayed in the sidebar and category views) and the path, which is the doc's URL. Ensure that you've emulated the indenting based on the surrounding nav file content or other nav files. Add doc in multiple sidebar locations To add a doc in more than one sidebar location, simply add that doc (its title and path) wherever you want it to be in the nav file. For more on how the sidebar is determined for docs in multiple nav files, see Sidebar. You can add a doc URL in multiple nav file locations. Move docs to other categories Because the nav file and the actual folder structure aren't connected, there are two different ways to \"move docs\": Move a doc in the nav files: preferred and most common procedure. Move a doc between folders: less frequent, mainly when doing larger projects where we want to do a significant overhaul of the docs structure and want to ensure the folder structure doesn't become too divergent from the nav file structure. Move docs using nav file You would move a doc in the nav file when you want to change its location in the displayed docs site structure (i.e., the sidebar and docs category views). To move a doc from one place to another in the nav file: In the first nav file, copy the two rows representing that doc's entry (the title and path lines) and paste that content into the place you want it to live in the new nav file. In the new nav file section, make sure that new content is aligned properly with the surrounding nav file content. See Nav format for more about nav file structure. Move docs between folders Note that moving docs between the folders should be relatively rare. The main reasons to do this are when the folder structure and nav file structure are becoming very different, which can be bad for a couple reasons: Too much divergence can create issues with category view displays or sidebar actions. Too much divergence can make finding and editing docs harder, so there can be value to keeping things fairly up to date and parallel. When you move a doc between folders or rename a doc, that changes its URL. Similarly, if you rename a folder, that changes the URL of all docs in that area. To move a doc between folders: Get the current URL of the doc you want to move and add that URL to its own list of redirects. Tips: One way to do this in VSCode is to right click the file and click \"Get relative path\". If you are moving many files, ask the team about ways to programmatically add redirects. Remove the trailing slash. Move the doc to the new folder. Update nav files with the new URL. This is easily overlooked but having the correct doc URL in the nav file, and not a redirect, is important. Note that a doc URL may be in more than one nav file so searching the site for that URL can help. Move or delete a folder Sometimes when we are doing a larger restructuring project, we may want to move or delete the actual folders instead of simply editing the nav files. If you are moving an entire folder or multiple folders to another folder, docs and all: Simply move these folders using your preferred method (e.g., using drag and drop) to the new location. Next, because that move changes all the URLs of the docs and categories, you'll need to add redirects: For adding redirects for docs, see the procedures for moving a doc between folders. For category redirects: For the section of the nav file affected by your folder editing, gather all the category URLs (path fields) that relate to the moved or deleted folders. We don't need to redirect all folder-related URL paths: we only need to redirect the nav file paths because those represent the paths that we actually link to in the docs (in other words: we aren't using folder-based URLs if they don't have a nav file path). Add those category path URLs as redirects in specific docs or, if that won't work, in the taxonomy-redirects file. We should aim to add category redirects in specific docs and the reason for this is that the taxonomy-redirects file is hard to use and because it's a better customer experience to land on a doc versus a category if possible. In most cases, you'll be able to find a fitting doc to redirect to but if only a category view makes sense, use the taxonomy redirects file. For larger projects, this can be tough work, so you'll want to check out the build and make sure all the sidebar links and category headers are working as expected. For deleting folders, you'll want to essentially follow the same steps as above: either moving or deleting the docs in those folders first, gathering the affected category path URLs and adding them as redirects, adn then deleting the empty folders. Create a \"dummy\" sub-category of docs that don't live in that category Sometimes you want to create a category of docs that is there to help expose a related doc or set of docs. For example, in this view, we have added a category for 'New Relic University' even though that's not a doc that lives in that section; in this case, it's not even a doc on our site. In the example above, this 'New Relic University' category header is in regular text and not a link, and that's because it doesn't have a path set for it in the nav file. This also means that in the sidebar, this category header is not a clickable link and simply functions as a collapser/expander. This is acceptable if you don't mind it but below we explain how you can get a clickable category if you need it. To create a so-called \"dummy\" category: Add the category structure you want in the nav file. If you're okay not having a clickable category header, your new category doesn't require a path. If you want a clickable category header, you will need to use or create a folder that matches the new category path and that has at least one mdx file in it (details). In the nav file, add the title and path information for the docs you want in that new category. Test your new category to ensure it is working correctly. Make a sidebar category heading clickable If there's a sidebar category that's only acting as an expander/collapser and doesn't have a link, that's because it either a) doesn't have a path set in the nav file, or b) that path goes to a folder that doesn't have a doc in it. For more on this, see the instructions regarding clickable headers in the \"dummy\" category section. Troubleshoot category views not working correctly If a docs category view is not working correctly, review how category views are formed. If this does happen, get another opinion from another tech writer to make sure you're not missing something, as we should rarely have problems. One reason that a category view might not work is specifically for path URLs that are also landing pages. In this case, if that path is used in more than one location in the same nav file, the docs site can be confused about which category view to use. We may fix this with a coding fix but in meantime: consider pointing to other URLs and not that path, so that there's only one use of that path per nav file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.39181,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "How is the displayed structure related <em>to</em> the actual folders?",
        "body": "-<em>apis</em>. This is what governs the sidebar heading title of &quot;<em>Get</em> <em>started</em>&quot; and tells it the URL to use. - title: <em>APIs</em> path: &#x2F;docs&#x2F;<em>apis</em> pages: - title: <em>Get</em> <em>started</em> path: &#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>intro</em>-<em>apis</em> pages: - title: New Relic <em>APIs</em> path: &#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>intro</em>-<em>apis</em>&#x2F;introduction-new-relic-<em>apis</em> - title: <em>API</em> keys path"
      },
      "id": "612eff27e7b9d25b16b6f24c"
    }
  ],
  "/docs/apis/intro-apis/new-relic-api-keys": [
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights",
        "Plugins"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-09-13T14:57:49Z",
      "updated_at": "2021-08-27T04:51:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for many of our more curated tools, such as our open source telemetry integrations and our Telemetry SDKs. Data type Description Metric API Send metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send your log data to New Relic. Trace API Send distributed tracing data to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android Unity REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing plan) For organizations on our original pricing plan, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing plans that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API. Plugins New Relic Plugins have been deprecated. For details, see Plugins EOL.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 240.69519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> <em>to</em> New Relic <em>APIs</em>",
        "sections": "<em>Introduction</em> <em>to</em> New Relic <em>APIs</em>",
        "tags": "<em>Intro</em> <em>to</em> <em>APIs</em>",
        "body": " solutions for reporting data to New Relic. These <em>APIs</em> can be used directly, but they&#x27;re also the underlying ingest route for many of our more curated tools, such as our open source telemetry integrations and our Telemetry SDKs. Data type Description Metric <em>API</em> Send metrics to New Relic from any source"
      },
      "id": "609fa5cf196a67066022b194"
    },
    {
      "sections": [
        "Get started with Network Performance Monitoring",
        "Types of network performance data",
        "Important",
        "High level architecture overview"
      ],
      "title": "Get started with Network Performance Monitoring",
      "type": "docs",
      "tags": [
        "Integrations",
        "Network Performance Monitoring",
        "Get started"
      ],
      "external_id": "96d12e2c5551a6e5eab76238cd2b787e5c188c01",
      "image": "https://docs.newrelic.com/static/eb0db7c88b717f386c4900a04e12a8ed/e5166/overview_navigator.jpg",
      "url": "https://docs.newrelic.com/docs/network-performance-monitoring/get-started/npm-introduction/",
      "published_at": "2021-09-14T11:21:45Z",
      "updated_at": "2021-09-14T01:43:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When system performance suffers, you need to know if it’s due to your code, your infrastructure, or the underlying network. And you need to know fast, so you can focus your efforts. With Network Performance Monitoring you can correlate and analyze application, infrastructure, digital experience, and network data all in one place, and understand how network performance and overall system performance impact each other. Using Navigator with Network Performance Monitoring. Network Performance Monitoring adds the context of network data to the application and infrastructure data you already collect in New Relic One. By monitoring your network data, you can: Analyze and understand the performance of your entire stack (application and infrastructure) for a holistic understanding of your system performance. Have all the data in a single platform to eliminate blind spots. See at first glance whether a network is implicated in an issue. Sign up for free! No credit card required. Already have an account? Login. Types of network performance data You can monitor the following types of network performance data: SNMP data: Simple Network Management Protocol (SNMP) is an application–layer protocol for exchanging management information between network devices. To send SNMP data to New Relic One, see Set up SNMP data monitoring. Network flow data: It captures information about the IP traffic going to and from network interfaces in your on-premises network. To send network flow data to New Relic One, see Set up network flow data monitoring. Important We recommend configuring both SNMP and network flow data for better visibility into your network. This will provide both performance metrics and traffic patterns to troubleshoot and optimize your network. High level architecture overview Our solution is based on the ktranslate docker container developed by our partner, Kentik. This single container image is hosted in your environment to collect and process your data to be exported to the Event, Metric, and Log APIs in New Relic One’s Telemetry Data Platform (TDP). Overview of Network Performance Monitoring architecture.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.92766,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Get</em> <em>started</em> with Network Performance Monitoring",
        "sections": "<em>Get</em> <em>started</em> with Network Performance Monitoring",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " solution is based on the ktranslate docker container developed by our partner, Kentik. This single container image is hosted in your environment to collect and process your data to be exported to the Event, Metric, and Log <em>APIs</em> in New Relic One’s Telemetry Data Platform (TDP). Overview of Network Performance Monitoring architecture."
      },
      "id": "6126f39b28ccbc8c49f26162"
    },
    {
      "image": "https://docs.newrelic.com/static/e8d42feaa627a4f1abd362c85a07596d/c1b63/example-doc-in-folder.png",
      "url": "https://docs.newrelic.com/docs/style-guide/processes-procedures/understand-edit-docs-site-structure/",
      "sections": [
        "Understand and edit docs site structure (nav file, sidebar, categories)",
        "Terms",
        "Understand how the docs site structure works",
        "How is the displayed structure related to the actual folders?",
        "What determines a doc's URL?",
        "What does a nav file do?",
        "Where is the docs site structure exposed?",
        "What determines a doc's sidebar?",
        "When you click a sidebar category, what determines how that auto-index page displays?",
        "Nav file format",
        "Tip",
        "Procedures",
        "Overview of steps for a large docs site restructure project",
        "Add a new category",
        "Add a new nav file",
        "Add a new category to a nav file",
        "Add a doc to sidebar/nav-file",
        "Add doc in multiple sidebar locations",
        "Move docs to other categories",
        "Move docs using nav file",
        "Move docs between folders",
        "Move or delete a folder",
        "Create a \"dummy\" sub-category of docs that don't live in that category",
        "Make a sidebar category heading clickable",
        "Troubleshoot category views not working correctly"
      ],
      "published_at": "2021-09-14T14:46:00Z",
      "title": "Understand and edit docs site structure (nav file, sidebar, categories)",
      "updated_at": "2021-09-14T14:46:00Z",
      "type": "docs",
      "external_id": "5498c89c5d5497ac899f70f86bb8bf0cda4bc840",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc contains information and procedures pertaining to the structure of the docs site, including: the nav files, the sidebar, docs category (index) views, and more. For succinct instructions, see Procedures, but it is highly recommended you understand the general concepts of how the docs site structure works if you will be doing larger docs site projects. Terms When talking about the docs site structure, sometimes people use different words for the same things. Below is a list of terms that can help us communicate about the docs site structure: Nav files: In the github docs site, there are yaml files under the nav folder that are used to determine the docs site structure that we display. This structure is exposed in the docs site left sidebar and when you view docs category views (also known as index views, like this one). Folder: In this context, \"folders\" refers to the actual docs site folder structure (those folders and files in the content section). Referring to \"folders\" can be a helpful way to differentiate between the actual folder structure and the displayed structure that's set using the nav files. Sidebar: On public-facing docs, the sidebar is what is visible on the left hand side, showing the structure of that category of docs. The sidebar and index view are both determined by the structure set in the nav file. Category or sub-category: we use these words a bit interchangeably to refer to specific areas of the docs site. For example, this view shows a list of docs in a specific category, as does this higher level category view. In this doc, we'll often use the phrase \"category view\" to indicate a page load of a specific category of docs. Auto-index pages: This is another way, the more technical way, to refer to a category view of docs (for example, this view). \"Auto-index page\" and \"category view\" are used a bit interchangably in this doc, with \"category view\" being used as it's more informal and easy to parse. (Note that this use of \"index\" is a different use of \"index\" than the authored index.mdx files, which are used to display landing pages.) Understand how the docs site structure works This section will explain some of the logic behind how the docs site structure is determined and how the structure we display to the public relates to the actual docs folder structure. How is the displayed structure related to the actual folders? The actual docs folder structure (the folders and mdx files in the content folder) is entirely separate from the docs site structure that we display (e.g., the structure shown in the sidebar and auto-index pages like this one). The displayed structure of the docs site is determined solely by the nav files (the yaml-format files in the nav folder). It's important to understand the above point. The divergence of the docs folder structure and the displayed docs site structure is necessary: we need a way to control the displayed site structure, which is used for the sidebar and auto-index pages, without requiring us to keep the folder structure and folder names and doc file names completely parallel and matching. Because these two things are so separate, it means we have some fairly complex behind-the-scenes logic to get them to work together. And this means that there can be fairly unintuitive aspects of how that logic works. We do have procedures for common use cases, but it will help you a lot to understand the specifics below of how the displayed structure is generated. What determines a doc's URL? Where a doc file (mdx file) is located in the content folder, and the associated folder and file names, are the only factors that govern that doc's URL. For example, consider the following doc file automated-user-provisioning-single-sign.mdx: This doc's URL is solely based on its folder location and the names of the folders. In this case, its URL is: docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign Copy This has important implications, including: When you move a doc from one folder to another, its URL changes, and this means that you will have to add a redirect to that doc of its original URL. If you rename an mdx file name or a folder name, that changes its URL, so that means you would have to add a redirect to that doc for its original URL. What does a nav file do? The nav files are quite simple. A nav file controls these things: The docs structure (the various levels of docs) for that category of docs. The category headers, set by title (e.g., \"On-host integrations list\") and path (e.g., \"/docs/integrations/on-host-integrations\"). The doc information, set by title (e.g., \"NGINX integration\") and path (the doc's URL). A category and a doc in a nav file have the same elements: a title and a `path. What separates a category from a doc is that: A category contains docs in the level below it. If a category has a path (which isn't required but should be present for most docs), the path points to a content docs folder that has at least one doc in it. For more on nav file format, see Nav file format Where is the docs site structure exposed? The structure set in the nav files is exposed in two places: The left sidebar of a doc that shows the structure of that category. When a category header in the sidebar is clicked, it shows a view of that docs site category. Doc category views, also sometimes called auto-index pages: for example, this view, which shows a particular section of docs. What determines a doc's sidebar? As stated above, the sidebar is just one way that the docs site structure governed by the nav files is exposed. When a doc is loaded, the docs site searches for that URL in the nav files. If it finds a match, it displays that nav file in the sidebar with that doc highlighted. If it finds that doc in more than one nav file, it attempts to find the right nav file by choosing the nav that matches the top level category in the doc URL. For example, if a doc with a relative URL /docs/accounts/accounts-billing/account-setup/create-your-new-relic-account was in two nav files, the docs site code would search to see if one of the nav files has docs/accounts as its first path field. If it finds a match, it uses that nav file. For an example of a doc that is placed in two different nav files, for this auto-index page click the Manage data doc and see how, when it loads, it displays the sidebar for the nav file that better matches its URL. When you click a sidebar category, what determines how that auto-index page displays? When you click on a docs category header in the sidebar and an auto-index page loads (like this one), what governs what is displayed there? Here is how this process works: A category header in the sidebar has an associated URL, which is set in the nav file. In the example nav file snippet below, the Get started category view has a path set to /docs/apis/intro-apis. This is what governs the sidebar heading title of \"Get started\" and tells it the URL to use. - title: APIs path: /docs/apis pages: - title: Get started path: /docs/apis/intro-apis pages: - title: New Relic APIs path: /docs/apis/intro-apis/introduction-new-relic-apis - title: API keys path: /docs/apis/intro-apis/new-relic-api-keys Copy If the associated folder of that path has an index mdx file (representing a landing page, like this one), the docs site displays that landing page. If there is no landing page, we display the docs and structure contained in that section of the nav file. For example, this view is based on the nav file section under that category header. For this to work correctly, the docs site verifies that that path matches an actual docs site folder that has at least one mdx file. Put another way: if we used a completely arbitrary URL path for a category's path, like docs/random-category/random-category-2, it would not work. To display a nav file, the path requires an existing folder with at least one doc in there. Other aspects to consider: A path is not required. A category header in the nav file does not require a path; that is just what tells it to create a link and a URL for that view. If a category in a nav file lacks a path, it won't have a link or associated URL for it (for an example, see the \"New Relic University\" category in this section). Having a category without an associated link/URL can be an acceptable choice if you are creating a category of docs that don't reside in that section and you simply want to give a helpful category view in the sidebar. Folder structure URLs aren't important. Every folder in the docs site can be the basis for a URL, but we should only consider valuable the URLs we've chosen for inclusion in the nav files. For example, here's a URL based on an actual folder containing one doc. But because there is no path in a nav file corresponding to that URL, it doesn't display anything. Nav file format Below is a snippet of the agents.yml nav file. Note that the file has indentation that corresponds to the level of the navigation hierarchy. When making changes or creating a new nav file, be sure to use the existing spacing format. yml title: Agents path: /docs/agents pages: - title: Manage APM agents path: /docs/agents/manage-apm-agents pages: - title: Agent data path: /docs/agents/manage-apm-agents/agent-data pages: - title: Real time streaming path: /docs/agents/manage-apm-agents/agent-data/real-time-streaming - title: Custom instrumentation path: /docs/agents/manage-apm-agents/agent-data/custom-instrumentation - title: Agent attributes path: /docs/agents/manage-apm-agents/agent-data/agent-attributes - title: Custom events path: /docs/agents/manage-apm-agents/agent-data/collect-custom-events - title: Custom metrics path: /docs/agents/manage-apm-agents/agent-data/collect-custom-metrics - title: Manage errors path: /docs/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected - title: Link Kubernetes path: /docs/agents/manage-apm-agents/agent-data/link-your-applications-kubernetes - title: App naming pages: - title: Name your application path: /docs/agents/manage-apm-agents/app-naming/name-your-application - title: Use multiple names for an app path: /docs/agents/manage-apm-agents/app-naming/use-multiple-names-app Copy Tip Navigation nesting is currently limited to a maximum of six levels deep. Please reach out to the engineering team if that is not enough. Here are important elements of the nav file: Key Required? Description title yes The text shown in the navigation, either of a doc or a category. path yes The URL path to the doc or the category view. Do not use trailing slashes. For docs categories in the nav file, the path is required to create an index view. Without the path, a docs category won't be clickable as a link and won't display a view of those docs. Learn more about index views. rootNav no rootNav controls whether a nav file will be displayed or hidden on the docs site home page. It is enabled by default. If you want to hide a category from the home page (as we do for our style guide docs, for example), you would set this to false, as shown below: title: Style guide path: /docs/style-guide rootNav: false Copy children no This is hardly ever used. It indicates a sub-navigation node. Procedures Below are instructions for several common procedures. It may help you to review the terms we use before starting a procedure. Procedures include: Add a new docs category Add a doc to sidebar/nav-file Move docs between folders or categories Move or delete folders Create a \"dummy\" category for docs that don’t live in that area Make a category heading clickable Troubleshoot messed up category views Overview of steps for a large docs site restructure project For some smaller docs site edits, you can sometimes simply edit the nav files and not have to touch the doc files or folders. But for larger projects, you may want to or need to edit and move the docs files and folders themselves. Below is a broad overview of the chunks of work such larger projects generally entail. Plan out what the new nav file structure will look like, and plan out the work of moving docs files or creating new folders. It can help to write down the chunks of work a large project will entail. Move the affected doc files to their new folder locations, making sure to add redirects. For more on that, see Move docs between folders. Delete any empty folders. Edit the nav files to reflect the new desired structure and point to the new doc URLs. If there are category header path URLs that are no longer needed, add those URLs as redirects to specific docs (preferred) or the taxonomy redirects file. For more specific and granular procedures, keep reading. Add a new category We'll explain two procedures: adding a subcategory of docs in an existing nav file, and adding an entirely new nav file. Add a new nav file Adding an entirely new nav file should be rare, and something we only do occasionally during large overhauls of site structure. To add an entirely new nav file: Copy an existing file nav file, or create a new nav file. Customize the new nav file with the categories and docs you want, using the structure of existing nav files as a template. For more on structure, see nav format. Tip You need at least one level of nesting inside the nav file. Without that, doc titles in the auto-generated category views will render as H2 headings. For example, src/content/level-one/level-two/doc will work, but src/content/level-one/doc will produce strange formatting. If you don't want your new nav to appear on the main landing page, add rootNav: false to your .yml file. (For an example of this, see src/nav/style-guide.yml.) Add a new category to a nav file To add a new category to a nav file: In an existing nav file, add a new category, represented by its title and path. If you're adding a path for that category (recommended), it must use the URL of an existing folder with at least one mdx file in it. Add the docs you want in that section. Ensure your new content matches the indenting of the surrounding nav file. To learn more about how this works, see: How a doc's sidebar is determined How a doc category view is determined If a category view isn't clickable, see Make category view clickable. Add a doc to sidebar/nav-file Once you create a doc, you need to place it in one or more nav files. To do this: In the nav file location where you want to locate it, add the title (its short title displayed in the sidebar and category views) and the path, which is the doc's URL. Ensure that you've emulated the indenting based on the surrounding nav file content or other nav files. Add doc in multiple sidebar locations To add a doc in more than one sidebar location, simply add that doc (its title and path) wherever you want it to be in the nav file. For more on how the sidebar is determined for docs in multiple nav files, see Sidebar. You can add a doc URL in multiple nav file locations. Move docs to other categories Because the nav file and the actual folder structure aren't connected, there are two different ways to \"move docs\": Move a doc in the nav files: preferred and most common procedure. Move a doc between folders: less frequent, mainly when doing larger projects where we want to do a significant overhaul of the docs structure and want to ensure the folder structure doesn't become too divergent from the nav file structure. Move docs using nav file You would move a doc in the nav file when you want to change its location in the displayed docs site structure (i.e., the sidebar and docs category views). To move a doc from one place to another in the nav file: In the first nav file, copy the two rows representing that doc's entry (the title and path lines) and paste that content into the place you want it to live in the new nav file. In the new nav file section, make sure that new content is aligned properly with the surrounding nav file content. See Nav format for more about nav file structure. Move docs between folders Note that moving docs between the folders should be relatively rare. The main reasons to do this are when the folder structure and nav file structure are becoming very different, which can be bad for a couple reasons: Too much divergence can create issues with category view displays or sidebar actions. Too much divergence can make finding and editing docs harder, so there can be value to keeping things fairly up to date and parallel. When you move a doc between folders or rename a doc, that changes its URL. Similarly, if you rename a folder, that changes the URL of all docs in that area. To move a doc between folders: Get the current URL of the doc you want to move and add that URL to its own list of redirects. Tips: One way to do this in VSCode is to right click the file and click \"Get relative path\". If you are moving many files, ask the team about ways to programmatically add redirects. Remove the trailing slash. Move the doc to the new folder. Update nav files with the new URL. This is easily overlooked but having the correct doc URL in the nav file, and not a redirect, is important. Note that a doc URL may be in more than one nav file so searching the site for that URL can help. Move or delete a folder Sometimes when we are doing a larger restructuring project, we may want to move or delete the actual folders instead of simply editing the nav files. If you are moving an entire folder or multiple folders to another folder, docs and all: Simply move these folders using your preferred method (e.g., using drag and drop) to the new location. Next, because that move changes all the URLs of the docs and categories, you'll need to add redirects: For adding redirects for docs, see the procedures for moving a doc between folders. For category redirects: For the section of the nav file affected by your folder editing, gather all the category URLs (path fields) that relate to the moved or deleted folders. We don't need to redirect all folder-related URL paths: we only need to redirect the nav file paths because those represent the paths that we actually link to in the docs (in other words: we aren't using folder-based URLs if they don't have a nav file path). Add those category path URLs as redirects in specific docs or, if that won't work, in the taxonomy-redirects file. We should aim to add category redirects in specific docs and the reason for this is that the taxonomy-redirects file is hard to use and because it's a better customer experience to land on a doc versus a category if possible. In most cases, you'll be able to find a fitting doc to redirect to but if only a category view makes sense, use the taxonomy redirects file. For larger projects, this can be tough work, so you'll want to check out the build and make sure all the sidebar links and category headers are working as expected. For deleting folders, you'll want to essentially follow the same steps as above: either moving or deleting the docs in those folders first, gathering the affected category path URLs and adding them as redirects, adn then deleting the empty folders. Create a \"dummy\" sub-category of docs that don't live in that category Sometimes you want to create a category of docs that is there to help expose a related doc or set of docs. For example, in this view, we have added a category for 'New Relic University' even though that's not a doc that lives in that section; in this case, it's not even a doc on our site. In the example above, this 'New Relic University' category header is in regular text and not a link, and that's because it doesn't have a path set for it in the nav file. This also means that in the sidebar, this category header is not a clickable link and simply functions as a collapser/expander. This is acceptable if you don't mind it but below we explain how you can get a clickable category if you need it. To create a so-called \"dummy\" category: Add the category structure you want in the nav file. If you're okay not having a clickable category header, your new category doesn't require a path. If you want a clickable category header, you will need to use or create a folder that matches the new category path and that has at least one mdx file in it (details). In the nav file, add the title and path information for the docs you want in that new category. Test your new category to ensure it is working correctly. Make a sidebar category heading clickable If there's a sidebar category that's only acting as an expander/collapser and doesn't have a link, that's because it either a) doesn't have a path set in the nav file, or b) that path goes to a folder that doesn't have a doc in it. For more on this, see the instructions regarding clickable headers in the \"dummy\" category section. Troubleshoot category views not working correctly If a docs category view is not working correctly, review how category views are formed. If this does happen, get another opinion from another tech writer to make sure you're not missing something, as we should rarely have problems. One reason that a category view might not work is specifically for path URLs that are also landing pages. In this case, if that path is used in more than one location in the same nav file, the docs site can be confused about which category view to use. We may fix this with a coding fix but in meantime: consider pointing to other URLs and not that path, so that there's only one use of that path per nav file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.39172,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "How is the displayed structure related <em>to</em> the actual folders?",
        "body": "-<em>apis</em>. This is what governs the sidebar heading title of &quot;<em>Get</em> <em>started</em>&quot; and tells it the URL to use. - title: <em>APIs</em> path: &#x2F;docs&#x2F;<em>apis</em> pages: - title: <em>Get</em> <em>started</em> path: &#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>intro</em>-<em>apis</em> pages: - title: New Relic <em>APIs</em> path: &#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>intro</em>-<em>apis</em>&#x2F;introduction-new-relic-<em>apis</em> - title: <em>API</em> keys path"
      },
      "id": "612eff27e7b9d25b16b6f24c"
    }
  ],
  "/docs/apis/nerdgraph/examples/configure-infinite-tracing-graphql": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37772,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13593,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.10693,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/create-widgets-dashboards-api": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.3774,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13583,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.10687,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/export-dashboards-pdfpng-using-api": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.3774,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13583,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.10687,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/export-import-dashboards-using-api": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37708,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13574,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.1068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/golden-metrics-entities-nerdgraph-api-tutorial": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37708,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13574,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.1068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/manage-live-chart-urls-via-api": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37708,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13574,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.1068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/nerdgraph-cloud-integrations-api-tutorial": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37677,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13562,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.10675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/nerdgraph-data-partition-rules-tutorial": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37677,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13562,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.10675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/nerdgraph-distributed-trace-data-tutorial": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37646,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.10672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/nerdgraph-entities-api-tutorial": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37646,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.10672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/nerdgraph-nrql-tutorial": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.10666,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "image": "",
      "url": "https://developer.newrelic.com/collect-data/",
      "sections": [
        "Collect data",
        "Guides to collect data",
        "Add custom attributes",
        "Create custom events",
        "Collect data - any source",
        "Build queries with NerdGraph",
        "Query data with NRQL"
      ],
      "published_at": "2021-09-15T01:38:23Z",
      "title": "Collect data",
      "updated_at": "2021-09-11T01:38:44Z",
      "type": "developer",
      "external_id": "fb5d6f75b61858b09e3e8c63f3b2af97813f47b6",
      "document_type": "page",
      "popularity": 1,
      "body": "Through our opensource agents or APIs, New Relic makes it easy to collect data from any source. The guides in this section provide strategies for collecting and querying data for use in your existing implementation, or in apps you build. The opportunities are endless. Guides to collect data Add custom attributes   Use custom attributes for deeper analysis Create custom events 5 min Define, visualize, and get alerts on the data you want using custom events Collect data - any source 15 min APIs, agents, OS emitters - get any data Build queries with NerdGraph 25 min Try NerdGraph and build the queries you need Query data with NRQL 10 min Query default data, custom events, and attributes",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.17065,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Build queries with <em>NerdGraph</em>",
        "body": " custom attributes   Use custom attributes for deeper analysis Create custom events 5 min Define, visualize, and get alerts on the data you want using custom events Collect data - any source 15 min <em>APIs</em>, agents, OS emitters - get any data Build queries with <em>NerdGraph</em> 25 min Try <em>NerdGraph</em> and build the queries you need Query data with NRQL 10 min Query default data, custom events, and attributes"
      },
      "id": "6091fa38196a67a932d52a29"
    }
  ],
  "/docs/apis/nerdgraph/examples/nerdgraph-tagging-api-tutorial": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37585,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13535,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.10663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/examples/topology-nerdgraph-tutorial": [
    {
      "sections": [
        "Introduction to New Relic NerdGraph, our GraphQL API",
        "What is NerdGraph?",
        "Important",
        "Use the GraphiQL explorer",
        "Requirements and endpoints",
        "What can you do with NerdGraph?",
        "NerdGraph terminology",
        "Tips on using the GraphiQL explorer",
        "Query accounts a New Relic user can access",
        "Query user, account, and NRQL in one request"
      ],
      "title": "Introduction to New Relic NerdGraph, our GraphQL API",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Get started"
      ],
      "external_id": "e8e96c16cd75f494ebfacb3bc53b4ee9ccf1c727",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/",
      "published_at": "2021-09-13T19:42:17Z",
      "updated_at": "2021-08-27T08:50:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "NerdGraph is our GraphQL-format API that lets you query New Relic data and configure some New Relic features. What is NerdGraph? New Relic has several APIs. NerdGraph is the API we recommend for querying New Relic data and for performing some specific configurations (learn more about features). NerdGraph provides a single API interface for returning data from New Relic’s various APIs and microservices. Over time, other configuration capabilities will be added to NerdGraph. Important NerdGraph isn’t used for data ingest. For that, you'd use our data ingest APIs. NerdGraph is built using GraphQL, which is an open source API format that allows you to request exactly the data needed, with no over-fetching or under-fetching. For a lesson in how to use NerdGraph, watch this 7-minute video: Want to watch more video tutorials? Go to the New Relic University’s Intro to NerdGraph. Or see the online course on New Relic APIs. Use the GraphiQL explorer To get started using GraphQL, we recommend playing around with our GraphiQL explorer (GraphiQL is an open source graphical interface for using GraphQL). You can use it to explore our data schema, to read built-in object definitions, and to build and execute queries. To use GraphQL, you’ll need a user-specific New Relic API key called a user key. You can generate one or find an existing one from the GraphiQL explorer’s API key dropdown. To find the GraphiQL explorer: If your New Relic account uses an EU data center, go to api.eu.newrelic.com/graphiql. Otherwise use api.newrelic.com/graphiql. For tips on how to build queries, see Build queries. Requirements and endpoints To use NerdGraph, you need a New Relic user key, which can be generated and accessed from the GraphiQL explorer. The endpoints are: Main endpoint: https://api.newrelic.com/graphql Endpoint for accounts using EU data center: https://api.eu.newrelic.com/graphql To access the endpoint, use the following cURL command: curl -X POST https://api.newrelic.com/graphql \\ -H 'Content-Type: application/json' \\ -H 'API-Key: YOUR_NEW_RELIC_USER_KEY' \\ -d '{ \"query\": \"{ requestContext { userId apiKey } }\" } ' Copy What can you do with NerdGraph? NerdGraph functionality can be broken down into two main categories: Querying New Relic data. You can fetch data for a variety of purposes, including using it in a programmatic workflow, or building a New Relic One app for custom data visualizations. Configuring New Relic features. There are a variety of configurations available and more will be added over time. You can do things like add tags, configure workloads, or customize \"golden metrics.\" You can use NerdGraph to return a wide range of New Relic data but we’ve created some tutorials for common use cases: Topic Tutorials Your monitored entities Get data about entities Understand entity relationships and dependencies (used to build service maps) Query and configure \"golden metrics\" (important entity metrics) Querying data Query using NRQL (our query language) Tags Add and manage tags Dashboards Create dashboards Export dashboards to other accounts Export dashboards as files Migrate from Insights Dashboard API to NerdGraph Alerts See all alert-related tutorials Applied Intelligence View and configure topology Workloads View and configure workloads Manage keys Create and manage keys (license keys used for data ingest, and user keys) Manage data Convert event data to metric data Drop data Distributed tracing Query distributed tracing data Configure Infinite Tracing New Relic One apps Build a New Relic One app Cloud integrations (AWS, Azure, GCP) Configure cloud integrations Partners and resellers Manage subscriptions (only for partners using original pricing plan) Data partitions Manage data partitions Date retention Manage data retention NerdGraph terminology The following are terms that originate with GraphQL (the API format NerdGraph uses). Term Definition Queries and mutations There are two classes of GraphQL operations: Queries are basic requests used only to fetch data. These queries are not static, meaning that you can ask for more data or less data, depending on your needs. For each query, you can specify exactly what data you want to retrieve, as long as it is supported by the schema. Mutations are requests that perform an action, such as creating a resource or changing configuration. Mutations require the keyword mutation, as well as the name of the mutation. Type Data in GraphQL is organized into types. Types can be scalars (like strings, numbers, or booleans) or object types. An object type is a custom type made up of a collection of fields. For example, an object type called User may represent a user in a system. Field A field represents a piece of information on an object type that can be queried. Fields can be scalars, lists, or objects. For example, a User object type could have a string field called name. Interface An interface is an abstract type that represents a collection of common fields that other object types can implement. Tips on using the GraphiQL explorer You can make queries with the NerdGraph GraphiQL explorer. The explorer provides built-in schema definitions and features, including auto-complete and query validation. Query accounts a New Relic user can access You can query for the name of an account that an actor (a New Relic authorized user) has access to: query { actor { account(id: YOUR_ACCOUNT_ID) { name } } } Copy The response will mirror the query structure you defined in the request, making it easy to ask for the specific data that you want. { \"data\": { \"actor\": { \"account\": { \"name\": \"Data Nerd\" } } } } Copy Query user, account, and NRQL in one request The graph structure shows its capabilities when queries become more complex. For example, you can query for user information, account information, and make a NRQL query with one request. With REST API, this would take three different requests to three different endpoints. query { actor { account(id: YOUR_ACCOUNT_ID) { name nrql(query: \"SELECT * FROM Transaction\") { results } } user { name id } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 370.5663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>NerdGraph</em>, our <em>GraphQL</em> API",
        "sections": "Introduction to New Relic <em>NerdGraph</em>, our <em>GraphQL</em> API",
        "tags": "<em>NerdGraph</em>",
        "body": " Add and manage tags Dashboards Create dashboards Export dashboards to other accounts Export dashboards as files Migrate from Insights Dashboard API to <em>NerdGraph</em> Alerts See all alert-related tutorials <em>Applied</em> <em>Intelligence</em> View and configure <em>topology</em> Workloads View and configure workloads Manage keys"
      },
      "id": "6043ff97196a67d0a0960f55"
    },
    {
      "sections": [
        "NerdGraph tutorial: Notification channels",
        "Tip",
        "Get notification channels",
        "List all notification channels for an account",
        "Paginate through notification channels with cursor pagination",
        "Find a specific notification channel by id",
        "Create a notification channel",
        "Caution",
        "Create an email notification channel",
        "Create an OpsGenie notification channel",
        "Create a PagerDuty notification channel",
        "Create a Slack notification channel",
        "Create a VictorOps notification channel",
        "Create a Webhook notification channel",
        "Create an xMatters notification channel",
        "Update a notification channel",
        "Update an email notification channel",
        "Update an OpsGenie notification channel",
        "Update a PagerDuty notification channel",
        "Update a Slack notification channel",
        "Update a VictorOps notification channel",
        "Update a Webhook notification channel",
        "Update an xMatters notification channel",
        "Delete a notification channel",
        "Associate channels to a policy",
        "Dissociate a channel from a policy"
      ],
      "title": "NerdGraph tutorial: Notification channels",
      "type": "docs",
      "tags": [
        "Alerts and Applied Intelligence",
        "New Relic Alerts",
        "Alerts and NerdGraph"
      ],
      "external_id": "d62b37e04d0601fec177951123d72e13f57458a0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/advanced-alerts/alerts-nerdgraph/nerdgraph-api-notification-channels/",
      "published_at": "2021-09-14T04:41:36Z",
      "updated_at": "2021-08-26T05:43:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can manage your alert notification channels using our GraphQL NerdGraph API. Here are some queries and mutations you can develop in our NerdGraph API explorer. Tip See the NerdGraph introduction for help getting started with NerdGraph API explorer. Get notification channels The notificationChannels query allows you to paginate through all of your notification channels per account. You can also use the notificationChannel query to get a specific notification channel by its ID. Tip Note that certain secret fields (for example passwords or API keys) are obfuscated in the returned fields. List all notification channels for an account This example returns every field for every notification channel on the supplied account ID, up to the page limit of 200. Note how we use inline fragments to refer to the specific fields on the concrete types implementing the AlertsNotificationChannel interface. { actor { account(id: YOUR_ACCOUNT_ID) { alerts { notificationChannels { channels { id name type ... on AlertsXMattersNotificationChannel { config { integrationUrl } } ... on AlertsWebhookNotificationChannel { config { baseUrl basicAuth { password username } customHttpHeaders { name value } customPayloadBody customPayloadType } } ... on AlertsVictorOpsNotificationChannel { config { key routeKey } } ... on AlertsUserNotificationChannel { config { userId } } ... on AlertsSlackNotificationChannel { config { teamChannel url } } ... on AlertsPagerDutyNotificationChannel { config { apiKey } } ... on AlertsOpsGenieNotificationChannel { config { apiKey dataCenterRegion recipients tags teams } } ... on AlertsHipChatNotificationChannel { config { authToken baseUrl roomId } } ... on AlertsEmailNotificationChannel { config { emails includeJson } } ... on AlertsCampfireNotificationChannel { config { room subdomain token } } } totalCount nextCursor } } } } } Copy Paginate through notification channels with cursor pagination If a given account's list of notification channels exceeds the 200 channel page limit, you can use the pagination cursor to retrieve additional pages. With cursor pagination, you continue to request additional pages using the nextCursor until that field returns empty in the response. An empty nextCursor signals that you have reached the end of the result set. Here's an example: { actor { account(id: YOUR_ACCOUNT_ID) { alerts { notificationChannels { channels { id name type } totalCount nextCursor } } } } } Copy The code above returns a set of results like this: { \"data\": { \"actor\": { \"account\": { \"alerts\": { \"notificationChannels\": { \"channels\": [ { \"id\": \"250\", \"name\": \"Channel 1\", \"type\": \"SLACK\" }, { \"id\": \"713\", \"name\": \"Channel 2\", \"type\": \"WEBHOOK\" }, // ... +198 more notification channels in reality ], \"nextCursor\": \"Wh4LK9JYzfACVlNkyvf7Rg==:I5VbSEpgx3UWNA5AOVsUPv4=\", \"totalCount\": 268 } } } } } } Copy In your next request, provide the cursor like so, updating each subsequent request to return the updated cursor, until the cursor is empty: { actor { account(id: YOUR_ACCOUNT_ID) { alerts { notificationChannels(cursor: \"Wh4LK9JYzfACVlNkyvf7Rg==:I5VbSEpgx3UWNA5AOVsUPv4=\") { channels { id name type } totalCount nextCursor } } } } } Copy Find a specific notification channel by id If you have a specific notification channel's ID, the API allows you to look it up directly. Note that because the specific channel is a concrete type implementing the AlertsNotificationChannel interface, you may need to specify certain fields using the ... on syntax for inline fragments. In this example, we are retrieving a Slack channel: { actor { account(id: YOUR_ACCOUNT_ID) { alerts { notificationChannel(id: YOUR_CHANNEL_ID) { id name type ... on AlertsSlackNotificationChannel { config { teamChannel url } } } } } } } Copy Create a notification channel In order to create an alert notification channel, you need to know the specific type of notification channel you want to create (for example email, Slack, etc.), as well as the details necessary to configure it (which will depend on the channel type). Once a notification channel has been created, it can be associated with one or more alert policies. Once associated, those channels will receive notifications from those policies when conditions are violated. Caution While you can query for any existing notification channel type, you can only create a subset of them. Specifically, the user channel type has no editable fields, and the Campfire and HipChat channel types are both deprecated. Create an email notification channel An example create mutation for an email notification channel: mutation { alertsNotificationChannelCreate(accountId: YOUR_ACCOUNT_ID, notificationChannel: { email: { emails: [\"email@example.com\"], includeJson: true, name: \"Some Name <email@example.com>\" } }) { notificationChannel { ... on AlertsEmailNotificationChannel { id name type config { emails includeJson } } } error { description errorType } } } Copy Create an OpsGenie notification channel An example create mutation for an OpsGenie notification channel: mutation { alertsNotificationChannelCreate(accountId: YOUR_ACCOUNT_ID, notificationChannel: { opsGenie: { apiKey: \"api-key-from-opsgenie\", dataCenterRegion: US, name: \"OpsGenie notification channel name\", recipients: [\"user@example.com\"], tags: [\"tag1\", \"tag2\"], teams: [\"team1\", \"team2\"] } }) { notificationChannel { ... on AlertsOpsGenieNotificationChannel { id name type config { apiKey teams tags recipients dataCenterRegion } } } error { description errorType } } } Copy Create a PagerDuty notification channel An example create mutation for a PagerDuty notification channel: mutation { alertsNotificationChannelCreate(accountId: YOUR_ACCOUNT_ID, notificationChannel: { pagerDuty: { name: \"PagerDuty notification channel name\", apiKey: \"api-key-from-pagerduty\" } }) { notificationChannel { ... on AlertsPagerDutyNotificationChannel { id name type config { apiKey } } } error { description errorType } } } Copy Create a Slack notification channel An example create mutation for a Slack notification channel: mutation { alertsNotificationChannelCreate(accountId: YOUR_ACCOUNT_ID, notificationChannel: { slack: { name: \"Slack notification channel name\", teamChannel: \"#team-channel\", url: \"https://hooks.slack.com/services/FAKE/MOREFAKE/IMAGINARYEXAMPLEURLCHUNK\" } }) { notificationChannel { ... on AlertsSlackNotificationChannel { id name type config { teamChannel url } } } error { description errorType } } } Copy Create a VictorOps notification channel An example create mutation for a VictorOps notification channel: mutation { alertsNotificationChannelCreate(accountId: YOUR_ACCOUNT_ID, notificationChannel: { victorOps: { key: \"example-api-key-from-victorops\", name: \"VictorOps notification channel name\", routeKey: \"example-route-key\" } }) { notificationChannel { ... on AlertsVictorOpsNotificationChannel { id name type config { key routeKey } } } error { description errorType } } } Copy Create a Webhook notification channel An example create mutation for a Webhook notification channel: mutation { alertsNotificationChannelCreate(accountId: YOUR_ACCOUNT_ID, notificationChannel: { webhook: { baseUrl: \"https://example.com/webhook\", basicAuth: { password: \"t0t4lly-s3cr3t-p455w0rd\", username: \"webhook-user\" }, customHttpHeaders: [ {name: \"X-Api-Key\", value: \"100%-real-api-key\"}, {name: \"X-Calling-Service\", value: \"New Relic Alerts\"} ], customPayloadBody: \"{ \\\"account_id\\\": \\\"$ACCOUNT_ID\\\", \\\"account_name\\\": \\\"$ACCOUNT_NAME\\\", \\\"closed_violations_count_critical\\\": \\\"$CLOSED_VIOLATIONS_COUNT_CRITICAL\\\", \\\"closed_violations_count_warning\\\": \\\"$CLOSED_VIOLATIONS_COUNT_WARNING\\\", \\\"condition_description\\\": \\\"$DESCRIPTION\\\", \\\"condition_family_id\\\": \\\"$CONDITION_FAMILY_ID\\\", \\\"condition_name\\\": \\\"$CONDITION_NAME\\\", \\\"current_state\\\": \\\"$EVENT_STATE\\\", \\\"details\\\": \\\"$EVENT_DETAILS\\\", \\\"duration\\\": \\\"$DURATION\\\", \\\"event_type\\\": \\\"$EVENT_TYPE\\\", \\\"incident_acknowledge_url\\\": \\\"$INCIDENT_ACKNOWLEDGE_URL\\\", \\\"incident_id\\\": \\\"$INCIDENT_ID\\\", \\\"incident_url\\\": \\\"$INCIDENT_URL\\\", \\\"metadata\\\": \\\"$METADATA\\\", \\\"open_violations_count_critical\\\": \\\"$OPEN_VIOLATIONS_COUNT_CRITICAL\\\", \\\"open_violations_count_warning\\\": \\\"$OPEN_VIOLATIONS_COUNT_WARNING\\\", \\\"owner\\\": \\\"$EVENT_OWNER\\\", \\\"policy_name\\\": \\\"$POLICY_NAME\\\", \\\"policy_url\\\": \\\"$POLICY_URL\\\", \\\"runbook_url\\\": \\\"$RUNBOOK_URL\\\", \\\"severity\\\": \\\"$SEVERITY\\\", \\\"targets\\\": \\\"$TARGETS\\\", \\\"timestamp\\\": \\\"$TIMESTAMP\\\", \\\"timestamp_utc_string\\\": \\\"$TIMESTAMP_UTC_STRING\\\", \\\"violation_callback_url\\\": \\\"$VIOLATION_CALLBACK_URL\\\", \\\"violation_chart_url\\\": \\\"$VIOLATION_CHART_URL\\\" }\", customPayloadType: JSON, name: \"Webhook notification channel name\" } }) { notificationChannel { ... on AlertsWebhookNotificationChannel { id name type config { customPayloadType customPayloadBody customHttpHeaders { value name } basicAuth { password username } baseUrl } } } error { description errorType } } } Copy Create an xMatters notification channel An example create mutation for an xMatters notification channel: mutation { alertsNotificationChannelCreate(accountId: YOUR_ACCOUNT_ID, notificationChannel: { xMatters: { integrationUrl: \"https://company.instance.xmatters.com/api/xm/v<version>/...\", name: \"xMatters notification channel name\" } }) { notificationChannel { ... on AlertsXMattersNotificationChannel { id name type config { integrationUrl } } } error { description errorType } } } Copy Update a notification channel In order to update an alert notification channel, you need to know the specific type of notification channel you want to change (for example email, Slack, etc.), as well as the details necessary to configure it (which will depend on the channel type). Consistent with other GraphQL APIs, you can update a single field on the channel without knowing anything other than the channel's ID. Caution While you can query for any existing notification channel type, you can only update a subset of them. Specifically, the user channel type has no editable fields, and the Campfire and HipChat channel types are both deprecated. Update an email notification channel An example update mutation for an email notification channel where we're updating only the name: mutation { alertsNotificationChannelUpdate(accountId: YOUR_ACCOUNT_ID, id: YOUR_CHANNEL_ID, notificationChannel: { email: { name: \"Updated Name <email@example.com>\" } }) { notificationChannel { ... on AlertsEmailNotificationChannel { id name type } } error { description errorType notificationChannelId } } } Copy Update an OpsGenie notification channel An example update mutation for an OpsGenie notification channel where we're updating only the name: mutation { alertsNotificationChannelUpdate(accountId: YOUR_ACCOUNT_ID, id: YOUR_CHANNEL_ID, notificationChannel: { opsGenie: { name: \"OpsGenie updated channel name\" } }) { notificationChannel { ... on AlertsOpsGenieNotificationChannel { id name type } } error { description errorType notificationChannelId } } } Copy Update a PagerDuty notification channel An example update mutation for a PagerDuty notification channel where we're updating only the name: mutation { alertsNotificationChannelUpdate(accountId: YOUR_ACCOUNT_ID, id: YOUR_CHANNEL_ID, notificationChannel: { pagerDuty: { name: \"PagerDuty updated channel name\" } }) { notificationChannel { ... on AlertsPagerDutyNotificationChannel { id name type } } error { description errorType notificationChannelId } } } Copy Update a Slack notification channel An example update mutation for a Slack notification channel where we're updating only the name: mutation { alertsNotificationChannelUpdate(accountId: YOUR_ACCOUNT_ID, id: YOUR_CHANNEL_ID, notificationChannel: { slack: { name: \"Slack updated channel name\" } }) { notificationChannel { ... on AlertsSlackNotificationChannel { id name type } } error { description errorType notificationChannelId } } } Copy Update a VictorOps notification channel An example update mutation for a VictorOps notification channel where we're updating only the name: mutation { alertsNotificationChannelUpdate(accountId: YOUR_ACCOUNT_ID, id: YOUR_CHANNEL_ID, id: YOUR_CHANNEL_ID, notificationChannel: { victorOps: { name: \"VictorOps updated channel name\" } }) { notificationChannel { ... on AlertsVictorOpsNotificationChannel { id name type } } error { description errorType notificationChannelId } } } Copy Update a Webhook notification channel An example update mutation for a Webhook notification channel where we're updating only the name: mutation { alertsNotificationChannelUpdate(accountId: YOUR_ACCOUNT_ID, id: YOUR_CHANNEL_ID, notificationChannel: { webhook: { name: \"Webhook updated channel name\" } }) { notificationChannel { ... on AlertsWebhookNotificationChannel { id name type } } error { description errorType notificationChannelId } } } Copy Update an xMatters notification channel An example update mutation for an xMatters notification channel where we're updating only the name: mutation { alertsNotificationChannelUpdate(accountId: YOUR_ACCOUNT_ID, id: YOUR_CHANNEL_ID, notificationChannel: { xMatters: { name: \"xMatters updated channel name\" } }) { notificationChannel { ... on AlertsXMattersNotificationChannel { id name type } } error { description errorType notificationChannelId } } } Copy Delete a notification channel You can delete a notification channel with only the account ID and the channel ID. Note that deleting a channel dissociates it from all policies, meaning that no further notifications will be sent to that channel. mutation { alertsNotificationChannelDelete(accountId: YOUR_ACCOUNT_ID, id: YOUR_CHANNEL_ID) { id error { description errorType notificationChannelId } } } Copy Associate channels to a policy Creating an alert notification channel is not enough: Once the channel has been created, it needs to be associated to one or more policies. Once associated to a policy, the channel can recieve alert notifications when conditions on that policy go into violation. In this example, we associate two channels with a policy: mutation { alertsNotificationChannelsAddToPolicy(accountId: YOUR_ACCOUNT_ID, notificationChannelIds: [FIRST_CHANNEL_ID, SECOND_CHANNEL_ID], policyId: YOUR_POLICY_ID ) { notificationChannels { id } policyId errors { description errorType notificationChannelId } } } Copy Dissociate a channel from a policy In those instances where a notification channel has outlived its usefulness (for example, an email list that has been retired), the time has come to dissociate that channel from the policy (or policies) that are sending alert notifications to it. This API call leaves the channel itself intact, but removes it from the specified policy. In this example, we are removing two channels from a policy (leaving any others in place), and getting back confirmation that those two channel IDs have been removed: mutation { alertsNotificationChannelsRemoveFromPolicy(accountId: YOUR_ACCOUNT_ID, notificationChannelIds: [FIRST_CHANNEL_ID, SECOND_CHANNEL_ID], policyId: YOUR_POLICY_ID ) { notificationChannels { id } policyId errors { description errorType notificationChannelId } } } Copy Tip Removing an alert notification channel from a policy does not delete the policy because it might be used by other policies. On the other hand, deleting a channel will cause all associated channels to stop sending alert notifications to that channel.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 368.73724,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> <em>tutorial</em>: Notification channels",
        "sections": "<em>NerdGraph</em> <em>tutorial</em>: Notification channels",
        "tags": "Alerts and <em>Applied</em> <em>Intelligence</em>",
        "body": "You can manage your alert notification channels using our <em>Graph</em>QL <em>NerdGraph</em> API. Here are some queries and mutations you can develop in our <em>NerdGraph</em> API explorer. Tip See the <em>NerdGraph</em> introduction for help getting started with <em>NerdGraph</em> API explorer. Get notification channels"
      },
      "id": "6130bf9c28ccbc027d56a863"
    },
    {
      "image": "https://docs.newrelic.com/static/7ef874231dae9e4c50130a1ab6571777/c1b63/NRAI_Decisions_Index.png",
      "url": "https://docs.newrelic.com/docs/alerts-applied-intelligence/applied-intelligence/incident-intelligence/change-applied-intelligence-correlation-logic-decisions/",
      "sections": [
        "Change Applied Intelligence correlation logic with decisions",
        "Key concepts",
        "Review your active decisions",
        "Correlation statistics",
        "Use suggested decisions",
        "Create custom decisions",
        "Similarity algorithms",
        "Levenshtein distance",
        "Fuzzy score",
        "Fuzzy wuzzy ratio",
        "Fuzzy wuzzy partial ratio",
        "Fuzzy wuzzy token set ratio",
        "Jaro-winkler distance",
        "Cosine distance",
        "Hamming distance",
        "Jaccard distance",
        "Regex operators",
        "Regex in Step 1",
        "Regex in Step 2",
        "About flags",
        "Correlation assistant",
        "Attribute analysis",
        "Tips on using simulation",
        "Topology correlation",
        "Requirements",
        "How does topology correlation work?",
        "Add attributes to incident events",
        "Create or view topology"
      ],
      "published_at": "2021-09-13T18:40:52Z",
      "title": "Change Applied Intelligence correlation logic with decisions",
      "updated_at": "2021-08-26T17:58:35Z",
      "type": "docs",
      "external_id": "8c1e73ea08ed01f85be7af17e6210f63a7a0fc2f",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Incident Intelligence uses logic to correlate your incidents. We call these logic \"decisions.\" We have built-in decisions and you can create and customize your own on the Incident Intelligence Decisions UI page. The more optimally you configure decisions, the better we will group and correlate your incident events, resulting in reduced noise and increased context for on-call teams. one.newrelic.com > Applied Intelligence > Incident intelligence > Decisions: Our UI shows how each decision correlates incidents. Key concepts Here are some key concepts for understanding our decisions logic: What is \"correlation\" and how does it work? For the incident events being sent into Incident Intelligence from your various alerting engines, the most recently created and active incidents are available for correlation. Correlation occurs between two events whenever the criteria in any decision is met. All the events available for correlation are tested against each other in all possible pair combinations and a \"greedy merge\" is performed. This means that if incident A correlates with B into an issue and incident B correlates with incident C into another issue, then AB and BC will also merge together resulting in a single issue including A, B, and C. What types of logic can be used in a decision? At a high level, decisions allow you to define logic based on time (duration between events), frequency (number of events), context (metadata structure & values), and topology (entity relationships). Review your active decisions Decisions determine how Incident Intelligence correlates incidents together. By default, a broad set of global decisions is enabled when you start using Incident Intelligence. To review existing decisions: Go to one.newrelic.com and click Alerts & AI. In the left navigation, under Incident Intelligence, click Decisions. Review the list of active decisions. To see the rule logic that creates correlations between your issues, click the decision. To see examples of incidents the decision correlated, click the Recent correlations tab. Use any of the other options to enable or disable these global decisions. Your decisions will routinely be analyzed for their efficacy as well as other best practices, and recommendations will be attached for review. Correlation statistics Whether you want to use the suggested decisions we provide using our pattern recognition algorithms, or you want to add in your own correlation logic, you'll get insights into your correlation rate, noise reduction improvement, and the number of correlated issues arising, as shown below. From the UI, you can view the underlying NRQL queries and create your own custom charts and dashboards from this data. one.newrelic.com > Applied Intelligence > Incident intelligence > Decisions: Some example statistics from the decisions UI. Some definitions of statistics: Correlation rate: The percentage of the time correlations are occurring versus not. Total correlated issues: Number of issues correlated with another issue. Noise reduction: Total number of issues after correlation divided by the total number of issues before correlation. Correlation reason: Shows which decisions are correlating issues the most. Use suggested decisions Information about the types of suggested decisions: Suggested decisions: The data from your selected sources is continuously inspected for patterns to help reduce noise. Once patterns have been observed in your data, decisions are suggested that would allow these events to correlate in the future. Accelerated suggested decisions: If you have been using New Relic Alerts for a while, when you add alert policies to sources, we're able to use that historical data to accelerate the pattern recognition step and suggest decisions up to 30% faster. To get started, click on a suggested decision, located under the statistics block on the Decisions UI page. You'll see information on the logic behind the suggested decision, why we think it will help you, and the estimated correlation rate for that decision. one.newrelic.com > Applied Intelligence > Incident intelligence > Decisions: Suggested decision block If there isn't enough data to see the correlation rate, a link right below the percentage estimate will guide you to other sources you can add to get stronger results. Note: if you have less than 5000 incidents per month, you probably won't have suggested decisions. To add the suggested decision, click Activate decision and it will appear enabled, alongside the other decisions. If the decision isn't relevant to your needs, click Dismiss. Create custom decisions You can reduce noise and improve correlation by building your own custom decisions. To start building a decision, go to one.newrelic.com and click Alerts & AI. In the left navigation, under Incident Intelligence, click Decisions, then click Add a decision. Tips on how to use that UI are in the table below. When building a decision, steps 1, 2 and 3 are optional on their own but at least one must be defined in order to create a decision. Option Description Step 1: Filter your data In this step you'll define your filters. Remember correlation occurs between two incidents. If no filters are defined all incoming Incidents will be considered by the decision. Define your filters for the first segment (or bucket) of incidents, and the second segment of Incidents. Types of filter operators range from substring matching to regex matching to help you target the incident events you want and exclude those you don't. All combination of event pairs between segment one and segment two are used in the next steps of the decision. Step 2: Contextual correlation Once you've filtered your data, define the logic used when comparing the incidents' context. You can correlate events based on the following methods: Attribute value comparisons with standard operators Attribute value similarity using similarity algorithms Attribute value regex with capture groups Entire incident comparisons using similarity or clustering algorithms Step 3: Topology correlation Topology correlation is currently in limited release. Contact your account representative to enable this feature. Once enabled, you'll first need to ingest your topology data via our NerdGraph aiTopologyCollector (search for aiTopology in the NerdGraph GraphiQL explorer). This allows any topology-related decision to be matched with your topology data. Learn more about setting up topology correlation. Give it a name After you configure your decision logic, give it a recognizable name and description. This is used in notifications and other areas of the UI to indicate which decision caused a pair of incidents to be correlated together. Advanced settings Optional. The advanced settings area allows you to further customize how your decision behaves when correlating events. Each setting has a default value so customization is optional. Time window: Sets the maximum time between two incidents created time for them to be eligible for correlation. Issue priority: Overrides the default priority setting (inherit priority) to add higher or lower priority if the Incidents are correlated. Frequency: Modifies the minimum number of incidents that need to meet the rule logic for the decision to trigger. Similarity: If you're using similar to operators in your rule logic, you can choose from a list of algorithms and set its sensitivity. This will apply to all similar to operators in your decision. Similarity algorithms Here are technical details on the similarity algorithms we use: Levenshtein distance This measure is useful for comparing short strings with static schema and fixed length, like host names. Levenshtein distance is also known as edit distance. Details Description How it works The Levenshtein distance between two strings is the minimum number of single-character edits to get from one string to the other. Allowed edit operations are deletion, insertion, and substitution. The default similarity threshold for Applied Intelligence decisions is an edit distance of 3. You can change this in the Advanced mode of the decision builder. When to use it This measure is most useful for comparing relatively short strings with static schema and fixed length. Common applications include spell checkers, computational biology, and speech recognition. Examples number/bumble: 3 (number → bumber → bumblr → bumble) trying/lying: 2 (trying → rying → lying) strong/through: 4 (strong → htrong → throng → throug → through) Potential drawbacks Levenshtein distance is not normalized by default to take into account string lengths. Fuzzy score This metric is useful for comparing same-length strings where the same prefix would be a good indicator of correlation. Details Description How it works The fuzzy score algorithm works by allocating \"points\" for character matches between strings: One point for each matching character Two bonus points for subsequent matches The higher the fuzzy score, the greater the similarity between two strings. When to use it Fuzzy score is most useful for strings that have the same, and relatively short (ideally < 5 character), prefixes. A minimum guaranteed score would be (length(expected prefix) * 3) - 2. Examples Example: Decisions / dcsions d: 1 c: 1 i 1 s: 2 o: 1 n: 1 si: 2 io: 2 on: 2 ns: 2 = 15 points Potential drawbacks If the first character of the first string can't be found in the second string, no points are awarded. Fuzzy wuzzy ratio This metric is useful for comparing strings of similar length. Details Description How it works The fuzzy wuzzy family of similarity measures was developed by SeatGeek to help find tickets for the same event that have different labels across multiple platforms. The fuzzy wuzzy ratio for two strings is expressed as a percentage, where a higher number indicates a more similar string. It's based on the SequenceMatcher algorithm in Python's difflib. When to use it Fuzzy wuzzy ratio is effective for very short (eg. hostname) or very long (eg. event description) strings, especially in comparing strings of similar length. Potential drawbacks This algorithm is too sensitive to be used effectively for 3-10 word strings. One of the other modifications to fuzzy wuzzy (see below) may be a better choice. Fuzzy wuzzy partial ratio This metric is useful for comparing strings of different length. This modification to the fuzzy wuzzy algorithm helps address the effective length limitation. Details Description How it works With fuzzy wuzzy partial ratio, the shorter string is compared to each substring of the same length within the longer string. The score of the “best matching” substring is used to determine the fuzzy wuzzy partial ratio. When to use it Fuzzy wuzzy partial ratio is especially effective for the types of comparisons the basic fuzzy wuzzy algorithm fails at: 3-10 word strings where some significant substrings are likely to be overlapping. Examples For example, between the following strings: DevOps and SRE teams DevOps …”DevOps” (the shorter string, length = 6) would be compared to each substring with length 6 within “DevOps and SRE teams.” Since one of those substrings (“DevOps”) is a perfect match, the fuzzy wuzzy partial ratio for these two strings will be high. Potential drawbacks Where fuzzy wuzzy may be too conservative, fuzzy wuzzy partial match may be more liberal than expected with correlations. You can adjust the threshold in the decision builder according to your needs. Fuzzy wuzzy token set ratio This metric is useful for comparing strings where the information may not be in the same order, and of possible different lengths. It works best for sentences such as messages, descriptions, etc. Details Description How it works The token set ratio algorithm follows a few steps to compare strings: Tokenize each string (eg. “DevOps and SRE teams” → “DevOps” “and” “SRE” “teams”; “SRE team and DevOps engineers” → “SRE” “teams” “and” “DevOps” “engineers”) Combine intersecting tokens into a new string, leaving the remaining tokens. (eg. intersecting: ”DevOps”, “and”, “SRE”; remainder1: “teams”; remainder2: “team”, “engineers”) Alphabetize each token group (eg. “and, DevOps, SRE”, “teams”, engineers, team”) Compare the following pairs of strings: Intersection group Intersection group + remainder1 Intersection group + remainder2 The comparison from these pairs (“best matches”) is the fuzzy wuzzy token set ratio. When to use it This metric is helpful in cases where similar strings may have overlapping words but different construction - for example, event descriptions for different issues with the same resource. Potential drawbacks Where fuzzy wuzzy may be too conservative, fuzzy wuzzy token set match may be more liberal than expected with correlations. You can adjust the threshold in the decision builder according to your needs. Jaro-winkler distance This metric is useful for short strings where identical prefixes are a strong indication of correlation. Details Description How it works This metric uses a scale of 0-1 to indicate the similarity between two strings, where 0 is no similarity (0 matching characters between strings) and 1 is an exact match. Jaro-Winkler similarity takes into account: matching: two characters that are the same and in similar positions in the strings. transpositions: matching characters that are in different sequence order in the strings. prefix scale: the Jaro-Winkler distance is adjusted favorably if strings match from the beginning (a prefix is up to 4 characters). When to use it This metric is fairly tolerant of transpositions, but transpositions further apart in the string are less useful. A generally-safe number to use for Jaro-Winkler similarity in moderate to long strings is 0.9; you could use ~ 0.85 in cases where more leniency is okay (if you have other, more specific logic in the decision). Cosine distance This measure is most commonly used to compare large blocks of text (for example, incident descriptions) and provides an easy visualization of similarity. Details Description How it works For each text block you're comparing, a vector is calculated to represent the count of each unique word in the block. The cosine distance of the resulting vectors is their dot product divided by the product of their magnitudes. When to use it This measure is most useful to compare long blocks of text, specifically when the comparison is meant to consider the text as a whole, and not differences or misspellings in individual words. Examples It is not length of life, but depth of life. Depth of life does not depend on length. Copy Here are the word counts for these sentences: it 1 0 is 0 1 not 1 1 length 1 1 of 2 1 life 2 1 but 1 0 depth 1 1 does 0 1 depend 0 1 on 0 1 And here are those counts represented as a vector: [1, 0, 1, 1, 2, 2, 1, 1, 0, 0, 0] [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1] Copy The cosine distance of these vectors is about 0.9 (1 is the highest similarity). Potential drawbacks Cosine distance is less useful for situations where small character differences in words are insignificant. Also, cosine distance ignores word order in the text blocks. For more information on cosine distance implementation, see this detailed walkthrough. Hamming distance This measure is useful for shorter text with static schema, but it works only for same-length strings. Details Description When to use it Hamming distance requires the compared strings to be of equal length. This is a useful similarity metric for situations where the difference between two strings may be due to typos, or where you want to compare two attributes with known lengths. For example: Low Disk Space in application myapp in datacenter us01 If you wanted to be tolerant to datacenter changes, the hamming distance should be set to 4. An average use case for Hamming distance would be around 2-3. Examples A simpler version of \"edit distance\" metrics like Levenshtein distance, the Hamming distance between two strings is the number of characters in the string that don't match (in the same position). For example, in the strings below, the Hamming distance is 2: flowers / florets Copy Potential drawbacks In the example above, if the application name changes instead of the datacenter, a correlation would also be created. As the distance grows, the usefulness of Hamming Distance plummets. For this reason, for anything remotely more complicated than being tolerant to 1-2 character substitutions (or if the string lengths will not match), a different similarity measurement should be used. Jaccard distance This measure is useful for comparing large blocks of text, like descriptions or entire incidents. Details Description How it works The distance, denoted as a percentage (0 being completely similar; 1 being totally dissimilar) is calculated with the following formula: 1 - [(# of characters in both sets) / (# of characters in either set) * 100] Copy In other words, the Jaccard distance is the number of shared characters divided by the total number of characters (shared and un-shared). A Jaccard distance of 0.1 means that 10% or fewer characters between two incidents are different. When to use it Jaccard distance is very easy to interpret and especially useful in cases with large data sets. For example, in comparing the similarity between two entire incidents (as opposed to one attribute). Potential drawbacks It's less effective for small data sets or situations with missing data. Also, different permutations of the character set don't affect Jaccard distance, so care should be taken to prevent false positives. Regex operators When building a decision, available operators include: contains (regex): used in Step 1: Filter your data. regular expression match: used in Step 2: Contextual correlation. The decision builder follows the standards outlined in these documents for regular expressions. Regex in Step 1 In order for your regex to test as true, the entire attribute value (the data you’re evaluating) must be matched by the regular expression provided. Captured groups can be used but are not explicitly evaluated. For instance, if the attribute value is foobarbaz, these examples would meet the criteria and test as true: foo.* ^.*baz \\w+ Regex in Step 2 In order for your regex to test as true, the entire attribute values for incident 1 and incident 2 must be included in the match. Also, each captured group (expressions in ( ) parentheses) must exist in both values (incident 1 and incident 2 attributes), and have the same value: The number of captured groups must be equal for both incident attributes. Each group must be equal to the corresponding group between attribute values: the value of the first captured group in the incident 1 attribute value is equal to the value of the first captured group in the incident 2 attribute. For instance, if attribute value 1 is abc-123-xyz and attribute value 2 is abc-777-xyz, then (\\w+)-(?:\\w+)-(\\w+) would meet the criteria: The whole value is matched by the expression. The first and third captured groups have the same respective values. The second group is not captured using ?:, which allows the whole value to match but isn’t used in the capture group comparison. About flags No flags are enabled by default. Some useful flags to include in regular expressions in the decision builder are: CASE_INSENSITIVE: (?i) MULTILINE: (?m) DOTALL: (?s) See field detail for more notes on the function and implementation of each of these flags. Correlation assistant You can use the correlation assistant to more quickly analyze incidents, create decision logic, and test the logic with a simulation. To use the correlation assistant: From one.newrelic.com, click Alerts & AI, click Overview, then click the Incidents tab. Check the boxes of incidents you'd like to correlate. Then, at the bottom of the incident list, click Correlate incidents. For best results for correlating incidents, select common attributes with a low frequency percentage. Learn more about using frequency. Click Simulate to see the likely effect of your new decision on the last week of your data. Click on examples of correlation pairs and determine of those correlations are desired. If you like what's been simulated, click Next, and then name and describe your decision. If the simulation result shows too many potential incidents, you may want to choose a different set of attributes and incidents for your decision and run another simulation. Learn more about simulation. Attribute analysis Here are explanations of the two types of attribute analysis displayed in the UI: Common attributes: This analysis simply highlights attributes and values that are the exact same between all selected incidents. Similar attributes: Similarity analysis uses the Levenshtein algorithm with a distance of 3 to find attributes whose values would be the same if 3 or less character changes are performed. Other details: Numerical values as well as single character values are filtered out of the results. Requires two incidents to be selected. Similarity analysis is not performed when 3 or more incidents are selected. To create the best decisions, we recommend choosing common attributes that have a lower frequency in your incidents. Here are tips for understanding how choosing low or high frequency attributes affects your decisions: Low frequency: As an example, an attribute with a 0% in the frequency column is likely a unique identifier or an attribute that only recently reported in your data in the last month. Choosing low frequency attributes may correlate few events. High frequency: On the other end, an attribute with 100% frequency would be one that is present on all your data. Choosing these attributes would correlate all of your events together. By default, the attributes are sorted by frequency with the least frequently reported attributes at the top. Click an attribute's frequency percentage to get more information about the distribution of values we've seen reported for that attribute in the last month. Tips on using simulation Using a set of incidents, the correlation assistant identifies common attributes among those incidents as well as attributes with similar values. Select attributes you believe are good indicators that events should correlate and then simulate the decision. Simulation will test the logic against the last week of your data and show you how many correlations would have happened, in addition to actual examples to inspect. If the simulation looks good, continue creating your real decision. If the simulation doesn't show examples of useful correlations, choose a different set of attributes, and run the simulation again. Here’s a breakdown of the decision preview information displayed when you create a simulation: Potential correlation rate: The percentage of tested incidents this decision would have affected. Total created incidents: The number of incidents tested by this decision. Total estimated correlated incidents: The estimated number of incidents this decision would have correlated. Incident examples: A list of incident pairs this decision would have correlated. You can click on these to see a side by side comparison of all attributes and values to help you determine if the correlation is desired or not. Run the simulation with different attributes as many times as you need until you see results you like. When you’re ready, follow the UI prompts to save your decision. Topology correlation What do we mean by “topology”? For New Relic's Applied Intelligence, topology is a representation of your service map: how the services and resources in your infrastructure relate to one another. When you create a custom decision, you can use our topology correlation, which finds relationships between incident sources to determine if incidents should correlate. Topology correlation is designed to improve the quality of your correlations and the speed at which they're found. Requirements Topology correlation is currently in limited release. Requirements: Given access to topology feature by a New Relic representative Limit of 10K vertices per New Relic organization per environment How does topology correlation work? In this service map, the hosts and apps are the vertices, and the lines showing their relationships are the edges. Topology correlation relies on two main concepts: Vertex: A vertex represents a monitored entity: it's the source from which your incident events are coming from, or describing a problematic symptom about. A vertex has attributes (key/value pairs) configured for it, like entity GUIDs or other IDs, which allow it be associated with incoming incident events. Edges: An edge is a connection between two vertices. Edges describe the relationship between vertices. To set up your topology, you'll use our NerdGraph API. But first, it may help to understand how topology is used to correlate incidents: First, New Relic gathers all relevant incidents. This includes incidents where decision-logic steps 1 and 2 are true, and that are also within the defined time window in advanced settings. In this example, all of the incidents in the dotted-line selection have met these requirements: they've gone through the decision logic in steps 1 and 2, and all contextual comparisons made in decision logic step 2 are true. Next, we attempt to associate each incident to a vertex in your topology graph using a vertex's defining attributes and the available attributes on the incident. Here's an example of the steps for associating incidents with the information in the topology graph. Next, the pairs of vertices which were associated with incidents are tested using the \"topologically dependent\" operator to determine if these vertices are connected to each other. This operator checks to see if there is any path in the graph that connect the two vertices within 5 hops. The incidents are then correlated and the issues are merged together. Add attributes to incident events Incidents are connected to vertices using a vertex's defining attributes (in the example topology under Topology explained, each vertex has a defining attribute \"CID\" with a unique value). Next, Applied Intelligence finds a vertex that matches the attribute. If the defining attribute you'd like to use on your vertices isn't already on your incident events there are a few ways to add it: Tag your entities in New Relic: By tagging your entities, those tags will enrich the incident events generated by Alerts. For example, if you've tagged your entities with CID and their corresponding unique values then you can have defining attributes on your vertex as follows: 'newrelic/tags/CID' : CID_VALUE Facet your data: Creating NRQL alert conditions with one or more facets defined will group your data by attribute. Also, incident events emitted will be enriched with those attributes and values. For incidents, faceted attributes follow the same format: newrelic/tags/ATTRIBUTE_NAME Create or view topology To set up your topology or view existing topology, see the NerdGraph topology tutorial.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 357.73538,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change <em>Applied</em> <em>Intelligence</em> <em>correlation</em> logic with decisions",
        "sections": "Change <em>Applied</em> <em>Intelligence</em> <em>correlation</em> logic with decisions",
        "body": " data: Creating NRQL alert conditions with one or more facets defined will group your data by attribute. Also, <em>incident</em> events emitted will be enriched with those attributes and values. For incidents, faceted attributes follow the same format: newrelic&#x2F;tags&#x2F;ATTRIBUTE_NAME Create or view <em>topology</em> To set up your <em>topology</em> or view existing <em>topology</em>, see the <em>NerdGraph</em> <em>topology</em> <em>tutorial</em>."
      },
      "id": "603e974528ccbc20ceeba7bf"
    }
  ],
  "/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-user-keys": [
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 397.37555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: Get"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13525,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.10657,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    }
  ],
  "/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph": [
    {
      "sections": [
        "New Relic API keys",
        "API key UI",
        "Overview of keys",
        "Keys for data ingest",
        "Keys for querying and configuration",
        "License key",
        "View and manage license key",
        "User key",
        "Browser key",
        "Insights insert key",
        "Important",
        "REST API key",
        "Insights query key",
        "Admin key",
        "Account ID"
      ],
      "title": "New Relic API keys",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "b373cd68cf21daeb5d912ffb4b1ae3f14f500fcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/new-relic-api-keys/",
      "published_at": "2021-09-13T14:57:47Z",
      "updated_at": "2021-09-07T16:54:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic has several different APIs that use different API keys. This resource explains our keys, what they're used for, and how to access them. API key UI Most of the keys can be viewed and managed via the API keys UI page: From the account dropdown, click API keys (get a direct link to the API keys page). If you're using NerdGraph, you can manage license keys and user keys from our GraphiQL explorer. Overview of keys If you're using a specific API, see the docs for that API to understand which keys are required and recommended. To learn about our APIs, see Introduction to APIs. Our keys can be broken down into two categories: Keys used for data ingest Keys used for querying and configuration Keys for data ingest There are many ways to get data into New Relic. Here are the API keys used for data ingest: License key: our primary ingest key, used for APM ingest, infrastructure monitoring ingest, and our ingest APIs and the integrations that use them. Browser key: used for browser monitoring ingest. Mobile app token: used for mobile monitoring ingest. Insights insert key: an older key that has been mostly deprecated, it has the same functionality as the license key. We recommend using the license key instead. Keys for querying and configuration Here are keys used for querying New Relic data or configuration of features: User key, also known as a \"personal API key\": used for NerdGraph (our GraphQL API) and for accessing REST API endpoints. REST API key: used for the REST API but we instead recommend using the user key because it has fewer restrictions. Insights query key: used with the Insights query API for querying New Relic data. We recommend using NerdGraph instead of this API. License key Our primary key used for data ingest is called the license key, also referenced in the UI and NerdGraph API as ingest - license. The license key is a 40-character hexadecimal string associated with a New Relic account. Each account in a New Relic organization has its own license key. When you first sign up for New Relic, that creates an organization with a single account, and that account has its own license key. If more accounts are added, each account will have its own license key. The types of data ingest the license key is used for include: APM agent data Infrastructure agent data Data sent via our core data ingest APIs (Metric API, Trace API, Event API, Log API), and the SDKs and integrations that use those APIs The license key is used for all data ingest except for browser monitoring data (which uses a browser key) and mobile monitoring data (which uses a mobile app token). Because the license key is used for data ingest, we recommend you treat your license key securely, like you would a password. This ensures no unwanted data is sent to your New Relic account. If your license key falls into the wrong hands, an attacker could send fake data to your account, which could trigger false alerts and contaminate your data so that detecting actual issues is more difficult. If you believe a license key has been exposed and has led to unwanted data, work with our Support team. View and manage license key To manage the license key: From the account dropdown, click API keys (get a direct link to the API keys page). You can't manage or delete the original license key that was created when an account was initially created. For that, contact New Relic support. You can also create additional license keys and manage them with our NerdGraph API. User key New Relic user keys, sometimes referred to as \"personal API keys\", are required for using NerdGraph and for the REST API. A user key is tied to both a specific New Relic user and a specific account. Our APIs that use this key let a user make queries for any accounts that user has been granted access to. To view and manage the user key and other API keys in the UI: From the account dropdown, click API keys (here's a direct link to the API keys page). To manage this key via API, see Manage keys with NerdGraph. You can also get or generate a user key from the NerdGraph GraphiQL explorer. Browser key One of the New Relic API keys that are used for data ingest is the browser key. The browser key allows the ingestion of data from New Relic browser monitoring. To view and manage this key: From the account dropdown, click API keys (here's a direct link to the API keys page). You can't manage or delete an original browser key that was created when your account was created. For that, contact New Relic support. Insights insert key Important This key is still in use but we highly recommend using the license key, which can be used for the same things and more. One of the New Relic API keys used for data ingest is the Insights insert key, also known as an \"insert key\"). Note that the license key is used for the same functionality and more, which is why we recommend the license key over this key. This key is used for the ingestion of data via our Event API, Log API, Metric API, and Trace API, or via tools that use those APIs. Tips on availability and access: Because these keys are associated with an account and not a specific user, anyone in the account with access to a key can use it. As a best practice for security purposes, we recommend you use different Insights insert keys for different applications or different data sources. To find and manage Insights insert keys: From the account dropdown, click API keys (get a direct link to the API keys page). Then click Insights insert keys. REST API key Important We highly recommend using a user key instead, because that key has fewer restrictions. The REST API key is for using our REST APIs for Alerts, APM, browser, infrastructure alerts, as well as mobile monitoring REST APIs and the API Explorer. Things to consider: We recommend using our newer NerdGraph API over the REST API, if possible. Requires admin-level user permissions. If you don't have access to the REST API key or the REST API explorer, it might be due to lack of permissions. Talk to your New Relic account manager, or use a user key instead. Each New Relic account can have only one REST API key. To find and manage REST API keys: From the account dropdown, click API keys (get a direct link to the API keys page). Then click REST API key. Before you configure or delete an API key, ensure you are doing so for the correct account. Insights query key The Insights query key is used for our Insights query API: we now recommend using NerdGraph for querying New Relic data. To find and manage Insights query keys: From the account dropdown, click API keys (get a direct link to the API keys page). Then click Insights query keys. Admin key Important As of December 4, 2020, all existing admin keys have been migrated to be user keys. You don’t need to do anything for existing admin keys to remain active. They will be automatically accessible via the API keys UI, labeled as user keys, and granted identical permissions. You can manage them as you would any user key via the same workflow. All migrated admin keys will have a note that says “Migrated from an admin user key” in the key table, so you’ll be able to find them easily. Account ID Looking for the account ID? See Account ID.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 319.03284,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>API</em> keys",
        "sections": "New Relic <em>API</em> keys",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " keys page). If you&#x27;re using <em>NerdGraph</em>, you can manage license keys and user keys from our GraphiQL explorer. Overview of keys If you&#x27;re using a specific <em>API</em>, see the docs for that <em>API</em> to understand which keys are required and recommended. To learn about our <em>APIs</em>, see Introduction to <em>APIs</em>. Our keys"
      },
      "id": "6043fa3464441f1358378f3b"
    },
    {
      "sections": [
        "NerdGraph tutorial: View and manage workloads",
        "BETA FEATURE",
        "Important",
        "Get the workloads of an account",
        "Get the list of entities in a workload",
        "Get the status of a workload",
        "Create a workload",
        "Modify a workload",
        "Set a static status for a workload",
        "Modify the automatic status rules for a workload",
        "Duplicate a workload",
        "Delete a workload"
      ],
      "title": "NerdGraph tutorial: View and manage workloads",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "ffa158d197dbb207d50d48b813198842752d4b62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials/",
      "published_at": "2021-09-14T20:37:24Z",
      "updated_at": "2021-09-14T20:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our NerdGraph API to do some workloads-related tasks: Get the workloads of an account Get the list of entities in a workload Get the status of a workload Create a workload Modify a workload Set a static status for a workload Modify the automatic status rules for a workload Duplicate a workload Delete a workload Important You can also use the CLI and Terraform resource to automate these tasks. Get the workloads of an account To get all workloads of an account, use the following GraphQL query and pass the account ID via the id field. In this example, we retrieve three basic fields: guid: the workload GUID. name: the workload name. permalink: the permanent URLs on the New Relic One UI. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collections { guid name permalink } } } } } Copy The response includes this type of data for each workload: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collections\": [ ..., { \"guid\": \"MTY...NTY\", \"name\": \"Acme Telco - Fulfillment Chain\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTY...NTY\" }, ... ] } } } }, \"extensions\": { ... } } Copy Get the list of entities in a workload You can get the entities that belong to a workload with the following query, just by passing the workload GUID (guid) as an argument. In this example we also retrieve some workload metadata: accountId: the workload account. name: the workload name. permalink: the workload permanent URL on the New Relic One UI. alertSeverity: the status of the workload. This value can have up to 10 minutes of delay; if you want to force the calculation of the workload status in query time, please use the Get the status of a workload example. The nested collection, members and results objects, which contain the actual list of entities: The name argument in the collection object takes the value WORKLOAD. count: Number of entities in the workload. { actor { entity(guid: \"YOUR_WORKLOAD_GUID\") { accountId name permalink ... on AlertableEntity { alertSeverity } ... on CollectionEntity { collection(name: \"WORKLOAD\") { members { count results { entities { accountId entityType name guid ... on AlertableEntityOutline { alertSeverity } } } } } } } } } Copy The query returns a list of entities that looks like this: { \"data\": { \"actor\": { \"entity\": { \"accountId\": 1606862, \"name\": \"Acme Telco - Ecommerce\", \"permalink\": \"https://one.newrelic.com/redirect/entity/MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"alertSeverity\": \"CRITICAL\", \"collection\": { \"members\": { \"count\": 201, \"results\": { \"entities\": [ { \"accountId\": 1606862, \"alertSeverity\": \"CRITICAL\", \"entityType\": \"APM_APPLICATION_ENTITY\", \"guid\": \"MTYwNjg2MnxBUE18QVBQTElDQVRJT058NDMxOTIwNTg\", \"name\": \"Fulfillment Service\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_HOST_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw3MDQzMzA2NzIyMjk2NDg4Mzc\", \"name\": \"ip-172-31-16-222\" }, { \"accountId\": 1606862, \"alertSeverity\": \"NOT_ALERTING\", \"entityType\": \"INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY\", \"guid\": \"MTYwNjg2MnxJTkZSQXxOQXw1MjMyNzM2ODgzNjAwNjYyMjE1\", \"name\": \"TelcoDT-purchase-log-lambda\" }, ... ] } } } } } } } Copy Get the status of a workload If you want to force the calculation of the status of a workload, you can use the following query, passing the account id (id) as the argument for the account field, and the workload GUID (guid) as the argument for the collection field. { actor { account(id: YOUR_ACCOUNT_ID) { workload { collection(guid: \"YOUR_WORKLOAD_GUID\") { guid status { value } } } } } } Copy And this is what you'll get in the response: { \"data\": { \"actor\": { \"account\": { \"workload\": { \"collection\": { \"guid\": \"MTYwNjg2MnxOUjF8V09SS0xPQUR8MTIyMzQ\", \"status\": { \"value\": \"OPERATIONAL\" } } } } } } } Copy Note that the DISRUPTED status value is a synonym for CRITICAL status. Create a workload The following is an example NerdGraph call that creates a workload using the workloadCreate mutation query: mutation { workloadCreate( accountId: NEW_WORKLOAD_ACCOUNT_ID, workload: { name: \"NAME_OF_WORKLOAD\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(type = 'SERVICE') and tags.label.environment = 'production'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Some details on parts of this query: account: The workload account ID. Workloads can't be moved between accounts, so it's not possible to change this value later. name: A string with a user-friendly name for the workload. scopeAccounts: Scope accounts are the accounts where the entity data is fetched from. Scope accounts must belong to a group under the same parent account or enterprise partnership as the workload account. To define the entities in the workload, you can use one or both of these options: entitySearchQueries: This allows you to dynamically generate an array of entities. A name for each query is not needed. Here's an example dynamic query: (domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'production' Copy entityGuids: This is for choosing specific entity GUIDs for inclusion in the workload. guid: This returns the workload guid. Because NerdGraph provides schema stitching, you can get other details about the workload, like the permalink. Modify a workload To modify a workload, use the workloadUpdate mutation. You must know the workload's guid. The workload account can't be changed. For the fields you can modify, see Create workloads. These additional rules apply: entitySearchQueries: This field must contain all the queries as you expect them to be stored. If you want to add a new query, include it in the query field and don't provide any query id. If you want to modify an existing query, include it in the query field and provide its existing id. If you want to delete an existing query, just don't add any query with that id anymore. Here's an example of the workloadUpdate query: mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { name: \"A new name for the workload\", entityGuids: [\"ENTITY_GUID_1\", \"ENTITY_GUID_2\", ...], entitySearchQueries: [ { query: \"(domain = 'INFRA' and type = 'HOST') and tags.label.environment = 'staging'\" }, { id: AN_EXISTING_QUERY_ID, query: \"(type = 'SERVICE') and tags.label.environment = 'staging'\" }, ... ], scopeAccounts: { accountIds: [NEW_RELIC_ACCOUNT_ID_1, NEW_RELIC_ACCOUNT_ID_2, ...] } } ) { guid } } Copy Set a static status for a workload You can set up a static status for a workload, which overrides any automatic status calculation. To set a static status, you must know the workload's guid and use the following fields: enabled: Remember to set this field to true to propagate the status value. status: The status value you want to set for this workload. Supported values are OPERATIONAL, DEGRADED or DISRUPTED. description: A text field to provide additional details. mutation { workloadUpdate( guid: \"YOUR_WORKLOAD_GUID\", workload: { statusConfig: { static: { enabled: true, status: DEGRADED, description: \"Game day. Expect some turbulence today between 8 and 9am PST.\" } } } ) { guid updatedAt status { value } } } Copy Modify the automatic status rules for a workload When you create a workload, you can use the statusConfig object to define which automatic rules you want to use to calculate the status of the workload. If you leave the rules array empty, no rules will be set up for your workload. However, if you just don't use the statusConfig object when you create a workload, the following rules will be added by default: \"statusConfig\": { \"automatic\": { \"enabled\": true, \"rules\": [ { \"entitySearchQueries\": [{\"query\": \"(domain = 'APM' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'MOBILE' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'BROWSER' and type = 'APPLICATION')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } }, { \"entitySearchQueries\": [{\"query\": \"(domain = 'SYNTH' and type = 'MONITOR')\"}], \"rollup\": { \"strategy\": \"WORST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } ], \"remainingEntitiesRule\": { \"rollup\": { \"groupBy\": \"ENTITY_TYPE\", \"strategy\": \"BEST_STATUS_WINS\", \"thresholdType\": null, \"thresholdValue\": null } } } } Copy This is how you read the configuration: enabled: The automatic status calculation is enabled when this field is set to true. rules: An array of rules. In the default configuration, four rules are set for those entity types that are closer to the digital experience (that is, synthetic monitors, browser applications, mobile applications, and services). For each of these groups, the status of the unhealthiest rolls up. remainingEntitiesRule: This is the rule that will apply to all entities that haven't been evaluated in any other rule. In the default configuration, the remaining entities are grouped by entity type, and we make the status of each group to match that of its healthiest entity. If you want to modify these rules, you must use the workloadUpdate mutation, and send the complete new statusConfig object that you want to use. You can disable the automatic status calculation while keeping the configuration, by setting the statucConfig.automatic.enabled to false. Alternatively, you can delete all automatic regular rules by sending an empty array. And you can delete the rule for the remaining entities by just not adding the remainingEntitiesRule object. Duplicate a workload To duplicate a workload you first need to know its guid. In the workloadDuplicate mutation, you must pass as parameters: accountId: The account where you want to create the new workload. sourceGuid: the guid of the workload you want to duplicate. workload.name: Optional. You can specify a name for the new workload. If you don't specify one, the new workload will get the name of the original workload appended with - Copy. After duplicating a workload, you can modify it. mutation { workloadDuplicate( accountId: NEW_WORKLOAD_ACCOUNT_ID, sourceGuid: \"ORIGINAL_WORKLOAD_GUID\", workload: { name: \"New workload\" } ) { guid } } Copy Delete a workload To delete a workload, use the workloadDelete mutation and specify the workload GUID. When you delete a workload, all history and metadata is also deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 304.22736,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "sections": "<em>NerdGraph</em> tutorial: View and manage workloads",
        "tags": "<em>APIs</em>",
        "body": "BETA FEATURE This feature is currently in beta. New Relic allows you to group entities together in groupings called workloads. This enables better monitoring of the full stack used by a team or project. Here we show you how to use our <em>NerdGraph</em> <em>API</em> to do some workloads-related tasks: <em>Get</em>"
      },
      "id": "603e9eb7e7b9d22a5f2f37b1"
    },
    {
      "sections": [
        "Glossary",
        "account dropdown",
        "account switcher",
        "administrator",
        "agent",
        "agent API",
        "aggregated metrics",
        "aggregation function",
        "aggregation window",
        "alert",
        "alert condition",
        "alert evaluation",
        "alert policy",
        "apdex",
        "apdex_f",
        "apdex_t",
        "API (application programming interface)",
        "APM",
        "application",
        "application ID",
        "application name",
        "Applied Intelligence (AI)",
        "attribute",
        "availability monitoring",
        "browser",
        "Browser monitoring",
        "background external",
        "child account",
        "cloud-based integration",
        "collector",
        "Command line interface (CLI)",
        "compute unit (CU)",
        "condition_id",
        "CPM (calls per minute)",
        "CPU burn",
        "custom attribute",
        "custom dashboard",
        "custom event",
        "custom instrumentation",
        "custom metric",
        "data collector",
        "data explorer",
        "degradation period",
        "dimensional metric",
        "Docker",
        "downtime",
        "entity",
        "event",
        "expected error",
        "exporter",
        "Flex",
        "framework",
        "Full-Stack Observability",
        "harvest cycle",
        "health status indicator",
        "host",
        "host ID",
        "ignored error",
        "incident",
        "Infrastructure monitoring",
        "Insights",
        "instance ID",
        "instrumentation",
        "integration",
        "interaction",
        "interaction trace",
        "inventory data",
        "key transaction",
        "launcher",
        "log",
        "Log monitoring",
        "Logs",
        "Logs in context",
        "master account",
        "metric",
        "metric timeslice",
        "metric grouping issue",
        "minion",
        "Mobile monitoring",
        "monitor",
        "NerdGraph",
        "Nerdlet",
        "Nerdpack",
        "New Relic Edge with Infinite Tracing",
        "New Relic One",
        "New Relic One catalog",
        "NRQL (New Relic query language)",
        "non-web transaction",
        "notification",
        "notification channel",
        "on-host integration",
        "owner",
        "page load timing",
        "parameter",
        "parent account",
        "permalink",
        "pinger",
        "Plugins",
        "polling interval (AWS)",
        "PPM (pages per minute)",
        "private location",
        "recovery period",
        "response time",
        "restricted user",
        "rollup",
        "root span",
        "RPM",
        "RUM (real user monitoring)",
        "runbook",
        "SAML (Security Assertion Markup Language)",
        "Selenium",
        "service",
        "signal",
        "signal filter",
        "span",
        "SSL certificate",
        "SSO (single sign on)",
        "streaming algorithm",
        "sub-accounts",
        "Synthetic monitoring",
        "target",
        "tag",
        "Telemetry Data Platform",
        "thresholds",
        "throughput",
        "tier",
        "time picker",
        "time range",
        "timeslice data",
        "trace",
        "traffic light",
        "transaction",
        "transaction trace",
        "UI",
        "user",
        "UTC",
        "value function (metrics)",
        "violation",
        "web external",
        "web transaction",
        "WebDriverJS",
        "workload"
      ],
      "title": "Glossary",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Welcome to New Relic",
        "Get started"
      ],
      "external_id": "756954560251823f905fe44d0ebea119cf983160",
      "image": "https://docs.newrelic.com/static/44172b3e07c1f24191825360676b9d99/c1b63/account-dropdown.png",
      "url": "https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/glossary/",
      "published_at": "2021-09-14T09:10:41Z",
      "updated_at": "2021-09-14T09:10:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "A glossary of common terminology you may encounter. account dropdown In the upper right of the New Relic UI, the account dropdown gives you access to your account settings. If you're trying to switch between accounts, use the account switcher. account switcher If you have access to more than one account in a multi-account organization, you can use the account switcher to switch between accounts. This is located in the top right of most New Relic UI pages. For more on factors that affect access to accounts, see Factors affecting access. To find account settings, use the account dropdown. administrator A type of user role on a New Relic account. For more information, see Users. agent At New Relic, an agent is a piece of monitoring software that provides integrations with various technologies (for example, web frameworks, host operating systems, or database types). The agents send that data to New Relic, usually on a specific cadence. For more information, see: New Relic integrations Install agents agent API Some New Relic agents have agent APIs that allow you to extend the functionality of an agent. You can use the API to control, customize and extend the functionality of the agent. Here are some agent API docs: APM agents: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Ruby agent API Python agent API Browser agent: Browser agent API Mobile agents: iOS SDK API Android SDK API aggregated metrics Aggregated metric data summarizes calls to specific methods in your application, including how many times each one was called and response times. In the New Relic UI, you see the class and method names along with their aggregate numbers. Metric data aggregation depends on the New Relic tool and your subscription level. For more information, see the documentation about data retention. aggregation function You can use NRQL query function, such as sum(), average(), or latest() to choose how the data points in an aggregation window should be processed into a single data point. The single aggregated data point is what's passed through the alert evaluation process. aggregation window Streaming alerts gathers data together into specific amounts of time. These windows of time are customizable. Data points are collected together based their timestamps and reported as a batch. The customizable aggregation window provides greater flexibility and fewer false violations when alerting on irregular or less frequent data points. alert An alert communicates an event or incident that designated personnel can track through Alerts. For an explanation of how basic alerts concepts are related, see Concepts and workflow. alert condition An alert condition (or condition), identified by its unique numeric condition_id, contains the criteria for creating a violation. The condition includes the threshold that is set for a metric timeslice or a custom metric over time on a chosen target. For an explanation of how a condition relates to other basic alerts concepts, see Concepts and workflow. alert evaluation Streaming data is assessed on a set of aggregation windows to determine if an alert condition is violating or recovering. The aggregation window time is how long we'll collect data before running the NRQL query condition. The offset evaluation time is how long you want us to wait for late data before assessing it. If a window doesn't have any data points, it's treated as a gap for loss of signal. alert policy A collection of one or more conditions, one or more notification channels, and an Incident preference setting. If a condition contained within the policy opens a violation, an incident may be opened depending on the Incident preference setting. Notifications will then be sent to all channels attached to the policy. For an explanation of how a policy relates to other basic alerts concepts, see Concepts and workflow. apdex Apdex is an industry-standard way to measure users' satisfaction with the response time of an application or service. New Relic rates each response as Satisfied, Tolerated, or Frustrated, and uses these ratings to calculate an overall user satisfaction score. For more information, see Apdex: Measure user satisfaction. apdex_f The response time above which a transaction are rated frustrating. Defaults to four times apdex_t. Requests that complete in less than apdex_t are rated satisfied. Requests that take longer than apdex_t, but less than four times apdex_t (apdex_f), are tolerated. Any requests that take longer than apdex_f are rated frustrating. For more information, see Apdex: Measure user satisfaction. apdex_t The response time above which a transaction is considered tolerable. The default value is 0.5 seconds, but you can change this in your Apdex settings. Requests that complete in less than apdex_t are rated satisfied. Requests that take more than apdex_t, but less than apdex_f, are tolerated. Any requests that take longer than apdex_f are rated frustrating. For more information, see Apdex: Measure user satisfaction. API (application programming interface) New Relic offers a variety of APIs and SDKs. For more information, see the introduction to New Relic's APIs. APM New Relic's APM (application performance monitoring) provides monitoring of your web or non-web application's performance. APM supports apps using several programming languages. application For New Relic purposes, any program instrumented by New Relic. application ID Some New Relic solutions assign a monitored application a unique application ID, often shortened to app ID. When present, this ID is available in the UI. It is also reported as an attribute and can be queried. For how to determine this, see Find app ID. application name The name that New Relic combines with your license key to uniquely identify a particular app. For more information, see Name your application. Applied Intelligence (AI) Applied Intelligence (AI) helps you find, troubleshoot, and resolve problems more quickly. Specifically, it’s a hybrid machine learning engine that reduces alert noise, correlates incidents, and automatically detects anomalies. Applied Intelligence includes Alerts, Incident Intelligence, and Proactive Detection. attribute Attributes are key-value pairs attached to data objects reported to New Relic. Attributes add detail, and they're similar to tags or labels in other SaaS software. You can explore this data by querying or searching via the UI or by using the data dictionary. Examples: APM reports a Transaction event. This includes timing data for the transaction in a duration attribute, which might have a value of .002. Our Infrastructure Monitoring reports a ProcessSample event. This includes a variety of CPU usage attributes, including a cpuSystemPercent attribute, which might have a value of .01. Our Telemetry SDK reports a Metric data type for storing metrics, with attached attributes like metricName and newrelic.source. Some New Relic tools allow you to report custom attributes to enhance your monitoring. For more information about attributes in APM, see Agent attributes. availability monitoring See Types of Synthetics monitors. browser The New Relic UI supports most browsers. For more information, see Supported browsers. For our end-user browser monitoring tool, see Browser Monitoring. Browser monitoring A Real User Monitoring (RUM) solution that measures the speed and performance of your end users as they navigate to your site from different web browsers, devices, operating systems, and networks. background external See web external. child account See parent account. cloud-based integration New Relic offers cloud-based integrations with providers such as Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform. collector The component that collects data from New Relic agents running on an app server, mobile device, or end-user browser. While the agent is installed on a user's app server, the collectors are centrally located in New Relic's data center. In order to contact the collector, the agent must be able to reach New Relic's domains and IP addresses. (The exact domain or IP depends on the New Relic monitoring tool.) The collector receives and interprets this data, and stores it in a database. The data is then retrieved and presented in the New Relic UI and by our various REST APIs. Command line interface (CLI) Our command line interface (CLI) is a tool you can use to build a New Relic application. This is the same tool our own engineers use. Go here for quick start instructions. Go to our Developer site for sample apps and guides. compute unit (CU) A unit of measurement that determines your pricing for some New Relic products governed by our original product-based pricing plan. For more information, see Compute unit pricing. condition_id See alert condition. CPM (calls per minute) The number of calls your application receives each minute. This usually corresponds to the number of page views or external connections, and is usually the same as RPM (requests per minute). CPU burn The time consumed by code minus the wait time for a transaction. This is the time actually spent processing the transaction. It appears in the New Relic UI at the top of the transaction view for the agents that provide it (Ruby and PHP only). custom attribute A key-value pair added to a transaction or event in order to gain additional information about it. For more information, see custom attributes. custom dashboard A customizable dashboard with charts and tables that includes data from multiple New Relic data sources. For more information, see dashboards. custom event An event, in New Relic terms, is a data object with attached attributes. New Relic reports default event types, like Transaction and TransactionError. You can also create your own events. Events can be queried, and are used in some other features. You can generate custom events with APM agents, with the Browser agent, with the mobile monitoring agents, and via the Event API. Alternatively, you can add custom attributes to some existing default New Relic events. custom instrumentation Custom instrumentation allows you to extend New Relic's monitoring to instrument code elements New Relic doesn't automatically instrument. Custom instrumentation is useful when your framework is not supported by New Relic, or when New Relic fails to pick up some element of your program. You can also use custom instrumentation to block a transaction from being reported entirely. For more information, see Custom instrumentation. custom metric Metric timeslice data that is manually recorded via an API call. Custom metrics allow you to record arbitrary metrics; for example, timing or computer resource data. All custom metric names must be prefixed with Custom/. For more information, see Custom metrics. Not to be confused with custom instrumentation data. data collector See collector. data explorer Use the data explorer to access, query and customize your data, create visualizations, and make connections between your services in a consistent and curated experience. For more on using the data explorer, see Introduction to the data explorer. degradation period When a data source enters a violating state, a degradation period of time begins. The degradation period is set in the condition's threshold. A violation will open if the source stays in a violating state for the entire degradation period. In addition: If the data source enters a non-violating state before the entire time has elapsed, the degradation period countdown is reset, and a violation does not open. If your alert condition threshold is configured as at least once in, the degradation period always lasts a single minute. dimensional metric A dimensional metric is a metric that has multiple attributes, also known as dimensions. At New Relic, we report dimensional metrics using the Metric data type. For more on other metric data types, see Metric data. Docker An open platform for distributed applications, which allows you to assemble multi-container portable apps. Infrastructure Monitoring includes integrated Docker monitoring. For more information about Docker, see the Docker website. downtime The period of time when customers cannot access your site and your app is not reporting to New Relic. For more information, see Synthetic Monitoring and Types of synthetic monitors. entity In New Relic, an entity is anything we can identify that has data you can monitor. An entity can be something you monitor directly, like applications and microservices, or indirectly, like data centers. You can identify one or more entities to be targets for alert conditions. In the Alerts API, the entity being monitored is identified with an entity_id. For more on this, see What are entities? event The word event is a general term that can have many meanings. At New Relic, event can have several meanings: At New Relic, event data is one of our core data types. Event data represents a record of a single event at a particular moment in time. Events can vary by type (for example, Transaction or Mobile, and will have associated attributes (for example, timestamp or transactionName). For more details, see Event data. For our infrastructure monitoring, the word event can be used to refer to important system and host activity. For example, a configuration change for a monitored host would be registered on Infrastructure's Events UI page. For alerts, the Events UI page displays a list of alerts-related incidents for your monitored entities. Events are reported for a violation opening and for closing. In some contexts, event can refer to any NRQL-queryable data type. For example, when you run a NRQL query, you will see a count of inspected events: this refers to a count of all data types queried. expected error An expected error is a common error that you don't want to affect your Apdex score or error rate. For more information, see Manage errors in APM. exporter At New Relic, an exporter is a type of integration that reports telemetry data to New Relic from a third-party (non-New Relic) telemetry tool. For examples, see Exporters, or search our integrations. Flex New Relic Flex is an application-agnostic, all-in-one integration. With it, you can build your own integration that collects metric data from a wide variety of services, and that can instrument any app that exposes metrics over a standard protocol (HTTP, file, shell) in a standard format (for example, JSON or plain text) to the terminal. It's a recommended way to create a custom integration, because it doesn't require coding skills. framework A framework is a structured collection of pre-defined functions, into which an application builder inserts their own code to build their application. A framework is not the same as a library. While a library is a collection of functions you can call as needed, a framework is a skeleton for your application. The functions in that framework then call your functions. For more about the distinction between a framework and a library, see What is the difference between a framework and a library?. New Relic automatically instruments many common frameworks. For more about the frameworks New Relic supports, see the agent-specific documentation: C SDK supported frameworks Go supported frameworks Java supported frameworks .NET supported frameworks Node.js supported frameworks PHP supported frameworks Python supported frameworks Ruby supported frameworks Full-Stack Observability The collection of features and tools you can use to easily analyze and troubleshoot problems across your entire software stack. For more information, read our Introduction to Full-Stack Observability. harvest cycle The period of time between each connection from a New Relic agent to the collector. Between harvest cycles, an agent collects and caches data. At the end of the cycle an agent reports those data to the collector, then begins a new harvest cycle. health status indicator Some New Relic UI pages have a health status indicator appearing next to an index of monitored entities. This is a colored bar (generally green, yellow, red, or gray) indicating the status of your app or other entity monitored by New Relic. It also indicates whether the entity has any alert policies assigned to it and whether there are any policy violations. In general, the colored bar will be green, yellow, red, or gray to indicate the health status. Exceptions: Our REST API (v2) uses orange instead of yellow for the application's health and reporting status. Service maps use different criteria for reporting the health of a connection between an app and an external service not monitored by New Relic (for example, a third party API). host At New Relic, a host means one of the following: A physical machine is a hardware-based device with dedicated physical resources, including memory, processing, and storage. Each machine has its own OS which applications run on. A virtual machine (VM) is the software implementation of a physical machine that executes programs like a physical machine. One or more virtual machines can run on a physical machine. Each virtual machine has its own OS and allocated virtual machine resources such as RAM and CPU. A cloud instance is a type of virtual machine that is run in the public cloud. In this context, virtual machines and cloud instances are different from Java Virtual Machines (JVMs) and containers. host ID Each host identified by APM is assigned a host ID. This ID is used to uniquely identify it, and to retrieve data about that host via the REST API. For more information, see List host ID. ignored error An error that you have told the APM agent not to report to the collector. For more information, see Manage errors in APM. incident An incident is a collection of one or more violations of the conditions defined in an alert policy. An incident record includes all of the open and close time stamps for each violation, as well as chart snapshots of the data being evaluated around the time of each violation. You can view detailed information from the Incidents pages in the user interface. You can also select your preference for how we roll up violations into the incident. For an explanation of how an incident relates to other basic alerts concepts, see Concepts and workflow. Infrastructure monitoring By connecting changes in host performance to changes in your configuration, infrastructure monitoring provides real-time metrics and powerful analytics that reduce your mean-time-to-resolution (MTTR). Infrastructure is specifically designed for complex environments that need flexible, dynamic server monitoring, from a physical datacenter to thousands of Amazon Elastic Compute Cloud (Amazon EC2) instances and other types of integrations. Insights Insights was the name for the New Relic product that previously governed the reporting of custom events, and the ability to query and chart your New Relic data. These features are now a fundamental part of the New Relic One platform and are no longer governed by the Insights product or name. To learn more about these features: Event API for reporting custom events Query and chart data For historical reasons, the word \"Insights\" is still used in some places. Some examples of this: Some APM agents still have Insights language in their codebase. For example, the Java agent custom_insights_events configuration. For New Relic organizations on our original pricing plan, Insights Pro is still the product name governing custom event data ingest and retention. There is an API key called the Insights insert key. instance ID Each instance identified by New Relic is assigned a unique instance ID. Instance IDs are most commonly found for JVMs (Java Virtual Machines), but can exist for each agent. This ID is used to uniquely identify it, and to retrieve data about that instance via the REST API. For more information, see List instance IDs. instrumentation The collection of data from an application or host. When New Relic instruments a framework, it detects the methods and calls used by that framework, and intelligently groups them together. integration At New Relic, an integration refers to a solution that integrates with a specific technology (like a web framework or a type of database). See Integrations. interaction In our mobile monitoring, an interaction is a specific code path initiated by a user interaction (usually a button press). An interaction is the mobile equivalent of a transaction, and like a transaction an interaction can be traced and monitored. You can see much of the data included in an interaction in the BrowserInteraction event. interaction trace An interaction trace is a complete picture of a single interaction. With interaction traces, New Relic gives you much deeper visibility into a single slow interaction, which can help you understand a broader problem. Interaction traces are the mobile equivalent of a transaction trace. For more information, see Creating interactions (iOS) and Creating interactions (Android). inventory data Inventory data is information about the status or configuration of a service or host. Examples of inventory data include: Configuration settings Name of the host the service is on Amazon AWS region Port being used For more information, see Understand and use data. key transaction A web transaction that the user has marked as particularly important; for example, key business events (such as signups or purchase confirmations), or transactions with a high performance impact (such as searches). Key transactions have their own pages in the UI and other customized values. For more information, see Key transactions. launcher A launcher is a specific piece of code you can include when you create a New Relic One app. It creates the tile on the homepage that you click to launch the app. For more information, see the documentation about core UI components. log A log is a message about a system used to understand the activity of the system and to diagnose problems. For more information on how we use log data, see Log management. Log monitoring Our log management and monitoring features give you the tools to collect, process, explore, visualize, and alert on your log data using your existing log forwarder. With all of your log data in one place, you'll be able to make better decisions, detect and resolve problems more quickly, and see your logs in context to troubleshoot faster. Logs Our Logs feature is a scalable log management platform that allows you to connect your log data with the rest of your telemetry data. Pre-built plugins with some of the most common open-source logging tools make it simple to send your data from anywhere to New Relic. Logs in context Logs in context makes it easy to link to your log data with related data across the rest of our platform. Bringing all of this data together in a single tool allows you to quickly get to the root cause of an issue and find the log lines that you need to identify and resolve a problem. master account See parent account. metric A metric is a numeric measurement. Metric data is a broad category because there are several ways to make and report measurements. For more about how metrics are reported at New Relic, see New Relic data types. metric timeslice New Relic reports metrics in several ways. One variety of metric data is called metric timeslice data; this is the type of data used to generate many of the charts in APM, mobile monitoring, and browser monitoring (for more details, see metric timeslice data). Over time, metric timeslice data is aggregated into longer timeslice data records for more efficient storage. For more about how we aggregate this type of data, see Data aggregation. For how to query this type of data, see Query metric timeslice data. metric grouping issue A metric grouping issue occurs when an account sends too many differently named metric timeslice data points to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. For more information, see Metric grouping issues. minion The software that accepts monitor jobs from a private location. A minion is a packaged virtual appliance that runs in your hypervisor. For more information, see Private locations overview and install and configure private minions. Mobile monitoring Mobile monitoring allows you to monitor and manage the performance of your mobile apps on Android, iOS, tvOS, and other systems. Mobile monitoring provides end-to-end details, including crashes, throughput, HTTP requests, error traces, and more. Not to be confused with New Relic's own mobile apps for Android, iPhone, and iPad. monitor For our Synthetic Monitoring, a monitor ensures your website or API endpoint is available. For more information, see Adding and editing monitors. NerdGraph NerdGraph is our GraphQL API, an efficient and flexible query language that lets you request exactly the data you need, without over-fetching or under-fetching. NerdGraph calls get all the data you need in a single request. NerdGraph also makes it easier to evolve APIs over time and enables powerful developer tools. You can use our NerdGraph GraphiQL explorer to explore the schema and find definitions. With valid New Relic API key, you can try it out yourself at api.newrelic.com/graphiql. Nerdlet A Nerdlet is a component of a New Relic One application. It's a specific UI view, represented by a React JavaScript package. For more information, see Nerdpack file structure. Nerdpack A Nerdpack is a component of a New Relic One application. It's the package containing all the files needed by that application. For more information, see Nerdpack file structure. New Relic Edge with Infinite Tracing New Relic Edge with Infinite Tracing is a fully managed, distributed tracing service that observes 100% of your application traces, then provides actionable data so you can solve issues faster. For more information, see /docs/understand-dependencies/distributed-tracing/get-started/how-new-relic-distributed-tracing-works. New Relic One For more information, see Introduction to New Relic One. New Relic One catalog Our catalog is a collection of applications built on the New Relic One platform. The catalog includes custom apps we've built, public open source apps, and any apps that you buid. You can browse the catalog on New Relic One. NRQL (New Relic query language) NRQL is a query language, similar in form to SQL, that allows you to query the data stored in your New Relic account. non-web transaction APM identifies transactions as either web or non-web. When New Relic does not detect a transaction was initiated by a web request, this is called a non-web transaction. For more information, see Background processes and other non-web transactions. notification The message sent when an incident opens, is acknowledged, or closes. The type of notification is defined by the alert policy's notification channel. For an explanation of how notifications relate to other basic alerts concepts, see Concepts and workflow. notification channel Where we send a notification when an incident opens, is acknowledged, or closes. Available channels include email, mobile push notifications, webhooks, and more. on-host integration On-host integrations refer to integrations that reside on your own servers or hosts and that communicate with our infrastructure agent. For more information, see Introduction to on-host integrations. owner For accounts on our original pricing plan, this is a type of user role: the user who initially created the account. For more information, see Users. page load timing With page load timing, New Relic monitors the full load time for end-user browsers. New Relic's application agents dynamically inject JavaScript into the page, then capture the following key load points: Navigation start: The user initiates the transaction. First byte: The browser receives the requested page. DOM ready: The browser has finished parsing DOM. Page ready: Page loading is complete. Page load timing is sometimes referred to as RUM, or real user monitoring. Unlike standard RUM, page load timing also captures JavaScript errors and AJAX requests. For more information, see Page load timing process. parameter Deprecated term; see attribute. parent account New Relic organizations can have a parent/child account structure. This structure was much more important for organizations on our original user model, but is still used for some features for organizations on the New Relic One user model. Learn more about account structure. Parent accounts were previously referred to as \"master accounts\", and child accounts were previously referred to as \"sub-accounts\". permalink A unique URL that links to a view of your application at a specific point in time. Permalinks are useful for troubleshooting and for sharing interesting time windows with colleagues. pinger The component of New Relic that connects to your website to verify your website is accessible. New Relic has pingers in Europe, Asia, and the United States. Each pinger attempts to contact your website at least once every two minutes. If enough pingers are unable to reach your website, your application will be considered down. For in-depth scriptable testing, including real browser tests and tests of API endpoints, see Synthetic Monitoring. Synthetic Monitoring includes free ping monitoring, which allows you to monitor your website from locations around the world. For more information, see Types of Synthetic monitors. Plugins Plugins provides an open platform to monitor critical information about your entire stack. New Relic partners, PaAS and SaAS providers, third-party vendors, and plugin users can: Quickly install and use publicly available plugins in Plugin Central. Develop your own plugin agents to collect the metric data that matters most to your business. Publish your plugins for public or private access. polling interval (AWS) Our Amazon integrations query your AWS services according to a polling interval, which varies depending on the integration. Each polling interval occurs for every AWS entity. For example, if you have thirteen Elastic Load Balancers (ELB), each one will be polled every five minutes. Depending on the AWS integration, there may be delays in the timing between the API request and the metric data returned. If you notice unusual delays, follow the integration troubleshooting procedures. PPM (pages per minute) The number of pages per minute your application serves. private location A Synthetic monitor feature that allows you to run Synthetic monitors from within your own systems by creating private minions. Private locations allow you to extend your Synthetic coverage to new geographical locations, and to monitor websites behind your firewall such as an intranet site. For more information, see Private locations overview. recovery period A recovery period of time begins when a data source enters a non-violating state after being in a violating state. The recovery period is set in the condition's threshold. A violation will close when a source remains in a non-violating state and the recovery period time has elapsed. If the data source enters a violating state before the time has elapsed, the recovery period clock will reset and the violation won't close. response time The duration of time between a request for service and a response. For more information, see Response time. restricted user A type of user role on a New Relic account. For more information, see Users. rollup Using the same application name for multiple applications. This allows you to combine data in APM, either from multiple applications, or from multiple instances of an application. For more information, see Rolling up app data. root span For distributed tracing, the root span is the first span in a trace. In many cases, the root span duration will represent the duration of the entire trace, or be very close to it. However, for more complex, modern systems that use a lot of asynchronous, non-blocking processes, this will not be true. For those systems, the root span’s duration may be significantly less than the duration of the trace. RPM The term RPM usually refers to the number of requests per minute your application receives from users. This is usually the same as CPM (calls per minute). Historically, some New Relic monitoring solutions, like APM and Browser Monitoring, used to contain RPM in the URL; for example, https://rpm.newrelic.com. This language use originally referred to Rails performance management because the first iteration of our product monitored Ruby on Rails applications. We monitor many more languages and systems than Ruby now. RUM (real user monitoring) See page load timing. runbook A runbook contains standard procedures and operations typically used by system administrators, network operations staff, and other personnel to handle outages, alert incidents, and other situations. If your organization stores runbook instructions as URLs, you can link this information to an alerts policy so your personnel has easy access to this information when an incident violates the defined policy thresholds. SAML (Security Assertion Markup Language) SAML is an XML-based data format for sharing authentication data between two parties. New Relic accounts must obtain a SAML certificate in order to enable Single Sign On for their users. For more information, see SAML service providers. Selenium Selenium is an open-source browser testing suite. Synthetics uses Selenium to test monitored websites with real browsers. For more information, see monitor types. service A service is a cluster of runtime server processes that accomplish a particular task, usually service requests. Unlike an application, a service is not usually invoked by a human. New Relic offers a variety of integrations that allow you to report data from your services. signal The stream of telemetry data that's watched and alerted on. You use NRQL queries to define a signal. signal filter When we receive data and it's routed to the streaming alerts platform, your NRQL WHERE clause will filter the data coming in. The filtered streaming data is what's evaluated for loss of signal violations, for example. span In a distributed trace, a span is a \"named, timed operation representing a contiguous segment of work in that trace\" (from OpenTracing.io definition). For distributed tracing, spans are displayed in the distributed tracing UI, and the data type Span is available to be queried. See also root span. SSL certificate SSL certificates encrypt data that is being transmitted. While New Relic refers to security certificates as SSL because it is a more commonly used term, all certificates adhere to industry standards for secure encryption in transit. SSO (single sign on) SSO (single sign on) allows you to manage user authentication in New Relic using an external SSO provider. For more information, see Setting up SSO. streaming algorithm This is what determines when the data in an aggregation window is processed. The streaming algorithm uses your server's clock time and the aggregation window size to trigger the alert evaluation process. sub-accounts See master account. Synthetic monitoring Synthetic monitoring allows you to monitor your website or API endpoint via automated, scriptable tools. Use free ping monitor to ensure your website is accessible, or expand your monitoring with browser monitors, which test your website with real browsers. Go further with scripting, to script browsers or API monitors for sophisticated testing. target A target is a resource or component monitored by a New Relic monitoring tool that has been identified in an alert condition. When the data source for that target crosses the defined critical threshold, we will open a violation. Depending on your policy's Incident preference setting, Alerts may create an incident record and send notifications through the defined channels. See also entity. tag Tags are key:value metadata added to monitored apps, hosts, dashboards, and other entities to help you organize your data at a high level. For details, see Tags. Telemetry Data Platform The collection of features and tools you can use to ingest, visualize, and alert on all your telemetry data in one place. For more information, read the Introduction to the Telemetry Data Platform. thresholds Thresholds are alert condition settings that define a violation. Threshold values include the value a data source must pass to trigger a violation and the time-related settings that define a violation; for example: Passing a certain value for at least x minutes Passing a certain value only once in x minutes While the data source passes a certain value, a degradation period starts. Likewise, when that data source stops passing a certain value, a recovery period starts. The durations of these two time periods are defined in the alert condition threshold settings. Thresholds have a required critical (red) threshold and an optional warning (yellow) threshold. In the UI, the entity's health status indicator will change to yellow or red when a threshold has been crossed and a violation will open. For more information, see Define thresholds. For an explanation of how thresholds relate to other basic Alerts concepts, see Concepts and workflow. throughput Throughput is a measurement of user activity for a monitored application. APM throughput and Browser Monitoring throughput are measured in different ways: APM: requests per minute (RPM) Browser: page views per minute (PPM) tier A tier can refer to how New Relic categorizes or visualizes the various agent language ecosystems that we support. For example: In APM, the color-coded categories that appear on your app's main Overview chart show response time spent in various functions, processes, or agents as tiers; for example, request queuing, garbage collection, Middleware, JVMs, etc. In New Relic labels, TIER can be used to define or classify the client-server architecture; for example, front-end and back-end tiers. \"Tier\" may sometimes be used to refer to our Full Stack Observability pricing editions. time picker By default the New Relic UI shows data for the past 30 minutes, ending now. To change the time window, use the time picker. time range A time range can refer to a length of time selected in the New Relic UI. New Relic displays a time range depending on the range you select using the time picker. timeslice data See metric timeslice data. trace A trace is a description of how a request travels through a system. Trace data helps you understand the performance of your system and diagnose problems. For more information on how we use trace data, see New Relic data types. traffic light See health status. transaction A transaction is defined as one logical unit of work in an application. This term primarily refers to server-side transactions monitored by APM. For more information, see documentation about web transactions and non-web transactions. The term transaction is also sometimes used in Browser Monitoring. In that case, it primarily refers to activity beginning with a browser-side web request and ending with a complete page load. transaction trace A transaction trace is a complete picture of a single transaction, down to the database queries and exact invocation patterns. With transaction traces, New Relic gives you much deeper visibility into a single slow transaction, which can help you understand a broader problem. For more information, see Transaction traces. UI The New Relic user interface. For more information, see Standard page functions. user A user can refer to a specific user role in a New Relic account. For more information, see Users. UTC Universal Time Coordinated (UTC), or Coordinated Universal Time, is a standard timestamp for synchronizing time around the world. value function (metrics) The numeric value obtained from metric timeslice data; for example, an average, minimum, maximum, total, sample size, etc. violation A violation occurs when the entity monitored by an alert condition reports a value that crosses the thresholds defined in that condition. For an explanation of how violations relate to other basic alerts concepts, see Concepts and workflow. You can view a summary of the violations for a selected incident's page. You can also view the violations for a specific entity from the product's UI. web external Web external is the term applied to the portion of time spent in transactions to external applications from within the code of the application you are monitoring. That time can be a call to a third party company (a payment provider, for example) or it could be a call to another microservice within your own company. Web external demonstrates how performance is impacted by your code executing outside the application you are measuring. web transaction A transaction is defined as one logical unit of work in an application. This term primarily refers to server-side transactions monitored by APM. Web transactions are initiated with an HTTP request. For most organizations, these represent customer-centric interactions and thus are the most important transactions to monitor. For more information, see Web transactions and Non-web transactions. WebDriverJS WebDriver is a Selenium component, used to control Synthetics scripted browsers. Specifically, Synthetics uses WebDriverJS, a Node.js-based flavor of Selenium. For more information, see Writing scripted browsers and Scripted browser examples. workload A workload represents a group of entities that work together to provide a digital service. For more information, see Workloads.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 288.02917,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>NerdGraph</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " ensures your website or <em>API</em> endpoint is available. For more information, see Adding and editing monitors. <em>NerdGraph</em> <em>NerdGraph</em> is our <em>Graph</em>QL <em>API</em>, an efficient and flexible query language that lets you request exactly the data you need, without over-fetching or under-fetching. <em>NerdGraph</em> calls <em>get</em> all"
      },
      "id": "603eb6f5e7b9d288392a07fc"
    }
  ],
  "/docs/apis/nerdgraph/tutorials/nerdgraph-workloads-api-tutorials": [
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.13513,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic REST <em>API</em> (v2)",
        "sections": "<em>Examples</em>",
        "tags": "<em>APIs</em>",
        "body": " with .xml. <em>API</em> key $<em>API</em>_KEY New Relic <em>API</em> calls require an <em>API</em> key. This may be one of several <em>API</em> keys: A user key: This is recommended. It&#x27;s our latest key implementation and has fewer limitations than a REST <em>API</em> key. The user key is also used for our <em>NerdGraph</em> <em>API</em>. A REST <em>API</em> key: This is our older"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-09-13T18:35:07Z",
      "updated_at": "2021-09-02T03:46:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your entities relate to each other is using our NerdGraph API. You can use the relatedEntities field to see how pairs of entities interact and how they're related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to how service maps can be used. To learn general information about entities, their relationships, and how to use them, see Entities. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use NerdGraph to return the relationships between your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relatedEntities { results { source { entity { guid name } } target { entity { guid name } } type } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 284.1065,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "sections": "<em>NerdGraph</em> tutorial: Understand entity relationships and dependencies",
        "tags": "<em>APIs</em>",
        "body": "One way to understand how your entities relate to each other is using our <em>NerdGraph</em> <em>API</em>. You can use the relatedEntities field to see how pairs of entities interact and how they&#x27;re related. This can help troubleshoot upstream and downstream services and understand how minor issues may have larger"
      },
      "id": "603ec1c664441fb7ff4e8852"
    },
    {
      "image": "",
      "url": "https://developer.newrelic.com/collect-data/",
      "sections": [
        "Collect data",
        "Guides to collect data",
        "Add custom attributes",
        "Create custom events",
        "Collect data - any source",
        "Build queries with NerdGraph",
        "Query data with NRQL"
      ],
      "published_at": "2021-09-15T01:38:23Z",
      "title": "Collect data",
      "updated_at": "2021-09-11T01:38:44Z",
      "type": "developer",
      "external_id": "fb5d6f75b61858b09e3e8c63f3b2af97813f47b6",
      "document_type": "page",
      "popularity": 1,
      "body": "Through our opensource agents or APIs, New Relic makes it easy to collect data from any source. The guides in this section provide strategies for collecting and querying data for use in your existing implementation, or in apps you build. The opportunities are endless. Guides to collect data Add custom attributes   Use custom attributes for deeper analysis Create custom events 5 min Define, visualize, and get alerts on the data you want using custom events Collect data - any source 15 min APIs, agents, OS emitters - get any data Build queries with NerdGraph 25 min Try NerdGraph and build the queries you need Query data with NRQL 10 min Query default data, custom events, and attributes",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 280.1703,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Build queries with <em>NerdGraph</em>",
        "body": " custom attributes   Use custom attributes for deeper analysis Create custom events 5 min Define, visualize, and get alerts on the data you want using custom events Collect data - any source 15 min <em>APIs</em>, agents, OS emitters - get any data Build queries with <em>NerdGraph</em> 25 min Try <em>NerdGraph</em> and build the queries you need Query data with NRQL 10 min Query default data, custom events, and attributes"
      },
      "id": "6091fa38196a67a932d52a29"
    }
  ],
  "/docs/apis/nerdgraph/tutorials/provisions-your-subscriptions-nerdgraph": [
    {
      "sections": [
        "Introduction to New Relic NerdGraph, our GraphQL API",
        "What is NerdGraph?",
        "Important",
        "Use the GraphiQL explorer",
        "Requirements and endpoints",
        "What can you do with NerdGraph?",
        "NerdGraph terminology",
        "Tips on using the GraphiQL explorer",
        "Query accounts a New Relic user can access",
        "Query user, account, and NRQL in one request"
      ],
      "title": "Introduction to New Relic NerdGraph, our GraphQL API",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Get started"
      ],
      "external_id": "e8e96c16cd75f494ebfacb3bc53b4ee9ccf1c727",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/",
      "published_at": "2021-09-13T19:42:17Z",
      "updated_at": "2021-08-27T08:50:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "NerdGraph is our GraphQL-format API that lets you query New Relic data and configure some New Relic features. What is NerdGraph? New Relic has several APIs. NerdGraph is the API we recommend for querying New Relic data and for performing some specific configurations (learn more about features). NerdGraph provides a single API interface for returning data from New Relic’s various APIs and microservices. Over time, other configuration capabilities will be added to NerdGraph. Important NerdGraph isn’t used for data ingest. For that, you'd use our data ingest APIs. NerdGraph is built using GraphQL, which is an open source API format that allows you to request exactly the data needed, with no over-fetching or under-fetching. For a lesson in how to use NerdGraph, watch this 7-minute video: Want to watch more video tutorials? Go to the New Relic University’s Intro to NerdGraph. Or see the online course on New Relic APIs. Use the GraphiQL explorer To get started using GraphQL, we recommend playing around with our GraphiQL explorer (GraphiQL is an open source graphical interface for using GraphQL). You can use it to explore our data schema, to read built-in object definitions, and to build and execute queries. To use GraphQL, you’ll need a user-specific New Relic API key called a user key. You can generate one or find an existing one from the GraphiQL explorer’s API key dropdown. To find the GraphiQL explorer: If your New Relic account uses an EU data center, go to api.eu.newrelic.com/graphiql. Otherwise use api.newrelic.com/graphiql. For tips on how to build queries, see Build queries. Requirements and endpoints To use NerdGraph, you need a New Relic user key, which can be generated and accessed from the GraphiQL explorer. The endpoints are: Main endpoint: https://api.newrelic.com/graphql Endpoint for accounts using EU data center: https://api.eu.newrelic.com/graphql To access the endpoint, use the following cURL command: curl -X POST https://api.newrelic.com/graphql \\ -H 'Content-Type: application/json' \\ -H 'API-Key: YOUR_NEW_RELIC_USER_KEY' \\ -d '{ \"query\": \"{ requestContext { userId apiKey } }\" } ' Copy What can you do with NerdGraph? NerdGraph functionality can be broken down into two main categories: Querying New Relic data. You can fetch data for a variety of purposes, including using it in a programmatic workflow, or building a New Relic One app for custom data visualizations. Configuring New Relic features. There are a variety of configurations available and more will be added over time. You can do things like add tags, configure workloads, or customize \"golden metrics.\" You can use NerdGraph to return a wide range of New Relic data but we’ve created some tutorials for common use cases: Topic Tutorials Your monitored entities Get data about entities Understand entity relationships and dependencies (used to build service maps) Query and configure \"golden metrics\" (important entity metrics) Querying data Query using NRQL (our query language) Tags Add and manage tags Dashboards Create dashboards Export dashboards to other accounts Export dashboards as files Migrate from Insights Dashboard API to NerdGraph Alerts See all alert-related tutorials Applied Intelligence View and configure topology Workloads View and configure workloads Manage keys Create and manage keys (license keys used for data ingest, and user keys) Manage data Convert event data to metric data Drop data Distributed tracing Query distributed tracing data Configure Infinite Tracing New Relic One apps Build a New Relic One app Cloud integrations (AWS, Azure, GCP) Configure cloud integrations Partners and resellers Manage subscriptions (only for partners using original pricing plan) Data partitions Manage data partitions Date retention Manage data retention NerdGraph terminology The following are terms that originate with GraphQL (the API format NerdGraph uses). Term Definition Queries and mutations There are two classes of GraphQL operations: Queries are basic requests used only to fetch data. These queries are not static, meaning that you can ask for more data or less data, depending on your needs. For each query, you can specify exactly what data you want to retrieve, as long as it is supported by the schema. Mutations are requests that perform an action, such as creating a resource or changing configuration. Mutations require the keyword mutation, as well as the name of the mutation. Type Data in GraphQL is organized into types. Types can be scalars (like strings, numbers, or booleans) or object types. An object type is a custom type made up of a collection of fields. For example, an object type called User may represent a user in a system. Field A field represents a piece of information on an object type that can be queried. Fields can be scalars, lists, or objects. For example, a User object type could have a string field called name. Interface An interface is an abstract type that represents a collection of common fields that other object types can implement. Tips on using the GraphiQL explorer You can make queries with the NerdGraph GraphiQL explorer. The explorer provides built-in schema definitions and features, including auto-complete and query validation. Query accounts a New Relic user can access You can query for the name of an account that an actor (a New Relic authorized user) has access to: query { actor { account(id: YOUR_ACCOUNT_ID) { name } } } Copy The response will mirror the query structure you defined in the request, making it easy to ask for the specific data that you want. { \"data\": { \"actor\": { \"account\": { \"name\": \"Data Nerd\" } } } } Copy Query user, account, and NRQL in one request The graph structure shows its capabilities when queries become more complex. For example, you can query for user information, account information, and make a NRQL query with one request. With REST API, this would take three different requests to three different endpoints. query { actor { account(id: YOUR_ACCOUNT_ID) { name nrql(query: \"SELECT * FROM Transaction\") { results } } user { name id } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 355.8545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>NerdGraph</em>, our <em>GraphQL</em> API",
        "sections": "Introduction to New Relic <em>NerdGraph</em>, our <em>GraphQL</em> API",
        "tags": "<em>NerdGraph</em>",
        "body": " cloud integrations Partners and resellers Manage <em>subscriptions</em> (only for partners using original pricing plan) Data partitions Manage data partitions Date retention Manage data retention <em>NerdGraph</em> terminology The following are terms that originate with <em>Graph</em>QL (the API format <em>NerdGraph</em> uses). Term"
      },
      "id": "6043ff97196a67d0a0960f55"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights",
        "Plugins"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-09-13T14:57:49Z",
      "updated_at": "2021-08-27T04:51:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for many of our more curated tools, such as our open source telemetry integrations and our Telemetry SDKs. Data type Description Metric API Send metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send your log data to New Relic. Trace API Send distributed tracing data to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android Unity REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing plan) For organizations on our original pricing plan, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing plans that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API. Plugins New Relic Plugins have been deprecated. For details, see Plugins EOL.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 316.20465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>NerdGraph</em> (<em>GraphQL</em>)",
        "body": " (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send your log data to New Relic. Trace API Send distributed tracing data to New Relic without the use of an agent or integration. <em>NerdGraph</em> (<em>Graph</em>"
      },
      "id": "609fa5cf196a67066022b194"
    },
    {
      "sections": [
        "Intro to Partnership API",
        "Requirements",
        "Customer partnership restrictions",
        "Password requirements",
        "Things you can do",
        "Get started"
      ],
      "title": "Intro to Partnership API",
      "type": "docs",
      "tags": [
        "New Relic partnerships",
        "Partner integration guide",
        "Partner account maintenance"
      ],
      "external_id": "074cf4e7c590dfa2332284a7b7f394e2f7ba45ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-partnerships/partner-integration-guide/partner-account-maintenance/partner-api/",
      "published_at": "2021-09-14T13:44:58Z",
      "updated_at": "2021-09-14T13:44:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Partnership API allows New Relic partners, and New Relic accounts set up as customer partnerships, to manage accounts, users, and subscription-related settings. Requirements The Partnership API can be used by two types of New Relic accounts: partners (managed service providers, resellers) and customer partnerships (larger customers who have been given access to our partnership account structure). These docs are for version 2 of the Partner API. Earlier versions have been deprecated. If you have problems with an older integration, upgrade to version 2. Access to the partnership account structure and the Partnership API requires prior setup and approval by New Relic. Partnership API calls require authentication with both your partnership owner account's REST API key and your Partner ID. Accounts that are genuine New Relic partners (managed service providers, resellers) have no restrictions on using the API. Accounts set up as customer partnerships have restrictions that follow. Customer partnership restrictions If your New Relic organization is set up as a customer partnership, there are some restrictions in place if your organization is on our newer pricing plan or our newer user model. Details: Pricing plan. If you’re on New Relic One pricing, you can't use API calls that govern our original pricing plan. The API impacts are: You can't use the subscription object You can't use the NerdGraph Provisioning API. User model. If your New Relic account has been converted to be entirely on the New Relic One user model, you can no longer use API calls that create or govern users on our original user model. The API impacts are: You can't use the user object. Instead, you'd manage users with these user management docs. For the account object: you can't add users via the users field. Instead, you'd manage users with these user management docs. To determine your pricing plan or user model, see Overview of pricing and user model changes. Password requirements Passwords passed for account creation have these requirements: 8 to 50 characters in length Only contain letters, numbers, or special characters Cannot contain spaces Must contain at least 1 letter Must contain at least 1 number or special character Things you can do Here is an overview of the API's functionality. Account: The account object is what you use to create and update accounts. You can do the following with it: Create new Show Update Cancel Show usage Set primary admin (some accounts) Set subscription (some accounts) There is also a child account object for creating child accounts. Users: Some organizations that meet the requirements can use the user object to: Add user access to account Remove user access from account Subscription: Organizations that meet the requirements and are on our original product pricing plan can use the subscription object to configure various subscription-related traits. Get started To start using the Partnership API, see the Partner API reference docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 287.63596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to <em>Partnership</em> API",
        "sections": "Intro to <em>Partnership</em> API",
        "tags": "New Relic <em>partnerships</em>",
        "body": " user model. Details: Pricing plan. If you’re on New Relic One pricing, you can&#x27;t use API calls that govern our original pricing plan. The API impacts are: You can&#x27;t use the subscription object You can&#x27;t use the <em>NerdGraph</em> Provisioning API. User model. If your New Relic account has been converted"
      },
      "id": "603ed42328ccbcd4b3eba7ca"
    }
  ],
  "/docs/apis/rest-api-v1-deprecated/new-relic-rest-api-v1/working-new-relic-rest-api-v1-deprecated": [
    {
      "sections": [
        "API examples for SLA reports",
        "Tip",
        "Browser metrics for SLAs",
        "App server metrics for SLAs",
        "Tips for collecting metrics",
        "Examples",
        "REST API v2 commands",
        "Browser load time and page view count (v2)",
        "App response time and request count (v2)",
        "Apdex SLA data (v2)",
        "REST API v1 commands (deprecated)",
        "Browser load time and page view count (v1)",
        "App response time and request count (v1)",
        "Apdex SLA data (v1)",
        "Analyze your data"
      ],
      "title": "API examples for SLA reports",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Service level agreements"
      ],
      "external_id": "3b4dafc002932fc100b6375a3ae87b01350d57fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/service-level-agreements/api-examples-sla-reports/",
      "published_at": "2021-09-14T10:19:01Z",
      "updated_at": "2021-09-14T10:19:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic stores SLA data forever for eligible accounts, so you can use the New Relic REST API to generate service level agreement reports over any time period. For example, you can create SLA reports going back more than 12 days, weeks, or months. Tip Access to this feature depends on your subscription level. Browser metrics for SLAs Browser metrics for the End user tier are available only if you have installed the browser agent. Browser (End user tier) SLA metric name:value (and formula) Page Views thousands EndUser : call_count Load time sec EndUser : average_response_time Apdex EndUser/Apdex : score % Satisfied EndUser/Apdex : s divided by EndUser : call_count % Tolerating EndUser/Apdex : t divided by Enduser : call_count % Frustrated EndUser/Apdex : f divided by Enduser : call_count App server metrics for SLAs Here are the SLA metrics for application servers. App server SLA metric name:value (and formula) Requests millions HttpDispatcher : call_count (scaled appropriately) Resp. time ms HttpDispatcher : average_response_time (multiplied by 1000) Apdex Apdex : score % Satisfied Apdex : s divided by Apdex : count % Tolerating Apdex : t divided by Apdex : count % Frustrated Apdex : f divided by Apdex : count Tips for collecting metrics Here are some tips for planning which metrics to collect. SLA tips Comments Requirements When using the cURL command examples, be sure to replace the placeholder text with your account ID, an API key, and the application ID. Time ranges You are not limited to standard day, week, or month time ranges. For example, you can extract metric data for a \"holiday weekend\" from 12/23 to 12/26 or \"the 20 minutes after our site had problems\" or whatever other period interests you. UTC XML time format You must specify the time in UTC XML format, so be sure to adjust for your time zone compared to UTC. For example, New Relic starts at 16:00:00 on the day before the selected data, since New Relic headquarters are in UTC-8. Summary reports When requesting metrics to use with summary reports, include the query string parameter summarize=true (v2) or summary=1 (v1) as shown in the examples. Scaled statistics Your report has some statistics that are scaled in the SLA reports in New Relic's user interface. New Relic changes the scale of page views in your report to show small numbers. Depending on your traffic, typically it might be displayed in thousands, millions, or billions. Recommendation: To avoid a string of zeroes, divide this number appropriately for your own purposes. End user statistics End user statistics will reflect only the calls in which the agent gathered browser data. For example, end user stats may not appear in situations such as: Browser types Clients (they might have disabled the JavaScript agent, or blocked traffic to New Relic sites for JavaScript code's location Transactions not in one of those categories, in case the page load did not complete for any reason This is why there are fewer (sometimes many fewer) page views in the End User (browser) data section than in the App server data section. Examples The following sections contain code examples to acquire the data for values described above for the Daily (24hr) SLA statistics in the default GMT/UTC time zone. Adjust the from= and to= for your time range as desired. There are syntactical differences between New Relic's REST API v2 and v1. The examples show how to use each. REST API v2 commands Browser load time and page view count (v2) To obtain the browser (EndUser/RUM) load time and page view count for v2, from the command line, type: curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml\"\\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=EndUser&values[]=call_count&values[]=average_response_time&from=2014-06-09T00:00:00+00:00&to=2014-06-09T23:00:00+00:00&summarize=true' Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.http_get(\"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml?names[]=EndUser&values[]=call_count&values[]=average_response_time&from=2012-01-01T00:00:00+00:00&to=2012-01-08T00:00:00+00:00&summarize=true\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" curl.header_in_body=true end puts response.body_str Copy App response time and request count (v2) To obtain the Application response time and request count for v2, from the command line, type: curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=HttpDispatcher&values[]=average_response_time&values[]=call_count&from=2014-06-09T00:00:00+00:00&to=2014-06-09T23:00:00+00:00&summarize=true' Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.http_get(\"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml?names[]=HttpDispatcher&values[]=average_response_time&values[]=call_count&from=2012-01-01T00:00:00+00:00&to=2012-01-08T00:00:00+00:00&summarize=true\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" curl.header_in_body=true end puts response.body_str Copy Apdex SLA data (v2) To obtain the Apdex related data for v2, from the command line, type: curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Apdex&names[]=EndUser/Apdex&from=2014-06-09T00:00:00+00:00&to=2014-06-09T23:00:00+00:00&summarize=true' Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.http_get(\"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml?names[]=EndUser/Apdex&from=2012-01-01T00:00:00+00:00&to=2012-01-08T00:00:00+00:00&summarize=true\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" curl.header_in_body=true end puts response.body_str Copy REST API v1 commands (deprecated) REST API v1 is deprecated. Browser load time and page view count (v1) To obtain the browser (EndUser/RUM) load time and page view count for v1, from the command line, type: curl -gH \"api-key:$API_KEY\" \"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=EndUser&field=call_count&field=average_response_time&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\" Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.perform(\"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=EndUser&field=call_count&field=average_response_time&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" end puts response.body_str Copy App response time and request count (v1) To obtain the Application response time and request count for v1, from the command line, type: curl -gH \"api-key:$API_KEY\" \"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=HttpDispatcher&field=average_response_time&field=call_count&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\" Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.perform(\"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=HttpDispatcher&field=average_response_time&field=call_count&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" end puts response.body_str Copy Apdex SLA data (v1) To obtain the Apdex related data for v1, from the command line, type: curl -gH \"api-key:$API_KEY\" \"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=Apdex&metrics[]=EndUser/Apdex&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\" Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.perform(\"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=Apdex&metrics[]=EndUser/Apdex&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" end puts response.body_str Copy Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.52626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>API</em> examples for SLA reports",
        "sections": "<em>REST</em> <em>API</em> <em>v1</em> commands (<em>deprecated</em>)",
        "body": " range as desired. There are syntactical differences between <em>New</em> <em>Relic</em>&#x27;s <em>REST</em> <em>API</em> <em>v</em>2 and <em>v1</em>. The examples show how to use each. <em>REST</em> <em>API</em> <em>v</em>2 commands Browser load time and page view count (<em>v</em>2) To obtain the browser (EndUser&#x2F;RUM) load time and page view count for <em>v</em>2, from the command line, type: curl"
      },
      "id": "603ebe82196a67631fa83dd7"
    },
    {
      "sections": [
        "Transactions in New Relic's APM",
        "What is a transaction?",
        "Types of transactions",
        "Transaction sub-types",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.JS",
        "PHP",
        "Python",
        "Ruby",
        "Transaction segments",
        "Transaction naming",
        "Monitoring transactions",
        "Tip",
        "Query transactions"
      ],
      "title": "Transactions in New Relic's APM",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Intro to transactions"
      ],
      "external_id": "2a96f455cbf6dfdc5dda2363ba4e69b6f9dba159",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/intro-transactions/transactions-new-relic-apm/",
      "published_at": "2021-09-14T02:55:13Z",
      "updated_at": "2021-09-14T02:55:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The word transaction can have several different meanings in the software industry. This document explains how the term is used by New Relic and how transactions are reported. What is a transaction? At New Relic, a transaction is defined as one logical unit of work in a software application. Specifically, it refers to the function calls and method calls that make up that unit of work. For APM, it will often refer to a web transaction, which represents activity that happens from when the application receives a web request to when the response is sent. When you install APM in a supported system, it begins automatically reporting web requests and other important functions and methods. To supplement the default level of monitoring, you can set up custom instrumentation to report additional transactions. Some frameworks do not have a natural concept of a transaction. In other words, there are no predefined pathways that can easily be recognized or monitored as transactions. To define transactions in such frameworks, you can use custom instrumentation. Types of transactions Cumulative transaction data appears in APM on the Transactions page. The two main categories of transactions are web and non-web: Web: Transactions are initiated with an HTTP request. For most organizations, these represent customer-centric interactions and thus are the most important transactions to monitor. Non-web: Non-web transactions are not initiated with a web request. They can include non-web worker processes, background processes, scripts, message queue activity, and other tasks. Transaction sub-types Our agents have these transaction sub-types: C SDK Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Function The invocation of the named function. Go Doesn't apply. Java Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. framework The invocation of a framework that is recognized by the agent. .NET Sub-type Description Action The invocation of the named framework action. Used when the agent is able to identify a framework-specific action name. ASP The invocation of an ASP.NET request. Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. MonoRail The invocation of a MonoRail request. MVC The invocation of a MVC request. OpenRasta The invocation of an OpenRasta request. StatusCode The HTTP status code returned for the transaction. Often used when a more specific transaction sub-type is unavailable. WCF The invocation of a WCF request. WebAPI The invocation of a WebAPI request. WebService The invocation of a WebService request. Node.JS Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Message Message broker or queue communication. PHP Sub-type Description Action The invocation of the named framework action. Used when the agent is able to identify a framework-specific action name. Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Function The invocation of the named function. PHP The invocation of a background PHP job. StatusCode The HTTP status code returned for the transaction. Often used when a more specific transaction sub-type is unavailable. unknown The invocation of an unknown web transaction or background job. URI The invocation of the named URI. Usually used when a framework or language level transaction name cannot be determined. Python Sub-type Description ASGIWeb WebTransaction from an ASGI application. Message Message broker or queue communication. WSGIWeb WebTransaction from a WSGI application. Ruby Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Transaction segments The individual functions and calls that make up a transaction are called segments. For example external service calls and database calls are segments, and both have their own UI pages in APM. The APM Transactions page displays aggregate transaction segment data. To add segments to a transaction, use custom instrumentation. To see the segments of a specific transaction, use transaction traces. Transaction naming For supported frameworks, transaction names can come from various sources, such as the name given to the transaction by the framework, function names detected during the transaction, or a web request's URL. For transactions that produce many names with a similar format, we consolidate those into general transaction categories. For example, a transaction might be displayed as /user/*/control_panel, where the * represents different user names. To rename transactions or adjust how names are consolidated, use custom instrumentation. Monitoring transactions Here are some other ways you can use APM to monitor transactions: If you want to monitor... Use this... Transactions important to your business Create key transactions, which emphasizes them in the UI and lets you set a custom level of monitoring for them. Async activity Follow the procedures to set up asynchronous activity for your specific APM language agent. Activity across applications Linking transactions across applications gives you more detail about business-relevant application activity. For more information, see the documentation about distributed tracing and cross application traces. Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Query transactions Transactions are available for querying with an in-depth set of default attributes attached. Using these attributes, you can run queries and create custom charts that APM does not provide by default. For information on how to query your data using our UI or NRQL, see Query New Relic data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 68.11151,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transactions in <em>New</em> <em>Relic&#x27;s</em> APM",
        "sections": "Transactions in <em>New</em> <em>Relic&#x27;s</em> APM",
        "body": "The word transaction can have several different meanings in the software industry. This document explains how the term is used by <em>New</em> <em>Relic</em> and how transactions are reported. What is a transaction? At <em>New</em> <em>Relic</em>, a transaction is defined as one logical unit of work in a software application"
      },
      "id": "603e8774e7b9d2a6a42a07bc"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/java-release-notes/java-agent-720/",
      "sections": [
        "Java agent v7.2.0",
        "New features and improvements",
        "Fixes",
        "Support statement:"
      ],
      "published_at": "2021-09-14T14:44:13Z",
      "title": "Java agent v7.2.0",
      "updated_at": "2021-09-13T10:14:43Z",
      "type": "docs",
      "external_id": "51fe60e943d56f848f29fd1ce11b89c50e2210a6",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "New features and improvements Scala Library Instrumentation #362 and #363 STTP versions 2 & 3 Akka-HTTP, HTTP4s and STTP core backends Cats-effect v2 ZIO v1 HTTP4s client & server v0.21 Play 2.3-2.8 Akka-HTTP v10.1 & v10.2 For more information, see Scala instrumentation. Scala API support (see PRs above) Scala APIs provided for explicit instrumentation of several of above libraries in case auto-instrumentation is not desired Cats-effect v2 ZIO v1 AWS v2 DynamoDB Instrumentation #343 Synchronous and asynchronous AWS v2 APIs are auto-instrumented similarly to v1 APIs For more information, see Add support for AWS SDK 2 DynamoDB sync/async clients GraphQL 16 Instrumentation #396 Create meaningful transaction names Create meaningful spans Reporting GraphQL errors For more information, see GraphQL for Java JFR feature causing excessive overhead when enabled JFR #203 Refactored code to use less memory. Fixes The existing MongoDB instrumentation was partially applying when MongoDB Reactive Streams is being used. Disable weaving package when MongoDB 4.x+ reactive driver detected #341 For more information, see Spring Reactive DB Drivers - MongoDB Support Support statement: New Relic recommends that you upgrade the agent regularly to ensure that you're getting the latest features and performance benefits. Additionally, older releases will no longer be supported when they reach end-of-life.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 65.103386,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Java agent <em>v7.2.0</em>",
        "sections": "Java agent <em>v7.2.0</em>",
        "body": "<em>New</em> features and improvements Scala Library Instrumentation #362 and #363 STTP versions 2 &amp; 3 Akka-HTTP, HTTP4s and STTP core backends Cats-effect <em>v</em>2 ZIO <em>v1</em> HTTP4s client &amp; server <em>v</em>0.21 Play 2.3-2.8 Akka-HTTP <em>v10.1</em> &amp; <em>v</em>10.2 For more information, see Scala instrumentation. Scala <em>API</em> support (see PRs"
      },
      "id": "613f2493e7b9d2dd6db6f24c"
    }
  ],
  "/docs/apis/rest-api-v2/account-examples-v2/listing-users-your-account": [
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.75075,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "sections": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region <em>account</em>, the URL is: <em>api</em>. eu .newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;metrics&#x2F;data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "List application ID, host ID, instance ID",
        "Use the API Explorer",
        "List application IDs",
        "List host IDs",
        "Host ID and summary data using the REST API Explorer",
        "{HOST_ID} output",
        "List instance IDs",
        "Instance ID and summary data using the REST API Explorer",
        "{INSTANCE_ID} output",
        "Java instance ID (JVM) using the UI",
        "REST API application list example"
      ],
      "title": "List application ID, host ID, instance ID",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "87dd2a198e50edc8e78d7bb7c70ba724aff73053",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/list-application-id-host-id-instance-id/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM assigns IDs to entities related to an application. These are used to collect information about the operation and performance from different view points. These IDs can be returned via New Relic's REST API. The IDs may include: Application ID $APP_ID for each instrumented app Host ID $HOST_ID for each host Instance ID $INSTANCE_ID if there are multiple instances of the app To list any of these IDs in the New Relic API Explorer, you need an API key. Use the API Explorer You can use the API Explorer to return a list of all product IDs for a particular product: Go to one.newrelic.com > APM > (select an app). Go to the API Explorer at rpm.newrelic.com/api/explore, then select your account name from the Select an account dropdown. From the sidebar, select (product category) > GET List. Select Send Request. Browse the Response to locate the product ID. Use the product ID you located in your REST API calls. List application IDs Each app monitored by an APM agent is assigned a name. A unique $APP_ID is also associated with that name. The $APP_ID is fundamental for retrieving APM information about your apps. For more information about listing and using the $APP_ID, and obtaining the summary data, see Listing your app ID. List host IDs The $HOST_ID is used to get APM data for a specific host running an app. A physical server may have more than one host. For example, a web server program running on a physical server may be configured to have more than one virtual host. IDs for the host and physical server are not the same. Each host ID is unique and represents different items. Use the $HOST_ID to retrieve summary metrics for the host as well as specific metric timeslice values. For more information about available metrics: Go to rpm.newrelic.com. Go to the API Explorer, then select your account name from the Select an account dropdown. Go to the API Explorer's Application host page at rpm.newrelic.com/api/explore/application_hosts/names. Host ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $HOST_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the {HOST_ID} for each host. {HOST_ID} output The output will appear similar to this: { \"application_hosts\": [ { \"id\": 34966, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 13512 <---<<< {INSTANCE_ID} ], } }, { \"id\": 9999999, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { \". . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 186288 <---<<< {INSTANCE_ID} ], } }, . . . Copy List instance IDs The instance ID meaning depends on the New Relic language agent being used. You can list this ID from the REST API. For Java, you can also view the instance ID (JVM) from APM's Overview page. Agent Instance ID represents Go The Go program on the host reporting to the app name Java A Java Virtual Machine (JVM) .NET For New Relic's .NET Framework agent, this is the AppDomain Node.js A worker process PHP The daemon agent Ruby An individual Ruby worker process Python The master and worker processes You can retrieve summary metrics for the instance as well as specific metric timeslice values using the {INSTANCE_ID}. For details about available metrics, use the REST API Explorer Application Instance page. Instance ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $INSTANCE_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the $INSTANCE_ID for each instance. {INSTANCE_ID} output The { INSTANCE_ID} output will appear similar to this: { \"application_instances\": [ { \"id\": 35120, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 34966, <---<<< {HOST_ID} } }, { \"id\": 186288, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 186283, <---<<< {HOST_ID} } }, . . . Copy Java instance ID (JVM) using the UI Java apps: To locate a specific JVM $INSTANCE_ID in New Relic: Go to one.newrelic.com > APM > Applications > (select an app) > JVMs. Select the name of the instance. In the URL, the number after the _i designator represents the Java JVM instance: https://rpm.newrelic.com/accounts/$ACCOUNT_ID/applications/$APP_ID_i$INSTANCE_ID Copy REST API application list example The following example shows how to locate all the ID information for an application by using the APP_ID. If you have an EU account, the endpoint begins with https://api.eu.newrelic.com. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H 'Api-Key:$API_KEY' -i \\ -d 'filter[ids]=1441' <----<<<< {APP_ID} Copy The resulting example output is running on five servers. One server is hosting two virtual hosts for a total of six hosts. The output includes a links section listing the application_instances and application_hosts for the application. { \"applications\": [ { \"id\": 1441, <----<<<< {APP_ID} \"name\": \"RPM Combined Production\", \"language\": \"ruby\", \"health_status\": \"green\", \"reporting\": true, \"last_reported_at\": \"2015-11-10T23:19:47+00:00\", \"application_summary\": { . . . }, \"end_user_summary\": { . . . }, \"settings\": { . . . }, \"links\": { \"application_instances\": [ <---<<<< {INSTANCE_ID} list 21790, 24810, 27948, 35120, 35121, 35122, 186288, 247253, 247254, 247255, 247256 ], \"application_hosts\": [ <---<<<< {HOST_ID} list 21788, 24808, 34966, 186283, 247245, 286551 ] } } ], . . . Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.75075,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Host ID <em>and</em> summary data using the <em>REST</em> <em>API</em> Explorer",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " for a particular application, you will need the $APP_ID. Go to the <em>API</em> Explorer, then select your <em>account</em> name from the Select an <em>account</em> dropdown. Enter the specific $APP_ID in the following command: curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;hosts.json&#x27; \\ -H &#x27;<em>Api</em>-Key:$<em>API</em>_KEY&#x27; -i Copy"
      },
      "id": "60440c9628ccbc2de32c6078"
    },
    {
      "sections": [
        "New Relic partnership account authentication",
        "Custom headers and API calls",
        "Known limitations"
      ],
      "title": "New Relic partnership account authentication",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "a4e139380383b634e44d288b7065597de60e6b84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/admin-users-api-key-partnerships/",
      "published_at": "2021-09-13T18:41:50Z",
      "updated_at": "2021-03-13T03:10:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This approach adds a new authentication method to the customer-facing New Relic REST API (v2) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all REST API (v2) calls. It offers no new functionality for non-partner API users. When calling endpoints in the New Relic REST API (v2) that require the user key, New Relic suggests you use the described authentication method. Custom headers and API calls When making API calls, use the following custom headers with your partner API key, partner ID, and your account ID: X-Api-Key:YOUR_PARTNER_ACCOUNT_API_KEY NewRelic-Partner-Id:YOUR_PARTNER_ID NewRelic-Account-Id:YOUR_CUSTOMERS_ACCOUNT_ID Providing authentication to the REST API (v2) in this form allows you to complete any API operation on your customer’s accounts. This bypasses the customer-facing requirement that some API calls require an Admin user’s API key. This authentication method also works for API endpoints that require only the REST API key. This new authentication method works for all endpoints, not only those that require the Admin User’s API key. Known limitations This partner-only authentication method will only work with the New Relic REST API (v2). It does not work with the following: Deployment API Infrastructure API for alerts Insights API Insights Dashboard API Partner API Plugin API Synthetics API",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.09756,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic partnership <em>account</em> authentication",
        "sections": "New Relic partnership <em>account</em> authentication",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " <em>API</em> key, partner ID, and your <em>account</em> ID: X-<em>Api</em>-Key:YOUR_PARTNER_<em>ACCOUNT_API</em>_KEY NewRelic-Partner-Id:YOUR_PARTNER_ID NewRelic-<em>Account</em>-Id:YOUR_CUSTOMERS_<em>ACCOUNT</em>_ID Providing authentication to the <em>REST</em> <em>API</em> (<em>v2</em>) in this form allows you to complete any <em>API</em> operation on your customer’s accounts"
      },
      "id": "60440747e7b9d2a1465799f2"
    }
  ],
  "/docs/apis/rest-api-v2/api-explorer-v2/introduction-new-relics-rest-api-explorer": [
    {
      "sections": [
        "Use the API Explorer",
        "API key requirements",
        "Important",
        "Access the API Explorer"
      ],
      "title": "Use the API Explorer",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "API Explorer v2"
      ],
      "external_id": "0af25c5683418b6c806b4ec2addad065fe569e07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/api-explorer-v2/use-api-explorer/",
      "published_at": "2021-09-13T18:53:18Z",
      "updated_at": "2021-07-09T14:33:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST API Explorer (v2) makes it easy to test and send requests for any available API endpoint. After you select your choice of functions for the type of API call (applications, browsers, etc.), the user interface provides an interactive form to view requirements and test your parameter values. It also provides a live source of documentation about the API values. API key requirements Before you can use the API Explorer, API access must be activated and an API key must be generated for your account. Important We recommend using the user key, not the REST API key, because the user key has fewer restrictions. Tips: If you're signed in to New Relic, when you use the API Explorer you can choose your API key at the top of the UI and that key will appear automatically in the Request and Parameters sections of the Explorer. If you're not signed in to New Relic, you can paste your API key into the API Explorer's Parameters. Access the API Explorer To use the New Relic API Explorer: Go to rpm.newrelic.com/api/explore. From the API Explorer's menu bar, select the account name for your app from the dropdown list. From the sidebar, select a feature (applications, browsers, etc.) and an available API function: GET, PUT, DELETE. Type the other Parameters values for your API call. (Refer to the UI for descriptions and requirements for v2.) Select the format for your request: JSON or XML. Select Send Request.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 198.27307,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the <em>API</em> <em>Explorer</em>",
        "sections": "Use the <em>API</em> <em>Explorer</em>",
        "tags": "<em>API</em> <em>Explorer</em> <em>v2</em>",
        "body": "New Relic&#x27;s <em>REST</em> <em>API</em> <em>Explorer</em> (<em>v2</em>) makes it easy to test and send requests for any available <em>API</em> endpoint. After you select your choice of functions for the type of <em>API</em> call (applications, browsers, etc.), the user interface provides an interactive form to view requirements and test your parameter"
      },
      "id": "6043ffe528ccbcf8ca2c6069"
    },
    {
      "sections": [
        "Listing users for your account",
        "Tip",
        "Requirements",
        "List all account users",
        "Listing by user email",
        "Listing by user id"
      ],
      "title": "Listing users for your account",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Account admin and usage (v2)"
      ],
      "external_id": "3ca4032c2bf5377abae0fa9bc8c1d93ac0235b95",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/account-examples-v2/listing-users-your-account/",
      "published_at": "2021-09-13T18:43:40Z",
      "updated_at": "2021-07-27T11:29:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For New Relic users on our original user model, we store a list of the users who can access your account in a database by their email address, assigned role, and their first and last name if provided. You can view this data from New Relic's user interface and from the API Explorer (v2). Tip To obtain the same information from the New Relic API Explorer (v2), select Users > GET List. Requirements This generates a list of users on our original user model. It doesn't list users on the New Relic One user model. List all account users To obtain a list of all users on the original user model for your account, use this command: curl -X GET 'https://api.newrelic.com/v2/users.json' \\ -H \"x-api-key:$API_KEY\" -i Copy The output will appear similar to this: HTTP/1.1 200 OK Content-Type: application/json { \"users\": [ { \"id\": 123456, \"first_name\": \"My\", \"last_name\": \"Name\", \"email\": \"my.name@mywebsite.com\", \"role\": \"owner\" }, { \"id\": 654321, \"first_name\": \"Adam\", \"last_name\": \"Admin\", \"email\": \"adam.admin@mywebsite.com\", \"role\": \"admin\" }, { \"id\": 345123, \"first_name\": \"Any\", \"last_name\": \"User\", \"email\": \"any.user@mywebsite.com\", \"role\": \"user\" }, ... Copy Listing by user email If you know all or part of the user's email, you can use this command to return the role, name, and user id. The filter[email]= clause specifies the known part of the email (for example, \"my.name\"). Note: Character matching is a simple string. No regular expression capability is available, so multiple matches may occur if the selected string is not unique. curl -X GET 'https://api.newrelic.com/v2/users.json' \\ -H \"x-api-key:$API_KEY\" -i \\ -d 'filter[email]=my.name' Copy The output for this command will be the same as the first entry in the Listing all account users example. Listing by user id If you know the user id, you can use this command to return the role, name, and email. The filter[ids]= clause specifies the user id. curl -X GET 'https://api.newrelic.com/v2/users.json' \\ -H \"x-api-key:$API_KEY\" -i \\ -d 'filter[ids]=123456' Copy You can also use this command, which embeds the user id in the URL and omits the filter. curl -X GET 'https://api.newrelic.com/v2/users/123456.json' \\ -H \"x-api-key:$API_KEY\" -i Copy The output for this command will be the same as the first entry in the Listing all account users example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.57509,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "For New Relic users on our original user model, we store a list of the users who can access your account in a database by their email address, assigned role, and their first and last name if provided. You can view this data from New Relic&#x27;s user interface and from the <em>API</em> <em>Explorer</em> (<em>v2</em>). Tip"
      },
      "id": "603ecc4c28ccbcd60eeba77b"
    },
    {
      "sections": [
        "Get host memory used for an application",
        "Get memory usage for a host",
        "Get memory usage for the entire app"
      ],
      "title": "Get host memory used for an application",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "cbc8fbdc5012ba202ff02eea52a6b62e91f30596",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-host-memory-used-application/",
      "published_at": "2021-09-13T18:29:18Z",
      "updated_at": "2021-03-13T04:02:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average memory usage for your application on a single host. This value appears on the APM Summary page in the Hosts table, in the column labeled Memory, or in the corresponding chart. Get memory usage for a host To obtain the average Memory usage for one of your app's hosts, use the following command to obtain the metric names[]=Memory/Physical with values[]=percent. curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/hosts/$HOST_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Memory/Physical&values[]=used_mb_by_host&summarize=true' Copy Replace $APP_ID and $API_KEY with your app ID and your API key. Replace $HOST_ID with the host id of your target host. This example shows the time range for the default time period (last 30 minutes). For additional detail: Remove the summarize=true to obtain detailed time series data. Specify a different time range. To obtain the same information from the New Relic API Explorer (v2): Select Application Hosts > GET Metric Data, and include your API key. Add your application ID, host id, and the names[]=Memory/Physical and values[]=used_mb_by_host metrics in the appropriate fields. Get memory usage for the entire app To obtain the average Memory usage for your application, use a command similar to the one in the previous example, but remove the reference to hosts and $HOST_ID. Replace $APP_ID and $API_KEY with your app ID and your API key. curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Memory/Physical&values[]=total_used_mb&summarize=true' Copy For additional detail: Remove the summarize=true to obtain detailed time series data. Specify a different time range. To obtain the same information from the New Relic API Explorer (v2): Select Applications > GET Metric Data, and include your API key. Add your application ID and the names[]=Memory/Physical and values[]=total_used_mb metrics in the appropriate fields.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.46329,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average memory usage for your application on a single host. This value appears on the APM Summary page in the Hosts table, in the column labeled Memory, or in the corresponding chart. Get memory usage for a host To obtain the average Memory"
      },
      "id": "604405fe28ccbc10d72c60bc"
    }
  ],
  "/docs/apis/rest-api-v2/api-explorer-v2/retrieve-metric-timeslice-data-your-app-explorer": [
    {
      "sections": [
        "Introduction to New Relic's REST API Explorer",
        "Features",
        "Differences from API version 1",
        "Tip",
        "For more help"
      ],
      "title": "Introduction to New Relic's REST API Explorer",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "API Explorer v2"
      ],
      "external_id": "457d31007ab690d5e6f3679e150814c280b49441",
      "image": "https://docs.newrelic.com/static/c506cb08149178347d12b6cbb236c855/23592/API_explorer_main_page.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/api-explorer-v2/introduction-new-relics-rest-api-explorer/",
      "published_at": "2021-09-13T19:42:17Z",
      "updated_at": "2021-06-20T20:42:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several APIs, including the New Relic REST API. This document introduces you to the REST API Explorer, which allows admin users and those with the API Key to: Browse the available REST API endpoints. Interact with the REST API within a user interface (the API Explorer). View a live source of documentation. Obtain curl commands for API actions. Share configured API calls with colleagues by copy and pasting API Explorer's URLs. This helps you to quickly search for solutions and test your API calls before adding them to your own software components. Features New Relic's API Explorer includes an interactive user interface for your selected account. The API Explorer UI lists the types of API calls (Applications, Users, etc.) and their available functions, such as GET metric data, PUT (update) applications, DELETE applications, etc. As you type values for Parameters, they automatically appear in the Request so that you can test and verify your syntax before sending the request. The UI indicates required fields, field descriptions, their type (integer, float, Boolean, etc.), and their location (path, query, etc.). For information on API key requirements, see REST API keys. rpm.newrelic.com/api/explore: The New Relic API Explorer makes it easy to test and send requests for any API endpoint. After you select your account and your choice of functions for the type of API call (applications, browsers, users, etc.), the UI provides an interactive form to view requirements and test your parameter values. Differences from API version 1 This API Explorer applies only to the New Relic REST API version 2, which focuses on data in and data out of New Relic. Version 2 replaces New Relic's deprecated REST API version 1. Be aware there are some differences between version 2 and 1: Names for data may be different. Some cURL commands for v2 are different than v1. Tip The New Relic agents use different APIs and are not accessible via the API Explorer. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 199.63638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic&#x27;s <em>REST</em> <em>API</em> <em>Explorer</em>",
        "sections": "Introduction to New Relic&#x27;s <em>REST</em> <em>API</em> <em>Explorer</em>",
        "tags": "<em>API</em> <em>Explorer</em> <em>v2</em>",
        "body": " and 1: Names for data may be different. Some cURL commands for <em>v2</em> are different than <em>v</em>1. Tip The New Relic agents use different <em>APIs</em> and are not accessible via the <em>API</em> <em>Explorer</em>. For more help"
      },
      "id": "6043ff97196a67c2f2960f65"
    },
    {
      "sections": [
        "Use the API Explorer",
        "API key requirements",
        "Important",
        "Access the API Explorer"
      ],
      "title": "Use the API Explorer",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "API Explorer v2"
      ],
      "external_id": "0af25c5683418b6c806b4ec2addad065fe569e07",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/api-explorer-v2/use-api-explorer/",
      "published_at": "2021-09-13T18:53:18Z",
      "updated_at": "2021-07-09T14:33:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST API Explorer (v2) makes it easy to test and send requests for any available API endpoint. After you select your choice of functions for the type of API call (applications, browsers, etc.), the user interface provides an interactive form to view requirements and test your parameter values. It also provides a live source of documentation about the API values. API key requirements Before you can use the API Explorer, API access must be activated and an API key must be generated for your account. Important We recommend using the user key, not the REST API key, because the user key has fewer restrictions. Tips: If you're signed in to New Relic, when you use the API Explorer you can choose your API key at the top of the UI and that key will appear automatically in the Request and Parameters sections of the Explorer. If you're not signed in to New Relic, you can paste your API key into the API Explorer's Parameters. Access the API Explorer To use the New Relic API Explorer: Go to rpm.newrelic.com/api/explore. From the API Explorer's menu bar, select the account name for your app from the dropdown list. From the sidebar, select a feature (applications, browsers, etc.) and an available API function: GET, PUT, DELETE. Type the other Parameters values for your API call. (Refer to the UI for descriptions and requirements for v2.) Select the format for your request: JSON or XML. Select Send Request.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 198.27307,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the <em>API</em> <em>Explorer</em>",
        "sections": "Use the <em>API</em> <em>Explorer</em>",
        "tags": "<em>API</em> <em>Explorer</em> <em>v2</em>",
        "body": "New Relic&#x27;s <em>REST</em> <em>API</em> <em>Explorer</em> (<em>v2</em>) makes it easy to test and send requests for any available <em>API</em> endpoint. After you select your choice of functions for the type of <em>API</em> call (applications, browsers, etc.), the user interface provides an interactive form to view requirements and test your parameter"
      },
      "id": "6043ffe528ccbcf8ca2c6069"
    },
    {
      "sections": [
        "Listing users for your account",
        "Tip",
        "Requirements",
        "List all account users",
        "Listing by user email",
        "Listing by user id"
      ],
      "title": "Listing users for your account",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Account admin and usage (v2)"
      ],
      "external_id": "3ca4032c2bf5377abae0fa9bc8c1d93ac0235b95",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/account-examples-v2/listing-users-your-account/",
      "published_at": "2021-09-13T18:43:40Z",
      "updated_at": "2021-07-27T11:29:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For New Relic users on our original user model, we store a list of the users who can access your account in a database by their email address, assigned role, and their first and last name if provided. You can view this data from New Relic's user interface and from the API Explorer (v2). Tip To obtain the same information from the New Relic API Explorer (v2), select Users > GET List. Requirements This generates a list of users on our original user model. It doesn't list users on the New Relic One user model. List all account users To obtain a list of all users on the original user model for your account, use this command: curl -X GET 'https://api.newrelic.com/v2/users.json' \\ -H \"x-api-key:$API_KEY\" -i Copy The output will appear similar to this: HTTP/1.1 200 OK Content-Type: application/json { \"users\": [ { \"id\": 123456, \"first_name\": \"My\", \"last_name\": \"Name\", \"email\": \"my.name@mywebsite.com\", \"role\": \"owner\" }, { \"id\": 654321, \"first_name\": \"Adam\", \"last_name\": \"Admin\", \"email\": \"adam.admin@mywebsite.com\", \"role\": \"admin\" }, { \"id\": 345123, \"first_name\": \"Any\", \"last_name\": \"User\", \"email\": \"any.user@mywebsite.com\", \"role\": \"user\" }, ... Copy Listing by user email If you know all or part of the user's email, you can use this command to return the role, name, and user id. The filter[email]= clause specifies the known part of the email (for example, \"my.name\"). Note: Character matching is a simple string. No regular expression capability is available, so multiple matches may occur if the selected string is not unique. curl -X GET 'https://api.newrelic.com/v2/users.json' \\ -H \"x-api-key:$API_KEY\" -i \\ -d 'filter[email]=my.name' Copy The output for this command will be the same as the first entry in the Listing all account users example. Listing by user id If you know the user id, you can use this command to return the role, name, and email. The filter[ids]= clause specifies the user id. curl -X GET 'https://api.newrelic.com/v2/users.json' \\ -H \"x-api-key:$API_KEY\" -i \\ -d 'filter[ids]=123456' Copy You can also use this command, which embeds the user id in the URL and omits the filter. curl -X GET 'https://api.newrelic.com/v2/users/123456.json' \\ -H \"x-api-key:$API_KEY\" -i Copy The output for this command will be the same as the first entry in the Listing all account users example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.57509,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "For New Relic users on our original user model, we store a list of the users who can access your account in a database by their email address, assigned role, and their first and last name if provided. You can view this data from New Relic&#x27;s user interface and from the <em>API</em> <em>Explorer</em> (<em>v2</em>). Tip"
      },
      "id": "603ecc4c28ccbcd60eeba77b"
    }
  ],
  "/docs/apis/rest-api-v2/api-explorer-v2/use-api-explorer": [
    {
      "sections": [
        "Introduction to New Relic's REST API Explorer",
        "Features",
        "Differences from API version 1",
        "Tip",
        "For more help"
      ],
      "title": "Introduction to New Relic's REST API Explorer",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "API Explorer v2"
      ],
      "external_id": "457d31007ab690d5e6f3679e150814c280b49441",
      "image": "https://docs.newrelic.com/static/c506cb08149178347d12b6cbb236c855/23592/API_explorer_main_page.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/api-explorer-v2/introduction-new-relics-rest-api-explorer/",
      "published_at": "2021-09-13T19:42:17Z",
      "updated_at": "2021-06-20T20:42:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several APIs, including the New Relic REST API. This document introduces you to the REST API Explorer, which allows admin users and those with the API Key to: Browse the available REST API endpoints. Interact with the REST API within a user interface (the API Explorer). View a live source of documentation. Obtain curl commands for API actions. Share configured API calls with colleagues by copy and pasting API Explorer's URLs. This helps you to quickly search for solutions and test your API calls before adding them to your own software components. Features New Relic's API Explorer includes an interactive user interface for your selected account. The API Explorer UI lists the types of API calls (Applications, Users, etc.) and their available functions, such as GET metric data, PUT (update) applications, DELETE applications, etc. As you type values for Parameters, they automatically appear in the Request so that you can test and verify your syntax before sending the request. The UI indicates required fields, field descriptions, their type (integer, float, Boolean, etc.), and their location (path, query, etc.). For information on API key requirements, see REST API keys. rpm.newrelic.com/api/explore: The New Relic API Explorer makes it easy to test and send requests for any API endpoint. After you select your account and your choice of functions for the type of API call (applications, browsers, users, etc.), the UI provides an interactive form to view requirements and test your parameter values. Differences from API version 1 This API Explorer applies only to the New Relic REST API version 2, which focuses on data in and data out of New Relic. Version 2 replaces New Relic's deprecated REST API version 1. Be aware there are some differences between version 2 and 1: Names for data may be different. Some cURL commands for v2 are different than v1. Tip The New Relic agents use different APIs and are not accessible via the API Explorer. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 199.63638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic&#x27;s <em>REST</em> <em>API</em> <em>Explorer</em>",
        "sections": "Introduction to New Relic&#x27;s <em>REST</em> <em>API</em> <em>Explorer</em>",
        "tags": "<em>API</em> <em>Explorer</em> <em>v2</em>",
        "body": " and 1: Names for data may be different. Some cURL commands for <em>v2</em> are different than <em>v</em>1. Tip The New Relic agents use different <em>APIs</em> and are not accessible via the <em>API</em> <em>Explorer</em>. For more help"
      },
      "id": "6043ff97196a67c2f2960f65"
    },
    {
      "sections": [
        "Listing users for your account",
        "Tip",
        "Requirements",
        "List all account users",
        "Listing by user email",
        "Listing by user id"
      ],
      "title": "Listing users for your account",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Account admin and usage (v2)"
      ],
      "external_id": "3ca4032c2bf5377abae0fa9bc8c1d93ac0235b95",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/account-examples-v2/listing-users-your-account/",
      "published_at": "2021-09-13T18:43:40Z",
      "updated_at": "2021-07-27T11:29:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For New Relic users on our original user model, we store a list of the users who can access your account in a database by their email address, assigned role, and their first and last name if provided. You can view this data from New Relic's user interface and from the API Explorer (v2). Tip To obtain the same information from the New Relic API Explorer (v2), select Users > GET List. Requirements This generates a list of users on our original user model. It doesn't list users on the New Relic One user model. List all account users To obtain a list of all users on the original user model for your account, use this command: curl -X GET 'https://api.newrelic.com/v2/users.json' \\ -H \"x-api-key:$API_KEY\" -i Copy The output will appear similar to this: HTTP/1.1 200 OK Content-Type: application/json { \"users\": [ { \"id\": 123456, \"first_name\": \"My\", \"last_name\": \"Name\", \"email\": \"my.name@mywebsite.com\", \"role\": \"owner\" }, { \"id\": 654321, \"first_name\": \"Adam\", \"last_name\": \"Admin\", \"email\": \"adam.admin@mywebsite.com\", \"role\": \"admin\" }, { \"id\": 345123, \"first_name\": \"Any\", \"last_name\": \"User\", \"email\": \"any.user@mywebsite.com\", \"role\": \"user\" }, ... Copy Listing by user email If you know all or part of the user's email, you can use this command to return the role, name, and user id. The filter[email]= clause specifies the known part of the email (for example, \"my.name\"). Note: Character matching is a simple string. No regular expression capability is available, so multiple matches may occur if the selected string is not unique. curl -X GET 'https://api.newrelic.com/v2/users.json' \\ -H \"x-api-key:$API_KEY\" -i \\ -d 'filter[email]=my.name' Copy The output for this command will be the same as the first entry in the Listing all account users example. Listing by user id If you know the user id, you can use this command to return the role, name, and email. The filter[ids]= clause specifies the user id. curl -X GET 'https://api.newrelic.com/v2/users.json' \\ -H \"x-api-key:$API_KEY\" -i \\ -d 'filter[ids]=123456' Copy You can also use this command, which embeds the user id in the URL and omits the filter. curl -X GET 'https://api.newrelic.com/v2/users/123456.json' \\ -H \"x-api-key:$API_KEY\" -i Copy The output for this command will be the same as the first entry in the Listing all account users example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.57507,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "For New Relic users on our original user model, we store a list of the users who can access your account in a database by their email address, assigned role, and their first and last name if provided. You can view this data from New Relic&#x27;s user interface and from the <em>API</em> <em>Explorer</em> (<em>v2</em>). Tip"
      },
      "id": "603ecc4c28ccbcd60eeba77b"
    },
    {
      "sections": [
        "Get host memory used for an application",
        "Get memory usage for a host",
        "Get memory usage for the entire app"
      ],
      "title": "Get host memory used for an application",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "cbc8fbdc5012ba202ff02eea52a6b62e91f30596",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-host-memory-used-application/",
      "published_at": "2021-09-13T18:29:18Z",
      "updated_at": "2021-03-13T04:02:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average memory usage for your application on a single host. This value appears on the APM Summary page in the Hosts table, in the column labeled Memory, or in the corresponding chart. Get memory usage for a host To obtain the average Memory usage for one of your app's hosts, use the following command to obtain the metric names[]=Memory/Physical with values[]=percent. curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/hosts/$HOST_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Memory/Physical&values[]=used_mb_by_host&summarize=true' Copy Replace $APP_ID and $API_KEY with your app ID and your API key. Replace $HOST_ID with the host id of your target host. This example shows the time range for the default time period (last 30 minutes). For additional detail: Remove the summarize=true to obtain detailed time series data. Specify a different time range. To obtain the same information from the New Relic API Explorer (v2): Select Application Hosts > GET Metric Data, and include your API key. Add your application ID, host id, and the names[]=Memory/Physical and values[]=used_mb_by_host metrics in the appropriate fields. Get memory usage for the entire app To obtain the average Memory usage for your application, use a command similar to the one in the previous example, but remove the reference to hosts and $HOST_ID. Replace $APP_ID and $API_KEY with your app ID and your API key. curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Memory/Physical&values[]=total_used_mb&summarize=true' Copy For additional detail: Remove the summarize=true to obtain detailed time series data. Specify a different time range. To obtain the same information from the New Relic API Explorer (v2): Select Applications > GET Metric Data, and include your API key. Add your application ID and the names[]=Memory/Physical and values[]=total_used_mb metrics in the appropriate fields.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.46329,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average memory usage for your application on a single host. This value appears on the APM Summary page in the Hosts table, in the column labeled Memory, or in the corresponding chart. Get memory usage for a host To obtain the average Memory"
      },
      "id": "604405fe28ccbc10d72c60bc"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/application-error-rate-example-v2": [
    {
      "sections": [
        "Change the alias for your application (v2)",
        "Set application alias and modify Apdex thresholds",
        "For more help"
      ],
      "title": "Change the alias for your application (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "e5f896b364a0e6a0f4809fafafa877ac2dc61c7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2/",
      "published_at": "2021-09-13T18:53:57Z",
      "updated_at": "2021-03-16T07:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The application name you see in the New Relic's user interface is a human-readable alias for the primary name assigned in your configuration settings. If you change it, the name of your app is updated everywhere in New Relic One, including APM, browser monitoring, etc. By default, the alias is the same as the name used in the agent configuration file. Changing the alias does not affect the agent's configured name, and data still reports using that name. Set application alias and modify Apdex thresholds To change the alias for the app name from the New Relic REST API (v2), use this command. You can also change the app alias from New Relic's API Explorer by selecting Applications > Update. You will need to supply the ${APPID}, ${API_KEY}, and the alias name you want the application to be displayed as in the New Relic UI. You must also provide APP_APDEX_THRESHOLD, BROWSER_APDEX_THRESHOLD, and the monitoring enabled BOOLEAN (true or false) even if they are not being modified. curl -X PUT \"https://api.newrelic.com/v2/applications/${APPID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -H 'Content-Type: application/json' \\ -d \\ '{ \"application\": { \"name\": \"name\", \"settings\": { \"app_apdex_threshold\": APP_APDEX_THRESHOLD, \"end_user_apdex_threshold\": BROWSER_APDEX_THRESHOLD, \"enable_real_user_monitoring\": BOOLEAN } } }' Copy This is the equivalent of using the APM UI to change the displayed app name. This will not change the app identifier name under which your data will be collected. It will only change the app name that appears in the New Relic user interface. For more help Additional documentation resources include: Getting started with the New Relic REST API (v2) (overview of the New Relic REST API, including the structure of an API call) Using the API Explorer (using the API Explorer's UI to get data in and data out of New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.05106,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "sections": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": " is the same as the name used in the agent configuration file. Changing the alias does not affect the agent&#x27;s configured name, and data still reports using that name. Set <em>application</em> alias and modify Apdex thresholds To change the alias for the app name from the New Relic <em>REST</em> <em>API</em> (<em>v2</em>), use this command"
      },
      "id": "603ed66c28ccbc230feba7a9"
    },
    {
      "sections": [
        "Get average throughput for an app (v2)",
        "Web app throughput",
        "Web app throughput (single host)",
        "Non-web app throughput",
        "Non-web app throughput (single host)",
        "For more help"
      ],
      "title": "Get average throughput for an app (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "69213d0faede1c54abe3ab51a41b506fd27427bc",
      "image": "https://docs.newrelic.com/static/8f3717e1b97fa8027a5db9ecca408b7f/6c1e7/Web_app_throughput.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2/",
      "published_at": "2021-09-13T18:45:40Z",
      "updated_at": "2021-03-16T08:13:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average throughput for your app, including web application and non-web application throughput. These values appear in the Throughput chart on your app's APM Summary page: Go to one.newrelic.com > APM > (select an app). Click the app's Transaction time chart title, then select your choice. Web app throughput To find the average web application throughput value for a time period, use a single command to get the metric HttpDispatcher:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=HttpDispatcher&values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range, include from and to values. To keep the default time period of the last 30 minutes, omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Web app throughput (single host) To find the average throughput from a single host, for a given time period, use a single command to get the metric HttpDispatcher:requests_per_minute, and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=HttpDispatcher&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy Non-web app throughput To find the average non-web application throughput value for a given time period, use a single command to get the metric OtherTransaction/all:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=OtherTransaction/all&values[]=requests_per_minute&;from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range (as shown in this example), include from and to values. To keep the default time period (last 30 minutes), omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart for a non-web app on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Non-web app throughput (single host) To obtain the average throughput for a non-web app from a single host, for a given time period, use a single command to obtain the metric OtherTransaction:requests_per_minute and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=OtherTransaction/all&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.9426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get average throughput for an app (<em>v2</em>)",
        "sections": "Get average throughput for an app (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average throughput for your app, including web <em>application</em> and non-web <em>application</em> throughput. These values appear in the Throughput chart on your app&#x27;s APM Summary page: Go to one.newrelic.com &gt; APM &gt; (select an app). Click the app"
      },
      "id": "603ec9ba28ccbccf81eba797"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12045,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/application-reporting-health-status-v2": [
    {
      "sections": [
        "Change the alias for your application (v2)",
        "Set application alias and modify Apdex thresholds",
        "For more help"
      ],
      "title": "Change the alias for your application (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "e5f896b364a0e6a0f4809fafafa877ac2dc61c7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2/",
      "published_at": "2021-09-13T18:53:57Z",
      "updated_at": "2021-03-16T07:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The application name you see in the New Relic's user interface is a human-readable alias for the primary name assigned in your configuration settings. If you change it, the name of your app is updated everywhere in New Relic One, including APM, browser monitoring, etc. By default, the alias is the same as the name used in the agent configuration file. Changing the alias does not affect the agent's configured name, and data still reports using that name. Set application alias and modify Apdex thresholds To change the alias for the app name from the New Relic REST API (v2), use this command. You can also change the app alias from New Relic's API Explorer by selecting Applications > Update. You will need to supply the ${APPID}, ${API_KEY}, and the alias name you want the application to be displayed as in the New Relic UI. You must also provide APP_APDEX_THRESHOLD, BROWSER_APDEX_THRESHOLD, and the monitoring enabled BOOLEAN (true or false) even if they are not being modified. curl -X PUT \"https://api.newrelic.com/v2/applications/${APPID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -H 'Content-Type: application/json' \\ -d \\ '{ \"application\": { \"name\": \"name\", \"settings\": { \"app_apdex_threshold\": APP_APDEX_THRESHOLD, \"end_user_apdex_threshold\": BROWSER_APDEX_THRESHOLD, \"enable_real_user_monitoring\": BOOLEAN } } }' Copy This is the equivalent of using the APM UI to change the displayed app name. This will not change the app identifier name under which your data will be collected. It will only change the app name that appears in the New Relic user interface. For more help Additional documentation resources include: Getting started with the New Relic REST API (v2) (overview of the New Relic REST API, including the structure of an API call) Using the API Explorer (using the API Explorer's UI to get data in and data out of New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.05104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "sections": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": " is the same as the name used in the agent configuration file. Changing the alias does not affect the agent&#x27;s configured name, and data still reports using that name. Set <em>application</em> alias and modify Apdex thresholds To change the alias for the app name from the New Relic <em>REST</em> <em>API</em> (<em>v2</em>), use this command"
      },
      "id": "603ed66c28ccbc230feba7a9"
    },
    {
      "sections": [
        "Get average throughput for an app (v2)",
        "Web app throughput",
        "Web app throughput (single host)",
        "Non-web app throughput",
        "Non-web app throughput (single host)",
        "For more help"
      ],
      "title": "Get average throughput for an app (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "69213d0faede1c54abe3ab51a41b506fd27427bc",
      "image": "https://docs.newrelic.com/static/8f3717e1b97fa8027a5db9ecca408b7f/6c1e7/Web_app_throughput.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2/",
      "published_at": "2021-09-13T18:45:40Z",
      "updated_at": "2021-03-16T08:13:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average throughput for your app, including web application and non-web application throughput. These values appear in the Throughput chart on your app's APM Summary page: Go to one.newrelic.com > APM > (select an app). Click the app's Transaction time chart title, then select your choice. Web app throughput To find the average web application throughput value for a time period, use a single command to get the metric HttpDispatcher:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=HttpDispatcher&values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range, include from and to values. To keep the default time period of the last 30 minutes, omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Web app throughput (single host) To find the average throughput from a single host, for a given time period, use a single command to get the metric HttpDispatcher:requests_per_minute, and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=HttpDispatcher&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy Non-web app throughput To find the average non-web application throughput value for a given time period, use a single command to get the metric OtherTransaction/all:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=OtherTransaction/all&values[]=requests_per_minute&;from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range (as shown in this example), include from and to values. To keep the default time period (last 30 minutes), omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart for a non-web app on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Non-web app throughput (single host) To obtain the average throughput for a non-web app from a single host, for a given time period, use a single command to obtain the metric OtherTransaction:requests_per_minute and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=OtherTransaction/all&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.9426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get average throughput for an app (<em>v2</em>)",
        "sections": "Get average throughput for an app (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average throughput for your app, including web <em>application</em> and non-web <em>application</em> throughput. These values appear in the Throughput chart on your app&#x27;s APM Summary page: Go to one.newrelic.com &gt; APM &gt; (select an app). Click the app"
      },
      "id": "603ec9ba28ccbccf81eba797"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12045,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/average-response-time-examples-v2": [
    {
      "sections": [
        "Change the alias for your application (v2)",
        "Set application alias and modify Apdex thresholds",
        "For more help"
      ],
      "title": "Change the alias for your application (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "e5f896b364a0e6a0f4809fafafa877ac2dc61c7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2/",
      "published_at": "2021-09-13T18:53:57Z",
      "updated_at": "2021-03-16T07:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The application name you see in the New Relic's user interface is a human-readable alias for the primary name assigned in your configuration settings. If you change it, the name of your app is updated everywhere in New Relic One, including APM, browser monitoring, etc. By default, the alias is the same as the name used in the agent configuration file. Changing the alias does not affect the agent's configured name, and data still reports using that name. Set application alias and modify Apdex thresholds To change the alias for the app name from the New Relic REST API (v2), use this command. You can also change the app alias from New Relic's API Explorer by selecting Applications > Update. You will need to supply the ${APPID}, ${API_KEY}, and the alias name you want the application to be displayed as in the New Relic UI. You must also provide APP_APDEX_THRESHOLD, BROWSER_APDEX_THRESHOLD, and the monitoring enabled BOOLEAN (true or false) even if they are not being modified. curl -X PUT \"https://api.newrelic.com/v2/applications/${APPID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -H 'Content-Type: application/json' \\ -d \\ '{ \"application\": { \"name\": \"name\", \"settings\": { \"app_apdex_threshold\": APP_APDEX_THRESHOLD, \"end_user_apdex_threshold\": BROWSER_APDEX_THRESHOLD, \"enable_real_user_monitoring\": BOOLEAN } } }' Copy This is the equivalent of using the APM UI to change the displayed app name. This will not change the app identifier name under which your data will be collected. It will only change the app name that appears in the New Relic user interface. For more help Additional documentation resources include: Getting started with the New Relic REST API (v2) (overview of the New Relic REST API, including the structure of an API call) Using the API Explorer (using the API Explorer's UI to get data in and data out of New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.05104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "sections": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": " is the same as the name used in the agent configuration file. Changing the alias does not affect the agent&#x27;s configured name, and data still reports using that name. Set <em>application</em> alias and modify Apdex thresholds To change the alias for the app name from the New Relic <em>REST</em> <em>API</em> (<em>v2</em>), use this command"
      },
      "id": "603ed66c28ccbc230feba7a9"
    },
    {
      "sections": [
        "Get average throughput for an app (v2)",
        "Web app throughput",
        "Web app throughput (single host)",
        "Non-web app throughput",
        "Non-web app throughput (single host)",
        "For more help"
      ],
      "title": "Get average throughput for an app (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "69213d0faede1c54abe3ab51a41b506fd27427bc",
      "image": "https://docs.newrelic.com/static/8f3717e1b97fa8027a5db9ecca408b7f/6c1e7/Web_app_throughput.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2/",
      "published_at": "2021-09-13T18:45:40Z",
      "updated_at": "2021-03-16T08:13:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average throughput for your app, including web application and non-web application throughput. These values appear in the Throughput chart on your app's APM Summary page: Go to one.newrelic.com > APM > (select an app). Click the app's Transaction time chart title, then select your choice. Web app throughput To find the average web application throughput value for a time period, use a single command to get the metric HttpDispatcher:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=HttpDispatcher&values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range, include from and to values. To keep the default time period of the last 30 minutes, omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Web app throughput (single host) To find the average throughput from a single host, for a given time period, use a single command to get the metric HttpDispatcher:requests_per_minute, and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=HttpDispatcher&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy Non-web app throughput To find the average non-web application throughput value for a given time period, use a single command to get the metric OtherTransaction/all:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=OtherTransaction/all&values[]=requests_per_minute&;from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range (as shown in this example), include from and to values. To keep the default time period (last 30 minutes), omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart for a non-web app on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Non-web app throughput (single host) To obtain the average throughput for a non-web app from a single host, for a given time period, use a single command to obtain the metric OtherTransaction:requests_per_minute and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=OtherTransaction/all&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.9426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get average throughput for an app (<em>v2</em>)",
        "sections": "Get average throughput for an app (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average throughput for your app, including web <em>application</em> and non-web <em>application</em> throughput. These values appear in the Throughput chart on your app&#x27;s APM Summary page: Go to one.newrelic.com &gt; APM &gt; (select an app). Click the app"
      },
      "id": "603ec9ba28ccbccf81eba797"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12045,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2": [
    {
      "sections": [
        "Get average throughput for an app (v2)",
        "Web app throughput",
        "Web app throughput (single host)",
        "Non-web app throughput",
        "Non-web app throughput (single host)",
        "For more help"
      ],
      "title": "Get average throughput for an app (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "69213d0faede1c54abe3ab51a41b506fd27427bc",
      "image": "https://docs.newrelic.com/static/8f3717e1b97fa8027a5db9ecca408b7f/6c1e7/Web_app_throughput.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2/",
      "published_at": "2021-09-13T18:45:40Z",
      "updated_at": "2021-03-16T08:13:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average throughput for your app, including web application and non-web application throughput. These values appear in the Throughput chart on your app's APM Summary page: Go to one.newrelic.com > APM > (select an app). Click the app's Transaction time chart title, then select your choice. Web app throughput To find the average web application throughput value for a time period, use a single command to get the metric HttpDispatcher:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=HttpDispatcher&values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range, include from and to values. To keep the default time period of the last 30 minutes, omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Web app throughput (single host) To find the average throughput from a single host, for a given time period, use a single command to get the metric HttpDispatcher:requests_per_minute, and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=HttpDispatcher&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy Non-web app throughput To find the average non-web application throughput value for a given time period, use a single command to get the metric OtherTransaction/all:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=OtherTransaction/all&values[]=requests_per_minute&;from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range (as shown in this example), include from and to values. To keep the default time period (last 30 minutes), omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart for a non-web app on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Non-web app throughput (single host) To obtain the average throughput for a non-web app from a single host, for a given time period, use a single command to obtain the metric OtherTransaction:requests_per_minute and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=OtherTransaction/all&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.9426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get average throughput for an app (<em>v2</em>)",
        "sections": "Get average throughput for an app (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average throughput for your app, including web <em>application</em> and non-web <em>application</em> throughput. These values appear in the Throughput chart on your app&#x27;s APM Summary page: Go to one.newrelic.com &gt; APM &gt; (select an app). Click the app"
      },
      "id": "603ec9ba28ccbccf81eba797"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12045,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    },
    {
      "sections": [
        "List an app's host IDs and instance IDs",
        "List current IDs by application name",
        "List current IDs by application ID",
        "List current IDs for all applications",
        "Example host ID and instance ID lists"
      ],
      "title": "List an app's host IDs and instance IDs",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "0c646e1047e58f0296ad791b965b314fd1ed9554",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/list-apps-host-ids-instance-ids/",
      "published_at": "2021-09-13T18:43:40Z",
      "updated_at": "2021-03-13T07:32:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are examples of how to use the New Relic REST API (v2) to get the list of instance IDs and host IDs for an application. The list shows any that have reported for approximately the last hour. List current IDs by application name You can also use the REST API Explorer's Applications > List to list the ID details. Enter the correct application name. To list all the instance and host IDs reporting in the last hour with an application name containing ${APP_NAME}, use the following command. This provides the current Summary data followed by the ID lists for instances and hosts for the applications with ${APP_NAME} in their name, in the account associated with the ${API_KEY}. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d \"filter[name]=${APP_NAME}\" Copy List current IDs by application ID You can also use the REST API Explorer's Applications > List or Applications > List to list the ID details. Enter the correct application name. To list all the IDs reporting in the last hour when you know the application's ${APP_ID}, use this command: curl -X GET \"https://api.newrelic.com/v2/applications/${APP_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy You can also use filter[id]: curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d \"filter[id]=${APP_ID}\" Copy List current IDs for all applications You can also use the REST API Explorer's Applications > List or Applications > List to list the ID details. Enter the correct application name. For all the applications, list all the instance IDs and host IDs reporting in the last hour by using the following command. This provides the current summary data followed by the ID lists for instances and hosts for all the applications in the account associated with the ${API_KEY}. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Example host ID and instance ID lists Here is an example of how the lists of IDs appear in JSON format: ... }, \"links\": { \"application_instances\": [ <---<<<< {INSTANCE_ID} list 21790, 24810, 27948, 35120, 35121, 35122, 186288, 247253, 247254, 247255, 247256 ], \"application_hosts\": [ <---<<<< {HOST_ID} list 21788, 24808, 34966, 186283, 247245, 286551 ] } } ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 190.88545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "List current IDs by <em>application</em> name",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "Here are <em>examples</em> of how to use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to get the list of instance IDs and host IDs for an <em>application</em>. The list shows any that have reported for approximately the last hour. List current IDs by <em>application</em> name You can also use the <em>REST</em> <em>API</em> Explorer&#x27;s Applications &gt; List"
      },
      "id": "604405fee7b9d26edb5799c4"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/get-average-cpu-usage-host-app": [
    {
      "sections": [
        "Change the alias for your application (v2)",
        "Set application alias and modify Apdex thresholds",
        "For more help"
      ],
      "title": "Change the alias for your application (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "e5f896b364a0e6a0f4809fafafa877ac2dc61c7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2/",
      "published_at": "2021-09-13T18:53:57Z",
      "updated_at": "2021-03-16T07:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The application name you see in the New Relic's user interface is a human-readable alias for the primary name assigned in your configuration settings. If you change it, the name of your app is updated everywhere in New Relic One, including APM, browser monitoring, etc. By default, the alias is the same as the name used in the agent configuration file. Changing the alias does not affect the agent's configured name, and data still reports using that name. Set application alias and modify Apdex thresholds To change the alias for the app name from the New Relic REST API (v2), use this command. You can also change the app alias from New Relic's API Explorer by selecting Applications > Update. You will need to supply the ${APPID}, ${API_KEY}, and the alias name you want the application to be displayed as in the New Relic UI. You must also provide APP_APDEX_THRESHOLD, BROWSER_APDEX_THRESHOLD, and the monitoring enabled BOOLEAN (true or false) even if they are not being modified. curl -X PUT \"https://api.newrelic.com/v2/applications/${APPID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -H 'Content-Type: application/json' \\ -d \\ '{ \"application\": { \"name\": \"name\", \"settings\": { \"app_apdex_threshold\": APP_APDEX_THRESHOLD, \"end_user_apdex_threshold\": BROWSER_APDEX_THRESHOLD, \"enable_real_user_monitoring\": BOOLEAN } } }' Copy This is the equivalent of using the APM UI to change the displayed app name. This will not change the app identifier name under which your data will be collected. It will only change the app name that appears in the New Relic user interface. For more help Additional documentation resources include: Getting started with the New Relic REST API (v2) (overview of the New Relic REST API, including the structure of an API call) Using the API Explorer (using the API Explorer's UI to get data in and data out of New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.05104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "sections": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": " is the same as the name used in the agent configuration file. Changing the alias does not affect the agent&#x27;s configured name, and data still reports using that name. Set <em>application</em> alias and modify Apdex thresholds To change the alias for the app name from the New Relic <em>REST</em> <em>API</em> (<em>v2</em>), use this command"
      },
      "id": "603ed66c28ccbc230feba7a9"
    },
    {
      "sections": [
        "Get average throughput for an app (v2)",
        "Web app throughput",
        "Web app throughput (single host)",
        "Non-web app throughput",
        "Non-web app throughput (single host)",
        "For more help"
      ],
      "title": "Get average throughput for an app (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "69213d0faede1c54abe3ab51a41b506fd27427bc",
      "image": "https://docs.newrelic.com/static/8f3717e1b97fa8027a5db9ecca408b7f/6c1e7/Web_app_throughput.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2/",
      "published_at": "2021-09-13T18:45:40Z",
      "updated_at": "2021-03-16T08:13:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average throughput for your app, including web application and non-web application throughput. These values appear in the Throughput chart on your app's APM Summary page: Go to one.newrelic.com > APM > (select an app). Click the app's Transaction time chart title, then select your choice. Web app throughput To find the average web application throughput value for a time period, use a single command to get the metric HttpDispatcher:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=HttpDispatcher&values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range, include from and to values. To keep the default time period of the last 30 minutes, omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Web app throughput (single host) To find the average throughput from a single host, for a given time period, use a single command to get the metric HttpDispatcher:requests_per_minute, and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=HttpDispatcher&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy Non-web app throughput To find the average non-web application throughput value for a given time period, use a single command to get the metric OtherTransaction/all:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=OtherTransaction/all&values[]=requests_per_minute&;from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range (as shown in this example), include from and to values. To keep the default time period (last 30 minutes), omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart for a non-web app on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Non-web app throughput (single host) To obtain the average throughput for a non-web app from a single host, for a given time period, use a single command to obtain the metric OtherTransaction:requests_per_minute and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=OtherTransaction/all&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.9426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get average throughput for an app (<em>v2</em>)",
        "sections": "Get average throughput for an app (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average throughput for your app, including web <em>application</em> and non-web <em>application</em> throughput. These values appear in the Throughput chart on your app&#x27;s APM Summary page: Go to one.newrelic.com &gt; APM &gt; (select an app). Click the app"
      },
      "id": "603ec9ba28ccbccf81eba797"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12045,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2": [
    {
      "sections": [
        "Change the alias for your application (v2)",
        "Set application alias and modify Apdex thresholds",
        "For more help"
      ],
      "title": "Change the alias for your application (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "e5f896b364a0e6a0f4809fafafa877ac2dc61c7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2/",
      "published_at": "2021-09-13T18:53:57Z",
      "updated_at": "2021-03-16T07:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The application name you see in the New Relic's user interface is a human-readable alias for the primary name assigned in your configuration settings. If you change it, the name of your app is updated everywhere in New Relic One, including APM, browser monitoring, etc. By default, the alias is the same as the name used in the agent configuration file. Changing the alias does not affect the agent's configured name, and data still reports using that name. Set application alias and modify Apdex thresholds To change the alias for the app name from the New Relic REST API (v2), use this command. You can also change the app alias from New Relic's API Explorer by selecting Applications > Update. You will need to supply the ${APPID}, ${API_KEY}, and the alias name you want the application to be displayed as in the New Relic UI. You must also provide APP_APDEX_THRESHOLD, BROWSER_APDEX_THRESHOLD, and the monitoring enabled BOOLEAN (true or false) even if they are not being modified. curl -X PUT \"https://api.newrelic.com/v2/applications/${APPID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -H 'Content-Type: application/json' \\ -d \\ '{ \"application\": { \"name\": \"name\", \"settings\": { \"app_apdex_threshold\": APP_APDEX_THRESHOLD, \"end_user_apdex_threshold\": BROWSER_APDEX_THRESHOLD, \"enable_real_user_monitoring\": BOOLEAN } } }' Copy This is the equivalent of using the APM UI to change the displayed app name. This will not change the app identifier name under which your data will be collected. It will only change the app name that appears in the New Relic user interface. For more help Additional documentation resources include: Getting started with the New Relic REST API (v2) (overview of the New Relic REST API, including the structure of an API call) Using the API Explorer (using the API Explorer's UI to get data in and data out of New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.05104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "sections": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": " is the same as the name used in the agent configuration file. Changing the alias does not affect the agent&#x27;s configured name, and data still reports using that name. Set <em>application</em> alias and modify Apdex thresholds To change the alias for the app name from the New Relic <em>REST</em> <em>API</em> (<em>v2</em>), use this command"
      },
      "id": "603ed66c28ccbc230feba7a9"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    },
    {
      "sections": [
        "List an app's host IDs and instance IDs",
        "List current IDs by application name",
        "List current IDs by application ID",
        "List current IDs for all applications",
        "Example host ID and instance ID lists"
      ],
      "title": "List an app's host IDs and instance IDs",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "0c646e1047e58f0296ad791b965b314fd1ed9554",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/list-apps-host-ids-instance-ids/",
      "published_at": "2021-09-13T18:43:40Z",
      "updated_at": "2021-03-13T07:32:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are examples of how to use the New Relic REST API (v2) to get the list of instance IDs and host IDs for an application. The list shows any that have reported for approximately the last hour. List current IDs by application name You can also use the REST API Explorer's Applications > List to list the ID details. Enter the correct application name. To list all the instance and host IDs reporting in the last hour with an application name containing ${APP_NAME}, use the following command. This provides the current Summary data followed by the ID lists for instances and hosts for the applications with ${APP_NAME} in their name, in the account associated with the ${API_KEY}. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d \"filter[name]=${APP_NAME}\" Copy List current IDs by application ID You can also use the REST API Explorer's Applications > List or Applications > List to list the ID details. Enter the correct application name. To list all the IDs reporting in the last hour when you know the application's ${APP_ID}, use this command: curl -X GET \"https://api.newrelic.com/v2/applications/${APP_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy You can also use filter[id]: curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d \"filter[id]=${APP_ID}\" Copy List current IDs for all applications You can also use the REST API Explorer's Applications > List or Applications > List to list the ID details. Enter the correct application name. For all the applications, list all the instance IDs and host IDs reporting in the last hour by using the following command. This provides the current summary data followed by the ID lists for instances and hosts for all the applications in the account associated with the ${API_KEY}. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Example host ID and instance ID lists Here is an example of how the lists of IDs appear in JSON format: ... }, \"links\": { \"application_instances\": [ <---<<<< {INSTANCE_ID} list 21790, 24810, 27948, 35120, 35121, 35122, 186288, 247253, 247254, 247255, 247256 ], \"application_hosts\": [ <---<<<< {HOST_ID} list 21788, 24808, 34966, 186283, 247245, 286551 ] } } ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 190.88545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "List current IDs by <em>application</em> name",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "Here are <em>examples</em> of how to use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to get the list of instance IDs and host IDs for an <em>application</em>. The list shows any that have reported for approximately the last hour. List current IDs by <em>application</em> name You can also use the <em>REST</em> <em>API</em> Explorer&#x27;s Applications &gt; List"
      },
      "id": "604405fee7b9d26edb5799c4"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/get-host-memory-used-application": [
    {
      "sections": [
        "Change the alias for your application (v2)",
        "Set application alias and modify Apdex thresholds",
        "For more help"
      ],
      "title": "Change the alias for your application (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "e5f896b364a0e6a0f4809fafafa877ac2dc61c7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2/",
      "published_at": "2021-09-13T18:53:57Z",
      "updated_at": "2021-03-16T07:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The application name you see in the New Relic's user interface is a human-readable alias for the primary name assigned in your configuration settings. If you change it, the name of your app is updated everywhere in New Relic One, including APM, browser monitoring, etc. By default, the alias is the same as the name used in the agent configuration file. Changing the alias does not affect the agent's configured name, and data still reports using that name. Set application alias and modify Apdex thresholds To change the alias for the app name from the New Relic REST API (v2), use this command. You can also change the app alias from New Relic's API Explorer by selecting Applications > Update. You will need to supply the ${APPID}, ${API_KEY}, and the alias name you want the application to be displayed as in the New Relic UI. You must also provide APP_APDEX_THRESHOLD, BROWSER_APDEX_THRESHOLD, and the monitoring enabled BOOLEAN (true or false) even if they are not being modified. curl -X PUT \"https://api.newrelic.com/v2/applications/${APPID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -H 'Content-Type: application/json' \\ -d \\ '{ \"application\": { \"name\": \"name\", \"settings\": { \"app_apdex_threshold\": APP_APDEX_THRESHOLD, \"end_user_apdex_threshold\": BROWSER_APDEX_THRESHOLD, \"enable_real_user_monitoring\": BOOLEAN } } }' Copy This is the equivalent of using the APM UI to change the displayed app name. This will not change the app identifier name under which your data will be collected. It will only change the app name that appears in the New Relic user interface. For more help Additional documentation resources include: Getting started with the New Relic REST API (v2) (overview of the New Relic REST API, including the structure of an API call) Using the API Explorer (using the API Explorer's UI to get data in and data out of New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.05104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "sections": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": " is the same as the name used in the agent configuration file. Changing the alias does not affect the agent&#x27;s configured name, and data still reports using that name. Set <em>application</em> alias and modify Apdex thresholds To change the alias for the app name from the New Relic <em>REST</em> <em>API</em> (<em>v2</em>), use this command"
      },
      "id": "603ed66c28ccbc230feba7a9"
    },
    {
      "sections": [
        "Get average throughput for an app (v2)",
        "Web app throughput",
        "Web app throughput (single host)",
        "Non-web app throughput",
        "Non-web app throughput (single host)",
        "For more help"
      ],
      "title": "Get average throughput for an app (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "69213d0faede1c54abe3ab51a41b506fd27427bc",
      "image": "https://docs.newrelic.com/static/8f3717e1b97fa8027a5db9ecca408b7f/6c1e7/Web_app_throughput.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2/",
      "published_at": "2021-09-13T18:45:40Z",
      "updated_at": "2021-03-16T08:13:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average throughput for your app, including web application and non-web application throughput. These values appear in the Throughput chart on your app's APM Summary page: Go to one.newrelic.com > APM > (select an app). Click the app's Transaction time chart title, then select your choice. Web app throughput To find the average web application throughput value for a time period, use a single command to get the metric HttpDispatcher:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=HttpDispatcher&values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range, include from and to values. To keep the default time period of the last 30 minutes, omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Web app throughput (single host) To find the average throughput from a single host, for a given time period, use a single command to get the metric HttpDispatcher:requests_per_minute, and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=HttpDispatcher&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy Non-web app throughput To find the average non-web application throughput value for a given time period, use a single command to get the metric OtherTransaction/all:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=OtherTransaction/all&values[]=requests_per_minute&;from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range (as shown in this example), include from and to values. To keep the default time period (last 30 minutes), omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart for a non-web app on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Non-web app throughput (single host) To obtain the average throughput for a non-web app from a single host, for a given time period, use a single command to obtain the metric OtherTransaction:requests_per_minute and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=OtherTransaction/all&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.9426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get average throughput for an app (<em>v2</em>)",
        "sections": "Get average throughput for an app (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average throughput for your app, including web <em>application</em> and non-web <em>application</em> throughput. These values appear in the Throughput chart on your app&#x27;s APM Summary page: Go to one.newrelic.com &gt; APM &gt; (select an app). Click the app"
      },
      "id": "603ec9ba28ccbccf81eba797"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/get-web-transaction-time-data-v2": [
    {
      "sections": [
        "Change the alias for your application (v2)",
        "Set application alias and modify Apdex thresholds",
        "For more help"
      ],
      "title": "Change the alias for your application (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "e5f896b364a0e6a0f4809fafafa877ac2dc61c7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2/",
      "published_at": "2021-09-13T18:53:57Z",
      "updated_at": "2021-03-16T07:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The application name you see in the New Relic's user interface is a human-readable alias for the primary name assigned in your configuration settings. If you change it, the name of your app is updated everywhere in New Relic One, including APM, browser monitoring, etc. By default, the alias is the same as the name used in the agent configuration file. Changing the alias does not affect the agent's configured name, and data still reports using that name. Set application alias and modify Apdex thresholds To change the alias for the app name from the New Relic REST API (v2), use this command. You can also change the app alias from New Relic's API Explorer by selecting Applications > Update. You will need to supply the ${APPID}, ${API_KEY}, and the alias name you want the application to be displayed as in the New Relic UI. You must also provide APP_APDEX_THRESHOLD, BROWSER_APDEX_THRESHOLD, and the monitoring enabled BOOLEAN (true or false) even if they are not being modified. curl -X PUT \"https://api.newrelic.com/v2/applications/${APPID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -H 'Content-Type: application/json' \\ -d \\ '{ \"application\": { \"name\": \"name\", \"settings\": { \"app_apdex_threshold\": APP_APDEX_THRESHOLD, \"end_user_apdex_threshold\": BROWSER_APDEX_THRESHOLD, \"enable_real_user_monitoring\": BOOLEAN } } }' Copy This is the equivalent of using the APM UI to change the displayed app name. This will not change the app identifier name under which your data will be collected. It will only change the app name that appears in the New Relic user interface. For more help Additional documentation resources include: Getting started with the New Relic REST API (v2) (overview of the New Relic REST API, including the structure of an API call) Using the API Explorer (using the API Explorer's UI to get data in and data out of New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.05104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "sections": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": " is the same as the name used in the agent configuration file. Changing the alias does not affect the agent&#x27;s configured name, and data still reports using that name. Set <em>application</em> alias and modify Apdex thresholds To change the alias for the app name from the New Relic <em>REST</em> <em>API</em> (<em>v2</em>), use this command"
      },
      "id": "603ed66c28ccbc230feba7a9"
    },
    {
      "sections": [
        "Get average throughput for an app (v2)",
        "Web app throughput",
        "Web app throughput (single host)",
        "Non-web app throughput",
        "Non-web app throughput (single host)",
        "For more help"
      ],
      "title": "Get average throughput for an app (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "69213d0faede1c54abe3ab51a41b506fd27427bc",
      "image": "https://docs.newrelic.com/static/8f3717e1b97fa8027a5db9ecca408b7f/6c1e7/Web_app_throughput.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2/",
      "published_at": "2021-09-13T18:45:40Z",
      "updated_at": "2021-03-16T08:13:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average throughput for your app, including web application and non-web application throughput. These values appear in the Throughput chart on your app's APM Summary page: Go to one.newrelic.com > APM > (select an app). Click the app's Transaction time chart title, then select your choice. Web app throughput To find the average web application throughput value for a time period, use a single command to get the metric HttpDispatcher:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=HttpDispatcher&values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range, include from and to values. To keep the default time period of the last 30 minutes, omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Web app throughput (single host) To find the average throughput from a single host, for a given time period, use a single command to get the metric HttpDispatcher:requests_per_minute, and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=HttpDispatcher&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy Non-web app throughput To find the average non-web application throughput value for a given time period, use a single command to get the metric OtherTransaction/all:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=OtherTransaction/all&values[]=requests_per_minute&;from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range (as shown in this example), include from and to values. To keep the default time period (last 30 minutes), omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart for a non-web app on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Non-web app throughput (single host) To obtain the average throughput for a non-web app from a single host, for a given time period, use a single command to obtain the metric OtherTransaction:requests_per_minute and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=OtherTransaction/all&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.9426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get average throughput for an app (<em>v2</em>)",
        "sections": "Get average throughput for an app (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average throughput for your app, including web <em>application</em> and non-web <em>application</em> throughput. These values appear in the Throughput chart on your app&#x27;s APM Summary page: Go to one.newrelic.com &gt; APM &gt; (select an app). Click the app"
      },
      "id": "603ec9ba28ccbccf81eba797"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/getting-apdex-data-apps-or-browsers-v2": [
    {
      "sections": [
        "Change the alias for your application (v2)",
        "Set application alias and modify Apdex thresholds",
        "For more help"
      ],
      "title": "Change the alias for your application (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "e5f896b364a0e6a0f4809fafafa877ac2dc61c7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2/",
      "published_at": "2021-09-13T18:53:57Z",
      "updated_at": "2021-03-16T07:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The application name you see in the New Relic's user interface is a human-readable alias for the primary name assigned in your configuration settings. If you change it, the name of your app is updated everywhere in New Relic One, including APM, browser monitoring, etc. By default, the alias is the same as the name used in the agent configuration file. Changing the alias does not affect the agent's configured name, and data still reports using that name. Set application alias and modify Apdex thresholds To change the alias for the app name from the New Relic REST API (v2), use this command. You can also change the app alias from New Relic's API Explorer by selecting Applications > Update. You will need to supply the ${APPID}, ${API_KEY}, and the alias name you want the application to be displayed as in the New Relic UI. You must also provide APP_APDEX_THRESHOLD, BROWSER_APDEX_THRESHOLD, and the monitoring enabled BOOLEAN (true or false) even if they are not being modified. curl -X PUT \"https://api.newrelic.com/v2/applications/${APPID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -H 'Content-Type: application/json' \\ -d \\ '{ \"application\": { \"name\": \"name\", \"settings\": { \"app_apdex_threshold\": APP_APDEX_THRESHOLD, \"end_user_apdex_threshold\": BROWSER_APDEX_THRESHOLD, \"enable_real_user_monitoring\": BOOLEAN } } }' Copy This is the equivalent of using the APM UI to change the displayed app name. This will not change the app identifier name under which your data will be collected. It will only change the app name that appears in the New Relic user interface. For more help Additional documentation resources include: Getting started with the New Relic REST API (v2) (overview of the New Relic REST API, including the structure of an API call) Using the API Explorer (using the API Explorer's UI to get data in and data out of New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.05104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "sections": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": " is the same as the name used in the agent configuration file. Changing the alias does not affect the agent&#x27;s configured name, and data still reports using that name. Set <em>application</em> alias and modify Apdex thresholds To change the alias for the app name from the New Relic <em>REST</em> <em>API</em> (<em>v2</em>), use this command"
      },
      "id": "603ed66c28ccbc230feba7a9"
    },
    {
      "sections": [
        "Get average throughput for an app (v2)",
        "Web app throughput",
        "Web app throughput (single host)",
        "Non-web app throughput",
        "Non-web app throughput (single host)",
        "For more help"
      ],
      "title": "Get average throughput for an app (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "69213d0faede1c54abe3ab51a41b506fd27427bc",
      "image": "https://docs.newrelic.com/static/8f3717e1b97fa8027a5db9ecca408b7f/6c1e7/Web_app_throughput.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2/",
      "published_at": "2021-09-13T18:45:40Z",
      "updated_at": "2021-03-16T08:13:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average throughput for your app, including web application and non-web application throughput. These values appear in the Throughput chart on your app's APM Summary page: Go to one.newrelic.com > APM > (select an app). Click the app's Transaction time chart title, then select your choice. Web app throughput To find the average web application throughput value for a time period, use a single command to get the metric HttpDispatcher:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=HttpDispatcher&values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range, include from and to values. To keep the default time period of the last 30 minutes, omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Web app throughput (single host) To find the average throughput from a single host, for a given time period, use a single command to get the metric HttpDispatcher:requests_per_minute, and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=HttpDispatcher&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy Non-web app throughput To find the average non-web application throughput value for a given time period, use a single command to get the metric OtherTransaction/all:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=OtherTransaction/all&values[]=requests_per_minute&;from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range (as shown in this example), include from and to values. To keep the default time period (last 30 minutes), omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart for a non-web app on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Non-web app throughput (single host) To obtain the average throughput for a non-web app from a single host, for a given time period, use a single command to obtain the metric OtherTransaction:requests_per_minute and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=OtherTransaction/all&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.9426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get average throughput for an app (<em>v2</em>)",
        "sections": "Get average throughput for an app (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average throughput for your app, including web <em>application</em> and non-web <em>application</em> throughput. These values appear in the Throughput chart on your app&#x27;s APM Summary page: Go to one.newrelic.com &gt; APM &gt; (select an app). Click the app"
      },
      "id": "603ec9ba28ccbccf81eba797"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/list-apps-host-ids-instance-ids": [
    {
      "sections": [
        "Change the alias for your application (v2)",
        "Set application alias and modify Apdex thresholds",
        "For more help"
      ],
      "title": "Change the alias for your application (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "e5f896b364a0e6a0f4809fafafa877ac2dc61c7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2/",
      "published_at": "2021-09-13T18:53:57Z",
      "updated_at": "2021-03-16T07:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The application name you see in the New Relic's user interface is a human-readable alias for the primary name assigned in your configuration settings. If you change it, the name of your app is updated everywhere in New Relic One, including APM, browser monitoring, etc. By default, the alias is the same as the name used in the agent configuration file. Changing the alias does not affect the agent's configured name, and data still reports using that name. Set application alias and modify Apdex thresholds To change the alias for the app name from the New Relic REST API (v2), use this command. You can also change the app alias from New Relic's API Explorer by selecting Applications > Update. You will need to supply the ${APPID}, ${API_KEY}, and the alias name you want the application to be displayed as in the New Relic UI. You must also provide APP_APDEX_THRESHOLD, BROWSER_APDEX_THRESHOLD, and the monitoring enabled BOOLEAN (true or false) even if they are not being modified. curl -X PUT \"https://api.newrelic.com/v2/applications/${APPID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -H 'Content-Type: application/json' \\ -d \\ '{ \"application\": { \"name\": \"name\", \"settings\": { \"app_apdex_threshold\": APP_APDEX_THRESHOLD, \"end_user_apdex_threshold\": BROWSER_APDEX_THRESHOLD, \"enable_real_user_monitoring\": BOOLEAN } } }' Copy This is the equivalent of using the APM UI to change the displayed app name. This will not change the app identifier name under which your data will be collected. It will only change the app name that appears in the New Relic user interface. For more help Additional documentation resources include: Getting started with the New Relic REST API (v2) (overview of the New Relic REST API, including the structure of an API call) Using the API Explorer (using the API Explorer's UI to get data in and data out of New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.05104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "sections": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": " is the same as the name used in the agent configuration file. Changing the alias does not affect the agent&#x27;s configured name, and data still reports using that name. Set <em>application</em> alias and modify Apdex thresholds To change the alias for the app name from the New Relic <em>REST</em> <em>API</em> (<em>v2</em>), use this command"
      },
      "id": "603ed66c28ccbc230feba7a9"
    },
    {
      "sections": [
        "Get average throughput for an app (v2)",
        "Web app throughput",
        "Web app throughput (single host)",
        "Non-web app throughput",
        "Non-web app throughput (single host)",
        "For more help"
      ],
      "title": "Get average throughput for an app (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "69213d0faede1c54abe3ab51a41b506fd27427bc",
      "image": "https://docs.newrelic.com/static/8f3717e1b97fa8027a5db9ecca408b7f/6c1e7/Web_app_throughput.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2/",
      "published_at": "2021-09-13T18:45:40Z",
      "updated_at": "2021-03-16T08:13:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average throughput for your app, including web application and non-web application throughput. These values appear in the Throughput chart on your app's APM Summary page: Go to one.newrelic.com > APM > (select an app). Click the app's Transaction time chart title, then select your choice. Web app throughput To find the average web application throughput value for a time period, use a single command to get the metric HttpDispatcher:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=HttpDispatcher&values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range, include from and to values. To keep the default time period of the last 30 minutes, omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Web app throughput (single host) To find the average throughput from a single host, for a given time period, use a single command to get the metric HttpDispatcher:requests_per_minute, and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=HttpDispatcher&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy Non-web app throughput To find the average non-web application throughput value for a given time period, use a single command to get the metric OtherTransaction/all:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=OtherTransaction/all&values[]=requests_per_minute&;from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range (as shown in this example), include from and to values. To keep the default time period (last 30 minutes), omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart for a non-web app on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Non-web app throughput (single host) To obtain the average throughput for a non-web app from a single host, for a given time period, use a single command to obtain the metric OtherTransaction:requests_per_minute and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=OtherTransaction/all&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.9426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get average throughput for an app (<em>v2</em>)",
        "sections": "Get average throughput for an app (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average throughput for your app, including web <em>application</em> and non-web <em>application</em> throughput. These values appear in the Throughput chart on your app&#x27;s APM Summary page: Go to one.newrelic.com &gt; APM &gt; (select an app). Click the app"
      },
      "id": "603ec9ba28ccbccf81eba797"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/list-your-app-id-metric-timeslice-data-v2": [
    {
      "sections": [
        "Change the alias for your application (v2)",
        "Set application alias and modify Apdex thresholds",
        "For more help"
      ],
      "title": "Change the alias for your application (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "e5f896b364a0e6a0f4809fafafa877ac2dc61c7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2/",
      "published_at": "2021-09-13T18:53:57Z",
      "updated_at": "2021-03-16T07:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The application name you see in the New Relic's user interface is a human-readable alias for the primary name assigned in your configuration settings. If you change it, the name of your app is updated everywhere in New Relic One, including APM, browser monitoring, etc. By default, the alias is the same as the name used in the agent configuration file. Changing the alias does not affect the agent's configured name, and data still reports using that name. Set application alias and modify Apdex thresholds To change the alias for the app name from the New Relic REST API (v2), use this command. You can also change the app alias from New Relic's API Explorer by selecting Applications > Update. You will need to supply the ${APPID}, ${API_KEY}, and the alias name you want the application to be displayed as in the New Relic UI. You must also provide APP_APDEX_THRESHOLD, BROWSER_APDEX_THRESHOLD, and the monitoring enabled BOOLEAN (true or false) even if they are not being modified. curl -X PUT \"https://api.newrelic.com/v2/applications/${APPID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -H 'Content-Type: application/json' \\ -d \\ '{ \"application\": { \"name\": \"name\", \"settings\": { \"app_apdex_threshold\": APP_APDEX_THRESHOLD, \"end_user_apdex_threshold\": BROWSER_APDEX_THRESHOLD, \"enable_real_user_monitoring\": BOOLEAN } } }' Copy This is the equivalent of using the APM UI to change the displayed app name. This will not change the app identifier name under which your data will be collected. It will only change the app name that appears in the New Relic user interface. For more help Additional documentation resources include: Getting started with the New Relic REST API (v2) (overview of the New Relic REST API, including the structure of an API call) Using the API Explorer (using the API Explorer's UI to get data in and data out of New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.05104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "sections": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": " is the same as the name used in the agent configuration file. Changing the alias does not affect the agent&#x27;s configured name, and data still reports using that name. Set <em>application</em> alias and modify Apdex thresholds To change the alias for the app name from the New Relic <em>REST</em> <em>API</em> (<em>v2</em>), use this command"
      },
      "id": "603ed66c28ccbc230feba7a9"
    },
    {
      "sections": [
        "Get average throughput for an app (v2)",
        "Web app throughput",
        "Web app throughput (single host)",
        "Non-web app throughput",
        "Non-web app throughput (single host)",
        "For more help"
      ],
      "title": "Get average throughput for an app (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "69213d0faede1c54abe3ab51a41b506fd27427bc",
      "image": "https://docs.newrelic.com/static/8f3717e1b97fa8027a5db9ecca408b7f/6c1e7/Web_app_throughput.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2/",
      "published_at": "2021-09-13T18:45:40Z",
      "updated_at": "2021-03-16T08:13:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average throughput for your app, including web application and non-web application throughput. These values appear in the Throughput chart on your app's APM Summary page: Go to one.newrelic.com > APM > (select an app). Click the app's Transaction time chart title, then select your choice. Web app throughput To find the average web application throughput value for a time period, use a single command to get the metric HttpDispatcher:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=HttpDispatcher&values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range, include from and to values. To keep the default time period of the last 30 minutes, omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Web app throughput (single host) To find the average throughput from a single host, for a given time period, use a single command to get the metric HttpDispatcher:requests_per_minute, and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=HttpDispatcher&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy Non-web app throughput To find the average non-web application throughput value for a given time period, use a single command to get the metric OtherTransaction/all:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=OtherTransaction/all&values[]=requests_per_minute&;from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range (as shown in this example), include from and to values. To keep the default time period (last 30 minutes), omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart for a non-web app on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Non-web app throughput (single host) To obtain the average throughput for a non-web app from a single host, for a given time period, use a single command to obtain the metric OtherTransaction:requests_per_minute and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=OtherTransaction/all&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.9426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get average throughput for an app (<em>v2</em>)",
        "sections": "Get average throughput for an app (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average throughput for your app, including web <em>application</em> and non-web <em>application</em> throughput. These values appear in the Throughput chart on your app&#x27;s APM Summary page: Go to one.newrelic.com &gt; APM &gt; (select an app). Click the app"
      },
      "id": "603ec9ba28ccbccf81eba797"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/application-examples-v2/summary-data-examples-v2": [
    {
      "sections": [
        "Change the alias for your application (v2)",
        "Set application alias and modify Apdex thresholds",
        "For more help"
      ],
      "title": "Change the alias for your application (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "e5f896b364a0e6a0f4809fafafa877ac2dc61c7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/change-alias-your-application-v2/",
      "published_at": "2021-09-13T18:53:57Z",
      "updated_at": "2021-03-16T07:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The application name you see in the New Relic's user interface is a human-readable alias for the primary name assigned in your configuration settings. If you change it, the name of your app is updated everywhere in New Relic One, including APM, browser monitoring, etc. By default, the alias is the same as the name used in the agent configuration file. Changing the alias does not affect the agent's configured name, and data still reports using that name. Set application alias and modify Apdex thresholds To change the alias for the app name from the New Relic REST API (v2), use this command. You can also change the app alias from New Relic's API Explorer by selecting Applications > Update. You will need to supply the ${APPID}, ${API_KEY}, and the alias name you want the application to be displayed as in the New Relic UI. You must also provide APP_APDEX_THRESHOLD, BROWSER_APDEX_THRESHOLD, and the monitoring enabled BOOLEAN (true or false) even if they are not being modified. curl -X PUT \"https://api.newrelic.com/v2/applications/${APPID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -H 'Content-Type: application/json' \\ -d \\ '{ \"application\": { \"name\": \"name\", \"settings\": { \"app_apdex_threshold\": APP_APDEX_THRESHOLD, \"end_user_apdex_threshold\": BROWSER_APDEX_THRESHOLD, \"enable_real_user_monitoring\": BOOLEAN } } }' Copy This is the equivalent of using the APM UI to change the displayed app name. This will not change the app identifier name under which your data will be collected. It will only change the app name that appears in the New Relic user interface. For more help Additional documentation resources include: Getting started with the New Relic REST API (v2) (overview of the New Relic REST API, including the structure of an API call) Using the API Explorer (using the API Explorer's UI to get data in and data out of New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.05104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "sections": "Change the alias for your <em>application</em> (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": " is the same as the name used in the agent configuration file. Changing the alias does not affect the agent&#x27;s configured name, and data still reports using that name. Set <em>application</em> alias and modify Apdex thresholds To change the alias for the app name from the New Relic <em>REST</em> <em>API</em> (<em>v2</em>), use this command"
      },
      "id": "603ed66c28ccbc230feba7a9"
    },
    {
      "sections": [
        "Get average throughput for an app (v2)",
        "Web app throughput",
        "Web app throughput (single host)",
        "Non-web app throughput",
        "Non-web app throughput (single host)",
        "For more help"
      ],
      "title": "Get average throughput for an app (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Application examples (v2)"
      ],
      "external_id": "69213d0faede1c54abe3ab51a41b506fd27427bc",
      "image": "https://docs.newrelic.com/static/8f3717e1b97fa8027a5db9ecca408b7f/6c1e7/Web_app_throughput.png",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/application-examples-v2/get-average-throughput-app-v2/",
      "published_at": "2021-09-13T18:45:40Z",
      "updated_at": "2021-03-16T08:13:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use the New Relic REST API (v2) to obtain the average throughput for your app, including web application and non-web application throughput. These values appear in the Throughput chart on your app's APM Summary page: Go to one.newrelic.com > APM > (select an app). Click the app's Transaction time chart title, then select your choice. Web app throughput To find the average web application throughput value for a time period, use a single command to get the metric HttpDispatcher:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=HttpDispatcher&values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range, include from and to values. To keep the default time period of the last 30 minutes, omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Web app throughput (single host) To find the average throughput from a single host, for a given time period, use a single command to get the metric HttpDispatcher:requests_per_minute, and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=HttpDispatcher&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy Non-web app throughput To find the average non-web application throughput value for a given time period, use a single command to get the metric OtherTransaction/all:requests_per_minute. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'names[]=OtherTransaction/all&values[]=requests_per_minute&;from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&summarize=true' Copy Be sure to replace $ { APPID} and $ { APIKEY} with your application ID and API key for the account. To change the time range (as shown in this example), include from and to values. To keep the default time period (last 30 minutes), omit the from and to values. To return a series of throughput values instead of an average, omit summarize. Here is an example of the Throughput chart for a non-web app on the APM Summary page. You can use the New Relic REST API (v2) to return the average Throughput value that appears here. Non-web app throughput (single host) To obtain the average throughput for a non-web app from a single host, for a given time period, use a single command to obtain the metric OtherTransaction:requests_per_minute and specify the numeric $ { HOST}. To identify the host, use the UI or the REST API. This example shows the time range for a specific 24 hour period. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/hosts/${HOST}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\     -d 'names[]=OtherTransaction/all&:values[]=requests_per_minute&from=2014-02-21T23:59:00+00:00&to=2014-02-22T23:59:00+00:00&:summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.9426,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get average throughput for an app (<em>v2</em>)",
        "sections": "Get average throughput for an app (<em>v2</em>)",
        "tags": "<em>Application</em> <em>examples</em> (<em>v2</em>)",
        "body": "You can use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the average throughput for your app, including web <em>application</em> and non-web <em>application</em> throughput. These values appear in the Throughput chart on your app&#x27;s APM Summary page: Go to one.newrelic.com &gt; APM &gt; (select an app). Click the app"
      },
      "id": "603ec9ba28ccbccf81eba797"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.12044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate <em>example</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "&#x27; facet appVersionId since 1 day ago export const _frontmatter = {&quot;title&quot;:&quot;Mobile crash count and crash rate example (<em>v2</em>)&quot;,&quot;tags&quot;:[&quot;<em>APIs</em>&quot;,&quot;<em>REST</em> <em>API</em> <em>v2</em>&quot;,&quot;Mobile <em>examples</em> (<em>v2</em>)&quot;],&quot;metaDescription&quot;:&quot;How to use New Relic&#x27;s <em>REST</em> <em>API</em> (<em>v2</em>) to get crash count and crash rate data for the overall mobile app or a specific version.&quot;,&quot;redirects&quot;:[&quot;&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>rest</em>-<em>api</em>-<em>v2</em>&#x2F;<em>application</em>-<em>examples</em>-<em>v2</em>&#x2F;mobile-crash-count-crash-rate-example-<em>v2</em>&quot;]} Copy"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/basic-functions/api-overload-protection-handling-429-errors": [
    {
      "sections": [
        "Pagination for API output",
        "Requirements and limitations",
        "Important",
        "Request a specific page",
        "Link header examples showing page count",
        "Tip",
        "Example: Return 3 pages"
      ],
      "title": "Pagination for API output",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "e53248f738396172abad2740144738488b9f1c1e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/pagination-api-output/",
      "published_at": "2021-09-13T18:50:52Z",
      "updated_at": "2021-03-13T05:36:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic REST API (v2) paginates some responses, for performance reasons. This is because returning the entire data set might be feasible for some queries but prohibitive for others that return a very large amount of data. Requirements and limitations Metric data return: Pagination is no longer available for metrics output for some customers (deprecation beginning December 2020). Returns up to 3000 results per cell. For large outputs, we recommend narrowing the query using application ID or another attribute. The sort order for returned data is indeterminate. Do not assume or rely on a particular order. The data returned per page depends on what data is requested. The number of pages depends on the number of JSON objects necessary to complete the list. Important Before listing metric names, see Metric name listing guidelines. Request a specific page To specify a page, add the page= parameter to the query. Here's an example: curl -X GET 'https://api.newrelic.com/v2/alerts_incidents.json?page=3' \\ -H 'Api-Key:$API_KEY' -i Copy In the REST API Explorer, you can quickly change the page being viewed. Link header examples showing page count The API call returns the Link header if the data is paginated. This indicates the number of pages and the page being viewed. This line also appears at the top of the Response in the REST API Explorer. Important The Link header will only appear if the output data is paginated. Tip The rel=\"last\" reference will not be shown when making calls to the Violations endpoint (https://api.newrelic.com/v2/alerts_violations.json). To determine the final page when making calls to this endpoint, look for the absence of a rel=\"next\" reference. To obtain this line using some implementations of curl, you may need to include the -v option. curl -v -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/...' Copy New Relic uses the RFC 5988 standard format for links. Example: Return 3 pages The API output will contain a Link line similar to this. Lines are wrapped to improve readability. Link: <https://api.newrelic.com/v2/alert_policies.xml?page=2>;rel=\"next\", <https://api.newrelic.com/v2/alert_policies.xml?page=3>;rel=\"last\" Copy This indicates there are three pages and you are viewing the first one. Parameter Description ...page=2>;rel=\"next\" Page 2 is the next page ...page=3>;rel=\"last\" Page 3 is the last page",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.22063,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Pagination for <em>API</em> output",
        "sections": "Pagination for <em>API</em> output",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "The New Relic <em>REST</em> <em>API</em> (<em>v2</em>) paginates some responses, for performance reasons. This is because returning the entire data set might be feasible for some queries but prohibitive for others that return a very large amount of data. Requirements and limitations Metric data return: Pagination"
      },
      "id": "604406cf28ccbce7b02c60ab"
    },
    {
      "sections": [
        "Set a custom user agent",
        "Prerequisites",
        "User agents",
        "Set a user agent",
        "Tip",
        "Set custom user-agent for your integration",
        "User agent strings and New Relic"
      ],
      "title": "Set a custom user agent",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "9135fbe2a8dc7c5b4ccbfb20c28af858ef81cdf8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/set-custom-user-agent/",
      "published_at": "2021-09-13T18:51:32Z",
      "updated_at": "2021-03-13T05:48:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure that New Relic correctly identifies API integration publishers, each integration needs a unique custom user agent string. If you are only using your integration internally, and don't plan on sharing it with anyone outside your organization, you don't need to set a unique custom agent string. Prerequisites This document assumes you plan to publicly distribute an integration that makes use of any of New Relic's public RESTful APIs. Examples of public distribution include: Publicizing your integration code on Github. Packaging your integration into a plugin, extension, or other package, and distributing it via a directory like WordPress Plugins. Offering an \"as a service\" integration between your product and New Relic, without actually distributing your integration code, like Runscope's integration. User agents When writing applications to work with New Relic's RESTful APIs (referred to as an integration in this document), you are creating an HTTP agent to manage information exchange between your application and New Relic. An integration identifies itself by submitting a standard identification string. In HTTP this string is included in the header field User-Agent. When using New Relic's RESTful APIs, set a User-Agent header that identifies your integration in API calls. This custom User-Agent string allows New Relic to identify the integration that is making requests to New Relic's APIs. By setting a custom user agent, New Relic can track: Usage statistics for your integration. Potentially buggy or abusive API usage. Set a user agent To set a custom user agent, include an agent string in the HTTP header User-Agent. Examples: Language Example cURL curl -H 'User-Agent: my-integration/1.2.3' Copy Java (using GET) get.setHeader(\"User-Agent\", \"my-integration/1.2.3\"); Copy PHP header('User-Agent: my-integration/1.2.3'); Copy The minimum user agent string is the integration name and version: name/version. You can string together multiple values in a space-separated list. The full syntax is: name/version [(comments)] [name/version [(comments)]] [...]​ Copy For the integration name, use a string that clearly and meaningfully identifies your integration. Ambiguous name: New Relic Integration Clear and meaningful name: SaaS XYZTools Integration with New Relic For the integration version, use a build ID, commit hash, or other identifier that is updated when you release new integration versions. Wrap comments in parentheses () as a semi-colon separated list; Helpful comments to include: The publicly-accessible URL of your integration. For instance, a Github URL, or a page in your docs site that describes the integration. Contact information so that New Relic can easily reach the integration publisher. Tip Information from the user agent string will never be shared, nor used by New Relic for any purpose other than discussing the integration with its publisher. Set custom user-agent for your integration You have an integration with the following identifying information: Name: MetricMeter Version: 3.2 URL: meter.me/info Contact: help@meter.me The custom user agent string would be: MetricMeter for New Relic/3.2 (meter.me/info; help​@​meter.me) Copy User agent strings and New Relic New Relic captures user agent strings from API calls to identify their source. Using custom user agent strings for publicly-available integration is a recommended best practice. Depending on your business relationship with New Relic, it may be required. Labeling your integration with a custom user agent string does not affect its interaction with New Relic's APIs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.18071,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " using New Relic&#x27;s RESTful <em>APIs</em>, set a User-Agent header that identifies your integration in <em>API</em> calls. This custom User-Agent string allows New Relic to identify the integration that is making requests to New Relic&#x27;s <em>APIs</em>. By setting a custom user agent, New Relic can track: Usage statistics for your"
      },
      "id": "6044070d196a67ce36960f5c"
    },
    {
      "sections": [
        "Specify a time range (v2)",
        "Change the default 30 minute time range",
        "Tip",
        "Offset UTC",
        "This API call shows a time zone east of UTC by 2 hours (-02:00)",
        "This API call shows a time zone west of UTC by +8 hours (%2B08:00)"
      ],
      "title": "Specify a time range (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "77aec38cd1f565f3a461cfd9401f337cda0936b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/specify-time-range-v2/",
      "published_at": "2021-09-13T20:08:38Z",
      "updated_at": "2021-03-16T08:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can specify a time range for the data to be returned in a New Relic REST API call. You can also request to return an average over the time range instead of the series of values returned by default. Change the default 30 minute time range The default time range for an API call is the last 30 minutes. To modify the time range, include from= and optional to= values. (To end the time range at the current time, omit to=.) Tip Data availability is subject to the data retention policy for your subscription level. Example: curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00+00:00&to=2014-08-11T15:12:00+00:00' Copy The time period returned for each data point depends on the time range you specify. To modify the time period, include the period parameter in your query. If you are using the New Relic REST API Explorer (v2), you can use the diamond icon to select time ranges. If you have an EU region account, the above URL begins with https://api.eu.newrelic.com. Offset UTC By default the API time input uses Universal Time Coordinated (UTC). To offset the UTC, use plus or minus 00:00 in your API call. This allows you to input times in a different time zone; however, this does not modify the output times, which are always UTC. For time zones east of UTC, use a minus sign (-). This symbol has no special meaning in HTTP or HTTPS requests. For time zones west of UTC, use the encoded value %2B to indicate a plus sign (+). If you have an EU region account, the following URLs begin with https://api.eu.newrelic.com. This API call shows a time zone east of UTC by 2 hours (-02:00) curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00 -02:00 &to=2014-08-11T15:12:00 -02:00 ' Copy This API call shows a time zone west of UTC by +8 hours (%2B08:00) curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00 %2B08:00 &to=2014-08-11T15:12:00 %2B08:00 Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.26935,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Specify a time range (<em>v2</em>)",
        "sections": "This <em>API</em> call shows a time zone east of UTC by <em>2</em> hours (-02:00)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". If you are using the New Relic <em>REST</em> <em>API</em> Explorer (<em>v2</em>), you can use the diamond icon to select time ranges. If you have an EU region account, the above URL begins with https:&#x2F;&#x2F;<em>api</em>.eu.newrelic.com. Offset UTC By default the <em>API</em> time input uses Universal Time Coordinated (UTC). To offset the UTC, use"
      },
      "id": "603ece55196a67561ba83dc2"
    }
  ],
  "/docs/apis/rest-api-v2/basic-functions/calculate-average-metric-values-summarize": [
    {
      "sections": [
        "Pagination for API output",
        "Requirements and limitations",
        "Important",
        "Request a specific page",
        "Link header examples showing page count",
        "Tip",
        "Example: Return 3 pages"
      ],
      "title": "Pagination for API output",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "e53248f738396172abad2740144738488b9f1c1e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/pagination-api-output/",
      "published_at": "2021-09-13T18:50:52Z",
      "updated_at": "2021-03-13T05:36:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic REST API (v2) paginates some responses, for performance reasons. This is because returning the entire data set might be feasible for some queries but prohibitive for others that return a very large amount of data. Requirements and limitations Metric data return: Pagination is no longer available for metrics output for some customers (deprecation beginning December 2020). Returns up to 3000 results per cell. For large outputs, we recommend narrowing the query using application ID or another attribute. The sort order for returned data is indeterminate. Do not assume or rely on a particular order. The data returned per page depends on what data is requested. The number of pages depends on the number of JSON objects necessary to complete the list. Important Before listing metric names, see Metric name listing guidelines. Request a specific page To specify a page, add the page= parameter to the query. Here's an example: curl -X GET 'https://api.newrelic.com/v2/alerts_incidents.json?page=3' \\ -H 'Api-Key:$API_KEY' -i Copy In the REST API Explorer, you can quickly change the page being viewed. Link header examples showing page count The API call returns the Link header if the data is paginated. This indicates the number of pages and the page being viewed. This line also appears at the top of the Response in the REST API Explorer. Important The Link header will only appear if the output data is paginated. Tip The rel=\"last\" reference will not be shown when making calls to the Violations endpoint (https://api.newrelic.com/v2/alerts_violations.json). To determine the final page when making calls to this endpoint, look for the absence of a rel=\"next\" reference. To obtain this line using some implementations of curl, you may need to include the -v option. curl -v -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/...' Copy New Relic uses the RFC 5988 standard format for links. Example: Return 3 pages The API output will contain a Link line similar to this. Lines are wrapped to improve readability. Link: <https://api.newrelic.com/v2/alert_policies.xml?page=2>;rel=\"next\", <https://api.newrelic.com/v2/alert_policies.xml?page=3>;rel=\"last\" Copy This indicates there are three pages and you are viewing the first one. Parameter Description ...page=2>;rel=\"next\" Page 2 is the next page ...page=3>;rel=\"last\" Page 3 is the last page",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.22063,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Pagination for <em>API</em> output",
        "sections": "Pagination for <em>API</em> output",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "The New Relic <em>REST</em> <em>API</em> (<em>v2</em>) paginates some responses, for performance reasons. This is because returning the entire data set might be feasible for some queries but prohibitive for others that return a very large amount of data. Requirements and limitations Metric data return: Pagination"
      },
      "id": "604406cf28ccbce7b02c60ab"
    },
    {
      "sections": [
        "Set a custom user agent",
        "Prerequisites",
        "User agents",
        "Set a user agent",
        "Tip",
        "Set custom user-agent for your integration",
        "User agent strings and New Relic"
      ],
      "title": "Set a custom user agent",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "9135fbe2a8dc7c5b4ccbfb20c28af858ef81cdf8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/set-custom-user-agent/",
      "published_at": "2021-09-13T18:51:32Z",
      "updated_at": "2021-03-13T05:48:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure that New Relic correctly identifies API integration publishers, each integration needs a unique custom user agent string. If you are only using your integration internally, and don't plan on sharing it with anyone outside your organization, you don't need to set a unique custom agent string. Prerequisites This document assumes you plan to publicly distribute an integration that makes use of any of New Relic's public RESTful APIs. Examples of public distribution include: Publicizing your integration code on Github. Packaging your integration into a plugin, extension, or other package, and distributing it via a directory like WordPress Plugins. Offering an \"as a service\" integration between your product and New Relic, without actually distributing your integration code, like Runscope's integration. User agents When writing applications to work with New Relic's RESTful APIs (referred to as an integration in this document), you are creating an HTTP agent to manage information exchange between your application and New Relic. An integration identifies itself by submitting a standard identification string. In HTTP this string is included in the header field User-Agent. When using New Relic's RESTful APIs, set a User-Agent header that identifies your integration in API calls. This custom User-Agent string allows New Relic to identify the integration that is making requests to New Relic's APIs. By setting a custom user agent, New Relic can track: Usage statistics for your integration. Potentially buggy or abusive API usage. Set a user agent To set a custom user agent, include an agent string in the HTTP header User-Agent. Examples: Language Example cURL curl -H 'User-Agent: my-integration/1.2.3' Copy Java (using GET) get.setHeader(\"User-Agent\", \"my-integration/1.2.3\"); Copy PHP header('User-Agent: my-integration/1.2.3'); Copy The minimum user agent string is the integration name and version: name/version. You can string together multiple values in a space-separated list. The full syntax is: name/version [(comments)] [name/version [(comments)]] [...]​ Copy For the integration name, use a string that clearly and meaningfully identifies your integration. Ambiguous name: New Relic Integration Clear and meaningful name: SaaS XYZTools Integration with New Relic For the integration version, use a build ID, commit hash, or other identifier that is updated when you release new integration versions. Wrap comments in parentheses () as a semi-colon separated list; Helpful comments to include: The publicly-accessible URL of your integration. For instance, a Github URL, or a page in your docs site that describes the integration. Contact information so that New Relic can easily reach the integration publisher. Tip Information from the user agent string will never be shared, nor used by New Relic for any purpose other than discussing the integration with its publisher. Set custom user-agent for your integration You have an integration with the following identifying information: Name: MetricMeter Version: 3.2 URL: meter.me/info Contact: help@meter.me The custom user agent string would be: MetricMeter for New Relic/3.2 (meter.me/info; help​@​meter.me) Copy User agent strings and New Relic New Relic captures user agent strings from API calls to identify their source. Using custom user agent strings for publicly-available integration is a recommended best practice. Depending on your business relationship with New Relic, it may be required. Labeling your integration with a custom user agent string does not affect its interaction with New Relic's APIs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.18071,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " using New Relic&#x27;s RESTful <em>APIs</em>, set a User-Agent header that identifies your integration in <em>API</em> calls. This custom User-Agent string allows New Relic to identify the integration that is making requests to New Relic&#x27;s <em>APIs</em>. By setting a custom user agent, New Relic can track: Usage statistics for your"
      },
      "id": "6044070d196a67ce36960f5c"
    },
    {
      "sections": [
        "Specify a time range (v2)",
        "Change the default 30 minute time range",
        "Tip",
        "Offset UTC",
        "This API call shows a time zone east of UTC by 2 hours (-02:00)",
        "This API call shows a time zone west of UTC by +8 hours (%2B08:00)"
      ],
      "title": "Specify a time range (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "77aec38cd1f565f3a461cfd9401f337cda0936b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/specify-time-range-v2/",
      "published_at": "2021-09-13T20:08:38Z",
      "updated_at": "2021-03-16T08:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can specify a time range for the data to be returned in a New Relic REST API call. You can also request to return an average over the time range instead of the series of values returned by default. Change the default 30 minute time range The default time range for an API call is the last 30 minutes. To modify the time range, include from= and optional to= values. (To end the time range at the current time, omit to=.) Tip Data availability is subject to the data retention policy for your subscription level. Example: curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00+00:00&to=2014-08-11T15:12:00+00:00' Copy The time period returned for each data point depends on the time range you specify. To modify the time period, include the period parameter in your query. If you are using the New Relic REST API Explorer (v2), you can use the diamond icon to select time ranges. If you have an EU region account, the above URL begins with https://api.eu.newrelic.com. Offset UTC By default the API time input uses Universal Time Coordinated (UTC). To offset the UTC, use plus or minus 00:00 in your API call. This allows you to input times in a different time zone; however, this does not modify the output times, which are always UTC. For time zones east of UTC, use a minus sign (-). This symbol has no special meaning in HTTP or HTTPS requests. For time zones west of UTC, use the encoded value %2B to indicate a plus sign (+). If you have an EU region account, the following URLs begin with https://api.eu.newrelic.com. This API call shows a time zone east of UTC by 2 hours (-02:00) curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00 -02:00 &to=2014-08-11T15:12:00 -02:00 ' Copy This API call shows a time zone west of UTC by +8 hours (%2B08:00) curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00 %2B08:00 &to=2014-08-11T15:12:00 %2B08:00 Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.26935,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Specify a time range (<em>v2</em>)",
        "sections": "This <em>API</em> call shows a time zone east of UTC by <em>2</em> hours (-02:00)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". If you are using the New Relic <em>REST</em> <em>API</em> Explorer (<em>v2</em>), you can use the diamond icon to select time ranges. If you have an EU region account, the above URL begins with https:&#x2F;&#x2F;<em>api</em>.eu.newrelic.com. Offset UTC By default the <em>API</em> time input uses Universal Time Coordinated (UTC). To offset the UTC, use"
      },
      "id": "603ece55196a67561ba83dc2"
    }
  ],
  "/docs/apis/rest-api-v2/basic-functions/extract-metric-timeslice-data": [
    {
      "sections": [
        "Pagination for API output",
        "Requirements and limitations",
        "Important",
        "Request a specific page",
        "Link header examples showing page count",
        "Tip",
        "Example: Return 3 pages"
      ],
      "title": "Pagination for API output",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "e53248f738396172abad2740144738488b9f1c1e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/pagination-api-output/",
      "published_at": "2021-09-13T18:50:52Z",
      "updated_at": "2021-03-13T05:36:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic REST API (v2) paginates some responses, for performance reasons. This is because returning the entire data set might be feasible for some queries but prohibitive for others that return a very large amount of data. Requirements and limitations Metric data return: Pagination is no longer available for metrics output for some customers (deprecation beginning December 2020). Returns up to 3000 results per cell. For large outputs, we recommend narrowing the query using application ID or another attribute. The sort order for returned data is indeterminate. Do not assume or rely on a particular order. The data returned per page depends on what data is requested. The number of pages depends on the number of JSON objects necessary to complete the list. Important Before listing metric names, see Metric name listing guidelines. Request a specific page To specify a page, add the page= parameter to the query. Here's an example: curl -X GET 'https://api.newrelic.com/v2/alerts_incidents.json?page=3' \\ -H 'Api-Key:$API_KEY' -i Copy In the REST API Explorer, you can quickly change the page being viewed. Link header examples showing page count The API call returns the Link header if the data is paginated. This indicates the number of pages and the page being viewed. This line also appears at the top of the Response in the REST API Explorer. Important The Link header will only appear if the output data is paginated. Tip The rel=\"last\" reference will not be shown when making calls to the Violations endpoint (https://api.newrelic.com/v2/alerts_violations.json). To determine the final page when making calls to this endpoint, look for the absence of a rel=\"next\" reference. To obtain this line using some implementations of curl, you may need to include the -v option. curl -v -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/...' Copy New Relic uses the RFC 5988 standard format for links. Example: Return 3 pages The API output will contain a Link line similar to this. Lines are wrapped to improve readability. Link: <https://api.newrelic.com/v2/alert_policies.xml?page=2>;rel=\"next\", <https://api.newrelic.com/v2/alert_policies.xml?page=3>;rel=\"last\" Copy This indicates there are three pages and you are viewing the first one. Parameter Description ...page=2>;rel=\"next\" Page 2 is the next page ...page=3>;rel=\"last\" Page 3 is the last page",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.22063,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Pagination for <em>API</em> output",
        "sections": "Pagination for <em>API</em> output",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "The New Relic <em>REST</em> <em>API</em> (<em>v2</em>) paginates some responses, for performance reasons. This is because returning the entire data set might be feasible for some queries but prohibitive for others that return a very large amount of data. Requirements and limitations Metric data return: Pagination"
      },
      "id": "604406cf28ccbce7b02c60ab"
    },
    {
      "sections": [
        "Set a custom user agent",
        "Prerequisites",
        "User agents",
        "Set a user agent",
        "Tip",
        "Set custom user-agent for your integration",
        "User agent strings and New Relic"
      ],
      "title": "Set a custom user agent",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "9135fbe2a8dc7c5b4ccbfb20c28af858ef81cdf8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/set-custom-user-agent/",
      "published_at": "2021-09-13T18:51:32Z",
      "updated_at": "2021-03-13T05:48:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure that New Relic correctly identifies API integration publishers, each integration needs a unique custom user agent string. If you are only using your integration internally, and don't plan on sharing it with anyone outside your organization, you don't need to set a unique custom agent string. Prerequisites This document assumes you plan to publicly distribute an integration that makes use of any of New Relic's public RESTful APIs. Examples of public distribution include: Publicizing your integration code on Github. Packaging your integration into a plugin, extension, or other package, and distributing it via a directory like WordPress Plugins. Offering an \"as a service\" integration between your product and New Relic, without actually distributing your integration code, like Runscope's integration. User agents When writing applications to work with New Relic's RESTful APIs (referred to as an integration in this document), you are creating an HTTP agent to manage information exchange between your application and New Relic. An integration identifies itself by submitting a standard identification string. In HTTP this string is included in the header field User-Agent. When using New Relic's RESTful APIs, set a User-Agent header that identifies your integration in API calls. This custom User-Agent string allows New Relic to identify the integration that is making requests to New Relic's APIs. By setting a custom user agent, New Relic can track: Usage statistics for your integration. Potentially buggy or abusive API usage. Set a user agent To set a custom user agent, include an agent string in the HTTP header User-Agent. Examples: Language Example cURL curl -H 'User-Agent: my-integration/1.2.3' Copy Java (using GET) get.setHeader(\"User-Agent\", \"my-integration/1.2.3\"); Copy PHP header('User-Agent: my-integration/1.2.3'); Copy The minimum user agent string is the integration name and version: name/version. You can string together multiple values in a space-separated list. The full syntax is: name/version [(comments)] [name/version [(comments)]] [...]​ Copy For the integration name, use a string that clearly and meaningfully identifies your integration. Ambiguous name: New Relic Integration Clear and meaningful name: SaaS XYZTools Integration with New Relic For the integration version, use a build ID, commit hash, or other identifier that is updated when you release new integration versions. Wrap comments in parentheses () as a semi-colon separated list; Helpful comments to include: The publicly-accessible URL of your integration. For instance, a Github URL, or a page in your docs site that describes the integration. Contact information so that New Relic can easily reach the integration publisher. Tip Information from the user agent string will never be shared, nor used by New Relic for any purpose other than discussing the integration with its publisher. Set custom user-agent for your integration You have an integration with the following identifying information: Name: MetricMeter Version: 3.2 URL: meter.me/info Contact: help@meter.me The custom user agent string would be: MetricMeter for New Relic/3.2 (meter.me/info; help​@​meter.me) Copy User agent strings and New Relic New Relic captures user agent strings from API calls to identify their source. Using custom user agent strings for publicly-available integration is a recommended best practice. Depending on your business relationship with New Relic, it may be required. Labeling your integration with a custom user agent string does not affect its interaction with New Relic's APIs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.18071,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " using New Relic&#x27;s RESTful <em>APIs</em>, set a User-Agent header that identifies your integration in <em>API</em> calls. This custom User-Agent string allows New Relic to identify the integration that is making requests to New Relic&#x27;s <em>APIs</em>. By setting a custom user agent, New Relic can track: Usage statistics for your"
      },
      "id": "6044070d196a67ce36960f5c"
    },
    {
      "sections": [
        "Specify a time range (v2)",
        "Change the default 30 minute time range",
        "Tip",
        "Offset UTC",
        "This API call shows a time zone east of UTC by 2 hours (-02:00)",
        "This API call shows a time zone west of UTC by +8 hours (%2B08:00)"
      ],
      "title": "Specify a time range (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "77aec38cd1f565f3a461cfd9401f337cda0936b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/specify-time-range-v2/",
      "published_at": "2021-09-13T20:08:38Z",
      "updated_at": "2021-03-16T08:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can specify a time range for the data to be returned in a New Relic REST API call. You can also request to return an average over the time range instead of the series of values returned by default. Change the default 30 minute time range The default time range for an API call is the last 30 minutes. To modify the time range, include from= and optional to= values. (To end the time range at the current time, omit to=.) Tip Data availability is subject to the data retention policy for your subscription level. Example: curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00+00:00&to=2014-08-11T15:12:00+00:00' Copy The time period returned for each data point depends on the time range you specify. To modify the time period, include the period parameter in your query. If you are using the New Relic REST API Explorer (v2), you can use the diamond icon to select time ranges. If you have an EU region account, the above URL begins with https://api.eu.newrelic.com. Offset UTC By default the API time input uses Universal Time Coordinated (UTC). To offset the UTC, use plus or minus 00:00 in your API call. This allows you to input times in a different time zone; however, this does not modify the output times, which are always UTC. For time zones east of UTC, use a minus sign (-). This symbol has no special meaning in HTTP or HTTPS requests. For time zones west of UTC, use the encoded value %2B to indicate a plus sign (+). If you have an EU region account, the following URLs begin with https://api.eu.newrelic.com. This API call shows a time zone east of UTC by 2 hours (-02:00) curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00 -02:00 &to=2014-08-11T15:12:00 -02:00 ' Copy This API call shows a time zone west of UTC by +8 hours (%2B08:00) curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00 %2B08:00 &to=2014-08-11T15:12:00 %2B08:00 Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.26935,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Specify a time range (<em>v2</em>)",
        "sections": "This <em>API</em> call shows a time zone east of UTC by <em>2</em> hours (-02:00)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". If you are using the New Relic <em>REST</em> <em>API</em> Explorer (<em>v2</em>), you can use the diamond icon to select time ranges. If you have an EU region account, the above URL begins with https:&#x2F;&#x2F;<em>api</em>.eu.newrelic.com. Offset UTC By default the <em>API</em> time input uses Universal Time Coordinated (UTC). To offset the UTC, use"
      },
      "id": "603ece55196a67561ba83dc2"
    }
  ],
  "/docs/apis/rest-api-v2/basic-functions/pagination-api-output": [
    {
      "sections": [
        "Set a custom user agent",
        "Prerequisites",
        "User agents",
        "Set a user agent",
        "Tip",
        "Set custom user-agent for your integration",
        "User agent strings and New Relic"
      ],
      "title": "Set a custom user agent",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "9135fbe2a8dc7c5b4ccbfb20c28af858ef81cdf8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/set-custom-user-agent/",
      "published_at": "2021-09-13T18:51:32Z",
      "updated_at": "2021-03-13T05:48:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure that New Relic correctly identifies API integration publishers, each integration needs a unique custom user agent string. If you are only using your integration internally, and don't plan on sharing it with anyone outside your organization, you don't need to set a unique custom agent string. Prerequisites This document assumes you plan to publicly distribute an integration that makes use of any of New Relic's public RESTful APIs. Examples of public distribution include: Publicizing your integration code on Github. Packaging your integration into a plugin, extension, or other package, and distributing it via a directory like WordPress Plugins. Offering an \"as a service\" integration between your product and New Relic, without actually distributing your integration code, like Runscope's integration. User agents When writing applications to work with New Relic's RESTful APIs (referred to as an integration in this document), you are creating an HTTP agent to manage information exchange between your application and New Relic. An integration identifies itself by submitting a standard identification string. In HTTP this string is included in the header field User-Agent. When using New Relic's RESTful APIs, set a User-Agent header that identifies your integration in API calls. This custom User-Agent string allows New Relic to identify the integration that is making requests to New Relic's APIs. By setting a custom user agent, New Relic can track: Usage statistics for your integration. Potentially buggy or abusive API usage. Set a user agent To set a custom user agent, include an agent string in the HTTP header User-Agent. Examples: Language Example cURL curl -H 'User-Agent: my-integration/1.2.3' Copy Java (using GET) get.setHeader(\"User-Agent\", \"my-integration/1.2.3\"); Copy PHP header('User-Agent: my-integration/1.2.3'); Copy The minimum user agent string is the integration name and version: name/version. You can string together multiple values in a space-separated list. The full syntax is: name/version [(comments)] [name/version [(comments)]] [...]​ Copy For the integration name, use a string that clearly and meaningfully identifies your integration. Ambiguous name: New Relic Integration Clear and meaningful name: SaaS XYZTools Integration with New Relic For the integration version, use a build ID, commit hash, or other identifier that is updated when you release new integration versions. Wrap comments in parentheses () as a semi-colon separated list; Helpful comments to include: The publicly-accessible URL of your integration. For instance, a Github URL, or a page in your docs site that describes the integration. Contact information so that New Relic can easily reach the integration publisher. Tip Information from the user agent string will never be shared, nor used by New Relic for any purpose other than discussing the integration with its publisher. Set custom user-agent for your integration You have an integration with the following identifying information: Name: MetricMeter Version: 3.2 URL: meter.me/info Contact: help@meter.me The custom user agent string would be: MetricMeter for New Relic/3.2 (meter.me/info; help​@​meter.me) Copy User agent strings and New Relic New Relic captures user agent strings from API calls to identify their source. Using custom user agent strings for publicly-available integration is a recommended best practice. Depending on your business relationship with New Relic, it may be required. Labeling your integration with a custom user agent string does not affect its interaction with New Relic's APIs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.18071,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " using New Relic&#x27;s RESTful <em>APIs</em>, set a User-Agent header that identifies your integration in <em>API</em> calls. This custom User-Agent string allows New Relic to identify the integration that is making requests to New Relic&#x27;s <em>APIs</em>. By setting a custom user agent, New Relic can track: Usage statistics for your"
      },
      "id": "6044070d196a67ce36960f5c"
    },
    {
      "sections": [
        "Specify a time range (v2)",
        "Change the default 30 minute time range",
        "Tip",
        "Offset UTC",
        "This API call shows a time zone east of UTC by 2 hours (-02:00)",
        "This API call shows a time zone west of UTC by +8 hours (%2B08:00)"
      ],
      "title": "Specify a time range (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "77aec38cd1f565f3a461cfd9401f337cda0936b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/specify-time-range-v2/",
      "published_at": "2021-09-13T20:08:38Z",
      "updated_at": "2021-03-16T08:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can specify a time range for the data to be returned in a New Relic REST API call. You can also request to return an average over the time range instead of the series of values returned by default. Change the default 30 minute time range The default time range for an API call is the last 30 minutes. To modify the time range, include from= and optional to= values. (To end the time range at the current time, omit to=.) Tip Data availability is subject to the data retention policy for your subscription level. Example: curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00+00:00&to=2014-08-11T15:12:00+00:00' Copy The time period returned for each data point depends on the time range you specify. To modify the time period, include the period parameter in your query. If you are using the New Relic REST API Explorer (v2), you can use the diamond icon to select time ranges. If you have an EU region account, the above URL begins with https://api.eu.newrelic.com. Offset UTC By default the API time input uses Universal Time Coordinated (UTC). To offset the UTC, use plus or minus 00:00 in your API call. This allows you to input times in a different time zone; however, this does not modify the output times, which are always UTC. For time zones east of UTC, use a minus sign (-). This symbol has no special meaning in HTTP or HTTPS requests. For time zones west of UTC, use the encoded value %2B to indicate a plus sign (+). If you have an EU region account, the following URLs begin with https://api.eu.newrelic.com. This API call shows a time zone east of UTC by 2 hours (-02:00) curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00 -02:00 &to=2014-08-11T15:12:00 -02:00 ' Copy This API call shows a time zone west of UTC by +8 hours (%2B08:00) curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00 %2B08:00 &to=2014-08-11T15:12:00 %2B08:00 Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.26935,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Specify a time range (<em>v2</em>)",
        "sections": "This <em>API</em> call shows a time zone east of UTC by <em>2</em> hours (-02:00)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". If you are using the New Relic <em>REST</em> <em>API</em> Explorer (<em>v2</em>), you can use the diamond icon to select time ranges. If you have an EU region account, the above URL begins with https:&#x2F;&#x2F;<em>api</em>.eu.newrelic.com. Offset UTC By default the <em>API</em> time input uses Universal Time Coordinated (UTC). To offset the UTC, use"
      },
      "id": "603ece55196a67561ba83dc2"
    },
    {
      "sections": [
        "Calculate average metric values (summarize)",
        "Tip"
      ],
      "title": "Calculate average metric values (summarize)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "d230a1e1af23ddfdfe0acabdd1308be55c2b1cfe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/calculate-average-metric-values-summarize/",
      "published_at": "2021-09-13T18:37:03Z",
      "updated_at": "2021-03-16T07:09:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "By default, New Relic REST API calls return a series of metric data values based on time range restrictions. To obtain the average of these values, include &summarize=true in your API call. For example: curl -X GET \"https://api.newrelic.com/v2/applications/$APPID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00%2B08:00&to=2014-08-11T15:12:00%2B08:00&summarize=true' Copy If you have an EU region account, the above URL begins with https://api.eu.newrelic.com. Tip To prevent summarizing data, omit summarize in your API call. You do not need to specify &summarize=false.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.26727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Calculate average metric <em>values</em> (summarize)",
        "sections": "Calculate average metric <em>values</em> (summarize)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "By default, New Relic <em>REST</em> <em>API</em> calls return a series of metric data values based on time range restrictions. To obtain the average of these values, include &amp;summarize=true in your <em>API</em> call. For example: curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APPID&#x2F;metrics&#x2F;data.json&quot; \\ -H &quot;<em>Api</em>-Key"
      },
      "id": "603ed423e7b9d2e4032a07b9"
    }
  ],
  "/docs/apis/rest-api-v2/basic-functions/set-custom-user-agent": [
    {
      "sections": [
        "Pagination for API output",
        "Requirements and limitations",
        "Important",
        "Request a specific page",
        "Link header examples showing page count",
        "Tip",
        "Example: Return 3 pages"
      ],
      "title": "Pagination for API output",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "e53248f738396172abad2740144738488b9f1c1e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/pagination-api-output/",
      "published_at": "2021-09-13T18:50:52Z",
      "updated_at": "2021-03-13T05:36:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic REST API (v2) paginates some responses, for performance reasons. This is because returning the entire data set might be feasible for some queries but prohibitive for others that return a very large amount of data. Requirements and limitations Metric data return: Pagination is no longer available for metrics output for some customers (deprecation beginning December 2020). Returns up to 3000 results per cell. For large outputs, we recommend narrowing the query using application ID or another attribute. The sort order for returned data is indeterminate. Do not assume or rely on a particular order. The data returned per page depends on what data is requested. The number of pages depends on the number of JSON objects necessary to complete the list. Important Before listing metric names, see Metric name listing guidelines. Request a specific page To specify a page, add the page= parameter to the query. Here's an example: curl -X GET 'https://api.newrelic.com/v2/alerts_incidents.json?page=3' \\ -H 'Api-Key:$API_KEY' -i Copy In the REST API Explorer, you can quickly change the page being viewed. Link header examples showing page count The API call returns the Link header if the data is paginated. This indicates the number of pages and the page being viewed. This line also appears at the top of the Response in the REST API Explorer. Important The Link header will only appear if the output data is paginated. Tip The rel=\"last\" reference will not be shown when making calls to the Violations endpoint (https://api.newrelic.com/v2/alerts_violations.json). To determine the final page when making calls to this endpoint, look for the absence of a rel=\"next\" reference. To obtain this line using some implementations of curl, you may need to include the -v option. curl -v -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/...' Copy New Relic uses the RFC 5988 standard format for links. Example: Return 3 pages The API output will contain a Link line similar to this. Lines are wrapped to improve readability. Link: <https://api.newrelic.com/v2/alert_policies.xml?page=2>;rel=\"next\", <https://api.newrelic.com/v2/alert_policies.xml?page=3>;rel=\"last\" Copy This indicates there are three pages and you are viewing the first one. Parameter Description ...page=2>;rel=\"next\" Page 2 is the next page ...page=3>;rel=\"last\" Page 3 is the last page",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.22063,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Pagination for <em>API</em> output",
        "sections": "Pagination for <em>API</em> output",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "The New Relic <em>REST</em> <em>API</em> (<em>v2</em>) paginates some responses, for performance reasons. This is because returning the entire data set might be feasible for some queries but prohibitive for others that return a very large amount of data. Requirements and limitations Metric data return: Pagination"
      },
      "id": "604406cf28ccbce7b02c60ab"
    },
    {
      "sections": [
        "Specify a time range (v2)",
        "Change the default 30 minute time range",
        "Tip",
        "Offset UTC",
        "This API call shows a time zone east of UTC by 2 hours (-02:00)",
        "This API call shows a time zone west of UTC by +8 hours (%2B08:00)"
      ],
      "title": "Specify a time range (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "77aec38cd1f565f3a461cfd9401f337cda0936b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/specify-time-range-v2/",
      "published_at": "2021-09-13T20:08:38Z",
      "updated_at": "2021-03-16T08:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can specify a time range for the data to be returned in a New Relic REST API call. You can also request to return an average over the time range instead of the series of values returned by default. Change the default 30 minute time range The default time range for an API call is the last 30 minutes. To modify the time range, include from= and optional to= values. (To end the time range at the current time, omit to=.) Tip Data availability is subject to the data retention policy for your subscription level. Example: curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00+00:00&to=2014-08-11T15:12:00+00:00' Copy The time period returned for each data point depends on the time range you specify. To modify the time period, include the period parameter in your query. If you are using the New Relic REST API Explorer (v2), you can use the diamond icon to select time ranges. If you have an EU region account, the above URL begins with https://api.eu.newrelic.com. Offset UTC By default the API time input uses Universal Time Coordinated (UTC). To offset the UTC, use plus or minus 00:00 in your API call. This allows you to input times in a different time zone; however, this does not modify the output times, which are always UTC. For time zones east of UTC, use a minus sign (-). This symbol has no special meaning in HTTP or HTTPS requests. For time zones west of UTC, use the encoded value %2B to indicate a plus sign (+). If you have an EU region account, the following URLs begin with https://api.eu.newrelic.com. This API call shows a time zone east of UTC by 2 hours (-02:00) curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00 -02:00 &to=2014-08-11T15:12:00 -02:00 ' Copy This API call shows a time zone west of UTC by +8 hours (%2B08:00) curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00 %2B08:00 &to=2014-08-11T15:12:00 %2B08:00 Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.26935,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Specify a time range (<em>v2</em>)",
        "sections": "This <em>API</em> call shows a time zone east of UTC by <em>2</em> hours (-02:00)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". If you are using the New Relic <em>REST</em> <em>API</em> Explorer (<em>v2</em>), you can use the diamond icon to select time ranges. If you have an EU region account, the above URL begins with https:&#x2F;&#x2F;<em>api</em>.eu.newrelic.com. Offset UTC By default the <em>API</em> time input uses Universal Time Coordinated (UTC). To offset the UTC, use"
      },
      "id": "603ece55196a67561ba83dc2"
    },
    {
      "sections": [
        "Calculate average metric values (summarize)",
        "Tip"
      ],
      "title": "Calculate average metric values (summarize)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "d230a1e1af23ddfdfe0acabdd1308be55c2b1cfe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/calculate-average-metric-values-summarize/",
      "published_at": "2021-09-13T18:37:03Z",
      "updated_at": "2021-03-16T07:09:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "By default, New Relic REST API calls return a series of metric data values based on time range restrictions. To obtain the average of these values, include &summarize=true in your API call. For example: curl -X GET \"https://api.newrelic.com/v2/applications/$APPID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00%2B08:00&to=2014-08-11T15:12:00%2B08:00&summarize=true' Copy If you have an EU region account, the above URL begins with https://api.eu.newrelic.com. Tip To prevent summarizing data, omit summarize in your API call. You do not need to specify &summarize=false.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.26727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Calculate average metric <em>values</em> (summarize)",
        "sections": "Calculate average metric <em>values</em> (summarize)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "By default, New Relic <em>REST</em> <em>API</em> calls return a series of metric data values based on time range restrictions. To obtain the average of these values, include &amp;summarize=true in your <em>API</em> call. For example: curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APPID&#x2F;metrics&#x2F;data.json&quot; \\ -H &quot;<em>Api</em>-Key"
      },
      "id": "603ed423e7b9d2e4032a07b9"
    }
  ],
  "/docs/apis/rest-api-v2/basic-functions/specify-time-range-v2": [
    {
      "sections": [
        "Pagination for API output",
        "Requirements and limitations",
        "Important",
        "Request a specific page",
        "Link header examples showing page count",
        "Tip",
        "Example: Return 3 pages"
      ],
      "title": "Pagination for API output",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "e53248f738396172abad2740144738488b9f1c1e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/pagination-api-output/",
      "published_at": "2021-09-13T18:50:52Z",
      "updated_at": "2021-03-13T05:36:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic REST API (v2) paginates some responses, for performance reasons. This is because returning the entire data set might be feasible for some queries but prohibitive for others that return a very large amount of data. Requirements and limitations Metric data return: Pagination is no longer available for metrics output for some customers (deprecation beginning December 2020). Returns up to 3000 results per cell. For large outputs, we recommend narrowing the query using application ID or another attribute. The sort order for returned data is indeterminate. Do not assume or rely on a particular order. The data returned per page depends on what data is requested. The number of pages depends on the number of JSON objects necessary to complete the list. Important Before listing metric names, see Metric name listing guidelines. Request a specific page To specify a page, add the page= parameter to the query. Here's an example: curl -X GET 'https://api.newrelic.com/v2/alerts_incidents.json?page=3' \\ -H 'Api-Key:$API_KEY' -i Copy In the REST API Explorer, you can quickly change the page being viewed. Link header examples showing page count The API call returns the Link header if the data is paginated. This indicates the number of pages and the page being viewed. This line also appears at the top of the Response in the REST API Explorer. Important The Link header will only appear if the output data is paginated. Tip The rel=\"last\" reference will not be shown when making calls to the Violations endpoint (https://api.newrelic.com/v2/alerts_violations.json). To determine the final page when making calls to this endpoint, look for the absence of a rel=\"next\" reference. To obtain this line using some implementations of curl, you may need to include the -v option. curl -v -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/...' Copy New Relic uses the RFC 5988 standard format for links. Example: Return 3 pages The API output will contain a Link line similar to this. Lines are wrapped to improve readability. Link: <https://api.newrelic.com/v2/alert_policies.xml?page=2>;rel=\"next\", <https://api.newrelic.com/v2/alert_policies.xml?page=3>;rel=\"last\" Copy This indicates there are three pages and you are viewing the first one. Parameter Description ...page=2>;rel=\"next\" Page 2 is the next page ...page=3>;rel=\"last\" Page 3 is the last page",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.22063,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Pagination for <em>API</em> output",
        "sections": "Pagination for <em>API</em> output",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "The New Relic <em>REST</em> <em>API</em> (<em>v2</em>) paginates some responses, for performance reasons. This is because returning the entire data set might be feasible for some queries but prohibitive for others that return a very large amount of data. Requirements and limitations Metric data return: Pagination"
      },
      "id": "604406cf28ccbce7b02c60ab"
    },
    {
      "sections": [
        "Set a custom user agent",
        "Prerequisites",
        "User agents",
        "Set a user agent",
        "Tip",
        "Set custom user-agent for your integration",
        "User agent strings and New Relic"
      ],
      "title": "Set a custom user agent",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "9135fbe2a8dc7c5b4ccbfb20c28af858ef81cdf8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/set-custom-user-agent/",
      "published_at": "2021-09-13T18:51:32Z",
      "updated_at": "2021-03-13T05:48:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure that New Relic correctly identifies API integration publishers, each integration needs a unique custom user agent string. If you are only using your integration internally, and don't plan on sharing it with anyone outside your organization, you don't need to set a unique custom agent string. Prerequisites This document assumes you plan to publicly distribute an integration that makes use of any of New Relic's public RESTful APIs. Examples of public distribution include: Publicizing your integration code on Github. Packaging your integration into a plugin, extension, or other package, and distributing it via a directory like WordPress Plugins. Offering an \"as a service\" integration between your product and New Relic, without actually distributing your integration code, like Runscope's integration. User agents When writing applications to work with New Relic's RESTful APIs (referred to as an integration in this document), you are creating an HTTP agent to manage information exchange between your application and New Relic. An integration identifies itself by submitting a standard identification string. In HTTP this string is included in the header field User-Agent. When using New Relic's RESTful APIs, set a User-Agent header that identifies your integration in API calls. This custom User-Agent string allows New Relic to identify the integration that is making requests to New Relic's APIs. By setting a custom user agent, New Relic can track: Usage statistics for your integration. Potentially buggy or abusive API usage. Set a user agent To set a custom user agent, include an agent string in the HTTP header User-Agent. Examples: Language Example cURL curl -H 'User-Agent: my-integration/1.2.3' Copy Java (using GET) get.setHeader(\"User-Agent\", \"my-integration/1.2.3\"); Copy PHP header('User-Agent: my-integration/1.2.3'); Copy The minimum user agent string is the integration name and version: name/version. You can string together multiple values in a space-separated list. The full syntax is: name/version [(comments)] [name/version [(comments)]] [...]​ Copy For the integration name, use a string that clearly and meaningfully identifies your integration. Ambiguous name: New Relic Integration Clear and meaningful name: SaaS XYZTools Integration with New Relic For the integration version, use a build ID, commit hash, or other identifier that is updated when you release new integration versions. Wrap comments in parentheses () as a semi-colon separated list; Helpful comments to include: The publicly-accessible URL of your integration. For instance, a Github URL, or a page in your docs site that describes the integration. Contact information so that New Relic can easily reach the integration publisher. Tip Information from the user agent string will never be shared, nor used by New Relic for any purpose other than discussing the integration with its publisher. Set custom user-agent for your integration You have an integration with the following identifying information: Name: MetricMeter Version: 3.2 URL: meter.me/info Contact: help@meter.me The custom user agent string would be: MetricMeter for New Relic/3.2 (meter.me/info; help​@​meter.me) Copy User agent strings and New Relic New Relic captures user agent strings from API calls to identify their source. Using custom user agent strings for publicly-available integration is a recommended best practice. Depending on your business relationship with New Relic, it may be required. Labeling your integration with a custom user agent string does not affect its interaction with New Relic's APIs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.18071,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " using New Relic&#x27;s RESTful <em>APIs</em>, set a User-Agent header that identifies your integration in <em>API</em> calls. This custom User-Agent string allows New Relic to identify the integration that is making requests to New Relic&#x27;s <em>APIs</em>. By setting a custom user agent, New Relic can track: Usage statistics for your"
      },
      "id": "6044070d196a67ce36960f5c"
    },
    {
      "sections": [
        "Calculate average metric values (summarize)",
        "Tip"
      ],
      "title": "Calculate average metric values (summarize)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Basic functions"
      ],
      "external_id": "d230a1e1af23ddfdfe0acabdd1308be55c2b1cfe",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/basic-functions/calculate-average-metric-values-summarize/",
      "published_at": "2021-09-13T18:37:03Z",
      "updated_at": "2021-03-16T07:09:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "By default, New Relic REST API calls return a series of metric data values based on time range restrictions. To obtain the average of these values, include &summarize=true in your API call. For example: curl -X GET \"https://api.newrelic.com/v2/applications/$APPID/metrics/data.json\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Agent/MetricsReported/count&from=2014-08-11T14:42:00%2B08:00&to=2014-08-11T15:12:00%2B08:00&summarize=true' Copy If you have an EU region account, the above URL begins with https://api.eu.newrelic.com. Tip To prevent summarizing data, omit summarize in your API call. You do not need to specify &summarize=false.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.26727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Calculate average metric <em>values</em> (summarize)",
        "sections": "Calculate average metric <em>values</em> (summarize)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "By default, New Relic <em>REST</em> <em>API</em> calls return a series of metric data values based on time range restrictions. To obtain the average of these values, include &amp;summarize=true in your <em>API</em> call. For example: curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APPID&#x2F;metrics&#x2F;data.json&quot; \\ -H &quot;<em>Api</em>-Key"
      },
      "id": "603ed423e7b9d2e4032a07b9"
    }
  ],
  "/docs/apis/rest-api-v2/browser-examples-v2/add-or-list-browser-apps-api-v2": [
    {
      "sections": [
        "Obtaining browser (end user) page load time data (v2)",
        "General API values",
        "Network time",
        "Page rendering time",
        "DOM processing time",
        "Web application time",
        "Request queuing time"
      ],
      "title": "Obtaining browser (end user) page load time data (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "c0c497cf900d84a9e57a07aba5062003e86506a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/obtaining-browser-end-user-page-load-time-data-v2/",
      "published_at": "2021-09-13T18:51:32Z",
      "updated_at": "2021-07-09T14:40:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The metric timeslice data presented on the Browser page load time chart on your application's Summary page will depend on your web app's configuration. Possible components may include: Network time Page rendering time DOM processing time Web application time Request queuing time This describes how to use the New Relic REST API (v2) to obtain the data shown on the Browser page load time chart. General API values When making your own calculations, be aware of the following: You can change the default time range (30 minutes) used in these examples. For calculated values, the time range you specify must be consistent in all of the queries; otherwise the final calculations will be incorrect. You must replace the ${APPID} and ${API_KEY} variables in these examples with your specific application ID and corresponding REST API key. Ensure you adjust the time units returned by the API requests as needed. Network time The EndUser:average_network_time is the network latency, or time it takes for a request to make a round trip over the Internet. Use the following command to obtain this. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=average_network_time' Copy This time is returned in milliseconds. Page rendering time Page rendering time is a derived value. To calculate it, use this equation: \"Page rendering\" time = EndUser:average_fe_response_time - EndUser/RB:average_dom_content_load_time Copy To obtain the data for this calculation, use the following commands. EndUser:average_fe_response_time curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=average_fe_response_time' Copy This time is returned in milliseconds. EndUser/RB:average_dom_content_load_time curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser/RB&values[]=average_dom_content_load_time' Copy This time is returned in milliseconds. DOM processing time The EndUser/RB:average_dom_content_load_time is the time spent in the browser to parse and interpret the HTML. This is measured by the browser's DOM Content event. To obtain this data, use the following command: curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser/RB&values[]=average_dom_content_load_time' Copy This time is returned in milliseconds. Web application time The Web application time is the time spent in the application code. To calculate this value, use this equation: Web application = EndUser:total_app_time / EndUser:call_count Copy To obtain the data for this calculation, use the following commands. EndUser:total_app_time curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=total_app_time' Copy This time is returned in seconds. EndUser:call_count curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=call_count' Copy Request queuing time The EndUser/RB:average_queue_time is the wait time between the web server and the application code. Large numbers indicate a busy application server. To obtain this data, use the following command: curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser/RB&values[]=average_queue_time' Copy This time is returned in milliseconds. The request queuing time is not included in the calculation of averages. New Relic includes it in this chart as a convenience.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.31354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Obtaining <em>browser</em> (end user) page load time data (<em>v2</em>)",
        "sections": "Obtaining <em>browser</em> (end user) page load time data (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": " to use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the data shown on the <em>Browser</em> page load time chart. General <em>API</em> values When making your own calculations, be aware of the following: You can change the default time range (30 minutes) used in these <em>examples</em>. For calculated values, the time range you"
      },
      "id": "6044070de7b9d2b9f7579a16"
    },
    {
      "sections": [
        "Average browser page load time example (v2)",
        "Average page load time"
      ],
      "title": "Average browser page load time example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "2e2669a368831880e962cdbd39d95d31a98aa253",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/average-browser-page-load-time-example-v2/",
      "published_at": "2021-09-13T22:55:04Z",
      "updated_at": "2021-03-13T03:36:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The average browser page load time (or response time) appears at the top right of the main chart of your Summary page. This value is labeled Browser and shows the average page load time in seconds. Average page load time To obtain the average for the time range (default is last 30 minutes), use the following command. Be sure to replace the ${APP_ID} and ${API_KEY} variables in this example with your specific application ID and REST API key. curl -X GET \"https://api.newrelic.com/v2/applications/${APP_ID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=average_response_time&summarize=true' Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 187.59528,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Average <em>browser</em> page load time <em>example</em> (<em>v2</em>)",
        "sections": "Average <em>browser</em> page load time <em>example</em> (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": " the following command. Be sure to replace the ${APP_ID} and ${<em>API</em>_KEY} variables in this example with your specific application ID and <em>REST</em> <em>API</em> key. curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;${APP_ID}&#x2F;metrics&#x2F;data.json&quot; \\ -H &quot;X-<em>Api</em>-Key:${<em>API</em>_KEY}&quot; -i \\ -d &#x27;names[]=EndUser&amp;values[]=average_response_time&amp;summarize=true&#x27; Copy"
      },
      "id": "604406cf196a670c98960f55"
    },
    {
      "sections": [
        "Average browser (end user) page throughput example (v2)",
        "Average page throughput",
        "For more help"
      ],
      "title": "Average browser (end user) page throughput example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "713534d353c7a66e7c02ec00f7d5340dab172740",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/average-browser-end-user-page-throughput-example-v2/",
      "published_at": "2021-09-13T17:56:22Z",
      "updated_at": "2021-03-11T10:41:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The average browser throughput appears at the top right of the Throughput by browser chart on your Summary page. This is the average pages per minute (PPM) by browser type in the time range shown on the chart. Average page throughput To obtain the average for the time range (default is last 30 minutes), use the following command. Be sure to replace the ${APP_ID} and ${API_KEY} variables in this example with your specific application ID and REST API key. curl -X GET 'https://api.newrelic.com/v2/applications/${APP_ID}/metrics/data.json' \\ -H 'X-Api-Key:${API_KEY}' -i \\ -d 'names[]=EndUser&values[]=requests_per_minute&summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 187.5078,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Average <em>browser</em> (end user) page throughput <em>example</em> (<em>v2</em>)",
        "sections": "Average <em>browser</em> (end user) page throughput <em>example</em> (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": " minutes), use the following command. Be sure to replace the ${APP_ID} and ${<em>API</em>_KEY} variables in this example with your specific application ID and <em>REST</em> <em>API</em> key. curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;${APP_ID}&#x2F;metrics&#x2F;data.json&#x27; \\ -H &#x27;X-<em>Api</em>-Key:${<em>API</em>_KEY}&#x27; -i \\ -d &#x27;names[]=EndUser&amp;values[]=requests_per_minute&amp;summarize=true&#x27; Copy For more help"
      },
      "id": "604406cf28ccbc10652c6091"
    }
  ],
  "/docs/apis/rest-api-v2/browser-examples-v2/average-browser-end-user-page-throughput-example-v2": [
    {
      "sections": [
        "Obtaining browser (end user) page load time data (v2)",
        "General API values",
        "Network time",
        "Page rendering time",
        "DOM processing time",
        "Web application time",
        "Request queuing time"
      ],
      "title": "Obtaining browser (end user) page load time data (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "c0c497cf900d84a9e57a07aba5062003e86506a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/obtaining-browser-end-user-page-load-time-data-v2/",
      "published_at": "2021-09-13T18:51:32Z",
      "updated_at": "2021-07-09T14:40:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The metric timeslice data presented on the Browser page load time chart on your application's Summary page will depend on your web app's configuration. Possible components may include: Network time Page rendering time DOM processing time Web application time Request queuing time This describes how to use the New Relic REST API (v2) to obtain the data shown on the Browser page load time chart. General API values When making your own calculations, be aware of the following: You can change the default time range (30 minutes) used in these examples. For calculated values, the time range you specify must be consistent in all of the queries; otherwise the final calculations will be incorrect. You must replace the ${APPID} and ${API_KEY} variables in these examples with your specific application ID and corresponding REST API key. Ensure you adjust the time units returned by the API requests as needed. Network time The EndUser:average_network_time is the network latency, or time it takes for a request to make a round trip over the Internet. Use the following command to obtain this. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=average_network_time' Copy This time is returned in milliseconds. Page rendering time Page rendering time is a derived value. To calculate it, use this equation: \"Page rendering\" time = EndUser:average_fe_response_time - EndUser/RB:average_dom_content_load_time Copy To obtain the data for this calculation, use the following commands. EndUser:average_fe_response_time curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=average_fe_response_time' Copy This time is returned in milliseconds. EndUser/RB:average_dom_content_load_time curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser/RB&values[]=average_dom_content_load_time' Copy This time is returned in milliseconds. DOM processing time The EndUser/RB:average_dom_content_load_time is the time spent in the browser to parse and interpret the HTML. This is measured by the browser's DOM Content event. To obtain this data, use the following command: curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser/RB&values[]=average_dom_content_load_time' Copy This time is returned in milliseconds. Web application time The Web application time is the time spent in the application code. To calculate this value, use this equation: Web application = EndUser:total_app_time / EndUser:call_count Copy To obtain the data for this calculation, use the following commands. EndUser:total_app_time curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=total_app_time' Copy This time is returned in seconds. EndUser:call_count curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=call_count' Copy Request queuing time The EndUser/RB:average_queue_time is the wait time between the web server and the application code. Large numbers indicate a busy application server. To obtain this data, use the following command: curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser/RB&values[]=average_queue_time' Copy This time is returned in milliseconds. The request queuing time is not included in the calculation of averages. New Relic includes it in this chart as a convenience.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.31354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Obtaining <em>browser</em> (end user) page load time data (<em>v2</em>)",
        "sections": "Obtaining <em>browser</em> (end user) page load time data (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": " to use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the data shown on the <em>Browser</em> page load time chart. General <em>API</em> values When making your own calculations, be aware of the following: You can change the default time range (30 minutes) used in these <em>examples</em>. For calculated values, the time range you"
      },
      "id": "6044070de7b9d2b9f7579a16"
    },
    {
      "sections": [
        "Add or list browser apps via API (v2)",
        "Important",
        "Add browser apps",
        "List all browser apps",
        "View specific browser apps"
      ],
      "title": "Add or list browser apps via API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "53568984e3b360bac9255a33adad7e6b43fadf5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/add-or-list-browser-apps-api-v2/",
      "published_at": "2021-09-13T17:21:54Z",
      "updated_at": "2021-07-09T14:36:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are examples of how to use the New Relic REST API (v2) to add apps to browser monitoring or to get a list of your browser apps for a specific API key. This helps you manage deployment outside of New Relic One. These API calls are useful, for example, with larger organizations deploying multiple apps, or for integration partners who facilitate New Relic account creation and browser monitoring deployments. Important When you add a browser app via API (v2), you can only instrument basic page load timing. To use instrumentation supporting all SPA features, set up single page app monitoring via another method. Add browser apps To add an app to New Relic One, replace ${APIKEY} with your New Relic API key, and replace ${STRING} with the app's name in the following command. To accomplish the same task from the API Explorer, use your API key and go to rpm.newrelic.com/api/explore > Browser applications > POST create. Use the following command: curl -X POST 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i -H 'Content-Type: application/json' \\ -d \\ '{ \"browser_application\": { \"name\": ${STRING} } }' Copy The API returns an array of data where the element is a browser application and the data associated with it: { \"browser_application\": { \"id\": \"integer\", \"name\": \"string\", \"browser_monitoring_key\": \"string\", \"loader_script\": \"string\" } Copy API (v2) output Description Browser app id (integer) This is the unique identification code for each app in New Relic One. App name (string) This is the app's name as it appears in the New Relic One. The browser_monitoring_key (string) This a unique key that is linked to (but is not the same as) the account license key. It is used to indicate the account in New Relic One where data will be reported. It cannot be used to determine your New Relic account's license key. Browser monitoring loader_script (string) The returned loader script is a JSON-encoded JavaScript snippet that is configured with the New Relic license key and application ID. The rest of the script is static and is approximately 10k in size. The loader script must be inserted into the user’s HTML pages correctly: It must appear in the page's <head> tag before the first script tag. If there are no script tags, put the JavaScript immediately before the </head> (end of head) tag. The entire loader script must be inserted in-line, not as a link to the .js file. List all browser apps To view a list of your browser-monitored apps, replace ${APIKEY} with your New Relic API key in the following command. To accomplish the same task from the API Explorer, use your API key and go to rpm.newrelic.com/api/explore > Browser Applications > GET List. Use the following command: curl -X GET 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i Copy You can use the results to verify the account or name, and to get a copy of the loader script for the app, if needed. View specific browser apps View by name: To view a specific browser app if you know its name, replace ${APIKEY} with your New Relic API key, and replace ${NAME} with your app's name in the following command: curl -X GET 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"filter[name]=${NAME}\" Copy View by browser application ID: To view a specific browser app if you know its ID, replace ${APIKEY} with your New Relic API key, and replace ${ID} with your browser application ID in the following command: curl -X GET 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'filter[ids]=${ID}' Copy View multiple browser apps: To get information for multiple apps, separate the name or ID values with a comma in these commands; for example: -d 'filter[ids]=12345,23456' Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.31271,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add or list <em>browser</em> apps <em>via</em> <em>API</em> (<em>v2</em>)",
        "sections": "Add or list <em>browser</em> apps <em>via</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": "Here are <em>examples</em> of how to use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to add apps to <em>browser</em> monitoring or to get a list of your <em>browser</em> apps for a specific <em>API</em> key. This helps you manage deployment outside of New Relic One. These <em>API</em> calls are useful, for example, with larger organizations deploying"
      },
      "id": "603ed6a928ccbc422beba77b"
    },
    {
      "sections": [
        "Average browser page load time example (v2)",
        "Average page load time"
      ],
      "title": "Average browser page load time example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "2e2669a368831880e962cdbd39d95d31a98aa253",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/average-browser-page-load-time-example-v2/",
      "published_at": "2021-09-13T22:55:04Z",
      "updated_at": "2021-03-13T03:36:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The average browser page load time (or response time) appears at the top right of the main chart of your Summary page. This value is labeled Browser and shows the average page load time in seconds. Average page load time To obtain the average for the time range (default is last 30 minutes), use the following command. Be sure to replace the ${APP_ID} and ${API_KEY} variables in this example with your specific application ID and REST API key. curl -X GET \"https://api.newrelic.com/v2/applications/${APP_ID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=average_response_time&summarize=true' Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 187.59528,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Average <em>browser</em> page load time <em>example</em> (<em>v2</em>)",
        "sections": "Average <em>browser</em> page load time <em>example</em> (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": " the following command. Be sure to replace the ${APP_ID} and ${<em>API</em>_KEY} variables in this example with your specific application ID and <em>REST</em> <em>API</em> key. curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;${APP_ID}&#x2F;metrics&#x2F;data.json&quot; \\ -H &quot;X-<em>Api</em>-Key:${<em>API</em>_KEY}&quot; -i \\ -d &#x27;names[]=EndUser&amp;values[]=average_response_time&amp;summarize=true&#x27; Copy"
      },
      "id": "604406cf196a670c98960f55"
    }
  ],
  "/docs/apis/rest-api-v2/browser-examples-v2/average-browser-page-load-time-example-v2": [
    {
      "sections": [
        "Obtaining browser (end user) page load time data (v2)",
        "General API values",
        "Network time",
        "Page rendering time",
        "DOM processing time",
        "Web application time",
        "Request queuing time"
      ],
      "title": "Obtaining browser (end user) page load time data (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "c0c497cf900d84a9e57a07aba5062003e86506a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/obtaining-browser-end-user-page-load-time-data-v2/",
      "published_at": "2021-09-13T18:51:32Z",
      "updated_at": "2021-07-09T14:40:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The metric timeslice data presented on the Browser page load time chart on your application's Summary page will depend on your web app's configuration. Possible components may include: Network time Page rendering time DOM processing time Web application time Request queuing time This describes how to use the New Relic REST API (v2) to obtain the data shown on the Browser page load time chart. General API values When making your own calculations, be aware of the following: You can change the default time range (30 minutes) used in these examples. For calculated values, the time range you specify must be consistent in all of the queries; otherwise the final calculations will be incorrect. You must replace the ${APPID} and ${API_KEY} variables in these examples with your specific application ID and corresponding REST API key. Ensure you adjust the time units returned by the API requests as needed. Network time The EndUser:average_network_time is the network latency, or time it takes for a request to make a round trip over the Internet. Use the following command to obtain this. curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=average_network_time' Copy This time is returned in milliseconds. Page rendering time Page rendering time is a derived value. To calculate it, use this equation: \"Page rendering\" time = EndUser:average_fe_response_time - EndUser/RB:average_dom_content_load_time Copy To obtain the data for this calculation, use the following commands. EndUser:average_fe_response_time curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=average_fe_response_time' Copy This time is returned in milliseconds. EndUser/RB:average_dom_content_load_time curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser/RB&values[]=average_dom_content_load_time' Copy This time is returned in milliseconds. DOM processing time The EndUser/RB:average_dom_content_load_time is the time spent in the browser to parse and interpret the HTML. This is measured by the browser's DOM Content event. To obtain this data, use the following command: curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser/RB&values[]=average_dom_content_load_time' Copy This time is returned in milliseconds. Web application time The Web application time is the time spent in the application code. To calculate this value, use this equation: Web application = EndUser:total_app_time / EndUser:call_count Copy To obtain the data for this calculation, use the following commands. EndUser:total_app_time curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=total_app_time' Copy This time is returned in seconds. EndUser:call_count curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=call_count' Copy Request queuing time The EndUser/RB:average_queue_time is the wait time between the web server and the application code. Large numbers indicate a busy application server. To obtain this data, use the following command: curl -X GET \"https://api.newrelic.com/v2/applications/${APPID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser/RB&values[]=average_queue_time' Copy This time is returned in milliseconds. The request queuing time is not included in the calculation of averages. New Relic includes it in this chart as a convenience.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.31354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Obtaining <em>browser</em> (end user) page load time data (<em>v2</em>)",
        "sections": "Obtaining <em>browser</em> (end user) page load time data (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": " to use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain the data shown on the <em>Browser</em> page load time chart. General <em>API</em> values When making your own calculations, be aware of the following: You can change the default time range (30 minutes) used in these <em>examples</em>. For calculated values, the time range you"
      },
      "id": "6044070de7b9d2b9f7579a16"
    },
    {
      "sections": [
        "Add or list browser apps via API (v2)",
        "Important",
        "Add browser apps",
        "List all browser apps",
        "View specific browser apps"
      ],
      "title": "Add or list browser apps via API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "53568984e3b360bac9255a33adad7e6b43fadf5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/add-or-list-browser-apps-api-v2/",
      "published_at": "2021-09-13T17:21:54Z",
      "updated_at": "2021-07-09T14:36:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are examples of how to use the New Relic REST API (v2) to add apps to browser monitoring or to get a list of your browser apps for a specific API key. This helps you manage deployment outside of New Relic One. These API calls are useful, for example, with larger organizations deploying multiple apps, or for integration partners who facilitate New Relic account creation and browser monitoring deployments. Important When you add a browser app via API (v2), you can only instrument basic page load timing. To use instrumentation supporting all SPA features, set up single page app monitoring via another method. Add browser apps To add an app to New Relic One, replace ${APIKEY} with your New Relic API key, and replace ${STRING} with the app's name in the following command. To accomplish the same task from the API Explorer, use your API key and go to rpm.newrelic.com/api/explore > Browser applications > POST create. Use the following command: curl -X POST 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i -H 'Content-Type: application/json' \\ -d \\ '{ \"browser_application\": { \"name\": ${STRING} } }' Copy The API returns an array of data where the element is a browser application and the data associated with it: { \"browser_application\": { \"id\": \"integer\", \"name\": \"string\", \"browser_monitoring_key\": \"string\", \"loader_script\": \"string\" } Copy API (v2) output Description Browser app id (integer) This is the unique identification code for each app in New Relic One. App name (string) This is the app's name as it appears in the New Relic One. The browser_monitoring_key (string) This a unique key that is linked to (but is not the same as) the account license key. It is used to indicate the account in New Relic One where data will be reported. It cannot be used to determine your New Relic account's license key. Browser monitoring loader_script (string) The returned loader script is a JSON-encoded JavaScript snippet that is configured with the New Relic license key and application ID. The rest of the script is static and is approximately 10k in size. The loader script must be inserted into the user’s HTML pages correctly: It must appear in the page's <head> tag before the first script tag. If there are no script tags, put the JavaScript immediately before the </head> (end of head) tag. The entire loader script must be inserted in-line, not as a link to the .js file. List all browser apps To view a list of your browser-monitored apps, replace ${APIKEY} with your New Relic API key in the following command. To accomplish the same task from the API Explorer, use your API key and go to rpm.newrelic.com/api/explore > Browser Applications > GET List. Use the following command: curl -X GET 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i Copy You can use the results to verify the account or name, and to get a copy of the loader script for the app, if needed. View specific browser apps View by name: To view a specific browser app if you know its name, replace ${APIKEY} with your New Relic API key, and replace ${NAME} with your app's name in the following command: curl -X GET 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"filter[name]=${NAME}\" Copy View by browser application ID: To view a specific browser app if you know its ID, replace ${APIKEY} with your New Relic API key, and replace ${ID} with your browser application ID in the following command: curl -X GET 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'filter[ids]=${ID}' Copy View multiple browser apps: To get information for multiple apps, separate the name or ID values with a comma in these commands; for example: -d 'filter[ids]=12345,23456' Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.31271,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add or list <em>browser</em> apps <em>via</em> <em>API</em> (<em>v2</em>)",
        "sections": "Add or list <em>browser</em> apps <em>via</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": "Here are <em>examples</em> of how to use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to add apps to <em>browser</em> monitoring or to get a list of your <em>browser</em> apps for a specific <em>API</em> key. This helps you manage deployment outside of New Relic One. These <em>API</em> calls are useful, for example, with larger organizations deploying"
      },
      "id": "603ed6a928ccbc422beba77b"
    },
    {
      "sections": [
        "Average browser (end user) page throughput example (v2)",
        "Average page throughput",
        "For more help"
      ],
      "title": "Average browser (end user) page throughput example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "713534d353c7a66e7c02ec00f7d5340dab172740",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/average-browser-end-user-page-throughput-example-v2/",
      "published_at": "2021-09-13T17:56:22Z",
      "updated_at": "2021-03-11T10:41:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The average browser throughput appears at the top right of the Throughput by browser chart on your Summary page. This is the average pages per minute (PPM) by browser type in the time range shown on the chart. Average page throughput To obtain the average for the time range (default is last 30 minutes), use the following command. Be sure to replace the ${APP_ID} and ${API_KEY} variables in this example with your specific application ID and REST API key. curl -X GET 'https://api.newrelic.com/v2/applications/${APP_ID}/metrics/data.json' \\ -H 'X-Api-Key:${API_KEY}' -i \\ -d 'names[]=EndUser&values[]=requests_per_minute&summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 187.5078,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Average <em>browser</em> (end user) page throughput <em>example</em> (<em>v2</em>)",
        "sections": "Average <em>browser</em> (end user) page throughput <em>example</em> (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": " minutes), use the following command. Be sure to replace the ${APP_ID} and ${<em>API</em>_KEY} variables in this example with your specific application ID and <em>REST</em> <em>API</em> key. curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;${APP_ID}&#x2F;metrics&#x2F;data.json&#x27; \\ -H &#x27;X-<em>Api</em>-Key:${<em>API</em>_KEY}&#x27; -i \\ -d &#x27;names[]=EndUser&amp;values[]=requests_per_minute&amp;summarize=true&#x27; Copy For more help"
      },
      "id": "604406cf28ccbc10652c6091"
    }
  ],
  "/docs/apis/rest-api-v2/browser-examples-v2/obtaining-browser-end-user-page-load-time-data-v2": [
    {
      "sections": [
        "Add or list browser apps via API (v2)",
        "Important",
        "Add browser apps",
        "List all browser apps",
        "View specific browser apps"
      ],
      "title": "Add or list browser apps via API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "53568984e3b360bac9255a33adad7e6b43fadf5d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/add-or-list-browser-apps-api-v2/",
      "published_at": "2021-09-13T17:21:54Z",
      "updated_at": "2021-07-09T14:36:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are examples of how to use the New Relic REST API (v2) to add apps to browser monitoring or to get a list of your browser apps for a specific API key. This helps you manage deployment outside of New Relic One. These API calls are useful, for example, with larger organizations deploying multiple apps, or for integration partners who facilitate New Relic account creation and browser monitoring deployments. Important When you add a browser app via API (v2), you can only instrument basic page load timing. To use instrumentation supporting all SPA features, set up single page app monitoring via another method. Add browser apps To add an app to New Relic One, replace ${APIKEY} with your New Relic API key, and replace ${STRING} with the app's name in the following command. To accomplish the same task from the API Explorer, use your API key and go to rpm.newrelic.com/api/explore > Browser applications > POST create. Use the following command: curl -X POST 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i -H 'Content-Type: application/json' \\ -d \\ '{ \"browser_application\": { \"name\": ${STRING} } }' Copy The API returns an array of data where the element is a browser application and the data associated with it: { \"browser_application\": { \"id\": \"integer\", \"name\": \"string\", \"browser_monitoring_key\": \"string\", \"loader_script\": \"string\" } Copy API (v2) output Description Browser app id (integer) This is the unique identification code for each app in New Relic One. App name (string) This is the app's name as it appears in the New Relic One. The browser_monitoring_key (string) This a unique key that is linked to (but is not the same as) the account license key. It is used to indicate the account in New Relic One where data will be reported. It cannot be used to determine your New Relic account's license key. Browser monitoring loader_script (string) The returned loader script is a JSON-encoded JavaScript snippet that is configured with the New Relic license key and application ID. The rest of the script is static and is approximately 10k in size. The loader script must be inserted into the user’s HTML pages correctly: It must appear in the page's <head> tag before the first script tag. If there are no script tags, put the JavaScript immediately before the </head> (end of head) tag. The entire loader script must be inserted in-line, not as a link to the .js file. List all browser apps To view a list of your browser-monitored apps, replace ${APIKEY} with your New Relic API key in the following command. To accomplish the same task from the API Explorer, use your API key and go to rpm.newrelic.com/api/explore > Browser Applications > GET List. Use the following command: curl -X GET 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i Copy You can use the results to verify the account or name, and to get a copy of the loader script for the app, if needed. View specific browser apps View by name: To view a specific browser app if you know its name, replace ${APIKEY} with your New Relic API key, and replace ${NAME} with your app's name in the following command: curl -X GET 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"filter[name]=${NAME}\" Copy View by browser application ID: To view a specific browser app if you know its ID, replace ${APIKEY} with your New Relic API key, and replace ${ID} with your browser application ID in the following command: curl -X GET 'https://api.newrelic.com/v2/browser_applications.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'filter[ids]=${ID}' Copy View multiple browser apps: To get information for multiple apps, separate the name or ID values with a comma in these commands; for example: -d 'filter[ids]=12345,23456' Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.31271,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add or list <em>browser</em> apps <em>via</em> <em>API</em> (<em>v2</em>)",
        "sections": "Add or list <em>browser</em> apps <em>via</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": "Here are <em>examples</em> of how to use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to add apps to <em>browser</em> monitoring or to get a list of your <em>browser</em> apps for a specific <em>API</em> key. This helps you manage deployment outside of New Relic One. These <em>API</em> calls are useful, for example, with larger organizations deploying"
      },
      "id": "603ed6a928ccbc422beba77b"
    },
    {
      "sections": [
        "Average browser page load time example (v2)",
        "Average page load time"
      ],
      "title": "Average browser page load time example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "2e2669a368831880e962cdbd39d95d31a98aa253",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/average-browser-page-load-time-example-v2/",
      "published_at": "2021-09-13T22:55:04Z",
      "updated_at": "2021-03-13T03:36:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The average browser page load time (or response time) appears at the top right of the main chart of your Summary page. This value is labeled Browser and shows the average page load time in seconds. Average page load time To obtain the average for the time range (default is last 30 minutes), use the following command. Be sure to replace the ${APP_ID} and ${API_KEY} variables in this example with your specific application ID and REST API key. curl -X GET \"https://api.newrelic.com/v2/applications/${APP_ID}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=EndUser&values[]=average_response_time&summarize=true' Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 187.59528,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Average <em>browser</em> page load time <em>example</em> (<em>v2</em>)",
        "sections": "Average <em>browser</em> page load time <em>example</em> (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": " the following command. Be sure to replace the ${APP_ID} and ${<em>API</em>_KEY} variables in this example with your specific application ID and <em>REST</em> <em>API</em> key. curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;${APP_ID}&#x2F;metrics&#x2F;data.json&quot; \\ -H &quot;X-<em>Api</em>-Key:${<em>API</em>_KEY}&quot; -i \\ -d &#x27;names[]=EndUser&amp;values[]=average_response_time&amp;summarize=true&#x27; Copy"
      },
      "id": "604406cf196a670c98960f55"
    },
    {
      "sections": [
        "Average browser (end user) page throughput example (v2)",
        "Average page throughput",
        "For more help"
      ],
      "title": "Average browser (end user) page throughput example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Browser examples (v2)"
      ],
      "external_id": "713534d353c7a66e7c02ec00f7d5340dab172740",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/browser-examples-v2/average-browser-end-user-page-throughput-example-v2/",
      "published_at": "2021-09-13T17:56:22Z",
      "updated_at": "2021-03-11T10:41:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The average browser throughput appears at the top right of the Throughput by browser chart on your Summary page. This is the average pages per minute (PPM) by browser type in the time range shown on the chart. Average page throughput To obtain the average for the time range (default is last 30 minutes), use the following command. Be sure to replace the ${APP_ID} and ${API_KEY} variables in this example with your specific application ID and REST API key. curl -X GET 'https://api.newrelic.com/v2/applications/${APP_ID}/metrics/data.json' \\ -H 'X-Api-Key:${API_KEY}' -i \\ -d 'names[]=EndUser&values[]=requests_per_minute&summarize=true' Copy For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 187.5078,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Average <em>browser</em> (end user) page throughput <em>example</em> (<em>v2</em>)",
        "sections": "Average <em>browser</em> (end user) page throughput <em>example</em> (<em>v2</em>)",
        "tags": "<em>Browser</em> <em>examples</em> (<em>v2</em>)",
        "body": " minutes), use the following command. Be sure to replace the ${APP_ID} and ${<em>API</em>_KEY} variables in this example with your specific application ID and <em>REST</em> <em>API</em> key. curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;${APP_ID}&#x2F;metrics&#x2F;data.json&#x27; \\ -H &#x27;X-<em>Api</em>-Key:${<em>API</em>_KEY}&#x27; -i \\ -d &#x27;names[]=EndUser&amp;values[]=requests_per_minute&amp;summarize=true&#x27; Copy For more help"
      },
      "id": "604406cf28ccbc10652c6091"
    }
  ],
  "/docs/apis/rest-api-v2/get-started/admin-users-api-key-partnerships": [
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 230.7543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "sections": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". You must replace the placeholder &lt;URL&gt; with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;metrics&#x2F;data.json Copy The $APPID specifies the exact application or product"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "List application ID, host ID, instance ID",
        "Use the API Explorer",
        "List application IDs",
        "List host IDs",
        "Host ID and summary data using the REST API Explorer",
        "{HOST_ID} output",
        "List instance IDs",
        "Instance ID and summary data using the REST API Explorer",
        "{INSTANCE_ID} output",
        "Java instance ID (JVM) using the UI",
        "REST API application list example"
      ],
      "title": "List application ID, host ID, instance ID",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "87dd2a198e50edc8e78d7bb7c70ba724aff73053",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/list-application-id-host-id-instance-id/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM assigns IDs to entities related to an application. These are used to collect information about the operation and performance from different view points. These IDs can be returned via New Relic's REST API. The IDs may include: Application ID $APP_ID for each instrumented app Host ID $HOST_ID for each host Instance ID $INSTANCE_ID if there are multiple instances of the app To list any of these IDs in the New Relic API Explorer, you need an API key. Use the API Explorer You can use the API Explorer to return a list of all product IDs for a particular product: Go to one.newrelic.com > APM > (select an app). Go to the API Explorer at rpm.newrelic.com/api/explore, then select your account name from the Select an account dropdown. From the sidebar, select (product category) > GET List. Select Send Request. Browse the Response to locate the product ID. Use the product ID you located in your REST API calls. List application IDs Each app monitored by an APM agent is assigned a name. A unique $APP_ID is also associated with that name. The $APP_ID is fundamental for retrieving APM information about your apps. For more information about listing and using the $APP_ID, and obtaining the summary data, see Listing your app ID. List host IDs The $HOST_ID is used to get APM data for a specific host running an app. A physical server may have more than one host. For example, a web server program running on a physical server may be configured to have more than one virtual host. IDs for the host and physical server are not the same. Each host ID is unique and represents different items. Use the $HOST_ID to retrieve summary metrics for the host as well as specific metric timeslice values. For more information about available metrics: Go to rpm.newrelic.com. Go to the API Explorer, then select your account name from the Select an account dropdown. Go to the API Explorer's Application host page at rpm.newrelic.com/api/explore/application_hosts/names. Host ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $HOST_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the {HOST_ID} for each host. {HOST_ID} output The output will appear similar to this: { \"application_hosts\": [ { \"id\": 34966, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 13512 <---<<< {INSTANCE_ID} ], } }, { \"id\": 9999999, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { \". . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 186288 <---<<< {INSTANCE_ID} ], } }, . . . Copy List instance IDs The instance ID meaning depends on the New Relic language agent being used. You can list this ID from the REST API. For Java, you can also view the instance ID (JVM) from APM's Overview page. Agent Instance ID represents Go The Go program on the host reporting to the app name Java A Java Virtual Machine (JVM) .NET For New Relic's .NET Framework agent, this is the AppDomain Node.js A worker process PHP The daemon agent Ruby An individual Ruby worker process Python The master and worker processes You can retrieve summary metrics for the instance as well as specific metric timeslice values using the {INSTANCE_ID}. For details about available metrics, use the REST API Explorer Application Instance page. Instance ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $INSTANCE_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the $INSTANCE_ID for each instance. {INSTANCE_ID} output The { INSTANCE_ID} output will appear similar to this: { \"application_instances\": [ { \"id\": 35120, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 34966, <---<<< {HOST_ID} } }, { \"id\": 186288, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 186283, <---<<< {HOST_ID} } }, . . . Copy Java instance ID (JVM) using the UI Java apps: To locate a specific JVM $INSTANCE_ID in New Relic: Go to one.newrelic.com > APM > Applications > (select an app) > JVMs. Select the name of the instance. In the URL, the number after the _i designator represents the Java JVM instance: https://rpm.newrelic.com/accounts/$ACCOUNT_ID/applications/$APP_ID_i$INSTANCE_ID Copy REST API application list example The following example shows how to locate all the ID information for an application by using the APP_ID. If you have an EU account, the endpoint begins with https://api.eu.newrelic.com. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H 'Api-Key:$API_KEY' -i \\ -d 'filter[ids]=1441' <----<<<< {APP_ID} Copy The resulting example output is running on five servers. One server is hosting two virtual hosts for a total of six hosts. The output includes a links section listing the application_instances and application_hosts for the application. { \"applications\": [ { \"id\": 1441, <----<<<< {APP_ID} \"name\": \"RPM Combined Production\", \"language\": \"ruby\", \"health_status\": \"green\", \"reporting\": true, \"last_reported_at\": \"2015-11-10T23:19:47+00:00\", \"application_summary\": { . . . }, \"end_user_summary\": { . . . }, \"settings\": { . . . }, \"links\": { \"application_instances\": [ <---<<<< {INSTANCE_ID} list 21790, 24810, 27948, 35120, 35121, 35122, 186288, 247253, 247254, 247255, 247256 ], \"application_hosts\": [ <---<<<< {HOST_ID} list 21788, 24808, 34966, 186283, 247245, 286551 ] } } ], . . . Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 230.7543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Host ID and summary data using the <em>REST</em> <em>API</em> Explorer",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " for a particular application, you will need the $APP_ID. Go to the <em>API</em> Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X <em>GET</em> &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;hosts.json&#x27; \\ -H &#x27;<em>Api</em>-Key:$<em>API</em>_KEY&#x27; -i Copy"
      },
      "id": "60440c9628ccbc2de32c6078"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.27032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate example (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate example (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " in the equation, use the following <em>REST</em> <em>API</em> command with the mobile application version ID . curl -X <em>GET</em> &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;mobile_applications&#x2F;${MOBILE_APP_VERSION}&#x2F;metrics&#x2F;data.json&quot; \\ -H &quot;X-<em>Api</em>-Key:${<em>API</em>_KEY}&quot; -i \\ -d &#x27;names[]=Mobile&#x2F;Crash&#x2F;All&amp;names[]=Session&#x2F;<em>Start</em>&amp;values[]=call_count"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/get-started/get-app-other-ids-new-relic-one": [
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 230.75423,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "sections": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". You must replace the placeholder &lt;URL&gt; with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;metrics&#x2F;data.json Copy The $APPID specifies the exact application or product"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "List application ID, host ID, instance ID",
        "Use the API Explorer",
        "List application IDs",
        "List host IDs",
        "Host ID and summary data using the REST API Explorer",
        "{HOST_ID} output",
        "List instance IDs",
        "Instance ID and summary data using the REST API Explorer",
        "{INSTANCE_ID} output",
        "Java instance ID (JVM) using the UI",
        "REST API application list example"
      ],
      "title": "List application ID, host ID, instance ID",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "87dd2a198e50edc8e78d7bb7c70ba724aff73053",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/list-application-id-host-id-instance-id/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM assigns IDs to entities related to an application. These are used to collect information about the operation and performance from different view points. These IDs can be returned via New Relic's REST API. The IDs may include: Application ID $APP_ID for each instrumented app Host ID $HOST_ID for each host Instance ID $INSTANCE_ID if there are multiple instances of the app To list any of these IDs in the New Relic API Explorer, you need an API key. Use the API Explorer You can use the API Explorer to return a list of all product IDs for a particular product: Go to one.newrelic.com > APM > (select an app). Go to the API Explorer at rpm.newrelic.com/api/explore, then select your account name from the Select an account dropdown. From the sidebar, select (product category) > GET List. Select Send Request. Browse the Response to locate the product ID. Use the product ID you located in your REST API calls. List application IDs Each app monitored by an APM agent is assigned a name. A unique $APP_ID is also associated with that name. The $APP_ID is fundamental for retrieving APM information about your apps. For more information about listing and using the $APP_ID, and obtaining the summary data, see Listing your app ID. List host IDs The $HOST_ID is used to get APM data for a specific host running an app. A physical server may have more than one host. For example, a web server program running on a physical server may be configured to have more than one virtual host. IDs for the host and physical server are not the same. Each host ID is unique and represents different items. Use the $HOST_ID to retrieve summary metrics for the host as well as specific metric timeslice values. For more information about available metrics: Go to rpm.newrelic.com. Go to the API Explorer, then select your account name from the Select an account dropdown. Go to the API Explorer's Application host page at rpm.newrelic.com/api/explore/application_hosts/names. Host ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $HOST_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the {HOST_ID} for each host. {HOST_ID} output The output will appear similar to this: { \"application_hosts\": [ { \"id\": 34966, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 13512 <---<<< {INSTANCE_ID} ], } }, { \"id\": 9999999, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { \". . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 186288 <---<<< {INSTANCE_ID} ], } }, . . . Copy List instance IDs The instance ID meaning depends on the New Relic language agent being used. You can list this ID from the REST API. For Java, you can also view the instance ID (JVM) from APM's Overview page. Agent Instance ID represents Go The Go program on the host reporting to the app name Java A Java Virtual Machine (JVM) .NET For New Relic's .NET Framework agent, this is the AppDomain Node.js A worker process PHP The daemon agent Ruby An individual Ruby worker process Python The master and worker processes You can retrieve summary metrics for the instance as well as specific metric timeslice values using the {INSTANCE_ID}. For details about available metrics, use the REST API Explorer Application Instance page. Instance ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $INSTANCE_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the $INSTANCE_ID for each instance. {INSTANCE_ID} output The { INSTANCE_ID} output will appear similar to this: { \"application_instances\": [ { \"id\": 35120, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 34966, <---<<< {HOST_ID} } }, { \"id\": 186288, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 186283, <---<<< {HOST_ID} } }, . . . Copy Java instance ID (JVM) using the UI Java apps: To locate a specific JVM $INSTANCE_ID in New Relic: Go to one.newrelic.com > APM > Applications > (select an app) > JVMs. Select the name of the instance. In the URL, the number after the _i designator represents the Java JVM instance: https://rpm.newrelic.com/accounts/$ACCOUNT_ID/applications/$APP_ID_i$INSTANCE_ID Copy REST API application list example The following example shows how to locate all the ID information for an application by using the APP_ID. If you have an EU account, the endpoint begins with https://api.eu.newrelic.com. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H 'Api-Key:$API_KEY' -i \\ -d 'filter[ids]=1441' <----<<<< {APP_ID} Copy The resulting example output is running on five servers. One server is hosting two virtual hosts for a total of six hosts. The output includes a links section listing the application_instances and application_hosts for the application. { \"applications\": [ { \"id\": 1441, <----<<<< {APP_ID} \"name\": \"RPM Combined Production\", \"language\": \"ruby\", \"health_status\": \"green\", \"reporting\": true, \"last_reported_at\": \"2015-11-10T23:19:47+00:00\", \"application_summary\": { . . . }, \"end_user_summary\": { . . . }, \"settings\": { . . . }, \"links\": { \"application_instances\": [ <---<<<< {INSTANCE_ID} list 21790, 24810, 27948, 35120, 35121, 35122, 186288, 247253, 247254, 247255, 247256 ], \"application_hosts\": [ <---<<<< {HOST_ID} list 21788, 24808, 34966, 186283, 247245, 286551 ] } } ], . . . Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 230.75423,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Host ID and summary data using the <em>REST</em> <em>API</em> Explorer",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " for a particular application, you will need the $APP_ID. Go to the <em>API</em> Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X <em>GET</em> &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;hosts.json&#x27; \\ -H &#x27;<em>Api</em>-Key:$<em>API</em>_KEY&#x27; -i Copy"
      },
      "id": "60440c9628ccbc2de32c6078"
    },
    {
      "sections": [
        "New Relic partnership account authentication",
        "Custom headers and API calls",
        "Known limitations"
      ],
      "title": "New Relic partnership account authentication",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "a4e139380383b634e44d288b7065597de60e6b84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/admin-users-api-key-partnerships/",
      "published_at": "2021-09-13T18:41:50Z",
      "updated_at": "2021-03-13T03:10:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This approach adds a new authentication method to the customer-facing New Relic REST API (v2) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all REST API (v2) calls. It offers no new functionality for non-partner API users. When calling endpoints in the New Relic REST API (v2) that require the user key, New Relic suggests you use the described authentication method. Custom headers and API calls When making API calls, use the following custom headers with your partner API key, partner ID, and your account ID: X-Api-Key:YOUR_PARTNER_ACCOUNT_API_KEY NewRelic-Partner-Id:YOUR_PARTNER_ID NewRelic-Account-Id:YOUR_CUSTOMERS_ACCOUNT_ID Providing authentication to the REST API (v2) in this form allows you to complete any API operation on your customer’s accounts. This bypasses the customer-facing requirement that some API calls require an Admin user’s API key. This authentication method also works for API endpoints that require only the REST API key. This new authentication method works for all endpoints, not only those that require the Admin User’s API key. Known limitations This partner-only authentication method will only work with the New Relic REST API (v2). It does not work with the following: Deployment API Infrastructure API for alerts Insights API Insights Dashboard API Partner API Plugin API Synthetics API",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 185.65965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Custom headers and <em>API</em> calls",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "This approach adds a new authentication method to the customer-facing New Relic <em>REST</em> <em>API</em> (<em>v2</em>) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all <em>REST</em> <em>API</em> (<em>v2</em>) calls"
      },
      "id": "60440747e7b9d2a1465799f2"
    }
  ],
  "/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2": [
    {
      "sections": [
        "List application ID, host ID, instance ID",
        "Use the API Explorer",
        "List application IDs",
        "List host IDs",
        "Host ID and summary data using the REST API Explorer",
        "{HOST_ID} output",
        "List instance IDs",
        "Instance ID and summary data using the REST API Explorer",
        "{INSTANCE_ID} output",
        "Java instance ID (JVM) using the UI",
        "REST API application list example"
      ],
      "title": "List application ID, host ID, instance ID",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "87dd2a198e50edc8e78d7bb7c70ba724aff73053",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/list-application-id-host-id-instance-id/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM assigns IDs to entities related to an application. These are used to collect information about the operation and performance from different view points. These IDs can be returned via New Relic's REST API. The IDs may include: Application ID $APP_ID for each instrumented app Host ID $HOST_ID for each host Instance ID $INSTANCE_ID if there are multiple instances of the app To list any of these IDs in the New Relic API Explorer, you need an API key. Use the API Explorer You can use the API Explorer to return a list of all product IDs for a particular product: Go to one.newrelic.com > APM > (select an app). Go to the API Explorer at rpm.newrelic.com/api/explore, then select your account name from the Select an account dropdown. From the sidebar, select (product category) > GET List. Select Send Request. Browse the Response to locate the product ID. Use the product ID you located in your REST API calls. List application IDs Each app monitored by an APM agent is assigned a name. A unique $APP_ID is also associated with that name. The $APP_ID is fundamental for retrieving APM information about your apps. For more information about listing and using the $APP_ID, and obtaining the summary data, see Listing your app ID. List host IDs The $HOST_ID is used to get APM data for a specific host running an app. A physical server may have more than one host. For example, a web server program running on a physical server may be configured to have more than one virtual host. IDs for the host and physical server are not the same. Each host ID is unique and represents different items. Use the $HOST_ID to retrieve summary metrics for the host as well as specific metric timeslice values. For more information about available metrics: Go to rpm.newrelic.com. Go to the API Explorer, then select your account name from the Select an account dropdown. Go to the API Explorer's Application host page at rpm.newrelic.com/api/explore/application_hosts/names. Host ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $HOST_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the {HOST_ID} for each host. {HOST_ID} output The output will appear similar to this: { \"application_hosts\": [ { \"id\": 34966, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 13512 <---<<< {INSTANCE_ID} ], } }, { \"id\": 9999999, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { \". . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 186288 <---<<< {INSTANCE_ID} ], } }, . . . Copy List instance IDs The instance ID meaning depends on the New Relic language agent being used. You can list this ID from the REST API. For Java, you can also view the instance ID (JVM) from APM's Overview page. Agent Instance ID represents Go The Go program on the host reporting to the app name Java A Java Virtual Machine (JVM) .NET For New Relic's .NET Framework agent, this is the AppDomain Node.js A worker process PHP The daemon agent Ruby An individual Ruby worker process Python The master and worker processes You can retrieve summary metrics for the instance as well as specific metric timeslice values using the {INSTANCE_ID}. For details about available metrics, use the REST API Explorer Application Instance page. Instance ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $INSTANCE_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the $INSTANCE_ID for each instance. {INSTANCE_ID} output The { INSTANCE_ID} output will appear similar to this: { \"application_instances\": [ { \"id\": 35120, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 34966, <---<<< {HOST_ID} } }, { \"id\": 186288, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 186283, <---<<< {HOST_ID} } }, . . . Copy Java instance ID (JVM) using the UI Java apps: To locate a specific JVM $INSTANCE_ID in New Relic: Go to one.newrelic.com > APM > Applications > (select an app) > JVMs. Select the name of the instance. In the URL, the number after the _i designator represents the Java JVM instance: https://rpm.newrelic.com/accounts/$ACCOUNT_ID/applications/$APP_ID_i$INSTANCE_ID Copy REST API application list example The following example shows how to locate all the ID information for an application by using the APP_ID. If you have an EU account, the endpoint begins with https://api.eu.newrelic.com. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H 'Api-Key:$API_KEY' -i \\ -d 'filter[ids]=1441' <----<<<< {APP_ID} Copy The resulting example output is running on five servers. One server is hosting two virtual hosts for a total of six hosts. The output includes a links section listing the application_instances and application_hosts for the application. { \"applications\": [ { \"id\": 1441, <----<<<< {APP_ID} \"name\": \"RPM Combined Production\", \"language\": \"ruby\", \"health_status\": \"green\", \"reporting\": true, \"last_reported_at\": \"2015-11-10T23:19:47+00:00\", \"application_summary\": { . . . }, \"end_user_summary\": { . . . }, \"settings\": { . . . }, \"links\": { \"application_instances\": [ <---<<<< {INSTANCE_ID} list 21790, 24810, 27948, 35120, 35121, 35122, 186288, 247253, 247254, 247255, 247256 ], \"application_hosts\": [ <---<<<< {HOST_ID} list 21788, 24808, 34966, 186283, 247245, 286551 ] } } ], . . . Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 230.75423,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Host ID and summary data using the <em>REST</em> <em>API</em> Explorer",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " for a particular application, you will need the $APP_ID. Go to the <em>API</em> Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X <em>GET</em> &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;hosts.json&#x27; \\ -H &#x27;<em>Api</em>-Key:$<em>API</em>_KEY&#x27; -i Copy"
      },
      "id": "60440c9628ccbc2de32c6078"
    },
    {
      "sections": [
        "New Relic partnership account authentication",
        "Custom headers and API calls",
        "Known limitations"
      ],
      "title": "New Relic partnership account authentication",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "a4e139380383b634e44d288b7065597de60e6b84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/admin-users-api-key-partnerships/",
      "published_at": "2021-09-13T18:41:50Z",
      "updated_at": "2021-03-13T03:10:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This approach adds a new authentication method to the customer-facing New Relic REST API (v2) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all REST API (v2) calls. It offers no new functionality for non-partner API users. When calling endpoints in the New Relic REST API (v2) that require the user key, New Relic suggests you use the described authentication method. Custom headers and API calls When making API calls, use the following custom headers with your partner API key, partner ID, and your account ID: X-Api-Key:YOUR_PARTNER_ACCOUNT_API_KEY NewRelic-Partner-Id:YOUR_PARTNER_ID NewRelic-Account-Id:YOUR_CUSTOMERS_ACCOUNT_ID Providing authentication to the REST API (v2) in this form allows you to complete any API operation on your customer’s accounts. This bypasses the customer-facing requirement that some API calls require an Admin user’s API key. This authentication method also works for API endpoints that require only the REST API key. This new authentication method works for all endpoints, not only those that require the Admin User’s API key. Known limitations This partner-only authentication method will only work with the New Relic REST API (v2). It does not work with the following: Deployment API Infrastructure API for alerts Insights API Insights Dashboard API Partner API Plugin API Synthetics API",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 185.65965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Custom headers and <em>API</em> calls",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "This approach adds a new authentication method to the customer-facing New Relic <em>REST</em> <em>API</em> (<em>v2</em>) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all <em>REST</em> <em>API</em> (<em>v2</em>) calls"
      },
      "id": "60440747e7b9d2a1465799f2"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.27032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate example (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate example (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " in the equation, use the following <em>REST</em> <em>API</em> command with the mobile application version ID . curl -X <em>GET</em> &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;mobile_applications&#x2F;${MOBILE_APP_VERSION}&#x2F;metrics&#x2F;data.json&quot; \\ -H &quot;X-<em>Api</em>-Key:${<em>API</em>_KEY}&quot; -i \\ -d &#x27;names[]=Mobile&#x2F;Crash&#x2F;All&amp;names[]=Session&#x2F;<em>Start</em>&amp;values[]=call_count"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/get-started/list-application-id-host-id-instance-id": [
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 230.75415,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "sections": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". You must replace the placeholder &lt;URL&gt; with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;metrics&#x2F;data.json Copy The $APPID specifies the exact application or product"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "New Relic partnership account authentication",
        "Custom headers and API calls",
        "Known limitations"
      ],
      "title": "New Relic partnership account authentication",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "a4e139380383b634e44d288b7065597de60e6b84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/admin-users-api-key-partnerships/",
      "published_at": "2021-09-13T18:41:50Z",
      "updated_at": "2021-03-13T03:10:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This approach adds a new authentication method to the customer-facing New Relic REST API (v2) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all REST API (v2) calls. It offers no new functionality for non-partner API users. When calling endpoints in the New Relic REST API (v2) that require the user key, New Relic suggests you use the described authentication method. Custom headers and API calls When making API calls, use the following custom headers with your partner API key, partner ID, and your account ID: X-Api-Key:YOUR_PARTNER_ACCOUNT_API_KEY NewRelic-Partner-Id:YOUR_PARTNER_ID NewRelic-Account-Id:YOUR_CUSTOMERS_ACCOUNT_ID Providing authentication to the REST API (v2) in this form allows you to complete any API operation on your customer’s accounts. This bypasses the customer-facing requirement that some API calls require an Admin user’s API key. This authentication method also works for API endpoints that require only the REST API key. This new authentication method works for all endpoints, not only those that require the Admin User’s API key. Known limitations This partner-only authentication method will only work with the New Relic REST API (v2). It does not work with the following: Deployment API Infrastructure API for alerts Insights API Insights Dashboard API Partner API Plugin API Synthetics API",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 185.65965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Custom headers and <em>API</em> calls",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "This approach adds a new authentication method to the customer-facing New Relic <em>REST</em> <em>API</em> (<em>v2</em>) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all <em>REST</em> <em>API</em> (<em>v2</em>) calls"
      },
      "id": "60440747e7b9d2a1465799f2"
    },
    {
      "sections": [
        "Mobile crash count and crash rate example (v2)",
        "Tip",
        "Prerequisites",
        "Mobile app: Get crash data",
        "Mobile app version: Get crash count data",
        "Mobile app version: Get crash rate data",
        "Find the mobile app version ID",
        "Important"
      ],
      "title": "Mobile crash count and crash rate example (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Mobile examples (v2)"
      ],
      "external_id": "151eef499250bd2a444ed8c49b610772d7c7e56e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2/",
      "published_at": "2021-09-13T18:41:48Z",
      "updated_at": "2021-07-09T14:37:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes how to use the New Relic REST API (v2) to get your mobile application's overall and version-specific crash count and crash rate, which appear on the Summary page in the upper right corner. These examples use the default time period of the last 30 minutes. To obtain crash data for a different time range, add the time period to the commands. Tip You can also use the New Relic API Explorer to retrieve mobile metric data. Prerequisites To use the API in these examples, you need: Your New Relic REST API key Your New Relic mobile monitoring app ID or your mobile monitoring app version ID. To find the mobile monitoring app ID, see Finding the product ID: mobile monitoring. To find the mobile monitoring app version ID, see Find the mobile app version ID below. Mobile app: Get crash data To obtain crash count and crash rate data for the overall mobile application, use the mobile application ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_ID}.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy The crash_summary output data contains both the crash_count and crash_rate. \"crash_summary\": { \"supports_crash_data\": true, \"unresolved_crash_count\": 14, \"crash_rate\": 28.155339805825243 } Copy To obtain crash summary data for all the mobile applications in the account, use this REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i Copy Mobile app version: Get crash count data To obtain the crash count metric data for a specific version of the mobile application, include the mobile application version ID in the following REST API command: curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'name=Mobile/Crash/All&values[]=call_count&summarize=true' Copy Mobile app version: Get crash rate data To calculate a specific version's crash rate, use the following equation: Crash Rate = (Mobile/Crash/All:call_count) / (Session/Start:call_count) Copy To get the two metric values needed in the equation, use the following REST API command with the mobile application version ID . curl -X GET \"https://api.newrelic.com/v2/mobile_applications/${MOBILE_APP_VERSION}/metrics/data.json\" \\ -H \"X-Api-Key:${API_KEY}\" -i \\ -d 'names[]=Mobile/Crash/All&names[]=Session/Start&values[]=call_count&summarize=true' Copy Find the mobile app version ID Important You must provide the version ID only when you want to obtain crash data for a specific version. To find the version ID of your mobile application, run the following NRQL query: SELECT count(*) from Mobile where appName='YOUR_APP_NAME' facet appVersionId since 1 day ago export const _frontmatter = {\"title\":\"Mobile crash count and crash rate example (v2)\",\"tags\":[\"APIs\",\"REST API v2\",\"Mobile examples (v2)\"],\"metaDescription\":\"How to use New Relic's REST API (v2) to get crash count and crash rate data for the overall mobile app or a specific version.\",\"redirects\":[\"/docs/apis/rest-api-v2/application-examples-v2/mobile-crash-count-crash-rate-example-v2\"]} Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.27032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Mobile crash count and crash rate example (<em>v2</em>)",
        "sections": "Mobile crash count and crash rate example (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " in the equation, use the following <em>REST</em> <em>API</em> command with the mobile application version ID . curl -X <em>GET</em> &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;mobile_applications&#x2F;${MOBILE_APP_VERSION}&#x2F;metrics&#x2F;data.json&quot; \\ -H &quot;X-<em>Api</em>-Key:${<em>API</em>_KEY}&quot; -i \\ -d &#x27;names[]=Mobile&#x2F;Crash&#x2F;All&amp;names[]=Session&#x2F;<em>Start</em>&amp;values[]=call_count"
      },
      "id": "60440c9628ccbc04a23021ec"
    }
  ],
  "/docs/apis/rest-api-v2/labels-examples-v2/create-labels-apps-v2": [
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.28107,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "sections": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". You must replace the placeholder &lt;URL&gt; with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;metrics&#x2F;data.json Copy The $APPID specifies the exact application or product"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "List application ID, host ID, instance ID",
        "Use the API Explorer",
        "List application IDs",
        "List host IDs",
        "Host ID and summary data using the REST API Explorer",
        "{HOST_ID} output",
        "List instance IDs",
        "Instance ID and summary data using the REST API Explorer",
        "{INSTANCE_ID} output",
        "Java instance ID (JVM) using the UI",
        "REST API application list example"
      ],
      "title": "List application ID, host ID, instance ID",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "87dd2a198e50edc8e78d7bb7c70ba724aff73053",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/list-application-id-host-id-instance-id/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM assigns IDs to entities related to an application. These are used to collect information about the operation and performance from different view points. These IDs can be returned via New Relic's REST API. The IDs may include: Application ID $APP_ID for each instrumented app Host ID $HOST_ID for each host Instance ID $INSTANCE_ID if there are multiple instances of the app To list any of these IDs in the New Relic API Explorer, you need an API key. Use the API Explorer You can use the API Explorer to return a list of all product IDs for a particular product: Go to one.newrelic.com > APM > (select an app). Go to the API Explorer at rpm.newrelic.com/api/explore, then select your account name from the Select an account dropdown. From the sidebar, select (product category) > GET List. Select Send Request. Browse the Response to locate the product ID. Use the product ID you located in your REST API calls. List application IDs Each app monitored by an APM agent is assigned a name. A unique $APP_ID is also associated with that name. The $APP_ID is fundamental for retrieving APM information about your apps. For more information about listing and using the $APP_ID, and obtaining the summary data, see Listing your app ID. List host IDs The $HOST_ID is used to get APM data for a specific host running an app. A physical server may have more than one host. For example, a web server program running on a physical server may be configured to have more than one virtual host. IDs for the host and physical server are not the same. Each host ID is unique and represents different items. Use the $HOST_ID to retrieve summary metrics for the host as well as specific metric timeslice values. For more information about available metrics: Go to rpm.newrelic.com. Go to the API Explorer, then select your account name from the Select an account dropdown. Go to the API Explorer's Application host page at rpm.newrelic.com/api/explore/application_hosts/names. Host ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $HOST_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the {HOST_ID} for each host. {HOST_ID} output The output will appear similar to this: { \"application_hosts\": [ { \"id\": 34966, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 13512 <---<<< {INSTANCE_ID} ], } }, { \"id\": 9999999, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { \". . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 186288 <---<<< {INSTANCE_ID} ], } }, . . . Copy List instance IDs The instance ID meaning depends on the New Relic language agent being used. You can list this ID from the REST API. For Java, you can also view the instance ID (JVM) from APM's Overview page. Agent Instance ID represents Go The Go program on the host reporting to the app name Java A Java Virtual Machine (JVM) .NET For New Relic's .NET Framework agent, this is the AppDomain Node.js A worker process PHP The daemon agent Ruby An individual Ruby worker process Python The master and worker processes You can retrieve summary metrics for the instance as well as specific metric timeslice values using the {INSTANCE_ID}. For details about available metrics, use the REST API Explorer Application Instance page. Instance ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $INSTANCE_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the $INSTANCE_ID for each instance. {INSTANCE_ID} output The { INSTANCE_ID} output will appear similar to this: { \"application_instances\": [ { \"id\": 35120, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 34966, <---<<< {HOST_ID} } }, { \"id\": 186288, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 186283, <---<<< {HOST_ID} } }, . . . Copy Java instance ID (JVM) using the UI Java apps: To locate a specific JVM $INSTANCE_ID in New Relic: Go to one.newrelic.com > APM > Applications > (select an app) > JVMs. Select the name of the instance. In the URL, the number after the _i designator represents the Java JVM instance: https://rpm.newrelic.com/accounts/$ACCOUNT_ID/applications/$APP_ID_i$INSTANCE_ID Copy REST API application list example The following example shows how to locate all the ID information for an application by using the APP_ID. If you have an EU account, the endpoint begins with https://api.eu.newrelic.com. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H 'Api-Key:$API_KEY' -i \\ -d 'filter[ids]=1441' <----<<<< {APP_ID} Copy The resulting example output is running on five servers. One server is hosting two virtual hosts for a total of six hosts. The output includes a links section listing the application_instances and application_hosts for the application. { \"applications\": [ { \"id\": 1441, <----<<<< {APP_ID} \"name\": \"RPM Combined Production\", \"language\": \"ruby\", \"health_status\": \"green\", \"reporting\": true, \"last_reported_at\": \"2015-11-10T23:19:47+00:00\", \"application_summary\": { . . . }, \"end_user_summary\": { . . . }, \"settings\": { . . . }, \"links\": { \"application_instances\": [ <---<<<< {INSTANCE_ID} list 21790, 24810, 27948, 35120, 35121, 35122, 186288, 247253, 247254, 247255, 247256 ], \"application_hosts\": [ <---<<<< {HOST_ID} list 21788, 24808, 34966, 186283, 247245, 286551 ] } } ], . . . Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.28107,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>REST</em> <em>API</em> application list <em>example</em>",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " for a particular application, you will need the $APP_ID. Go to the <em>API</em> Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;hosts.json&#x27; \\ -H &#x27;<em>Api</em>-Key:$<em>API</em>_KEY&#x27; -i Copy"
      },
      "id": "60440c9628ccbc2de32c6078"
    },
    {
      "sections": [
        "New Relic partnership account authentication",
        "Custom headers and API calls",
        "Known limitations"
      ],
      "title": "New Relic partnership account authentication",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "a4e139380383b634e44d288b7065597de60e6b84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/admin-users-api-key-partnerships/",
      "published_at": "2021-09-13T18:41:50Z",
      "updated_at": "2021-03-13T03:10:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This approach adds a new authentication method to the customer-facing New Relic REST API (v2) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all REST API (v2) calls. It offers no new functionality for non-partner API users. When calling endpoints in the New Relic REST API (v2) that require the user key, New Relic suggests you use the described authentication method. Custom headers and API calls When making API calls, use the following custom headers with your partner API key, partner ID, and your account ID: X-Api-Key:YOUR_PARTNER_ACCOUNT_API_KEY NewRelic-Partner-Id:YOUR_PARTNER_ID NewRelic-Account-Id:YOUR_CUSTOMERS_ACCOUNT_ID Providing authentication to the REST API (v2) in this form allows you to complete any API operation on your customer’s accounts. This bypasses the customer-facing requirement that some API calls require an Admin user’s API key. This authentication method also works for API endpoints that require only the REST API key. This new authentication method works for all endpoints, not only those that require the Admin User’s API key. Known limitations This partner-only authentication method will only work with the New Relic REST API (v2). It does not work with the following: Deployment API Infrastructure API for alerts Insights API Insights Dashboard API Partner API Plugin API Synthetics API",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.5079,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Custom headers and <em>API</em> calls",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "This approach adds a new authentication method to the customer-facing New Relic <em>REST</em> <em>API</em> (<em>v2</em>) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all <em>REST</em> <em>API</em> (<em>v2</em>) calls"
      },
      "id": "60440747e7b9d2a1465799f2"
    }
  ],
  "/docs/apis/rest-api-v2/mobile-examples-v2/mobile-crash-count-crash-rate-example-v2": [
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.281,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "sections": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". You must replace the placeholder &lt;URL&gt; with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;metrics&#x2F;data.json Copy The $APPID specifies the exact application or product"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "List application ID, host ID, instance ID",
        "Use the API Explorer",
        "List application IDs",
        "List host IDs",
        "Host ID and summary data using the REST API Explorer",
        "{HOST_ID} output",
        "List instance IDs",
        "Instance ID and summary data using the REST API Explorer",
        "{INSTANCE_ID} output",
        "Java instance ID (JVM) using the UI",
        "REST API application list example"
      ],
      "title": "List application ID, host ID, instance ID",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "87dd2a198e50edc8e78d7bb7c70ba724aff73053",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/list-application-id-host-id-instance-id/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM assigns IDs to entities related to an application. These are used to collect information about the operation and performance from different view points. These IDs can be returned via New Relic's REST API. The IDs may include: Application ID $APP_ID for each instrumented app Host ID $HOST_ID for each host Instance ID $INSTANCE_ID if there are multiple instances of the app To list any of these IDs in the New Relic API Explorer, you need an API key. Use the API Explorer You can use the API Explorer to return a list of all product IDs for a particular product: Go to one.newrelic.com > APM > (select an app). Go to the API Explorer at rpm.newrelic.com/api/explore, then select your account name from the Select an account dropdown. From the sidebar, select (product category) > GET List. Select Send Request. Browse the Response to locate the product ID. Use the product ID you located in your REST API calls. List application IDs Each app monitored by an APM agent is assigned a name. A unique $APP_ID is also associated with that name. The $APP_ID is fundamental for retrieving APM information about your apps. For more information about listing and using the $APP_ID, and obtaining the summary data, see Listing your app ID. List host IDs The $HOST_ID is used to get APM data for a specific host running an app. A physical server may have more than one host. For example, a web server program running on a physical server may be configured to have more than one virtual host. IDs for the host and physical server are not the same. Each host ID is unique and represents different items. Use the $HOST_ID to retrieve summary metrics for the host as well as specific metric timeslice values. For more information about available metrics: Go to rpm.newrelic.com. Go to the API Explorer, then select your account name from the Select an account dropdown. Go to the API Explorer's Application host page at rpm.newrelic.com/api/explore/application_hosts/names. Host ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $HOST_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the {HOST_ID} for each host. {HOST_ID} output The output will appear similar to this: { \"application_hosts\": [ { \"id\": 34966, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 13512 <---<<< {INSTANCE_ID} ], } }, { \"id\": 9999999, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { \". . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 186288 <---<<< {INSTANCE_ID} ], } }, . . . Copy List instance IDs The instance ID meaning depends on the New Relic language agent being used. You can list this ID from the REST API. For Java, you can also view the instance ID (JVM) from APM's Overview page. Agent Instance ID represents Go The Go program on the host reporting to the app name Java A Java Virtual Machine (JVM) .NET For New Relic's .NET Framework agent, this is the AppDomain Node.js A worker process PHP The daemon agent Ruby An individual Ruby worker process Python The master and worker processes You can retrieve summary metrics for the instance as well as specific metric timeslice values using the {INSTANCE_ID}. For details about available metrics, use the REST API Explorer Application Instance page. Instance ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $INSTANCE_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the $INSTANCE_ID for each instance. {INSTANCE_ID} output The { INSTANCE_ID} output will appear similar to this: { \"application_instances\": [ { \"id\": 35120, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 34966, <---<<< {HOST_ID} } }, { \"id\": 186288, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 186283, <---<<< {HOST_ID} } }, . . . Copy Java instance ID (JVM) using the UI Java apps: To locate a specific JVM $INSTANCE_ID in New Relic: Go to one.newrelic.com > APM > Applications > (select an app) > JVMs. Select the name of the instance. In the URL, the number after the _i designator represents the Java JVM instance: https://rpm.newrelic.com/accounts/$ACCOUNT_ID/applications/$APP_ID_i$INSTANCE_ID Copy REST API application list example The following example shows how to locate all the ID information for an application by using the APP_ID. If you have an EU account, the endpoint begins with https://api.eu.newrelic.com. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H 'Api-Key:$API_KEY' -i \\ -d 'filter[ids]=1441' <----<<<< {APP_ID} Copy The resulting example output is running on five servers. One server is hosting two virtual hosts for a total of six hosts. The output includes a links section listing the application_instances and application_hosts for the application. { \"applications\": [ { \"id\": 1441, <----<<<< {APP_ID} \"name\": \"RPM Combined Production\", \"language\": \"ruby\", \"health_status\": \"green\", \"reporting\": true, \"last_reported_at\": \"2015-11-10T23:19:47+00:00\", \"application_summary\": { . . . }, \"end_user_summary\": { . . . }, \"settings\": { . . . }, \"links\": { \"application_instances\": [ <---<<<< {INSTANCE_ID} list 21790, 24810, 27948, 35120, 35121, 35122, 186288, 247253, 247254, 247255, 247256 ], \"application_hosts\": [ <---<<<< {HOST_ID} list 21788, 24808, 34966, 186283, 247245, 286551 ] } } ], . . . Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.281,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>REST</em> <em>API</em> application list <em>example</em>",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " for a particular application, you will need the $APP_ID. Go to the <em>API</em> Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;hosts.json&#x27; \\ -H &#x27;<em>Api</em>-Key:$<em>API</em>_KEY&#x27; -i Copy"
      },
      "id": "60440c9628ccbc2de32c6078"
    },
    {
      "sections": [
        "New Relic partnership account authentication",
        "Custom headers and API calls",
        "Known limitations"
      ],
      "title": "New Relic partnership account authentication",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "a4e139380383b634e44d288b7065597de60e6b84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/admin-users-api-key-partnerships/",
      "published_at": "2021-09-13T18:41:50Z",
      "updated_at": "2021-03-13T03:10:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This approach adds a new authentication method to the customer-facing New Relic REST API (v2) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all REST API (v2) calls. It offers no new functionality for non-partner API users. When calling endpoints in the New Relic REST API (v2) that require the user key, New Relic suggests you use the described authentication method. Custom headers and API calls When making API calls, use the following custom headers with your partner API key, partner ID, and your account ID: X-Api-Key:YOUR_PARTNER_ACCOUNT_API_KEY NewRelic-Partner-Id:YOUR_PARTNER_ID NewRelic-Account-Id:YOUR_CUSTOMERS_ACCOUNT_ID Providing authentication to the REST API (v2) in this form allows you to complete any API operation on your customer’s accounts. This bypasses the customer-facing requirement that some API calls require an Admin user’s API key. This authentication method also works for API endpoints that require only the REST API key. This new authentication method works for all endpoints, not only those that require the Admin User’s API key. Known limitations This partner-only authentication method will only work with the New Relic REST API (v2). It does not work with the following: Deployment API Infrastructure API for alerts Insights API Insights Dashboard API Partner API Plugin API Synthetics API",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.5079,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Custom headers and <em>API</em> calls",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "This approach adds a new authentication method to the customer-facing New Relic <em>REST</em> <em>API</em> (<em>v2</em>) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all <em>REST</em> <em>API</em> (<em>v2</em>) calls"
      },
      "id": "60440747e7b9d2a1465799f2"
    }
  ],
  "/docs/apis/rest-api-v2/plugin-examples-v2/get-individual-plugin-components-v2": [
    {
      "sections": [
        "Get a list of plugins (v2)",
        "List all plugins",
        "List by plugin ID",
        "Filter by plugin ID or GUID",
        "Plugin list output",
        "Tip"
      ],
      "title": "Get a list of plugins (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "d8de5b6aeafe748d8d0eb8f9559319b60a7ea582",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/get-list-plugins-v2/",
      "published_at": "2021-09-13T17:57:36Z",
      "updated_at": "2021-03-16T08:15:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is an example of how to use the New Relic REST API (v2) to obtain a list of all plugins for the account associated with a REST API key, including: Each plugin ID, plugin name, and GUID A list of summary metrics available for each of the components, including component IDs, names, and other values You can also use the API Explorer to list plugins. List all plugins To obtain a list of the plugins, use: curl -X GET \"https://api.newrelic.com/v2/plugins.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy You can also use the New Relic API explorer to list information for all plugins. List by plugin ID To list the components defined for a single plugin, if you know the plugin's ID, use: curl -X GET \"https://api.newrelic.com/v2/plugins/${PLUGIN_ID}.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy You can also use the New Relic API explorer to list information for a single plugin. Filter by plugin ID or GUID To filter the plugins list by GUID or plugin ID, replace the [guid] and ids with your values: curl -X GET 'https://api.newrelic.com/v2/plugins.json' \\ -H 'X-Api-Key:' -i \\ -d 'filter[guid]=mysql' Copy curl -X GET 'https://api.newrelic.com/v2/plugins.json' \\ -H 'X-Api-Key:' -i \\ -d 'filter[ids]=123,234' Copy Plugin list output The output is in JSON format, but you can modify this by specifying plugins.xml rather than plugins.json. The output will appear in the following format (for JSON). Tip PIugin queries can result in a large quantity of data. For more information about formatting the output or viewing multiple pages, see Pagination for API output. { \"plugins\": [ { \"id\": 9568, <---<<< PLUGIN_ID \"name\": \"F5 LTM\", <---<<< PLUGIN_NAME \"guid\": \"com.newrelic.f5\", <---<<< PLUGIN_GUID \"publisher\": \"New Relic Inc.\", \"summary_metrics\": [ { \"id\": 116635,> <---<<< SUMMARY_METRIC_ID \"name\": \"CPU\",> <---<<< SUMMARY_METRIC_NAME \"metric\": \"Component/CPU/Total/Global[%]\", <---<<< METRIC_NAME \"value_function\": \"average_value\", <---<<< METRIC_VALUE \"thresholds\": { \"caution\": 75, <---<<< SUMMARY_METRIC_CAUTION_THRESHOLD \"critical\": 85 <---<<< SUMMARY_METRIC_CRITICAL_THRESHOLD } }, { \"id\": 116636, \"name\": \"Throughput\", \"metric\": \"Component/Throughput/Total[bits/sec]\", \"value_function\": \"average_value\", \"thresholds\": { \"caution\": null, \"critical\": null } }, ..... } } ] ... Copy The output contains the summary_metrics that have been defined for the plugin. The summary_metric values are listed for each component.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.37689,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get a list of <em>plugins</em> (<em>v2</em>)",
        "sections": "Get a list of <em>plugins</em> (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": "Here is an example of how to use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain a list of all plugins for the account associated with a <em>REST</em> <em>API</em> key, including: Each <em>plugin</em> ID, <em>plugin</em> name, and GUID A list of summary metrics available for each of the components, including component IDs, names, and other"
      },
      "id": "603eb55a28ccbca0bbeba78a"
    },
    {
      "sections": [
        "List multiple plugin components (v2)",
        "Important",
        "List all components",
        "List by plugin_id",
        "View the components' output"
      ],
      "title": "List multiple plugin components (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "f2dd690f5c5cd2a1db2b41b9b29476b1b289659c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/list-multiple-plugin-components-v2/",
      "published_at": "2021-09-13T17:22:39Z",
      "updated_at": "2021-03-16T07:10:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use New Relic's REST API and your API key to obtain information about multiple components (instances) for your plugin, including: The summary metric in raw and formatted form as set by the plugin publisher Threshold data indicating when Caution and Critical alerts will be triggered Each COMPONENT_ID and COMPONENT_NAME for the plugin Summary information for each component, including SUMMARY_METRIC_ID and SUMMARY_METRIC_NAME The associated summary metric information, including METRIC_NAME and METRIC_VALUE You can use the API Explorer to list components. Important When using these examples, be sure to replace each placeholder (for example, ${PLUGIN_ID}) with its specific ID. List all components To obtain a list of the plugin's components (instances) and the summary data for the account associated with your API key, use: curl -X GET \"https://api.newrelic.com/v2/components.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy List by plugin_id To obtain a list of the plugin's components (instances) and summary data for a single ${PLUGIN_ID}, use the following command. curl -X GET 'https://api.newrelic.com/v2/components.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'filter[plugin_id]=${PLUGIN_ID}\" Copy View the components' output The output for each component ID will be similar to the following example, which is annotated and formatted for JSON. Due to the potential length of the output, you may want to paginate it. { \"components\": [ { \"id\": 3947935, <---<<< COMPONENT_ID \"name\": \"F5-01-prod\", <---<<< COMPONENT_NAME \"summary_metrics\": [ { \"id\": 116635, <---<<< SUMMARY_METRIC_ID \"name\": \"CPU\", <---<<< SUMMARY_METRIC_NAME \"metric\": \"Component/CPU/Total/Global[%]\", <---<<< METRIC_NAME \"value_function\": \"average_value\", <---<<< METRIC_VALUE \"thresholds\": { \"caution\": 75, <---<<< SUMMARY_METRIC_CAUTION_THRESHOLD \"critical\": 85 <---<<< SUMMARY_METRIC_CRITICAL_THRESHOLD }, \"values\": { \"raw\": 78.79225, <---<<< SUMMARY_METRIC_VALUE \"formatted\": \"78.8 %\" <---<<< SUMMARY_METRIC_FORMATTED_VALUE } }, { \"id\": 116636, \"name\": \"Throughput\", \"metric\": \"Component/Throughput/Total[bits/sec]\", ... }, ] }, .... ] } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.37428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "List multiple <em>plugin</em> components (<em>v2</em>)",
        "sections": "List multiple <em>plugin</em> components (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": " these <em>examples</em>, be sure to replace each placeholder (for example, ${<em>PLUGIN</em>_ID}) with its specific ID. List all components To obtain a list of the <em>plugin</em>&#x27;s components (instances) and the summary data for the account associated with your <em>API</em> key, use: curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;components.json&quot; \\ -H"
      },
      "id": "603eb58fe7b9d2fdc22a07c8"
    },
    {
      "sections": [
        "Listing metric timeslice data for plugin components (v2)",
        "Tip",
        "Listing a component's metric names",
        "Listing a specific metric name and values",
        "Specifying the metric data values"
      ],
      "title": "Listing metric timeslice data for plugin components (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "cd1b96e5c2803623faac8fb3d63df498097df4df",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/listing-metrics-plugin-components-v2/",
      "published_at": "2021-09-13T17:57:36Z",
      "updated_at": "2021-03-13T03:27:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use New Relic's REST API to obtain a list of metric timeslice data about your plugin's components (instances), including metric names and values, for the account associated with your API key. Tip When using these examples, be sure to replace each placeholder (for example, ${COMPONENT_ID}) with its specific ID. Listing a component's metric names To obtain a list of the metric names for a single component by its ${COMPONENT_ID}, use this API call: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy The output (JSON format) lists the metric name and values: { \"metrics\": [ { \"name\": \"Agent/MetricsReported/count\", <---<<< METRIC_NAME \"values\": [ \"average_response_time\", <---<<< METRIC_VALUES listing \"calls_per_minute\", \"call_count\", \"min_response_time\", \"max_response_time\", \"average_exclusive_time\", \"average_value\", \"requests_per_minute\", \"standard_deviation\" ] }, { \"name\": \"Component/Client SSL Profiles/Current Cache Entries//Common/clientssl-insecure-compatible[entries]\", \"values\": [ \"average_value\", \"total_value\", \"max_value\", \"min_value\", \"standard_deviation\", \"rate\", \"count\" ] }, ... } } Copy Listing a specific metric name and values To obtain a single metric name and the available metric values for a specific plugin component, replace the $ { COMPONENT_ID} and $ { METRIC_NAME} placeholders with the actual values in the following API call: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"name=${METRIC_NAME}\" Copy The output will be similar to what appears when you create an API call for multiple metric names. Specifying the metric data values To obtain the metric timeslice data for a specific component, use any of the following API calls. Be sure to replace the $ { COMPONENT_ID}, $ { APIKEY}, $ { METRIC_NAME} and $ { METRIC_VALUE} placeholders with the actual values. If you want to... Use this API call... Obtain all metric values Use the metric name to acquire all the metric values: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}\" Copy Obtain a single metric value Specify the metric name and the metric value: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}&values[]=${METRIC_VALUE}\" Copy Change the default time period and UTC Specify from and to values, and adjust for your time zone as applicable. For example: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.xml\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}&values[]=${METRIC_VALUE}&from=2014-03-01T20:59:00+00:00&to=2014-03-01T21:59:00+00:00&summarize=true\" Copy Return average metric data Include &summarize=true in the API call; for example: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.xml\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}&values[]=${METRIC_VALUE}&from=2014-03-01T20:59:00+00:00&to=2014-03-01T21:59:00+00:00&summarize=true\" Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.19455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Listing metric timeslice data for <em>plugin</em> components (<em>v2</em>)",
        "sections": "Listing metric timeslice data for <em>plugin</em> components (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": " a specific metric name and values To obtain a single metric name and the available metric values for a specific <em>plugin</em> component, replace the $ { COMPONENT_ID} and $ { METRIC_NAME} placeholders with the actual values in the following <em>API</em> call: curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;components"
      },
      "id": "60440d4664441f2a65378ee9"
    }
  ],
  "/docs/apis/rest-api-v2/plugin-examples-v2/get-list-plugins-v2": [
    {
      "sections": [
        "Get individual plugin components (v2)",
        "Tip",
        "List by component name",
        "List by component ID",
        "View the component's output"
      ],
      "title": "Get individual plugin components (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "8e5d5b5961b55a021ba90b40d6a352743a86a607",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/get-individual-plugin-components-v2/",
      "published_at": "2021-09-13T17:56:22Z",
      "updated_at": "2021-03-16T08:15:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use New Relic's REST API and your API key to obtain information about a single component for your plugin, including: The summary metric values in raw and formatted form as set by the plugin publisher Threshold data indicating where Caution and Critical alerts will be triggered The COMPONENT_ID and COMPONENT_NAME for the plugin Summary information, including SUMMARY_METRIC_ID and SUMMARY_METRIC_NAME The associated summary metric information, including METRIC_NAME and METRIC_VALUE You can use the API Explorer to list components. Tip When using these examples, be sure to replace each placeholder (for example, ${PLUGIN_ID}) with its specific ID. List by component name To obtain a list of the summary data values for a single component by name, use: curl -X GET 'https://api.newrelic.com/v2/components.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"filter[name]=${COMPONENT_NAME}\" Copy List by component ID To obtain a list of the summary data for a single component by its component ID, use one of the following commands. curl -X GET 'https://api.newrelic.com/v2/components.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"filter[id]=${COMPONENT_ID}\" Copy OR: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy View the component's output The output for each component ID will be similar to the following example (annotated and formatted for JSON). Due to the potential length of the output, you may want to paginate it. { \"components\": [ { \"id\": 3947935, <---<<< COMPONENT_ID \"name\": \"F5-01-prod\", <---<<< COMPONENT_NAME \"summary_metrics\": [ { \"id\": 116635, <---<<< SUMMARY_METRIC_ID \"name\": \"CPU\", <---<<< SUMMARY_METRIC_NAME \"metric\": \"Component/CPU/Total/Global[%]\", <---<<< METRIC_NAME \"value_function\": \"average_value\", <---<<< METRIC_VALUE \"thresholds\": { \"caution\": 75, <---<<< SUMMARY_METRIC_CAUTION_THRESHOLD \"critical\": 85 <---<<< SUMMARY_METRIC_CRITICAL_THRESHOLD }, \"values\": { \"raw\": 78.79225, <---<<< SUMMARY_METRIC_VALUE \"formatted\": \"78.8 %\" <---<<< Formatted SUMMARY_METRIC_VALUE } }, { \"id\": 116636, \"name\": \"Throughput\", \"metric\": \"Component/Throughput/Total[bits/sec]\", \"value_functions\": ... . . . } . . . ] } }, } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.37688,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get individual <em>plugin</em> components (<em>v2</em>)",
        "sections": "Get individual <em>plugin</em> components (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": " placeholder (for example, ${<em>PLUGIN</em>_ID}) with its specific ID. List by component name To obtain a list of the summary data values for a single component by name, use: curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;components.json&#x27; \\ -H &quot;X-<em>Api</em>-Key:${APIKEY}&quot; -i \\ -d &quot;filter[name]=${COMPONENT_NAME}&quot; Copy List"
      },
      "id": "603eb58f196a6724b2a83dbf"
    },
    {
      "sections": [
        "List multiple plugin components (v2)",
        "Important",
        "List all components",
        "List by plugin_id",
        "View the components' output"
      ],
      "title": "List multiple plugin components (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "f2dd690f5c5cd2a1db2b41b9b29476b1b289659c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/list-multiple-plugin-components-v2/",
      "published_at": "2021-09-13T17:22:39Z",
      "updated_at": "2021-03-16T07:10:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use New Relic's REST API and your API key to obtain information about multiple components (instances) for your plugin, including: The summary metric in raw and formatted form as set by the plugin publisher Threshold data indicating when Caution and Critical alerts will be triggered Each COMPONENT_ID and COMPONENT_NAME for the plugin Summary information for each component, including SUMMARY_METRIC_ID and SUMMARY_METRIC_NAME The associated summary metric information, including METRIC_NAME and METRIC_VALUE You can use the API Explorer to list components. Important When using these examples, be sure to replace each placeholder (for example, ${PLUGIN_ID}) with its specific ID. List all components To obtain a list of the plugin's components (instances) and the summary data for the account associated with your API key, use: curl -X GET \"https://api.newrelic.com/v2/components.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy List by plugin_id To obtain a list of the plugin's components (instances) and summary data for a single ${PLUGIN_ID}, use the following command. curl -X GET 'https://api.newrelic.com/v2/components.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'filter[plugin_id]=${PLUGIN_ID}\" Copy View the components' output The output for each component ID will be similar to the following example, which is annotated and formatted for JSON. Due to the potential length of the output, you may want to paginate it. { \"components\": [ { \"id\": 3947935, <---<<< COMPONENT_ID \"name\": \"F5-01-prod\", <---<<< COMPONENT_NAME \"summary_metrics\": [ { \"id\": 116635, <---<<< SUMMARY_METRIC_ID \"name\": \"CPU\", <---<<< SUMMARY_METRIC_NAME \"metric\": \"Component/CPU/Total/Global[%]\", <---<<< METRIC_NAME \"value_function\": \"average_value\", <---<<< METRIC_VALUE \"thresholds\": { \"caution\": 75, <---<<< SUMMARY_METRIC_CAUTION_THRESHOLD \"critical\": 85 <---<<< SUMMARY_METRIC_CRITICAL_THRESHOLD }, \"values\": { \"raw\": 78.79225, <---<<< SUMMARY_METRIC_VALUE \"formatted\": \"78.8 %\" <---<<< SUMMARY_METRIC_FORMATTED_VALUE } }, { \"id\": 116636, \"name\": \"Throughput\", \"metric\": \"Component/Throughput/Total[bits/sec]\", ... }, ] }, .... ] } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.37428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "List multiple <em>plugin</em> components (<em>v2</em>)",
        "sections": "List multiple <em>plugin</em> components (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": " these <em>examples</em>, be sure to replace each placeholder (for example, ${<em>PLUGIN</em>_ID}) with its specific ID. List all components To obtain a list of the <em>plugin</em>&#x27;s components (instances) and the summary data for the account associated with your <em>API</em> key, use: curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;components.json&quot; \\ -H"
      },
      "id": "603eb58fe7b9d2fdc22a07c8"
    },
    {
      "sections": [
        "Listing metric timeslice data for plugin components (v2)",
        "Tip",
        "Listing a component's metric names",
        "Listing a specific metric name and values",
        "Specifying the metric data values"
      ],
      "title": "Listing metric timeslice data for plugin components (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "cd1b96e5c2803623faac8fb3d63df498097df4df",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/listing-metrics-plugin-components-v2/",
      "published_at": "2021-09-13T17:57:36Z",
      "updated_at": "2021-03-13T03:27:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use New Relic's REST API to obtain a list of metric timeslice data about your plugin's components (instances), including metric names and values, for the account associated with your API key. Tip When using these examples, be sure to replace each placeholder (for example, ${COMPONENT_ID}) with its specific ID. Listing a component's metric names To obtain a list of the metric names for a single component by its ${COMPONENT_ID}, use this API call: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy The output (JSON format) lists the metric name and values: { \"metrics\": [ { \"name\": \"Agent/MetricsReported/count\", <---<<< METRIC_NAME \"values\": [ \"average_response_time\", <---<<< METRIC_VALUES listing \"calls_per_minute\", \"call_count\", \"min_response_time\", \"max_response_time\", \"average_exclusive_time\", \"average_value\", \"requests_per_minute\", \"standard_deviation\" ] }, { \"name\": \"Component/Client SSL Profiles/Current Cache Entries//Common/clientssl-insecure-compatible[entries]\", \"values\": [ \"average_value\", \"total_value\", \"max_value\", \"min_value\", \"standard_deviation\", \"rate\", \"count\" ] }, ... } } Copy Listing a specific metric name and values To obtain a single metric name and the available metric values for a specific plugin component, replace the $ { COMPONENT_ID} and $ { METRIC_NAME} placeholders with the actual values in the following API call: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"name=${METRIC_NAME}\" Copy The output will be similar to what appears when you create an API call for multiple metric names. Specifying the metric data values To obtain the metric timeslice data for a specific component, use any of the following API calls. Be sure to replace the $ { COMPONENT_ID}, $ { APIKEY}, $ { METRIC_NAME} and $ { METRIC_VALUE} placeholders with the actual values. If you want to... Use this API call... Obtain all metric values Use the metric name to acquire all the metric values: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}\" Copy Obtain a single metric value Specify the metric name and the metric value: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}&values[]=${METRIC_VALUE}\" Copy Change the default time period and UTC Specify from and to values, and adjust for your time zone as applicable. For example: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.xml\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}&values[]=${METRIC_VALUE}&from=2014-03-01T20:59:00+00:00&to=2014-03-01T21:59:00+00:00&summarize=true\" Copy Return average metric data Include &summarize=true in the API call; for example: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.xml\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}&values[]=${METRIC_VALUE}&from=2014-03-01T20:59:00+00:00&to=2014-03-01T21:59:00+00:00&summarize=true\" Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.19455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Listing metric timeslice data for <em>plugin</em> components (<em>v2</em>)",
        "sections": "Listing metric timeslice data for <em>plugin</em> components (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": " a specific metric name and values To obtain a single metric name and the available metric values for a specific <em>plugin</em> component, replace the $ { COMPONENT_ID} and $ { METRIC_NAME} placeholders with the actual values in the following <em>API</em> call: curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;components"
      },
      "id": "60440d4664441f2a65378ee9"
    }
  ],
  "/docs/apis/rest-api-v2/plugin-examples-v2/list-multiple-plugin-components-v2": [
    {
      "sections": [
        "Get individual plugin components (v2)",
        "Tip",
        "List by component name",
        "List by component ID",
        "View the component's output"
      ],
      "title": "Get individual plugin components (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "8e5d5b5961b55a021ba90b40d6a352743a86a607",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/get-individual-plugin-components-v2/",
      "published_at": "2021-09-13T17:56:22Z",
      "updated_at": "2021-03-16T08:15:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use New Relic's REST API and your API key to obtain information about a single component for your plugin, including: The summary metric values in raw and formatted form as set by the plugin publisher Threshold data indicating where Caution and Critical alerts will be triggered The COMPONENT_ID and COMPONENT_NAME for the plugin Summary information, including SUMMARY_METRIC_ID and SUMMARY_METRIC_NAME The associated summary metric information, including METRIC_NAME and METRIC_VALUE You can use the API Explorer to list components. Tip When using these examples, be sure to replace each placeholder (for example, ${PLUGIN_ID}) with its specific ID. List by component name To obtain a list of the summary data values for a single component by name, use: curl -X GET 'https://api.newrelic.com/v2/components.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"filter[name]=${COMPONENT_NAME}\" Copy List by component ID To obtain a list of the summary data for a single component by its component ID, use one of the following commands. curl -X GET 'https://api.newrelic.com/v2/components.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"filter[id]=${COMPONENT_ID}\" Copy OR: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy View the component's output The output for each component ID will be similar to the following example (annotated and formatted for JSON). Due to the potential length of the output, you may want to paginate it. { \"components\": [ { \"id\": 3947935, <---<<< COMPONENT_ID \"name\": \"F5-01-prod\", <---<<< COMPONENT_NAME \"summary_metrics\": [ { \"id\": 116635, <---<<< SUMMARY_METRIC_ID \"name\": \"CPU\", <---<<< SUMMARY_METRIC_NAME \"metric\": \"Component/CPU/Total/Global[%]\", <---<<< METRIC_NAME \"value_function\": \"average_value\", <---<<< METRIC_VALUE \"thresholds\": { \"caution\": 75, <---<<< SUMMARY_METRIC_CAUTION_THRESHOLD \"critical\": 85 <---<<< SUMMARY_METRIC_CRITICAL_THRESHOLD }, \"values\": { \"raw\": 78.79225, <---<<< SUMMARY_METRIC_VALUE \"formatted\": \"78.8 %\" <---<<< Formatted SUMMARY_METRIC_VALUE } }, { \"id\": 116636, \"name\": \"Throughput\", \"metric\": \"Component/Throughput/Total[bits/sec]\", \"value_functions\": ... . . . } . . . ] } }, } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.37688,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get individual <em>plugin</em> components (<em>v2</em>)",
        "sections": "Get individual <em>plugin</em> components (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": " placeholder (for example, ${<em>PLUGIN</em>_ID}) with its specific ID. List by component name To obtain a list of the summary data values for a single component by name, use: curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;components.json&#x27; \\ -H &quot;X-<em>Api</em>-Key:${APIKEY}&quot; -i \\ -d &quot;filter[name]=${COMPONENT_NAME}&quot; Copy List"
      },
      "id": "603eb58f196a6724b2a83dbf"
    },
    {
      "sections": [
        "Get a list of plugins (v2)",
        "List all plugins",
        "List by plugin ID",
        "Filter by plugin ID or GUID",
        "Plugin list output",
        "Tip"
      ],
      "title": "Get a list of plugins (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "d8de5b6aeafe748d8d0eb8f9559319b60a7ea582",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/get-list-plugins-v2/",
      "published_at": "2021-09-13T17:57:36Z",
      "updated_at": "2021-03-16T08:15:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is an example of how to use the New Relic REST API (v2) to obtain a list of all plugins for the account associated with a REST API key, including: Each plugin ID, plugin name, and GUID A list of summary metrics available for each of the components, including component IDs, names, and other values You can also use the API Explorer to list plugins. List all plugins To obtain a list of the plugins, use: curl -X GET \"https://api.newrelic.com/v2/plugins.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy You can also use the New Relic API explorer to list information for all plugins. List by plugin ID To list the components defined for a single plugin, if you know the plugin's ID, use: curl -X GET \"https://api.newrelic.com/v2/plugins/${PLUGIN_ID}.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy You can also use the New Relic API explorer to list information for a single plugin. Filter by plugin ID or GUID To filter the plugins list by GUID or plugin ID, replace the [guid] and ids with your values: curl -X GET 'https://api.newrelic.com/v2/plugins.json' \\ -H 'X-Api-Key:' -i \\ -d 'filter[guid]=mysql' Copy curl -X GET 'https://api.newrelic.com/v2/plugins.json' \\ -H 'X-Api-Key:' -i \\ -d 'filter[ids]=123,234' Copy Plugin list output The output is in JSON format, but you can modify this by specifying plugins.xml rather than plugins.json. The output will appear in the following format (for JSON). Tip PIugin queries can result in a large quantity of data. For more information about formatting the output or viewing multiple pages, see Pagination for API output. { \"plugins\": [ { \"id\": 9568, <---<<< PLUGIN_ID \"name\": \"F5 LTM\", <---<<< PLUGIN_NAME \"guid\": \"com.newrelic.f5\", <---<<< PLUGIN_GUID \"publisher\": \"New Relic Inc.\", \"summary_metrics\": [ { \"id\": 116635,> <---<<< SUMMARY_METRIC_ID \"name\": \"CPU\",> <---<<< SUMMARY_METRIC_NAME \"metric\": \"Component/CPU/Total/Global[%]\", <---<<< METRIC_NAME \"value_function\": \"average_value\", <---<<< METRIC_VALUE \"thresholds\": { \"caution\": 75, <---<<< SUMMARY_METRIC_CAUTION_THRESHOLD \"critical\": 85 <---<<< SUMMARY_METRIC_CRITICAL_THRESHOLD } }, { \"id\": 116636, \"name\": \"Throughput\", \"metric\": \"Component/Throughput/Total[bits/sec]\", \"value_function\": \"average_value\", \"thresholds\": { \"caution\": null, \"critical\": null } }, ..... } } ] ... Copy The output contains the summary_metrics that have been defined for the plugin. The summary_metric values are listed for each component.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.37688,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get a list of <em>plugins</em> (<em>v2</em>)",
        "sections": "Get a list of <em>plugins</em> (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": "Here is an example of how to use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain a list of all plugins for the account associated with a <em>REST</em> <em>API</em> key, including: Each <em>plugin</em> ID, <em>plugin</em> name, and GUID A list of summary metrics available for each of the components, including component IDs, names, and other"
      },
      "id": "603eb55a28ccbca0bbeba78a"
    },
    {
      "sections": [
        "Listing metric timeslice data for plugin components (v2)",
        "Tip",
        "Listing a component's metric names",
        "Listing a specific metric name and values",
        "Specifying the metric data values"
      ],
      "title": "Listing metric timeslice data for plugin components (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "cd1b96e5c2803623faac8fb3d63df498097df4df",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/listing-metrics-plugin-components-v2/",
      "published_at": "2021-09-13T17:57:36Z",
      "updated_at": "2021-03-13T03:27:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use New Relic's REST API to obtain a list of metric timeslice data about your plugin's components (instances), including metric names and values, for the account associated with your API key. Tip When using these examples, be sure to replace each placeholder (for example, ${COMPONENT_ID}) with its specific ID. Listing a component's metric names To obtain a list of the metric names for a single component by its ${COMPONENT_ID}, use this API call: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy The output (JSON format) lists the metric name and values: { \"metrics\": [ { \"name\": \"Agent/MetricsReported/count\", <---<<< METRIC_NAME \"values\": [ \"average_response_time\", <---<<< METRIC_VALUES listing \"calls_per_minute\", \"call_count\", \"min_response_time\", \"max_response_time\", \"average_exclusive_time\", \"average_value\", \"requests_per_minute\", \"standard_deviation\" ] }, { \"name\": \"Component/Client SSL Profiles/Current Cache Entries//Common/clientssl-insecure-compatible[entries]\", \"values\": [ \"average_value\", \"total_value\", \"max_value\", \"min_value\", \"standard_deviation\", \"rate\", \"count\" ] }, ... } } Copy Listing a specific metric name and values To obtain a single metric name and the available metric values for a specific plugin component, replace the $ { COMPONENT_ID} and $ { METRIC_NAME} placeholders with the actual values in the following API call: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"name=${METRIC_NAME}\" Copy The output will be similar to what appears when you create an API call for multiple metric names. Specifying the metric data values To obtain the metric timeslice data for a specific component, use any of the following API calls. Be sure to replace the $ { COMPONENT_ID}, $ { APIKEY}, $ { METRIC_NAME} and $ { METRIC_VALUE} placeholders with the actual values. If you want to... Use this API call... Obtain all metric values Use the metric name to acquire all the metric values: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}\" Copy Obtain a single metric value Specify the metric name and the metric value: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}&values[]=${METRIC_VALUE}\" Copy Change the default time period and UTC Specify from and to values, and adjust for your time zone as applicable. For example: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.xml\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}&values[]=${METRIC_VALUE}&from=2014-03-01T20:59:00+00:00&to=2014-03-01T21:59:00+00:00&summarize=true\" Copy Return average metric data Include &summarize=true in the API call; for example: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}/metrics/data.xml\" \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"names[]=${METRIC_NAME}&values[]=${METRIC_VALUE}&from=2014-03-01T20:59:00+00:00&to=2014-03-01T21:59:00+00:00&summarize=true\" Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.19455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Listing metric timeslice data for <em>plugin</em> components (<em>v2</em>)",
        "sections": "Listing metric timeslice data for <em>plugin</em> components (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": " a specific metric name and values To obtain a single metric name and the available metric values for a specific <em>plugin</em> component, replace the $ { COMPONENT_ID} and $ { METRIC_NAME} placeholders with the actual values in the following <em>API</em> call: curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;components"
      },
      "id": "60440d4664441f2a65378ee9"
    }
  ],
  "/docs/apis/rest-api-v2/plugin-examples-v2/listing-metrics-plugin-components-v2": [
    {
      "sections": [
        "Get individual plugin components (v2)",
        "Tip",
        "List by component name",
        "List by component ID",
        "View the component's output"
      ],
      "title": "Get individual plugin components (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "8e5d5b5961b55a021ba90b40d6a352743a86a607",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/get-individual-plugin-components-v2/",
      "published_at": "2021-09-13T17:56:22Z",
      "updated_at": "2021-03-16T08:15:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use New Relic's REST API and your API key to obtain information about a single component for your plugin, including: The summary metric values in raw and formatted form as set by the plugin publisher Threshold data indicating where Caution and Critical alerts will be triggered The COMPONENT_ID and COMPONENT_NAME for the plugin Summary information, including SUMMARY_METRIC_ID and SUMMARY_METRIC_NAME The associated summary metric information, including METRIC_NAME and METRIC_VALUE You can use the API Explorer to list components. Tip When using these examples, be sure to replace each placeholder (for example, ${PLUGIN_ID}) with its specific ID. List by component name To obtain a list of the summary data values for a single component by name, use: curl -X GET 'https://api.newrelic.com/v2/components.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"filter[name]=${COMPONENT_NAME}\" Copy List by component ID To obtain a list of the summary data for a single component by its component ID, use one of the following commands. curl -X GET 'https://api.newrelic.com/v2/components.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d \"filter[id]=${COMPONENT_ID}\" Copy OR: curl -X GET \"https://api.newrelic.com/v2/components/${COMPONENT_ID}.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy View the component's output The output for each component ID will be similar to the following example (annotated and formatted for JSON). Due to the potential length of the output, you may want to paginate it. { \"components\": [ { \"id\": 3947935, <---<<< COMPONENT_ID \"name\": \"F5-01-prod\", <---<<< COMPONENT_NAME \"summary_metrics\": [ { \"id\": 116635, <---<<< SUMMARY_METRIC_ID \"name\": \"CPU\", <---<<< SUMMARY_METRIC_NAME \"metric\": \"Component/CPU/Total/Global[%]\", <---<<< METRIC_NAME \"value_function\": \"average_value\", <---<<< METRIC_VALUE \"thresholds\": { \"caution\": 75, <---<<< SUMMARY_METRIC_CAUTION_THRESHOLD \"critical\": 85 <---<<< SUMMARY_METRIC_CRITICAL_THRESHOLD }, \"values\": { \"raw\": 78.79225, <---<<< SUMMARY_METRIC_VALUE \"formatted\": \"78.8 %\" <---<<< Formatted SUMMARY_METRIC_VALUE } }, { \"id\": 116636, \"name\": \"Throughput\", \"metric\": \"Component/Throughput/Total[bits/sec]\", \"value_functions\": ... . . . } . . . ] } }, } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.37688,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get individual <em>plugin</em> components (<em>v2</em>)",
        "sections": "Get individual <em>plugin</em> components (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": " placeholder (for example, ${<em>PLUGIN</em>_ID}) with its specific ID. List by component name To obtain a list of the summary data values for a single component by name, use: curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;components.json&#x27; \\ -H &quot;X-<em>Api</em>-Key:${APIKEY}&quot; -i \\ -d &quot;filter[name]=${COMPONENT_NAME}&quot; Copy List"
      },
      "id": "603eb58f196a6724b2a83dbf"
    },
    {
      "sections": [
        "Get a list of plugins (v2)",
        "List all plugins",
        "List by plugin ID",
        "Filter by plugin ID or GUID",
        "Plugin list output",
        "Tip"
      ],
      "title": "Get a list of plugins (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "d8de5b6aeafe748d8d0eb8f9559319b60a7ea582",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/get-list-plugins-v2/",
      "published_at": "2021-09-13T17:57:36Z",
      "updated_at": "2021-03-16T08:15:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is an example of how to use the New Relic REST API (v2) to obtain a list of all plugins for the account associated with a REST API key, including: Each plugin ID, plugin name, and GUID A list of summary metrics available for each of the components, including component IDs, names, and other values You can also use the API Explorer to list plugins. List all plugins To obtain a list of the plugins, use: curl -X GET \"https://api.newrelic.com/v2/plugins.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy You can also use the New Relic API explorer to list information for all plugins. List by plugin ID To list the components defined for a single plugin, if you know the plugin's ID, use: curl -X GET \"https://api.newrelic.com/v2/plugins/${PLUGIN_ID}.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy You can also use the New Relic API explorer to list information for a single plugin. Filter by plugin ID or GUID To filter the plugins list by GUID or plugin ID, replace the [guid] and ids with your values: curl -X GET 'https://api.newrelic.com/v2/plugins.json' \\ -H 'X-Api-Key:' -i \\ -d 'filter[guid]=mysql' Copy curl -X GET 'https://api.newrelic.com/v2/plugins.json' \\ -H 'X-Api-Key:' -i \\ -d 'filter[ids]=123,234' Copy Plugin list output The output is in JSON format, but you can modify this by specifying plugins.xml rather than plugins.json. The output will appear in the following format (for JSON). Tip PIugin queries can result in a large quantity of data. For more information about formatting the output or viewing multiple pages, see Pagination for API output. { \"plugins\": [ { \"id\": 9568, <---<<< PLUGIN_ID \"name\": \"F5 LTM\", <---<<< PLUGIN_NAME \"guid\": \"com.newrelic.f5\", <---<<< PLUGIN_GUID \"publisher\": \"New Relic Inc.\", \"summary_metrics\": [ { \"id\": 116635,> <---<<< SUMMARY_METRIC_ID \"name\": \"CPU\",> <---<<< SUMMARY_METRIC_NAME \"metric\": \"Component/CPU/Total/Global[%]\", <---<<< METRIC_NAME \"value_function\": \"average_value\", <---<<< METRIC_VALUE \"thresholds\": { \"caution\": 75, <---<<< SUMMARY_METRIC_CAUTION_THRESHOLD \"critical\": 85 <---<<< SUMMARY_METRIC_CRITICAL_THRESHOLD } }, { \"id\": 116636, \"name\": \"Throughput\", \"metric\": \"Component/Throughput/Total[bits/sec]\", \"value_function\": \"average_value\", \"thresholds\": { \"caution\": null, \"critical\": null } }, ..... } } ] ... Copy The output contains the summary_metrics that have been defined for the plugin. The summary_metric values are listed for each component.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.37688,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Get a list of <em>plugins</em> (<em>v2</em>)",
        "sections": "Get a list of <em>plugins</em> (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": "Here is an example of how to use the New Relic <em>REST</em> <em>API</em> (<em>v2</em>) to obtain a list of all plugins for the account associated with a <em>REST</em> <em>API</em> key, including: Each <em>plugin</em> ID, <em>plugin</em> name, and GUID A list of summary metrics available for each of the components, including component IDs, names, and other"
      },
      "id": "603eb55a28ccbca0bbeba78a"
    },
    {
      "sections": [
        "List multiple plugin components (v2)",
        "Important",
        "List all components",
        "List by plugin_id",
        "View the components' output"
      ],
      "title": "List multiple plugin components (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Plugin examples (v2)"
      ],
      "external_id": "f2dd690f5c5cd2a1db2b41b9b29476b1b289659c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/plugin-examples-v2/list-multiple-plugin-components-v2/",
      "published_at": "2021-09-13T17:22:39Z",
      "updated_at": "2021-03-16T07:10:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use New Relic's REST API and your API key to obtain information about multiple components (instances) for your plugin, including: The summary metric in raw and formatted form as set by the plugin publisher Threshold data indicating when Caution and Critical alerts will be triggered Each COMPONENT_ID and COMPONENT_NAME for the plugin Summary information for each component, including SUMMARY_METRIC_ID and SUMMARY_METRIC_NAME The associated summary metric information, including METRIC_NAME and METRIC_VALUE You can use the API Explorer to list components. Important When using these examples, be sure to replace each placeholder (for example, ${PLUGIN_ID}) with its specific ID. List all components To obtain a list of the plugin's components (instances) and the summary data for the account associated with your API key, use: curl -X GET \"https://api.newrelic.com/v2/components.json\" \\ -H \"X-Api-Key:${APIKEY}\" -i Copy List by plugin_id To obtain a list of the plugin's components (instances) and summary data for a single ${PLUGIN_ID}, use the following command. curl -X GET 'https://api.newrelic.com/v2/components.json' \\ -H \"X-Api-Key:${APIKEY}\" -i \\ -d 'filter[plugin_id]=${PLUGIN_ID}\" Copy View the components' output The output for each component ID will be similar to the following example, which is annotated and formatted for JSON. Due to the potential length of the output, you may want to paginate it. { \"components\": [ { \"id\": 3947935, <---<<< COMPONENT_ID \"name\": \"F5-01-prod\", <---<<< COMPONENT_NAME \"summary_metrics\": [ { \"id\": 116635, <---<<< SUMMARY_METRIC_ID \"name\": \"CPU\", <---<<< SUMMARY_METRIC_NAME \"metric\": \"Component/CPU/Total/Global[%]\", <---<<< METRIC_NAME \"value_function\": \"average_value\", <---<<< METRIC_VALUE \"thresholds\": { \"caution\": 75, <---<<< SUMMARY_METRIC_CAUTION_THRESHOLD \"critical\": 85 <---<<< SUMMARY_METRIC_CRITICAL_THRESHOLD }, \"values\": { \"raw\": 78.79225, <---<<< SUMMARY_METRIC_VALUE \"formatted\": \"78.8 %\" <---<<< SUMMARY_METRIC_FORMATTED_VALUE } }, { \"id\": 116636, \"name\": \"Throughput\", \"metric\": \"Component/Throughput/Total[bits/sec]\", ... }, ] }, .... ] } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.37428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "List multiple <em>plugin</em> components (<em>v2</em>)",
        "sections": "List multiple <em>plugin</em> components (<em>v2</em>)",
        "tags": "<em>Plugin</em> <em>examples</em> (<em>v2</em>)",
        "body": " these <em>examples</em>, be sure to replace each placeholder (for example, ${<em>PLUGIN</em>_ID}) with its specific ID. List all components To obtain a list of the <em>plugin</em>&#x27;s components (instances) and the summary data for the account associated with your <em>API</em> key, use: curl -X GET &quot;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;components.json&quot; \\ -H"
      },
      "id": "603eb58fe7b9d2fdc22a07c8"
    }
  ],
  "/docs/apis/rest-api-v2/troubleshooting/301-response-rest-api-calls": [
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.74982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "sections": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". You must replace the placeholder &lt;URL&gt; with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;metrics&#x2F;data.json Copy The $APPID specifies the exact application or product"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "List application ID, host ID, instance ID",
        "Use the API Explorer",
        "List application IDs",
        "List host IDs",
        "Host ID and summary data using the REST API Explorer",
        "{HOST_ID} output",
        "List instance IDs",
        "Instance ID and summary data using the REST API Explorer",
        "{INSTANCE_ID} output",
        "Java instance ID (JVM) using the UI",
        "REST API application list example"
      ],
      "title": "List application ID, host ID, instance ID",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "87dd2a198e50edc8e78d7bb7c70ba724aff73053",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/list-application-id-host-id-instance-id/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM assigns IDs to entities related to an application. These are used to collect information about the operation and performance from different view points. These IDs can be returned via New Relic's REST API. The IDs may include: Application ID $APP_ID for each instrumented app Host ID $HOST_ID for each host Instance ID $INSTANCE_ID if there are multiple instances of the app To list any of these IDs in the New Relic API Explorer, you need an API key. Use the API Explorer You can use the API Explorer to return a list of all product IDs for a particular product: Go to one.newrelic.com > APM > (select an app). Go to the API Explorer at rpm.newrelic.com/api/explore, then select your account name from the Select an account dropdown. From the sidebar, select (product category) > GET List. Select Send Request. Browse the Response to locate the product ID. Use the product ID you located in your REST API calls. List application IDs Each app monitored by an APM agent is assigned a name. A unique $APP_ID is also associated with that name. The $APP_ID is fundamental for retrieving APM information about your apps. For more information about listing and using the $APP_ID, and obtaining the summary data, see Listing your app ID. List host IDs The $HOST_ID is used to get APM data for a specific host running an app. A physical server may have more than one host. For example, a web server program running on a physical server may be configured to have more than one virtual host. IDs for the host and physical server are not the same. Each host ID is unique and represents different items. Use the $HOST_ID to retrieve summary metrics for the host as well as specific metric timeslice values. For more information about available metrics: Go to rpm.newrelic.com. Go to the API Explorer, then select your account name from the Select an account dropdown. Go to the API Explorer's Application host page at rpm.newrelic.com/api/explore/application_hosts/names. Host ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $HOST_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the {HOST_ID} for each host. {HOST_ID} output The output will appear similar to this: { \"application_hosts\": [ { \"id\": 34966, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 13512 <---<<< {INSTANCE_ID} ], } }, { \"id\": 9999999, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { \". . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 186288 <---<<< {INSTANCE_ID} ], } }, . . . Copy List instance IDs The instance ID meaning depends on the New Relic language agent being used. You can list this ID from the REST API. For Java, you can also view the instance ID (JVM) from APM's Overview page. Agent Instance ID represents Go The Go program on the host reporting to the app name Java A Java Virtual Machine (JVM) .NET For New Relic's .NET Framework agent, this is the AppDomain Node.js A worker process PHP The daemon agent Ruby An individual Ruby worker process Python The master and worker processes You can retrieve summary metrics for the instance as well as specific metric timeslice values using the {INSTANCE_ID}. For details about available metrics, use the REST API Explorer Application Instance page. Instance ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $INSTANCE_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the $INSTANCE_ID for each instance. {INSTANCE_ID} output The { INSTANCE_ID} output will appear similar to this: { \"application_instances\": [ { \"id\": 35120, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 34966, <---<<< {HOST_ID} } }, { \"id\": 186288, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 186283, <---<<< {HOST_ID} } }, . . . Copy Java instance ID (JVM) using the UI Java apps: To locate a specific JVM $INSTANCE_ID in New Relic: Go to one.newrelic.com > APM > Applications > (select an app) > JVMs. Select the name of the instance. In the URL, the number after the _i designator represents the Java JVM instance: https://rpm.newrelic.com/accounts/$ACCOUNT_ID/applications/$APP_ID_i$INSTANCE_ID Copy REST API application list example The following example shows how to locate all the ID information for an application by using the APP_ID. If you have an EU account, the endpoint begins with https://api.eu.newrelic.com. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H 'Api-Key:$API_KEY' -i \\ -d 'filter[ids]=1441' <----<<<< {APP_ID} Copy The resulting example output is running on five servers. One server is hosting two virtual hosts for a total of six hosts. The output includes a links section listing the application_instances and application_hosts for the application. { \"applications\": [ { \"id\": 1441, <----<<<< {APP_ID} \"name\": \"RPM Combined Production\", \"language\": \"ruby\", \"health_status\": \"green\", \"reporting\": true, \"last_reported_at\": \"2015-11-10T23:19:47+00:00\", \"application_summary\": { . . . }, \"end_user_summary\": { . . . }, \"settings\": { . . . }, \"links\": { \"application_instances\": [ <---<<<< {INSTANCE_ID} list 21790, 24810, 27948, 35120, 35121, 35122, 186288, 247253, 247254, 247255, 247256 ], \"application_hosts\": [ <---<<<< {HOST_ID} list 21788, 24808, 34966, 186283, 247245, 286551 ] } } ], . . . Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.74982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Host ID and summary data using the <em>REST</em> <em>API</em> Explorer",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " for a particular application, you will need the $APP_ID. Go to the <em>API</em> Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;hosts.json&#x27; \\ -H &#x27;<em>Api</em>-Key:$<em>API</em>_KEY&#x27; -i Copy"
      },
      "id": "60440c9628ccbc2de32c6078"
    },
    {
      "sections": [
        "New Relic partnership account authentication",
        "Custom headers and API calls",
        "Known limitations"
      ],
      "title": "New Relic partnership account authentication",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "a4e139380383b634e44d288b7065597de60e6b84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/admin-users-api-key-partnerships/",
      "published_at": "2021-09-13T18:41:50Z",
      "updated_at": "2021-03-13T03:10:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This approach adds a new authentication method to the customer-facing New Relic REST API (v2) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all REST API (v2) calls. It offers no new functionality for non-partner API users. When calling endpoints in the New Relic REST API (v2) that require the user key, New Relic suggests you use the described authentication method. Custom headers and API calls When making API calls, use the following custom headers with your partner API key, partner ID, and your account ID: X-Api-Key:YOUR_PARTNER_ACCOUNT_API_KEY NewRelic-Partner-Id:YOUR_PARTNER_ID NewRelic-Account-Id:YOUR_CUSTOMERS_ACCOUNT_ID Providing authentication to the REST API (v2) in this form allows you to complete any API operation on your customer’s accounts. This bypasses the customer-facing requirement that some API calls require an Admin user’s API key. This authentication method also works for API endpoints that require only the REST API key. This new authentication method works for all endpoints, not only those that require the Admin User’s API key. Known limitations This partner-only authentication method will only work with the New Relic REST API (v2). It does not work with the following: Deployment API Infrastructure API for alerts Insights API Insights Dashboard API Partner API Plugin API Synthetics API",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.09755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Custom headers and <em>API</em> calls",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "This approach adds a new authentication method to the customer-facing New Relic <em>REST</em> <em>API</em> (<em>v2</em>) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all <em>REST</em> <em>API</em> (<em>v2</em>) calls"
      },
      "id": "60440747e7b9d2a1465799f2"
    }
  ],
  "/docs/apis/rest-api-v2/troubleshooting/500-error-when-starting-api-explorer": [
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.74982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "sections": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". You must replace the placeholder &lt;URL&gt; with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;metrics&#x2F;data.json Copy The $APPID specifies the exact application or product"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "List application ID, host ID, instance ID",
        "Use the API Explorer",
        "List application IDs",
        "List host IDs",
        "Host ID and summary data using the REST API Explorer",
        "{HOST_ID} output",
        "List instance IDs",
        "Instance ID and summary data using the REST API Explorer",
        "{INSTANCE_ID} output",
        "Java instance ID (JVM) using the UI",
        "REST API application list example"
      ],
      "title": "List application ID, host ID, instance ID",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "87dd2a198e50edc8e78d7bb7c70ba724aff73053",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/list-application-id-host-id-instance-id/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM assigns IDs to entities related to an application. These are used to collect information about the operation and performance from different view points. These IDs can be returned via New Relic's REST API. The IDs may include: Application ID $APP_ID for each instrumented app Host ID $HOST_ID for each host Instance ID $INSTANCE_ID if there are multiple instances of the app To list any of these IDs in the New Relic API Explorer, you need an API key. Use the API Explorer You can use the API Explorer to return a list of all product IDs for a particular product: Go to one.newrelic.com > APM > (select an app). Go to the API Explorer at rpm.newrelic.com/api/explore, then select your account name from the Select an account dropdown. From the sidebar, select (product category) > GET List. Select Send Request. Browse the Response to locate the product ID. Use the product ID you located in your REST API calls. List application IDs Each app monitored by an APM agent is assigned a name. A unique $APP_ID is also associated with that name. The $APP_ID is fundamental for retrieving APM information about your apps. For more information about listing and using the $APP_ID, and obtaining the summary data, see Listing your app ID. List host IDs The $HOST_ID is used to get APM data for a specific host running an app. A physical server may have more than one host. For example, a web server program running on a physical server may be configured to have more than one virtual host. IDs for the host and physical server are not the same. Each host ID is unique and represents different items. Use the $HOST_ID to retrieve summary metrics for the host as well as specific metric timeslice values. For more information about available metrics: Go to rpm.newrelic.com. Go to the API Explorer, then select your account name from the Select an account dropdown. Go to the API Explorer's Application host page at rpm.newrelic.com/api/explore/application_hosts/names. Host ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $HOST_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the {HOST_ID} for each host. {HOST_ID} output The output will appear similar to this: { \"application_hosts\": [ { \"id\": 34966, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 13512 <---<<< {INSTANCE_ID} ], } }, { \"id\": 9999999, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { \". . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 186288 <---<<< {INSTANCE_ID} ], } }, . . . Copy List instance IDs The instance ID meaning depends on the New Relic language agent being used. You can list this ID from the REST API. For Java, you can also view the instance ID (JVM) from APM's Overview page. Agent Instance ID represents Go The Go program on the host reporting to the app name Java A Java Virtual Machine (JVM) .NET For New Relic's .NET Framework agent, this is the AppDomain Node.js A worker process PHP The daemon agent Ruby An individual Ruby worker process Python The master and worker processes You can retrieve summary metrics for the instance as well as specific metric timeslice values using the {INSTANCE_ID}. For details about available metrics, use the REST API Explorer Application Instance page. Instance ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $INSTANCE_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the $INSTANCE_ID for each instance. {INSTANCE_ID} output The { INSTANCE_ID} output will appear similar to this: { \"application_instances\": [ { \"id\": 35120, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 34966, <---<<< {HOST_ID} } }, { \"id\": 186288, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 186283, <---<<< {HOST_ID} } }, . . . Copy Java instance ID (JVM) using the UI Java apps: To locate a specific JVM $INSTANCE_ID in New Relic: Go to one.newrelic.com > APM > Applications > (select an app) > JVMs. Select the name of the instance. In the URL, the number after the _i designator represents the Java JVM instance: https://rpm.newrelic.com/accounts/$ACCOUNT_ID/applications/$APP_ID_i$INSTANCE_ID Copy REST API application list example The following example shows how to locate all the ID information for an application by using the APP_ID. If you have an EU account, the endpoint begins with https://api.eu.newrelic.com. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H 'Api-Key:$API_KEY' -i \\ -d 'filter[ids]=1441' <----<<<< {APP_ID} Copy The resulting example output is running on five servers. One server is hosting two virtual hosts for a total of six hosts. The output includes a links section listing the application_instances and application_hosts for the application. { \"applications\": [ { \"id\": 1441, <----<<<< {APP_ID} \"name\": \"RPM Combined Production\", \"language\": \"ruby\", \"health_status\": \"green\", \"reporting\": true, \"last_reported_at\": \"2015-11-10T23:19:47+00:00\", \"application_summary\": { . . . }, \"end_user_summary\": { . . . }, \"settings\": { . . . }, \"links\": { \"application_instances\": [ <---<<<< {INSTANCE_ID} list 21790, 24810, 27948, 35120, 35121, 35122, 186288, 247253, 247254, 247255, 247256 ], \"application_hosts\": [ <---<<<< {HOST_ID} list 21788, 24808, 34966, 186283, 247245, 286551 ] } } ], . . . Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.74982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Host ID and summary data using the <em>REST</em> <em>API</em> Explorer",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " for a particular application, you will need the $APP_ID. Go to the <em>API</em> Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;hosts.json&#x27; \\ -H &#x27;<em>Api</em>-Key:$<em>API</em>_KEY&#x27; -i Copy"
      },
      "id": "60440c9628ccbc2de32c6078"
    },
    {
      "sections": [
        "New Relic partnership account authentication",
        "Custom headers and API calls",
        "Known limitations"
      ],
      "title": "New Relic partnership account authentication",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "a4e139380383b634e44d288b7065597de60e6b84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/admin-users-api-key-partnerships/",
      "published_at": "2021-09-13T18:41:50Z",
      "updated_at": "2021-03-13T03:10:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This approach adds a new authentication method to the customer-facing New Relic REST API (v2) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all REST API (v2) calls. It offers no new functionality for non-partner API users. When calling endpoints in the New Relic REST API (v2) that require the user key, New Relic suggests you use the described authentication method. Custom headers and API calls When making API calls, use the following custom headers with your partner API key, partner ID, and your account ID: X-Api-Key:YOUR_PARTNER_ACCOUNT_API_KEY NewRelic-Partner-Id:YOUR_PARTNER_ID NewRelic-Account-Id:YOUR_CUSTOMERS_ACCOUNT_ID Providing authentication to the REST API (v2) in this form allows you to complete any API operation on your customer’s accounts. This bypasses the customer-facing requirement that some API calls require an Admin user’s API key. This authentication method also works for API endpoints that require only the REST API key. This new authentication method works for all endpoints, not only those that require the Admin User’s API key. Known limitations This partner-only authentication method will only work with the New Relic REST API (v2). It does not work with the following: Deployment API Infrastructure API for alerts Insights API Insights Dashboard API Partner API Plugin API Synthetics API",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.09755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Custom headers and <em>API</em> calls",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "This approach adds a new authentication method to the customer-facing New Relic <em>REST</em> <em>API</em> (<em>v2</em>) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all <em>REST</em> <em>API</em> (<em>v2</em>) calls"
      },
      "id": "60440747e7b9d2a1465799f2"
    }
  ],
  "/docs/apis/rest-api-v2/troubleshooting/http-200-status-api-explorer": [
    {
      "sections": [
        "Introduction to New Relic REST API (v2)",
        "Setup",
        "Tip",
        "URL",
        "API key $API_KEY",
        "Query details (PAYLOAD)",
        "Examples"
      ],
      "title": "Introduction to New Relic REST API (v2)",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "97d12808fc706366121b8c005edc2320a0c7797b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's REST APIs let you retrieve data from, and push data to New Relic tools, and include configuration and delete capabilities. You can also use the API Explorer to understand the data available to you via the REST API, to obtain curl commands, and to see JSON responses. Setup The REST API command structure follows this template: curl -X GET <URL> -H \"Api-Key:$API_KEY\" -d '<PAYLOAD>' Copy The GET command could also be a POST or DELETE, depending on the query intent. To understand the placeholders, keep reading. Tip Our examples use curl as a common command line tool to pull metric timeslice data from the REST API. However, you can use any method to make your REST requests. The curl commands include target URLs, header information, and data which are relevant for any request mechanism. URL The API calls require a URL to specify the location from which the data will be accessed. You must replace the placeholder <URL> with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy The $APPID specifies the exact application or product for which the data is being requested. The information following this parameter will vary depending on the data request. If you have an EU region account, the URL is: api. eu .newrelic.com/v2/applications/$APP_ID/metrics/data.json Copy Tip You can retrieve XML data instead of JSON by replacing .json with .xml. API key $API_KEY New Relic API calls require an API key. This may be one of several API keys: A user key: This is recommended. It's our latest key implementation and has fewer limitations than a REST API key. The user key is also used for our NerdGraph API. A REST API key: This is our older key implementation. For more information about it, see REST API key. If you use this key, the required header is X-Api-Key and not Api-Key. If you have a New Relic partnership account, you'll use a different key: see Partnership authentication. In our REST API examples, we borrow the API key placeholder $API_KEY from Unix shell programming. Be sure to replace that and other user-specific variables when forming calls. Query details (PAYLOAD) The < PAYLOAD> contains the query details, which define: The metric name you want to query and the value you want to retrieve The defined time range for retrieving metrics (Optional): The average of the metric timeslice data by using summarize Examples See the following for example REST API use cases: APM examples (how to retrieve metric timeslice data from APM) Browser examples (how to retrieve metric timeslice data from browser monitoring) Infrastructure alert examples Plugin examples (how to retrieve information and metric timeslice data about plugins from New Relic Plugin Central) Alerts examples (create alert conditions and configure notification channels, and more)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.74976,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "sections": "Introduction to New Relic <em>REST</em> <em>API</em> (<em>v2</em>)",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": ". You must replace the placeholder &lt;URL&gt; with the appropriate URL which will change depending on the type of data being requested. In general the URL follows this template: https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;metrics&#x2F;data.json Copy The $APPID specifies the exact application or product"
      },
      "id": "604428f528ccbc84422c60ef"
    },
    {
      "sections": [
        "List application ID, host ID, instance ID",
        "Use the API Explorer",
        "List application IDs",
        "List host IDs",
        "Host ID and summary data using the REST API Explorer",
        "{HOST_ID} output",
        "List instance IDs",
        "Instance ID and summary data using the REST API Explorer",
        "{INSTANCE_ID} output",
        "Java instance ID (JVM) using the UI",
        "REST API application list example"
      ],
      "title": "List application ID, host ID, instance ID",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "87dd2a198e50edc8e78d7bb7c70ba724aff73053",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/list-application-id-host-id-instance-id/",
      "published_at": "2021-09-14T04:42:45Z",
      "updated_at": "2021-09-08T19:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM assigns IDs to entities related to an application. These are used to collect information about the operation and performance from different view points. These IDs can be returned via New Relic's REST API. The IDs may include: Application ID $APP_ID for each instrumented app Host ID $HOST_ID for each host Instance ID $INSTANCE_ID if there are multiple instances of the app To list any of these IDs in the New Relic API Explorer, you need an API key. Use the API Explorer You can use the API Explorer to return a list of all product IDs for a particular product: Go to one.newrelic.com > APM > (select an app). Go to the API Explorer at rpm.newrelic.com/api/explore, then select your account name from the Select an account dropdown. From the sidebar, select (product category) > GET List. Select Send Request. Browse the Response to locate the product ID. Use the product ID you located in your REST API calls. List application IDs Each app monitored by an APM agent is assigned a name. A unique $APP_ID is also associated with that name. The $APP_ID is fundamental for retrieving APM information about your apps. For more information about listing and using the $APP_ID, and obtaining the summary data, see Listing your app ID. List host IDs The $HOST_ID is used to get APM data for a specific host running an app. A physical server may have more than one host. For example, a web server program running on a physical server may be configured to have more than one virtual host. IDs for the host and physical server are not the same. Each host ID is unique and represents different items. Use the $HOST_ID to retrieve summary metrics for the host as well as specific metric timeslice values. For more information about available metrics: Go to rpm.newrelic.com. Go to the API Explorer, then select your account name from the Select an account dropdown. Go to the API Explorer's Application host page at rpm.newrelic.com/api/explore/application_hosts/names. Host ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $HOST_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the {HOST_ID} for each host. {HOST_ID} output The output will appear similar to this: { \"application_hosts\": [ { \"id\": 34966, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 13512 <---<<< {INSTANCE_ID} ], } }, { \"id\": 9999999, <---<<< {HOST_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { \". . . }, \"links\": { \"application\": 1234, <---<<< {APP_ID} \"application_instances\": [ 186288 <---<<< {INSTANCE_ID} ], } }, . . . Copy List instance IDs The instance ID meaning depends on the New Relic language agent being used. You can list this ID from the REST API. For Java, you can also view the instance ID (JVM) from APM's Overview page. Agent Instance ID represents Go The Go program on the host reporting to the app name Java A Java Virtual Machine (JVM) .NET For New Relic's .NET Framework agent, this is the AppDomain Node.js A worker process PHP The daemon agent Ruby An individual Ruby worker process Python The master and worker processes You can retrieve summary metrics for the instance as well as specific metric timeslice values using the {INSTANCE_ID}. For details about available metrics, use the REST API Explorer Application Instance page. Instance ID and summary data using the REST API Explorer To use the API Explorer to return a list of every $INSTANCE_ID for a particular application, you will need the $APP_ID. Go to the API Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET 'https://api.newrelic.com/v2/applications/$APP_ID/hosts.json' \\ -H 'Api-Key:$API_KEY' -i Copy If you have an EU region account, the endpoint begins with https://api.eu.newrelic.com. Select Send Request. Browse the Response to locate the $INSTANCE_ID for each instance. {INSTANCE_ID} output The { INSTANCE_ID} output will appear similar to this: { \"application_instances\": [ { \"id\": 35120, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-10.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 34966, <---<<< {HOST_ID} } }, { \"id\": 186288, <---<<< {INSTANCE_ID} \"application_name\": \"Combined Production\", \"host\": \"prod-app-11.com\", \"language\": \"ruby\", \"health_status\": \"green\", \"application_summary\": { . . . }, \"links\": { \"application\": 1441, <---<<< {APP_ID} \"application_host\": 186283, <---<<< {HOST_ID} } }, . . . Copy Java instance ID (JVM) using the UI Java apps: To locate a specific JVM $INSTANCE_ID in New Relic: Go to one.newrelic.com > APM > Applications > (select an app) > JVMs. Select the name of the instance. In the URL, the number after the _i designator represents the Java JVM instance: https://rpm.newrelic.com/accounts/$ACCOUNT_ID/applications/$APP_ID_i$INSTANCE_ID Copy REST API application list example The following example shows how to locate all the ID information for an application by using the APP_ID. If you have an EU account, the endpoint begins with https://api.eu.newrelic.com. curl -X GET 'https://api.newrelic.com/v2/applications.json' \\ -H 'Api-Key:$API_KEY' -i \\ -d 'filter[ids]=1441' <----<<<< {APP_ID} Copy The resulting example output is running on five servers. One server is hosting two virtual hosts for a total of six hosts. The output includes a links section listing the application_instances and application_hosts for the application. { \"applications\": [ { \"id\": 1441, <----<<<< {APP_ID} \"name\": \"RPM Combined Production\", \"language\": \"ruby\", \"health_status\": \"green\", \"reporting\": true, \"last_reported_at\": \"2015-11-10T23:19:47+00:00\", \"application_summary\": { . . . }, \"end_user_summary\": { . . . }, \"settings\": { . . . }, \"links\": { \"application_instances\": [ <---<<<< {INSTANCE_ID} list 21790, 24810, 27948, 35120, 35121, 35122, 186288, 247253, 247254, 247255, 247256 ], \"application_hosts\": [ <---<<<< {HOST_ID} list 21788, 24808, 34966, 186283, 247245, 286551 ] } } ], . . . Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.74976,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Host ID and summary data using the <em>REST</em> <em>API</em> Explorer",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": " for a particular application, you will need the $APP_ID. Go to the <em>API</em> Explorer, then select your account name from the Select an account dropdown. Enter the specific $APP_ID in the following command: curl -X GET &#x27;https:&#x2F;&#x2F;<em>api</em>.newrelic.com&#x2F;<em>v2</em>&#x2F;applications&#x2F;$APP_ID&#x2F;hosts.json&#x27; \\ -H &#x27;<em>Api</em>-Key:$<em>API</em>_KEY&#x27; -i Copy"
      },
      "id": "60440c9628ccbc2de32c6078"
    },
    {
      "sections": [
        "New Relic partnership account authentication",
        "Custom headers and API calls",
        "Known limitations"
      ],
      "title": "New Relic partnership account authentication",
      "type": "docs",
      "tags": [
        "APIs",
        "REST API v2",
        "Get started"
      ],
      "external_id": "a4e139380383b634e44d288b7065597de60e6b84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/admin-users-api-key-partnerships/",
      "published_at": "2021-09-13T18:41:50Z",
      "updated_at": "2021-03-13T03:10:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This approach adds a new authentication method to the customer-facing New Relic REST API (v2) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all REST API (v2) calls. It offers no new functionality for non-partner API users. When calling endpoints in the New Relic REST API (v2) that require the user key, New Relic suggests you use the described authentication method. Custom headers and API calls When making API calls, use the following custom headers with your partner API key, partner ID, and your account ID: X-Api-Key:YOUR_PARTNER_ACCOUNT_API_KEY NewRelic-Partner-Id:YOUR_PARTNER_ID NewRelic-Account-Id:YOUR_CUSTOMERS_ACCOUNT_ID Providing authentication to the REST API (v2) in this form allows you to complete any API operation on your customer’s accounts. This bypasses the customer-facing requirement that some API calls require an Admin user’s API key. This authentication method also works for API endpoints that require only the REST API key. This new authentication method works for all endpoints, not only those that require the Admin User’s API key. Known limitations This partner-only authentication method will only work with the New Relic REST API (v2). It does not work with the following: Deployment API Infrastructure API for alerts Insights API Insights Dashboard API Partner API Plugin API Synthetics API",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.09755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Custom headers and <em>API</em> calls",
        "tags": "<em>REST</em> <em>API</em> <em>v2</em>",
        "body": "This approach adds a new authentication method to the customer-facing New Relic <em>REST</em> <em>API</em> (<em>v2</em>) that allows partners (and enterprise-scale customers that use the partnership structure to manage their multiple accounts) to use their partnership credentials to authorize all <em>REST</em> <em>API</em> (<em>v2</em>) calls"
      },
      "id": "60440747e7b9d2a1465799f2"
    }
  ],
  "/docs/apis/synthetics-rest-api/monitor-examples/manage-synthetics-monitors-rest-api": [
    {
      "sections": [
        "Synthetics REST API version 1 (deprecated)",
        "Caution",
        "Managing simple and scripted monitors",
        "Get all monitors",
        "Get a specific monitor",
        "Create a monitor",
        "Update an existing monitor",
        "Delete an existing monitor",
        "Get list of valid locations",
        "Managing scripted monitors",
        "Get monitor script",
        "Add scripted monitor",
        "Update monitor script",
        "Scripted browser example",
        "Scripted browser API example",
        "Bash script example",
        "Synthetics attributes",
        "Specific monitor endpoint",
        "For more help"
      ],
      "title": "Synthetics REST API version 1 (deprecated)",
      "type": "docs",
      "tags": [
        "APIs",
        "Synthetics REST API",
        "Monitor examples"
      ],
      "external_id": "38f3b7d441889cea39fa8a10d1593473bffa8cf7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/synthetics-api/synthetics-rest-api-version-1/",
      "published_at": "2021-09-14T20:49:04Z",
      "updated_at": "2021-07-09T23:26:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Currently New Relic supports two versions of the Synthetics API: v1 and v3. Version 3 was released October 2016. Version 1 is deprecated and will eventually no longer be available. No termination date has been announced. However, no further development or modifications will be made to v1. Caution Recommendation: Create new monitors using the v3 Synthetics API and migrate v1 scripts to their v3 equivalent. To use the REST API for New Relic's synthetic monitoring, you must activate API access and generate your Admin User's API key from your account settings. Then you can make standard API calls via the command line. Managing simple and scripted monitors You must use your Admin User's API key to make Synthetics REST API calls. The account's REST API key will not work. Caution The Synthetics REST API limits an account's rate of requests to three requests per second. Requests made in excess of this threshold will return a 429 response code. These examples show curl commands: Get all monitors To view a list of all monitors in New Relic for your account, send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/monitors. For example: curl -v \\ -H 'X-Api-Key:{Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/monitors Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"count\": integer, \"monitors\": [ { \"id\": UUID, \"name\": string, \"type\": string, \"frequency\": integer, \"uri\": string, \"locations\": array of strings, \"status\": string, \"slaThreshold\": double, \"userId\": integer, \"apiVersion\": string } ] } Copy Get a specific monitor To view a single existing monitor in New Relic, send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}. Replace the { id} in the following example with the specific monitor ID. curl -v \\ -H 'X-Api-Key:{Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id} Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"id\": UUID, \"name\": string, \"type\": string, \"frequency\": integer, \"uri\": string, \"locations\": array of strings, \"status\": string, \"slaThreshold\": double, \"userId\": integer, \"apiVersion\": string } Copy An invalid monitor ID will return the error 404 Not Found: The specified monitor doesn't exist. Create a monitor To add a new monitor to your account in New Relic, send a POST request to https://synthetics.newrelic.com/synthetics/api/v1/monitors with a JSON payload that describes the monitor: { \"name\": string [required], \"type\": string (SIMPLE, BROWSER, SCRIPT_API, SCRIPT_BROWSER) [required], \"frequency\": integer (minutes) [required, must be one of 1, 5, 10, 15, 30, 60, 360, 720, or 1440], \"uri\": string [required for SIMPLE and BROWSER type], \"locations\": array of strings (send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/locations to get a list of valid locations) [at least one required], \"status\": string (ENABLED, MUTED, DISABLED) [required], \"slaThreshold\": double, } Copy In addition, to add a scripted monitor via the REST API, call an additional API endpoint to send the script for the monitor just created. Replace the Synthetics REST API attributes in the following example with your specific values. curl -v \\ -X POST -H 'X-Api-Key:{Admin_User_Key}' \\ -H 'Content-Type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors \\ -d '{ \"name\" : \"monitor1\", \"frequency\" : 15, \"uri\" : \"http://my-uri.com\", \"locations\" : [ \"AWS_US_WEST_1\" ], \"type\" : \"browser\"}' Copy A successful request will return a 201 Created response, with the URI of the newly-created monitor specified in the location header. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example, the frequency is out of bounds or one or more of the specified locations is invalid (See the error message in the body of the response.) 402 Payment Required: Creating the monitor will increase your scheduled checks past your account's purchased check limit. Update an existing monitor To update an existing monitor in New Relic, send a PUT request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}. In addition, for scripted monitors, follow the procedures to update the BASE64 encoded script. Replace the { id} in the following example with the specific monitor ID, and replace the Synthetics REST API attributes with your specific values. curl -v \\ -X PUT -H 'X-Api-Key:{Admin_User_Key}' \\ -H 'Content-Type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id} \\ -d '{ \"name\" : \"updated monitor name\", \"type\" : \"simple\", \"frequency\" : 15, \"uri\" : \"http://my-uri.com/\", \"locations\" : [ \"AWS_US_WEST_1\" ], \"status\" : \"enabled\", \"slaThreshold\": \"7.0\" }' Copy PUT requests are intended to replace target entities, so all attributes required in the JSON payload when creating a new monitor are also required when updating an existing monitor. A successful request will return a 204 No Content response, with an empty body. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example, the frequency is out of bounds or one or more of the specified locations is invalid (See the error message in the body of the response.) 404 Not Found: The specified monitor does not exist. Delete an existing monitor To delete an existing monitor in New Relic, send a DELETE request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}. Replace the { id} in the following example with the specific monitor ID. curl -v \\ -H 'X-Api-Key:{Admin_User_Key}' \\ -X DELETE https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id} Copy A successful request will return a 204 No Content response, with an empty body. An unsuccessful request will return the response, 404 Not Found: The specified monitor does not exist. Get list of valid locations To retrieve the list of valid locations in New Relic, use the following command. curl -v \\ -X GET -H 'X-Api-Key:{Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/locations Copy Managing scripted monitors In addition to the general API, there are several API methods for the scripted browser (SCRIPT_BROWSER) and api test (SCRIPT_API) monitor types. These examples show curl commands. Get monitor script To view the script associated with a specific SCRIPT_BROWSER or SCRIPT_API monitor in New Relic for your account, send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script. Replace the { id} with the specific monitor ID. For example: curl -v -H 'X-Api-Key: {Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"scriptText\": BASE64 encoded string } Copy Possible error codes include: 403 Forbidden: The specified monitor is not of type SCRIPT_BROWSER or SCRIPT_API. 404 Not Found: The specified monitor doesn't exist or the script associated with the monitor doesn't exist. Add scripted monitor To add a new scripted monitor to New Relic with the REST API: Follow standard API procedures to add a new monitor, and identify the type as a SCRIPT_BROWSER or SCRIPT_API. Update the new monitor with a BASE64 encoded version of the script to the ${MONITOR_UUID}/script endpoint. For more information, refer to the example. Update monitor script To update the script associated with a specific SCRIPT_BROWSER or SCRIPT_API monitor in New Relic for your account, send a PUT request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script with a JSON payload that contains the scriptText (required). The scriptLocations data is required only for private locations with Verified Script Execution turned on. The password used to generate the HMAC string must match the password set for the private location. When generating the HMAC string, use the SHA256 algorithm. { \"scriptText\": BASE64 encoded String, \"scriptLocations\": [ { \"name\": Location name, \"hmac\" BASE64 encoded String of SHA256 HMAC for location } ] } Copy Replace the { id} with the specific monitor ID. Here is an example for the script: var assert = require('assert'); assert.equal('1', '1'); Copy This example uses password as the password for the scriptLocation. curl -v -H 'X-Api-Key: '{Admin_User_Key}' -H 'content-type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script -d '{ \"scriptText\": \"dmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpOw0KYXNzZXJ0LmVxdWFsKCcxJywgJzEnKTs=\",\"scriptLocations\": [ { \"name\": \"my_vse_enabled_location\", \"hmac\": \"MjhiNGE4MjVlMDE1N2M4NDQ4MjNjNDFkZDEyYTRjMmUzZDE3NGJlNjU0MWFmOTJlMzNiODExOGU2ZjhkZTY4\"} ]}' Copy A successful request will return a 204 No Content response with an empty body. Possible error codes include: 400 Bad Request: Invalid BASE64 encoded string for scriptText or hmac. 403 Forbidden: The specified monitor is not of the type SCRIPT_BROWSER or SCRIPT_API. 404 Not Found: The specified monitor does not exist. Scripted browser example Here is an example of using New Relic's REST API and the bash script to create a scripted browser monitor. Scripted browser API example The following example shows curl commands to create a scripted browser monitor. At the top of the script, replace the variables with your specific values. For the scriptfile variable, identify the filename for the script to be created. Here is a sample script that can be saved as sample_synth_script.js to use in the example: var assert = require(\"assert\"); $browser.get(\"http://example.com\").then(function(){ // Check the H1 title matches \"Example Domain\" return $browser.findElement($driver.By.css(\"h1\")).then(function(element){ return element.getText().then(function(text){ assert.equal(\"Example Domain\", text, \"Page H1 title did not match\"); }); }); }).then(function(){ // Check that the external link matches \"http://www.iana.org/domains/example\" return $browser.findElement($driver.By.css(\"div > p > a\")).then(function(element){ return element.getAttribute(\"href\").then(function(link){ assert.equal(\"http://www.iana.org/domains/example\", link, \"More information link did not match\"); }); }); }); Copy Bash script example This example show the bash script that will create the SCRIPTED_BROWSER monitor. #!/bin/bash # Admin API key from your account settings adminAPIKey='' # Other attributes found at https://docs.newrelic.com/docs/apis/synthetics-rest-api/monitor-examples/attributes-synthetics-rest-api#api-attributes monitorName='Test API Script' monitorType='SCRIPT_BROWSER' frequency=1440 locations='\"AWS_US_WEST_1\", \"AWS_US_EAST_1\"' slaThreshold=7.0 # Location of the file with your script scriptfile=sample_synth_script.js # Test that the script file exists (does not validate content) if [ -e \"$scriptfile\" ] then script=$(cat \"$scriptfile\") payload=\"{ \\\"name\\\" : \\\"$monitorName\\\", \\\"frequency\\\" : $frequency, \\\"locations\\\" : [ $locations ], \\\"status\\\" : \\\"ENABLED\\\", \\\"type\\\" : \\\"$monitorType\\\", \\\"slaThreshold\\\" : $slaThreshold, \\\"uri\\\":\\\"\\\"}\" echo \"Creating monitor\" # Make cURL call to API and parse response headers to get monitor UUID shopt -s extglob # Required to trim whitespace; see below while IFS=':' read key value; do # trim whitespace in \"value\" value=${value##+([[:space:]])}; value=${value%%+([[:space:]])} case \"$key\" in location) LOCATION=\"$value\" ;; HTTP*) read PROTO STATUS MSG <<< \"$key{$value:+:$value}\" ;; esac done < <(curl -sS -i -X POST -H \"X-Api-Key:$adminAPIKey\" -H 'Content-Type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors -d \"$payload\") # Validate monitor creation & add script unless it failed if [ $STATUS = 201 ]; then echo \"Monitor created, $LOCATION \" echo \"Uploading script\" # base64 encode script encoded=`echo \"$script\" | base64` scriptPayload='{\"scriptText\":\"'$encoded'\"}' curl -s -X PUT -H \"X-Api-Key:$adminAPIKey\" -H 'Content-Type: application/json' \"$LOCATION/script\" -d $scriptPayload echo \"Script uploaded\" else echo \"Monitor creation failed\" fi else echo \"script file not found, not creating monitor\" fi Copy Synthetics attributes Here are the attributes used with Synthetics REST API calls, listed in alphabetical order. Synthetics API attribute Definition apiVersion String: The version number. emails Array of strings: Email addresses for alert notifications with New Relic. frequency Integer: Number of minutes between checks. Valid values include 1, 5, 15, 30, 60, 360, 720, and 1440. id The UUID for the specific Synthetics monitor. locations Array of strings: Array of locations by full label. name String: The monitor's name. scriptLocations String: The name and hmac values for private locations using Verified Script Execution. scriptText String: The BASE64 encoded text for scripted monitors. slaThreshold Double: Value for the Synthetics SLA report, in seconds. status String: Valid values include ENABLED, MUTED, and DISABLED. type String: Type of monitor. Valid values include: SIMPLE (Ping) BROWSER SCRIPT_BROWSER SCRIPT_API uri String: The URI for SIMPLE and BROWSER monitor types; for example, http://my-site.com. Optional for SCRIPT_BROWSER and SCRIPT_API. userID Integer: The specific user ID. Specific monitor endpoint When making REST API calls for a specific monitor, include the monitor_uuid as part of the endpoint. The monitor_uuid is the GUID which is part of the URL. For example, a selected Synthetics monitor has this URL: https://synthetics.newrelic.com/accounts/nnnn/monitors/ab123-c456d-e78-90123-f45g Copy The monitor_uuid is the value that follows /monitors/. For more help Additional documentation resources include: Manage Synthetics monitors via the REST API (v3) (Synthetics API version 3) Manage Synthetics alert notifications via the REST API (REST API calls for email alerts for New Relic monitors) Use Synthetics label APIs (REST API calls for labels and categories used by New Relic monitors)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.35092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Synthetics</em> <em>REST</em> <em>API</em> version 1 (deprecated)",
        "sections": "<em>Synthetics</em> <em>REST</em> <em>API</em> version 1 (deprecated)",
        "tags": "<em>Synthetics</em> <em>REST</em> <em>API</em>",
        "body": " the SCRIPTED_BROWSER <em>monitor</em>. #!&#x2F;bin&#x2F;bash # Admin <em>API</em> key from your account settings adminAPIKey=&#x27;&#x27; # Other attributes found at https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>synthetics</em>-<em>rest</em>-<em>api</em>&#x2F;<em>monitor</em>-<em>examples</em>&#x2F;attributes-<em>synthetics</em>-<em>rest</em>-<em>api</em>#<em>api</em>-attributes <em>monitor</em>Name=&#x27;Test <em>API</em> Script&#x27; <em>monitor</em>Type=&#x27;SCRIPT_BROWSER"
      },
      "id": "60452541e7b9d27829579a0a"
    },
    {
      "sections": [
        "Payload attributes for the Synthetics REST API",
        "Synthetic monitoring attributes",
        "Specific monitor endpoint",
        "For more help"
      ],
      "title": "Payload attributes for the Synthetics REST API",
      "type": "docs",
      "tags": [
        "APIs",
        "Synthetics REST API",
        "Monitor examples"
      ],
      "external_id": "ed3202f6715ae367d5c7c58d63a332d073535995",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/synthetics-rest-api/monitor-examples/payload-attributes-synthetics-rest-api/",
      "published_at": "2021-09-13T17:24:31Z",
      "updated_at": "2021-03-11T11:46:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For REST API requirements for synthetics, see Use the API. Synthetic monitoring attributes Here are the attributes that can be used when creating and managing monitors with the Synthetics REST API: Synthetics API attribute Definition apiVersion String: The version number. count Integer: The number of monitors returned. emails Array of strings: Email addresses for alert notifications with New Relic. frequency Integer: Number of minutes between checks. Valid values include 1, 5, 15, 30, 60, 360, 720, and 1440. id The UUID for the specific synthetic monitor. locations Array of strings: Array of locations by full label. name String: The monitor's name. scriptLocations String: The name and hmac values for private locations using Verified Script Execution. scriptText String: The BASE64 encoded text for scripted monitors. slaThreshold Double: Value for the Synthetics SLA report, in seconds. status String: Valid values include ENABLED, MUTED, and DISABLED. type String: Type of monitor. Valid values include: SIMPLE (Ping) BROWSER SCRIPT_BROWSER SCRIPT_API uri String: The URI for SIMPLE and BROWSER monitor types; for example, http://my-site.com. Optional for SCRIPT_BROWSER and SCRIPT_API. userID Integer: The specific user ID. options Object: options for SIMPLE and BROWSER monitor types. Options include: validationString: string verifySSL: boolean (true, false) bypassHEADRequest: boolean (true, false) treatRedirectAsFailure: boolean (true, false) Specific monitor endpoint When making REST API calls for a specific monitor, include the monitor_uuid as part of the endpoint. The monitor_uuid is the GUID which is part of the URL. For example, a selected synthetic monitor has this URL: https://synthetics.newrelic.com/accounts/nnnn/monitors/ab123-c456d-e78-90123-f45g Copy The monitor_uuid is the value that follows /monitors/. For more help Additional documentation resources include: Manage synthetic monitors via the REST API (API procedures for synthetic simple and scripted monitors) Manage synthetic alert notifications via the REST API (REST API calls for email alerts for synthetic monitors) Use synthetics label APIs (REST API calls for labels and categories used by synthetic monitors)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.85667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Payload attributes for the <em>Synthetics</em> <em>REST</em> <em>API</em>",
        "sections": "Payload attributes for the <em>Synthetics</em> <em>REST</em> <em>API</em>",
        "tags": "<em>Synthetics</em> <em>REST</em> <em>API</em>",
        "body": " The <em>monitor</em>_uuid is the value that follows &#x2F;monitors&#x2F;. For more help Additional documentation resources include: Manage synthetic monitors via the <em>REST</em> <em>API</em> (<em>API</em> procedures for synthetic simple and scripted monitors) Manage synthetic alert notifications via the <em>REST</em> <em>API</em> (<em>REST</em> <em>API</em> calls for email alerts for synthetic monitors) Use <em>synthetics</em> label <em>APIs</em> (<em>REST</em> <em>API</em> calls for labels and categories used by synthetic monitors)"
      },
      "id": "6043f9ae28ccbc98002c607a"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights",
        "Plugins"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-09-13T14:57:49Z",
      "updated_at": "2021-08-27T04:51:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for many of our more curated tools, such as our open source telemetry integrations and our Telemetry SDKs. Data type Description Metric API Send metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send your log data to New Relic. Trace API Send distributed tracing data to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android Unity REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing plan) For organizations on our original pricing plan, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing plans that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API. Plugins New Relic Plugins have been deprecated. For details, see Plugins EOL.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.20712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>APIs</em>",
        "sections": "<em>REST</em> <em>API</em>",
        "tags": "<em>APIs</em>",
        "body": " alerts conditions for your mobile apps. Query <em>API</em> To query New Relic data, use NerdGraph. Account management <em>APIs</em> For account-related <em>APIs</em>, see Account <em>APIs</em>. Synthetic monitoring <em>Synthetics</em> <em>API</em> resources include: Resource Details <em>Synthetics</em> <em>REST</em> <em>API</em> The <em>Synthetics</em> <em>REST</em> <em>API</em> functionality includes: Create"
      },
      "id": "609fa5cf196a67066022b194"
    }
  ],
  "/docs/apis/synthetics-rest-api/monitor-examples/payload-attributes-synthetics-rest-api": [
    {
      "sections": [
        "Manage synthetic monitors via REST API",
        "Features",
        "Monitor types in API",
        "Use the API",
        "Caution",
        "Get all monitors",
        "Get a specific monitor",
        "Create a monitor",
        "Update an existing monitor",
        "Patch an existing monitor",
        "Delete an existing monitor",
        "Get a list of valid locations",
        "Script API for scripted browser and API test monitors",
        "Get monitor script",
        "Add scripted monitor",
        "Update monitor script",
        "Using private location scripts with verified script execution",
        "Important",
        "Scripted browser example",
        "Scripted browser API example",
        "Bash script example",
        "Tip"
      ],
      "title": "Manage synthetic monitors via REST API",
      "type": "docs",
      "tags": [
        "APIs",
        "Synthetics REST API",
        "Monitor examples"
      ],
      "external_id": "83a3e8ad751c7f0865785a1c2fad193604a7f7da",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/synthetics-rest-api/monitor-examples/manage-synthetics-monitors-rest-api/",
      "published_at": "2021-09-14T18:17:08Z",
      "updated_at": "2021-09-14T18:17:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the Synthetics REST API to create and manage synthetic monitors of all types: ping, simple browser, scripted browser, and API test monitors. All synthetic monitoring data is available via the REST API. To use the Synthetics REST API, you must have a user role that allows that capability and a user key. For an overview of all available New Relic APIs, see Intro to APIs. Features The newest version of the Synthetics API (v3) adds these features: Synthetics API (v3) Features Options field for POST and PUT request You can specify the options for SIMPLE and BROWSER type monitors, similar to the way these options are available in the UI. PATCH request You can update only the fields of a monitor you want to change, rather than having to specify the entire monitor entity in a PUT. You can also specify the OPTION, assuming you are using the appropriate type of monitor. More detail with 400 Bad Request errors As of v3, the Synthetics API attempts to return as much information as possible when a validation failure occurs. This will help you figure out what might be wrong with the request. The API runs all validations and returns any failed validation messages, rather than failing on the first validation error as occurred in previous API versions. Pagination Large API responses are properly paginated. You can also use NRQL queries to analyze past changes made via the API. Monitor types in API These are the monitor types and how they're referred to in the API: Monitor type API name Ping SIMPLE Simple browser BROWSER Scripted browser SCRIPT_BROWSER API test SCRIPT_API Use the API To use the Synthetics REST API, you must have the ability to manage synthetics monitors and use a user key (the REST API key won't work). This API can be used for all Synthetics monitors. (Additional API methods for scripted browser and API test monitors are also available to update the script associated with those monitors.) All Synthetics data is available via the API. API examples show cURL commands. For US-based accounts, use the following endpoint: https://synthetics.newrelic.com/synthetics/api Copy For EU-based accounts, use the following endpoint: https://synthetics.eu.newrelic.com/synthetics/api Copy Caution The Synthetics REST API limits an account's rate of requests to three requests per second. Requests made in excess of this threshold will return a 429 response code. Get all monitors To view a list of all the monitors in your New Relic account, send a GET request to $API_ENDPOINT/v3/monitors. For example: curl -v \\ -H 'Api-Key:$API_KEY' $API_ENDPOINT/v3/monitors Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"monitors\": [ { \"id\": \"2a1bc369-7654-489d-918e-f6g135h7i2jk\", \"name\": \"monitor1\", \"type\": \"BROWSER\", \"frequency\": 60, \"uri\": \"http://example.com\", \"locations\": [ \"AWS_US_WEST_1\" ], \"status\": \"DISABLED\", \"slaThreshold\": 7, \"options\": {}, \"modifiedAt\": \"2016-09-26T23:12:46.981+0000\", \"createdAt\": \"2016-09-26T23:12:46.981+0000\", \"userId\": 0, \"apiVersion\": \"0.2.2\" } ], \"count\": 1 } Copy Query arguments: offset: The monitor count offset. Defaults to 0. For example, if you have 40 monitors and you use an offset value of 20, it will return monitors 21-40. limit: The number of results per page, maximum 100. Defaults to 50. You can include these in your cURL command as follows: curl -v \\ -H 'Api-Key:$API_KEY' $API_ENDPOINT/v3/monitors \\ -G -d 'offset=20&limit=100' Copy The headers include a Link to help you easily page your monitors. For example: <https://synthetics.newrelic.com/synthetics/api/v3/monitors/?offset=0&limit=20>; rel=\"first\", <https://synthetics.newrelic.com/synthetics/api/v3/monitors/?offset=40&limit=20>; rel=\"last\" Copy Get a specific monitor To view a single Synthetics monitor, send a GET request to $API_ENDPOINT/v3/monitors/$MONITOR_ID. curl -v \\ -H 'Api-Key:$API_KEY' $API_ENDPOINT/v3/monitors/$MONITOR_ID Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"id\": UUID, \"name\": string, \"type\": string, \"frequency\": integer, \"uri\": string, \"locations\": array of strings, \"status\": string, \"slaThreshold\": double, \"userId\": integer, \"apiVersion\": string } Copy An invalid monitor ID will return 404 Not Found: The specified monitor doesn't exist. Create a monitor To add a new monitor to your Synthetics account, send a POST request to $API_ENDPOINT/v3/monitors with a JSON payload that describes the monitor. All fields in the following example are required unless stated otherwise: { \"name\": string [required], \"type\": string (SIMPLE, BROWSER, SCRIPT_API, SCRIPT_BROWSER) [required], \"frequency\": integer (minutes) [required, must be one of 1, 5, 10, 15, 30, 60, 360, 720, or 1440], \"uri\": string [required for SIMPLE and BROWSER type], \"locations\": array of strings [at least one required], \"status\": string (ENABLED, MUTED, DISABLED) [required], \"slaThreshold\": double, \"options\": { \"validationString\": string [only valid for SIMPLE and BROWSER types], \"verifySSL\": boolean (true, false) [only valid for SIMPLE and BROWSER types], \"bypassHEADRequest\": boolean (true, false) [only valid for SIMPLE types], \"treatRedirectAsFailure\": boolean (true, false) [only valid for SIMPLE types] } } Copy In addition, to add the script for a scripted monitor via the REST API, call an additional API endpoint to send the script for the monitor just created. If you are using private locations with verified script execution enabled, see script locations with verified script execution. Replace the Synthetics REST API attributes in the following example with your specific values: curl -v \\ -X POST -H 'Api-Key:$API_KEY' \\ -H 'Content-Type: application/json' $API_ENDPOINT/v3/monitors \\ -d '{ \"name\" : \"monitor1\", \"frequency\" : 15, \"uri\" : \"http://my-uri.com\", \"locations\" : [ \"AWS_US_WEST_1\" ], \"type\" : \"browser\", \"status\" : \"enabled\", \"slaThreshold\" : \"1.0\"}' Copy A successful request will return a 201 Created response, with the URI of the newly-created monitor specified in the location header. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example: the frequency is out of bounds or one or more of the specified locations is invalid. (See the error message in the body of the response.) 402 Payment Required: Creating the monitor will increase your scheduled checks past your account's purchased check limit. Update an existing monitor To update an existing monitor in New Relic, send a PUT request to $API_ENDPOINT/v3/monitors/$MONITOR_ID. In addition, for scripted monitors, follow the procedures to update the BASE64 encoded script. All fields are required. However, the TYPE of the monitor cannot be changed. Use a specific monitor ID, and replace the Synthetics REST API attributes with your specific values. curl -v \\ -X PUT -H 'Api-Key:$API_KEY' \\ -H 'Content-Type: application/json' $API_ENDPOINT/v3/monitors/$MONITOR_ID \\ -d '{ \"name\" : \"updated monitor name\", \"type\": \"monitor type\", \"frequency\" : 15, \"uri\" : \"http://my-uri.com/\", \"locations\" : [ \"AWS_US_WEST_1\" ], \"status\" : \"enabled\", \"slaThreshold\": \"7.0\" }' Copy PUT requests are intended to replace target entities, so all attributes required in the JSON payload when creating a new monitor are also required when updating an existing monitor. A successful request will return a 204 No Content response, with an empty body. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example, the frequency is out of bounds or one or more of the specified locations is invalid. (See the error message in the body of the response.) 404 Not Found: The specified monitor does not exist. Patch an existing monitor To patch an existing monitor in New Relic, send a PATCH request to $API_ENDPOINT/v3/monitors/$MONITOR_ID. Use a specific monitor ID, and replace the Synthetics REST API attributes with your specific values. curl -v \\ -X PATCH -H 'Api-Key:$API_KEY' \\ -H 'Content-Type: application/json' $API_ENDPOINT/v3/monitors/$MONITOR_ID \\ -d '{ \"name\" : \"updated monitor name\" }' Copy PATCH requests are intended to update individual attributes of your New Relic Synthetics monitor rather than updating the entire entity, so you may provide only the attributes you want to update. A successful request will return a 204 No Content response, with an empty body. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example, the frequency is out of bounds, or one or more of the specified locations is invalid. (See the error message in the body of the response.) 404 Not Found: The specified monitor does not exist. Delete an existing monitor To delete an existing monitor in New Relic Synthetics, send a DELETE request to $API_ENDPOINT/v3/monitors/$MONITOR_ID: curl -v \\ -H 'Api-Key:$API_KEY' \\ -X DELETE $API_ENDPOINT/v3/monitors/$MONITOR_ID Copy A successful request will return a 204 No Content response, with an empty body. An unsuccessful request will return the response 404 Not Found: The specified monitor does not exist. Get a list of valid locations To retrieve the list of valid locations in New Relic Synthetics, use the following command: curl -v \\ -X GET -H 'Api-Key:$API_KEY' $API_ENDPOINT/v1/locations Copy Script API for scripted browser and API test monitors In addition to the general API, there are several API methods for the scripted browsers (SCRIPT_BROWSER) and API test browsers (SCRIPT_API). These examples show cURL commands. Get monitor script To view the script associated with a specific SCRIPT_BROWSER or SCRIPT_API monitor in New Relic Synthetics for your account, send a GET request to $API_ENDPOINT/v3/monitors/$MONITOR_ID/script. For example: curl -v -H 'Api-Key: $API_KEY' $API_ENDPOINT/v3/monitors/$MONITOR_ID/script Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"scriptText\": BASE64 encoded string } Copy Possible error codes include: 403 Forbidden: The specified monitor is not of type SCRIPT_BROWSER or SCRIPT_API. 404 Not Found: The specified monitor doesn't exist or the script associated with the monitor doesn't exist. Add scripted monitor To add a new scripted monitor to New Relic Synthetics with the REST API: Follow standard API procedures to add a new monitor, and identify the type as a SCRIPT_BROWSER or SCRIPT_API. Update the new monitor with a BASE64 encoded version of the script to the $MONITOR_UUID/script endpoint. For more information, refer to the example. If you are using private locations with verified script execution enabled, see script locations with verified script execution. Update monitor script To update the script associated with a specific SCRIPT_BROWSER or SCRIPT_API monitor in New Relic Synthetics for your account, send a PUT request to $API_ENDPOINT/v3/monitors/$MONITOR_ID/script with a JSON payload that contains the scriptText (required). scriptPayload='{\"scriptText\":BASE64 encoded string}' curl -v -X PUT \\ -H 'Api-Key:$API_KEY' \\ -H 'Content-Type: application/json' \\ $API_ENDPOINT/v3/monitors/$MONITOR_UUID/script \\ -d $scriptPayload Copy If you are using private locations with verified script execution enabled, see script locations with verified script execution. A successful request will return a 204 No Content response with an empty body. Possible error codes include: 400 Bad Request: Invalid BASE64 encoded string for scriptText or hmac. 403 Forbidden: The specified monitor is not of the type SCRIPT_BROWSER or SCRIPT_API. 404 Not Found: The specified monitor does not exist. Using private location scripts with verified script execution When creating or updating monitors for private locations that have verified script execution turned on, you must use scriptLocations to set the password: { \"scriptText\": BASE64 encoded String, \"scriptLocations\": [ { \"name\": Location name, \"hmac\" BASE64 encoded String of SHA256 HMAC for location } ] } Copy The password used to generate the HMAC string must match the password set for the private location. If you have multiple locations with Verified script execution enabled each location must have the HMAC calculated. When generating the HMAC string, use the SHA256 algorithm with the script and password. Here's an example for the script: var assert = require('assert'); assert.equal('1', '1'); Copy This example uses password as the password for the scriptLocation: curl -v -X PUT -H 'Api-Key: '$API_KEY' -H 'content-type: application/json' $API_ENDPOINT}/v3/monitors/$MONITOR_ID/script -d '{ \"scriptText\": \"dmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpOw0KYXNzZXJ0LmVxdWFsKCcxJywgJzEnKTs=\",\"scriptLocations\": [ { \"name\": \"my_vse_enabled_location\", \"hmac\": \"MjhiNGE4MjVlMDE1N2M4NDQ4MjNjNDFkZDEyYTRjMmUzZDE3NGJlNjU0MWFmOTJlMzNiODExOGU2ZjhkZTY4ZQ==\"} ]}' Copy Important You must remove the last newline character from both the script and the calculated HMAC value before encoding in BASE64. Calculation steps: Calculate the HMAC value from the script. One way is to use: cat script | openssl dgst -sha256 -hmac \"password\" > hmac Remove the newline character if one was added by openssl. Encode the HMAC in BASE64 without line breaks. Scripted browser example Here is an example of using New Relic's REST API and the bash script to create a scripted browser monitor. Scripted browser API example The following example shows cURL commands to create a scripted browser monitor. At the top of the script, replace the variables with your specific values. For the scriptfile variable, identify the filename for the script to be created. Here is a sample script that can be saved as sample_synth_script.js to use in the example: var assert = require(\"assert\"); $browser.get(\"http://example.com\").then(function(){ // Check the H1 title matches \"Example Domain\" return $browser.findElement($driver.By.css(\"h1\")).then(function(element){ return element.getText().then(function(text){ assert.equal(\"Example Domain\", text, \"Page H1 title did not match\"); }); }); }).then(function(){ // Check that the external link matches \"http://www.iana.org/domains/example\" return $browser.findElement($driver.By.css(\"div > p > a\")).then(function(element){ return element.getAttribute(\"href\").then(function(link){ assert.equal(\"http://www.iana.org/domains/example\", link, \"More information link did not match\"); }); }); }); Copy Bash script example This example shows the bash script that will create the SCRIPTED_BROWSER monitor. Tip In some cases you may want to use -w 0, which will disable line wrapping: base64 -w 0 $scriptfile #!/bin/bash # API key from your account settings API_KEY='' # Other attributes found at https://docs.newrelic.com/docs/apis/synthetics-rest-api/monitor-examples/attributes-synthetics-rest-api#api-attributes monitorName='Test API Script' monitorType='SCRIPT_BROWSER' frequency=1440 locations='\"AWS_US_WEST_1\", \"AWS_US_EAST_1\"' slaThreshold=7.0 # Location of the file with your script scriptfile=sample_synth_script.js # Test that the script file exists (does not validate content) if [ -e \"$scriptfile\" ] then script=$(cat \"$scriptfile\") payload=\"{ \\\"name\\\" : \\\"$monitorName\\\", \\\"frequency\\\" : $frequency, \\\"locations\\\" : [ $locations ], \\\"status\\\" : \\\"ENABLED\\\", \\\"type\\\" : \\\"$monitorType\\\", \\\"slaThreshold\\\" : $slaThreshold, \\\"uri\\\":\\\"\\\"}\" echo \"Creating monitor\" # Make cURL call to API and parse response headers to get monitor UUID shopt -s extglob # Required to trim whitespace; see below while IFS=':' read key value; do # trim whitespace in \"value\" value=${value##+([[:space:]])}; value=${value%%+([[:space:]])} case \"$key\" in location) LOCATION=\"$value\" ;; HTTP*) read PROTO STATUS MSG <<< \"$key{$value:+:$value}\" ;; esac done < <(curl -sS -i -X POST -H \"Api-Key:$API_KEY\" -H 'Content-Type:application/json' https://synthetics.newrelic.com/synthetics/api/v3/monitors -d \"$payload\") # Validate monitor creation & add script unless it failed if [ $STATUS = 201 ]; then echo \"Monitor created, $LOCATION \" echo \"Uploading script\" # base64 encode script encoded=`echo \"$script\" | base64` scriptPayload=\"{\\\"scriptText\\\":\\\"$encoded\\\"}\" curl -s -X PUT -H \"Api-Key:$API_KEY\" -H 'Content-Type:application/json' \"$LOCATION/script\" -d $scriptPayload echo \"Script uploaded\" else echo \"Monitor creation failed\" fi else echo \"script file not found, not creating monitor\" fi Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 343.31204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>synthetic</em> <em>monitors</em> via <em>REST</em> <em>API</em>",
        "sections": "Manage <em>synthetic</em> <em>monitors</em> via <em>REST</em> <em>API</em>",
        "tags": "<em>Synthetics</em> <em>REST</em> <em>API</em>",
        "body": " will disable line wrapping: base64 -w 0 $scriptfile #!&#x2F;bin&#x2F;bash # <em>API</em> key from your account settings <em>API</em>_KEY=&#x27;&#x27; # Other attributes found at https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>synthetics</em>-<em>rest</em>-<em>api</em>&#x2F;<em>monitor</em>-<em>examples</em>&#x2F;attributes-<em>synthetics</em>-<em>rest</em>-<em>api</em>#<em>api</em>-attributes <em>monitor</em>Name=&#x27;Test <em>API</em> Script&#x27; <em>monitor</em>"
      },
      "id": "60440d4628ccbc74532c606a"
    },
    {
      "sections": [
        "Synthetics REST API version 1 (deprecated)",
        "Caution",
        "Managing simple and scripted monitors",
        "Get all monitors",
        "Get a specific monitor",
        "Create a monitor",
        "Update an existing monitor",
        "Delete an existing monitor",
        "Get list of valid locations",
        "Managing scripted monitors",
        "Get monitor script",
        "Add scripted monitor",
        "Update monitor script",
        "Scripted browser example",
        "Scripted browser API example",
        "Bash script example",
        "Synthetics attributes",
        "Specific monitor endpoint",
        "For more help"
      ],
      "title": "Synthetics REST API version 1 (deprecated)",
      "type": "docs",
      "tags": [
        "APIs",
        "Synthetics REST API",
        "Monitor examples"
      ],
      "external_id": "38f3b7d441889cea39fa8a10d1593473bffa8cf7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/synthetics-api/synthetics-rest-api-version-1/",
      "published_at": "2021-09-14T20:49:04Z",
      "updated_at": "2021-07-09T23:26:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Currently New Relic supports two versions of the Synthetics API: v1 and v3. Version 3 was released October 2016. Version 1 is deprecated and will eventually no longer be available. No termination date has been announced. However, no further development or modifications will be made to v1. Caution Recommendation: Create new monitors using the v3 Synthetics API and migrate v1 scripts to their v3 equivalent. To use the REST API for New Relic's synthetic monitoring, you must activate API access and generate your Admin User's API key from your account settings. Then you can make standard API calls via the command line. Managing simple and scripted monitors You must use your Admin User's API key to make Synthetics REST API calls. The account's REST API key will not work. Caution The Synthetics REST API limits an account's rate of requests to three requests per second. Requests made in excess of this threshold will return a 429 response code. These examples show curl commands: Get all monitors To view a list of all monitors in New Relic for your account, send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/monitors. For example: curl -v \\ -H 'X-Api-Key:{Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/monitors Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"count\": integer, \"monitors\": [ { \"id\": UUID, \"name\": string, \"type\": string, \"frequency\": integer, \"uri\": string, \"locations\": array of strings, \"status\": string, \"slaThreshold\": double, \"userId\": integer, \"apiVersion\": string } ] } Copy Get a specific monitor To view a single existing monitor in New Relic, send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}. Replace the { id} in the following example with the specific monitor ID. curl -v \\ -H 'X-Api-Key:{Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id} Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"id\": UUID, \"name\": string, \"type\": string, \"frequency\": integer, \"uri\": string, \"locations\": array of strings, \"status\": string, \"slaThreshold\": double, \"userId\": integer, \"apiVersion\": string } Copy An invalid monitor ID will return the error 404 Not Found: The specified monitor doesn't exist. Create a monitor To add a new monitor to your account in New Relic, send a POST request to https://synthetics.newrelic.com/synthetics/api/v1/monitors with a JSON payload that describes the monitor: { \"name\": string [required], \"type\": string (SIMPLE, BROWSER, SCRIPT_API, SCRIPT_BROWSER) [required], \"frequency\": integer (minutes) [required, must be one of 1, 5, 10, 15, 30, 60, 360, 720, or 1440], \"uri\": string [required for SIMPLE and BROWSER type], \"locations\": array of strings (send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/locations to get a list of valid locations) [at least one required], \"status\": string (ENABLED, MUTED, DISABLED) [required], \"slaThreshold\": double, } Copy In addition, to add a scripted monitor via the REST API, call an additional API endpoint to send the script for the monitor just created. Replace the Synthetics REST API attributes in the following example with your specific values. curl -v \\ -X POST -H 'X-Api-Key:{Admin_User_Key}' \\ -H 'Content-Type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors \\ -d '{ \"name\" : \"monitor1\", \"frequency\" : 15, \"uri\" : \"http://my-uri.com\", \"locations\" : [ \"AWS_US_WEST_1\" ], \"type\" : \"browser\"}' Copy A successful request will return a 201 Created response, with the URI of the newly-created monitor specified in the location header. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example, the frequency is out of bounds or one or more of the specified locations is invalid (See the error message in the body of the response.) 402 Payment Required: Creating the monitor will increase your scheduled checks past your account's purchased check limit. Update an existing monitor To update an existing monitor in New Relic, send a PUT request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}. In addition, for scripted monitors, follow the procedures to update the BASE64 encoded script. Replace the { id} in the following example with the specific monitor ID, and replace the Synthetics REST API attributes with your specific values. curl -v \\ -X PUT -H 'X-Api-Key:{Admin_User_Key}' \\ -H 'Content-Type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id} \\ -d '{ \"name\" : \"updated monitor name\", \"type\" : \"simple\", \"frequency\" : 15, \"uri\" : \"http://my-uri.com/\", \"locations\" : [ \"AWS_US_WEST_1\" ], \"status\" : \"enabled\", \"slaThreshold\": \"7.0\" }' Copy PUT requests are intended to replace target entities, so all attributes required in the JSON payload when creating a new monitor are also required when updating an existing monitor. A successful request will return a 204 No Content response, with an empty body. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example, the frequency is out of bounds or one or more of the specified locations is invalid (See the error message in the body of the response.) 404 Not Found: The specified monitor does not exist. Delete an existing monitor To delete an existing monitor in New Relic, send a DELETE request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}. Replace the { id} in the following example with the specific monitor ID. curl -v \\ -H 'X-Api-Key:{Admin_User_Key}' \\ -X DELETE https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id} Copy A successful request will return a 204 No Content response, with an empty body. An unsuccessful request will return the response, 404 Not Found: The specified monitor does not exist. Get list of valid locations To retrieve the list of valid locations in New Relic, use the following command. curl -v \\ -X GET -H 'X-Api-Key:{Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/locations Copy Managing scripted monitors In addition to the general API, there are several API methods for the scripted browser (SCRIPT_BROWSER) and api test (SCRIPT_API) monitor types. These examples show curl commands. Get monitor script To view the script associated with a specific SCRIPT_BROWSER or SCRIPT_API monitor in New Relic for your account, send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script. Replace the { id} with the specific monitor ID. For example: curl -v -H 'X-Api-Key: {Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"scriptText\": BASE64 encoded string } Copy Possible error codes include: 403 Forbidden: The specified monitor is not of type SCRIPT_BROWSER or SCRIPT_API. 404 Not Found: The specified monitor doesn't exist or the script associated with the monitor doesn't exist. Add scripted monitor To add a new scripted monitor to New Relic with the REST API: Follow standard API procedures to add a new monitor, and identify the type as a SCRIPT_BROWSER or SCRIPT_API. Update the new monitor with a BASE64 encoded version of the script to the ${MONITOR_UUID}/script endpoint. For more information, refer to the example. Update monitor script To update the script associated with a specific SCRIPT_BROWSER or SCRIPT_API monitor in New Relic for your account, send a PUT request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script with a JSON payload that contains the scriptText (required). The scriptLocations data is required only for private locations with Verified Script Execution turned on. The password used to generate the HMAC string must match the password set for the private location. When generating the HMAC string, use the SHA256 algorithm. { \"scriptText\": BASE64 encoded String, \"scriptLocations\": [ { \"name\": Location name, \"hmac\" BASE64 encoded String of SHA256 HMAC for location } ] } Copy Replace the { id} with the specific monitor ID. Here is an example for the script: var assert = require('assert'); assert.equal('1', '1'); Copy This example uses password as the password for the scriptLocation. curl -v -H 'X-Api-Key: '{Admin_User_Key}' -H 'content-type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script -d '{ \"scriptText\": \"dmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpOw0KYXNzZXJ0LmVxdWFsKCcxJywgJzEnKTs=\",\"scriptLocations\": [ { \"name\": \"my_vse_enabled_location\", \"hmac\": \"MjhiNGE4MjVlMDE1N2M4NDQ4MjNjNDFkZDEyYTRjMmUzZDE3NGJlNjU0MWFmOTJlMzNiODExOGU2ZjhkZTY4\"} ]}' Copy A successful request will return a 204 No Content response with an empty body. Possible error codes include: 400 Bad Request: Invalid BASE64 encoded string for scriptText or hmac. 403 Forbidden: The specified monitor is not of the type SCRIPT_BROWSER or SCRIPT_API. 404 Not Found: The specified monitor does not exist. Scripted browser example Here is an example of using New Relic's REST API and the bash script to create a scripted browser monitor. Scripted browser API example The following example shows curl commands to create a scripted browser monitor. At the top of the script, replace the variables with your specific values. For the scriptfile variable, identify the filename for the script to be created. Here is a sample script that can be saved as sample_synth_script.js to use in the example: var assert = require(\"assert\"); $browser.get(\"http://example.com\").then(function(){ // Check the H1 title matches \"Example Domain\" return $browser.findElement($driver.By.css(\"h1\")).then(function(element){ return element.getText().then(function(text){ assert.equal(\"Example Domain\", text, \"Page H1 title did not match\"); }); }); }).then(function(){ // Check that the external link matches \"http://www.iana.org/domains/example\" return $browser.findElement($driver.By.css(\"div > p > a\")).then(function(element){ return element.getAttribute(\"href\").then(function(link){ assert.equal(\"http://www.iana.org/domains/example\", link, \"More information link did not match\"); }); }); }); Copy Bash script example This example show the bash script that will create the SCRIPTED_BROWSER monitor. #!/bin/bash # Admin API key from your account settings adminAPIKey='' # Other attributes found at https://docs.newrelic.com/docs/apis/synthetics-rest-api/monitor-examples/attributes-synthetics-rest-api#api-attributes monitorName='Test API Script' monitorType='SCRIPT_BROWSER' frequency=1440 locations='\"AWS_US_WEST_1\", \"AWS_US_EAST_1\"' slaThreshold=7.0 # Location of the file with your script scriptfile=sample_synth_script.js # Test that the script file exists (does not validate content) if [ -e \"$scriptfile\" ] then script=$(cat \"$scriptfile\") payload=\"{ \\\"name\\\" : \\\"$monitorName\\\", \\\"frequency\\\" : $frequency, \\\"locations\\\" : [ $locations ], \\\"status\\\" : \\\"ENABLED\\\", \\\"type\\\" : \\\"$monitorType\\\", \\\"slaThreshold\\\" : $slaThreshold, \\\"uri\\\":\\\"\\\"}\" echo \"Creating monitor\" # Make cURL call to API and parse response headers to get monitor UUID shopt -s extglob # Required to trim whitespace; see below while IFS=':' read key value; do # trim whitespace in \"value\" value=${value##+([[:space:]])}; value=${value%%+([[:space:]])} case \"$key\" in location) LOCATION=\"$value\" ;; HTTP*) read PROTO STATUS MSG <<< \"$key{$value:+:$value}\" ;; esac done < <(curl -sS -i -X POST -H \"X-Api-Key:$adminAPIKey\" -H 'Content-Type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors -d \"$payload\") # Validate monitor creation & add script unless it failed if [ $STATUS = 201 ]; then echo \"Monitor created, $LOCATION \" echo \"Uploading script\" # base64 encode script encoded=`echo \"$script\" | base64` scriptPayload='{\"scriptText\":\"'$encoded'\"}' curl -s -X PUT -H \"X-Api-Key:$adminAPIKey\" -H 'Content-Type: application/json' \"$LOCATION/script\" -d $scriptPayload echo \"Script uploaded\" else echo \"Monitor creation failed\" fi else echo \"script file not found, not creating monitor\" fi Copy Synthetics attributes Here are the attributes used with Synthetics REST API calls, listed in alphabetical order. Synthetics API attribute Definition apiVersion String: The version number. emails Array of strings: Email addresses for alert notifications with New Relic. frequency Integer: Number of minutes between checks. Valid values include 1, 5, 15, 30, 60, 360, 720, and 1440. id The UUID for the specific Synthetics monitor. locations Array of strings: Array of locations by full label. name String: The monitor's name. scriptLocations String: The name and hmac values for private locations using Verified Script Execution. scriptText String: The BASE64 encoded text for scripted monitors. slaThreshold Double: Value for the Synthetics SLA report, in seconds. status String: Valid values include ENABLED, MUTED, and DISABLED. type String: Type of monitor. Valid values include: SIMPLE (Ping) BROWSER SCRIPT_BROWSER SCRIPT_API uri String: The URI for SIMPLE and BROWSER monitor types; for example, http://my-site.com. Optional for SCRIPT_BROWSER and SCRIPT_API. userID Integer: The specific user ID. Specific monitor endpoint When making REST API calls for a specific monitor, include the monitor_uuid as part of the endpoint. The monitor_uuid is the GUID which is part of the URL. For example, a selected Synthetics monitor has this URL: https://synthetics.newrelic.com/accounts/nnnn/monitors/ab123-c456d-e78-90123-f45g Copy The monitor_uuid is the value that follows /monitors/. For more help Additional documentation resources include: Manage Synthetics monitors via the REST API (v3) (Synthetics API version 3) Manage Synthetics alert notifications via the REST API (REST API calls for email alerts for New Relic monitors) Use Synthetics label APIs (REST API calls for labels and categories used by New Relic monitors)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.35092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Synthetics</em> <em>REST</em> <em>API</em> version 1 (deprecated)",
        "sections": "<em>Synthetics</em> <em>REST</em> <em>API</em> version 1 (deprecated)",
        "tags": "<em>Synthetics</em> <em>REST</em> <em>API</em>",
        "body": " the SCRIPTED_BROWSER <em>monitor</em>. #!&#x2F;bin&#x2F;bash # Admin <em>API</em> key from your account settings adminAPIKey=&#x27;&#x27; # Other attributes found at https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>synthetics</em>-<em>rest</em>-<em>api</em>&#x2F;<em>monitor</em>-<em>examples</em>&#x2F;attributes-<em>synthetics</em>-<em>rest</em>-<em>api</em>#<em>api</em>-attributes <em>monitor</em>Name=&#x27;Test <em>API</em> Script&#x27; <em>monitor</em>Type=&#x27;SCRIPT_BROWSER"
      },
      "id": "60452541e7b9d27829579a0a"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights",
        "Plugins"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-09-13T14:57:49Z",
      "updated_at": "2021-08-27T04:51:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for many of our more curated tools, such as our open source telemetry integrations and our Telemetry SDKs. Data type Description Metric API Send metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send your log data to New Relic. Trace API Send distributed tracing data to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android Unity REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing plan) For organizations on our original pricing plan, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing plans that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API. Plugins New Relic Plugins have been deprecated. For details, see Plugins EOL.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.207115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>APIs</em>",
        "sections": "<em>REST</em> <em>API</em>",
        "tags": "<em>APIs</em>",
        "body": " alerts conditions for your mobile apps. Query <em>API</em> To query New Relic data, use NerdGraph. Account management <em>APIs</em> For account-related <em>APIs</em>, see Account <em>APIs</em>. Synthetic monitoring <em>Synthetics</em> <em>API</em> resources include: Resource Details <em>Synthetics</em> <em>REST</em> <em>API</em> The <em>Synthetics</em> <em>REST</em> <em>API</em> functionality includes: Create"
      },
      "id": "609fa5cf196a67066022b194"
    }
  ],
  "/docs/apis/synthetics-rest-api/secure-credentials-examples/use-synthetics-secure-credentials-apis": [
    {
      "sections": [
        "Manage synthetic monitors via REST API",
        "Features",
        "Monitor types in API",
        "Use the API",
        "Caution",
        "Get all monitors",
        "Get a specific monitor",
        "Create a monitor",
        "Update an existing monitor",
        "Patch an existing monitor",
        "Delete an existing monitor",
        "Get a list of valid locations",
        "Script API for scripted browser and API test monitors",
        "Get monitor script",
        "Add scripted monitor",
        "Update monitor script",
        "Using private location scripts with verified script execution",
        "Important",
        "Scripted browser example",
        "Scripted browser API example",
        "Bash script example",
        "Tip"
      ],
      "title": "Manage synthetic monitors via REST API",
      "type": "docs",
      "tags": [
        "APIs",
        "Synthetics REST API",
        "Monitor examples"
      ],
      "external_id": "83a3e8ad751c7f0865785a1c2fad193604a7f7da",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/synthetics-rest-api/monitor-examples/manage-synthetics-monitors-rest-api/",
      "published_at": "2021-09-14T18:17:08Z",
      "updated_at": "2021-09-14T18:17:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the Synthetics REST API to create and manage synthetic monitors of all types: ping, simple browser, scripted browser, and API test monitors. All synthetic monitoring data is available via the REST API. To use the Synthetics REST API, you must have a user role that allows that capability and a user key. For an overview of all available New Relic APIs, see Intro to APIs. Features The newest version of the Synthetics API (v3) adds these features: Synthetics API (v3) Features Options field for POST and PUT request You can specify the options for SIMPLE and BROWSER type monitors, similar to the way these options are available in the UI. PATCH request You can update only the fields of a monitor you want to change, rather than having to specify the entire monitor entity in a PUT. You can also specify the OPTION, assuming you are using the appropriate type of monitor. More detail with 400 Bad Request errors As of v3, the Synthetics API attempts to return as much information as possible when a validation failure occurs. This will help you figure out what might be wrong with the request. The API runs all validations and returns any failed validation messages, rather than failing on the first validation error as occurred in previous API versions. Pagination Large API responses are properly paginated. You can also use NRQL queries to analyze past changes made via the API. Monitor types in API These are the monitor types and how they're referred to in the API: Monitor type API name Ping SIMPLE Simple browser BROWSER Scripted browser SCRIPT_BROWSER API test SCRIPT_API Use the API To use the Synthetics REST API, you must have the ability to manage synthetics monitors and use a user key (the REST API key won't work). This API can be used for all Synthetics monitors. (Additional API methods for scripted browser and API test monitors are also available to update the script associated with those monitors.) All Synthetics data is available via the API. API examples show cURL commands. For US-based accounts, use the following endpoint: https://synthetics.newrelic.com/synthetics/api Copy For EU-based accounts, use the following endpoint: https://synthetics.eu.newrelic.com/synthetics/api Copy Caution The Synthetics REST API limits an account's rate of requests to three requests per second. Requests made in excess of this threshold will return a 429 response code. Get all monitors To view a list of all the monitors in your New Relic account, send a GET request to $API_ENDPOINT/v3/monitors. For example: curl -v \\ -H 'Api-Key:$API_KEY' $API_ENDPOINT/v3/monitors Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"monitors\": [ { \"id\": \"2a1bc369-7654-489d-918e-f6g135h7i2jk\", \"name\": \"monitor1\", \"type\": \"BROWSER\", \"frequency\": 60, \"uri\": \"http://example.com\", \"locations\": [ \"AWS_US_WEST_1\" ], \"status\": \"DISABLED\", \"slaThreshold\": 7, \"options\": {}, \"modifiedAt\": \"2016-09-26T23:12:46.981+0000\", \"createdAt\": \"2016-09-26T23:12:46.981+0000\", \"userId\": 0, \"apiVersion\": \"0.2.2\" } ], \"count\": 1 } Copy Query arguments: offset: The monitor count offset. Defaults to 0. For example, if you have 40 monitors and you use an offset value of 20, it will return monitors 21-40. limit: The number of results per page, maximum 100. Defaults to 50. You can include these in your cURL command as follows: curl -v \\ -H 'Api-Key:$API_KEY' $API_ENDPOINT/v3/monitors \\ -G -d 'offset=20&limit=100' Copy The headers include a Link to help you easily page your monitors. For example: <https://synthetics.newrelic.com/synthetics/api/v3/monitors/?offset=0&limit=20>; rel=\"first\", <https://synthetics.newrelic.com/synthetics/api/v3/monitors/?offset=40&limit=20>; rel=\"last\" Copy Get a specific monitor To view a single Synthetics monitor, send a GET request to $API_ENDPOINT/v3/monitors/$MONITOR_ID. curl -v \\ -H 'Api-Key:$API_KEY' $API_ENDPOINT/v3/monitors/$MONITOR_ID Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"id\": UUID, \"name\": string, \"type\": string, \"frequency\": integer, \"uri\": string, \"locations\": array of strings, \"status\": string, \"slaThreshold\": double, \"userId\": integer, \"apiVersion\": string } Copy An invalid monitor ID will return 404 Not Found: The specified monitor doesn't exist. Create a monitor To add a new monitor to your Synthetics account, send a POST request to $API_ENDPOINT/v3/monitors with a JSON payload that describes the monitor. All fields in the following example are required unless stated otherwise: { \"name\": string [required], \"type\": string (SIMPLE, BROWSER, SCRIPT_API, SCRIPT_BROWSER) [required], \"frequency\": integer (minutes) [required, must be one of 1, 5, 10, 15, 30, 60, 360, 720, or 1440], \"uri\": string [required for SIMPLE and BROWSER type], \"locations\": array of strings [at least one required], \"status\": string (ENABLED, MUTED, DISABLED) [required], \"slaThreshold\": double, \"options\": { \"validationString\": string [only valid for SIMPLE and BROWSER types], \"verifySSL\": boolean (true, false) [only valid for SIMPLE and BROWSER types], \"bypassHEADRequest\": boolean (true, false) [only valid for SIMPLE types], \"treatRedirectAsFailure\": boolean (true, false) [only valid for SIMPLE types] } } Copy In addition, to add the script for a scripted monitor via the REST API, call an additional API endpoint to send the script for the monitor just created. If you are using private locations with verified script execution enabled, see script locations with verified script execution. Replace the Synthetics REST API attributes in the following example with your specific values: curl -v \\ -X POST -H 'Api-Key:$API_KEY' \\ -H 'Content-Type: application/json' $API_ENDPOINT/v3/monitors \\ -d '{ \"name\" : \"monitor1\", \"frequency\" : 15, \"uri\" : \"http://my-uri.com\", \"locations\" : [ \"AWS_US_WEST_1\" ], \"type\" : \"browser\", \"status\" : \"enabled\", \"slaThreshold\" : \"1.0\"}' Copy A successful request will return a 201 Created response, with the URI of the newly-created monitor specified in the location header. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example: the frequency is out of bounds or one or more of the specified locations is invalid. (See the error message in the body of the response.) 402 Payment Required: Creating the monitor will increase your scheduled checks past your account's purchased check limit. Update an existing monitor To update an existing monitor in New Relic, send a PUT request to $API_ENDPOINT/v3/monitors/$MONITOR_ID. In addition, for scripted monitors, follow the procedures to update the BASE64 encoded script. All fields are required. However, the TYPE of the monitor cannot be changed. Use a specific monitor ID, and replace the Synthetics REST API attributes with your specific values. curl -v \\ -X PUT -H 'Api-Key:$API_KEY' \\ -H 'Content-Type: application/json' $API_ENDPOINT/v3/monitors/$MONITOR_ID \\ -d '{ \"name\" : \"updated monitor name\", \"type\": \"monitor type\", \"frequency\" : 15, \"uri\" : \"http://my-uri.com/\", \"locations\" : [ \"AWS_US_WEST_1\" ], \"status\" : \"enabled\", \"slaThreshold\": \"7.0\" }' Copy PUT requests are intended to replace target entities, so all attributes required in the JSON payload when creating a new monitor are also required when updating an existing monitor. A successful request will return a 204 No Content response, with an empty body. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example, the frequency is out of bounds or one or more of the specified locations is invalid. (See the error message in the body of the response.) 404 Not Found: The specified monitor does not exist. Patch an existing monitor To patch an existing monitor in New Relic, send a PATCH request to $API_ENDPOINT/v3/monitors/$MONITOR_ID. Use a specific monitor ID, and replace the Synthetics REST API attributes with your specific values. curl -v \\ -X PATCH -H 'Api-Key:$API_KEY' \\ -H 'Content-Type: application/json' $API_ENDPOINT/v3/monitors/$MONITOR_ID \\ -d '{ \"name\" : \"updated monitor name\" }' Copy PATCH requests are intended to update individual attributes of your New Relic Synthetics monitor rather than updating the entire entity, so you may provide only the attributes you want to update. A successful request will return a 204 No Content response, with an empty body. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example, the frequency is out of bounds, or one or more of the specified locations is invalid. (See the error message in the body of the response.) 404 Not Found: The specified monitor does not exist. Delete an existing monitor To delete an existing monitor in New Relic Synthetics, send a DELETE request to $API_ENDPOINT/v3/monitors/$MONITOR_ID: curl -v \\ -H 'Api-Key:$API_KEY' \\ -X DELETE $API_ENDPOINT/v3/monitors/$MONITOR_ID Copy A successful request will return a 204 No Content response, with an empty body. An unsuccessful request will return the response 404 Not Found: The specified monitor does not exist. Get a list of valid locations To retrieve the list of valid locations in New Relic Synthetics, use the following command: curl -v \\ -X GET -H 'Api-Key:$API_KEY' $API_ENDPOINT/v1/locations Copy Script API for scripted browser and API test monitors In addition to the general API, there are several API methods for the scripted browsers (SCRIPT_BROWSER) and API test browsers (SCRIPT_API). These examples show cURL commands. Get monitor script To view the script associated with a specific SCRIPT_BROWSER or SCRIPT_API monitor in New Relic Synthetics for your account, send a GET request to $API_ENDPOINT/v3/monitors/$MONITOR_ID/script. For example: curl -v -H 'Api-Key: $API_KEY' $API_ENDPOINT/v3/monitors/$MONITOR_ID/script Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"scriptText\": BASE64 encoded string } Copy Possible error codes include: 403 Forbidden: The specified monitor is not of type SCRIPT_BROWSER or SCRIPT_API. 404 Not Found: The specified monitor doesn't exist or the script associated with the monitor doesn't exist. Add scripted monitor To add a new scripted monitor to New Relic Synthetics with the REST API: Follow standard API procedures to add a new monitor, and identify the type as a SCRIPT_BROWSER or SCRIPT_API. Update the new monitor with a BASE64 encoded version of the script to the $MONITOR_UUID/script endpoint. For more information, refer to the example. If you are using private locations with verified script execution enabled, see script locations with verified script execution. Update monitor script To update the script associated with a specific SCRIPT_BROWSER or SCRIPT_API monitor in New Relic Synthetics for your account, send a PUT request to $API_ENDPOINT/v3/monitors/$MONITOR_ID/script with a JSON payload that contains the scriptText (required). scriptPayload='{\"scriptText\":BASE64 encoded string}' curl -v -X PUT \\ -H 'Api-Key:$API_KEY' \\ -H 'Content-Type: application/json' \\ $API_ENDPOINT/v3/monitors/$MONITOR_UUID/script \\ -d $scriptPayload Copy If you are using private locations with verified script execution enabled, see script locations with verified script execution. A successful request will return a 204 No Content response with an empty body. Possible error codes include: 400 Bad Request: Invalid BASE64 encoded string for scriptText or hmac. 403 Forbidden: The specified monitor is not of the type SCRIPT_BROWSER or SCRIPT_API. 404 Not Found: The specified monitor does not exist. Using private location scripts with verified script execution When creating or updating monitors for private locations that have verified script execution turned on, you must use scriptLocations to set the password: { \"scriptText\": BASE64 encoded String, \"scriptLocations\": [ { \"name\": Location name, \"hmac\" BASE64 encoded String of SHA256 HMAC for location } ] } Copy The password used to generate the HMAC string must match the password set for the private location. If you have multiple locations with Verified script execution enabled each location must have the HMAC calculated. When generating the HMAC string, use the SHA256 algorithm with the script and password. Here's an example for the script: var assert = require('assert'); assert.equal('1', '1'); Copy This example uses password as the password for the scriptLocation: curl -v -X PUT -H 'Api-Key: '$API_KEY' -H 'content-type: application/json' $API_ENDPOINT}/v3/monitors/$MONITOR_ID/script -d '{ \"scriptText\": \"dmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpOw0KYXNzZXJ0LmVxdWFsKCcxJywgJzEnKTs=\",\"scriptLocations\": [ { \"name\": \"my_vse_enabled_location\", \"hmac\": \"MjhiNGE4MjVlMDE1N2M4NDQ4MjNjNDFkZDEyYTRjMmUzZDE3NGJlNjU0MWFmOTJlMzNiODExOGU2ZjhkZTY4ZQ==\"} ]}' Copy Important You must remove the last newline character from both the script and the calculated HMAC value before encoding in BASE64. Calculation steps: Calculate the HMAC value from the script. One way is to use: cat script | openssl dgst -sha256 -hmac \"password\" > hmac Remove the newline character if one was added by openssl. Encode the HMAC in BASE64 without line breaks. Scripted browser example Here is an example of using New Relic's REST API and the bash script to create a scripted browser monitor. Scripted browser API example The following example shows cURL commands to create a scripted browser monitor. At the top of the script, replace the variables with your specific values. For the scriptfile variable, identify the filename for the script to be created. Here is a sample script that can be saved as sample_synth_script.js to use in the example: var assert = require(\"assert\"); $browser.get(\"http://example.com\").then(function(){ // Check the H1 title matches \"Example Domain\" return $browser.findElement($driver.By.css(\"h1\")).then(function(element){ return element.getText().then(function(text){ assert.equal(\"Example Domain\", text, \"Page H1 title did not match\"); }); }); }).then(function(){ // Check that the external link matches \"http://www.iana.org/domains/example\" return $browser.findElement($driver.By.css(\"div > p > a\")).then(function(element){ return element.getAttribute(\"href\").then(function(link){ assert.equal(\"http://www.iana.org/domains/example\", link, \"More information link did not match\"); }); }); }); Copy Bash script example This example shows the bash script that will create the SCRIPTED_BROWSER monitor. Tip In some cases you may want to use -w 0, which will disable line wrapping: base64 -w 0 $scriptfile #!/bin/bash # API key from your account settings API_KEY='' # Other attributes found at https://docs.newrelic.com/docs/apis/synthetics-rest-api/monitor-examples/attributes-synthetics-rest-api#api-attributes monitorName='Test API Script' monitorType='SCRIPT_BROWSER' frequency=1440 locations='\"AWS_US_WEST_1\", \"AWS_US_EAST_1\"' slaThreshold=7.0 # Location of the file with your script scriptfile=sample_synth_script.js # Test that the script file exists (does not validate content) if [ -e \"$scriptfile\" ] then script=$(cat \"$scriptfile\") payload=\"{ \\\"name\\\" : \\\"$monitorName\\\", \\\"frequency\\\" : $frequency, \\\"locations\\\" : [ $locations ], \\\"status\\\" : \\\"ENABLED\\\", \\\"type\\\" : \\\"$monitorType\\\", \\\"slaThreshold\\\" : $slaThreshold, \\\"uri\\\":\\\"\\\"}\" echo \"Creating monitor\" # Make cURL call to API and parse response headers to get monitor UUID shopt -s extglob # Required to trim whitespace; see below while IFS=':' read key value; do # trim whitespace in \"value\" value=${value##+([[:space:]])}; value=${value%%+([[:space:]])} case \"$key\" in location) LOCATION=\"$value\" ;; HTTP*) read PROTO STATUS MSG <<< \"$key{$value:+:$value}\" ;; esac done < <(curl -sS -i -X POST -H \"Api-Key:$API_KEY\" -H 'Content-Type:application/json' https://synthetics.newrelic.com/synthetics/api/v3/monitors -d \"$payload\") # Validate monitor creation & add script unless it failed if [ $STATUS = 201 ]; then echo \"Monitor created, $LOCATION \" echo \"Uploading script\" # base64 encode script encoded=`echo \"$script\" | base64` scriptPayload=\"{\\\"scriptText\\\":\\\"$encoded\\\"}\" curl -s -X PUT -H \"Api-Key:$API_KEY\" -H 'Content-Type:application/json' \"$LOCATION/script\" -d $scriptPayload echo \"Script uploaded\" else echo \"Monitor creation failed\" fi else echo \"script file not found, not creating monitor\" fi Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 221.53381,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>synthetic</em> monitors via <em>REST</em> <em>API</em>",
        "sections": "Manage <em>synthetic</em> monitors via <em>REST</em> <em>API</em>",
        "tags": "<em>Synthetics</em> <em>REST</em> <em>API</em>",
        "body": " will disable line wrapping: base64 -w 0 $scriptfile #!&#x2F;bin&#x2F;bash # <em>API</em> key from your account settings <em>API</em>_KEY=&#x27;&#x27; # Other attributes found at https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>synthetics</em>-<em>rest</em>-<em>api</em>&#x2F;monitor-<em>examples</em>&#x2F;attributes-<em>synthetics</em>-<em>rest</em>-<em>api</em>#<em>api</em>-attributes monitorName=&#x27;Test <em>API</em> Script&#x27; monitorType"
      },
      "id": "60440d4628ccbc74532c606a"
    },
    {
      "sections": [
        "Synthetics REST API version 1 (deprecated)",
        "Caution",
        "Managing simple and scripted monitors",
        "Get all monitors",
        "Get a specific monitor",
        "Create a monitor",
        "Update an existing monitor",
        "Delete an existing monitor",
        "Get list of valid locations",
        "Managing scripted monitors",
        "Get monitor script",
        "Add scripted monitor",
        "Update monitor script",
        "Scripted browser example",
        "Scripted browser API example",
        "Bash script example",
        "Synthetics attributes",
        "Specific monitor endpoint",
        "For more help"
      ],
      "title": "Synthetics REST API version 1 (deprecated)",
      "type": "docs",
      "tags": [
        "APIs",
        "Synthetics REST API",
        "Monitor examples"
      ],
      "external_id": "38f3b7d441889cea39fa8a10d1593473bffa8cf7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/synthetics-api/synthetics-rest-api-version-1/",
      "published_at": "2021-09-14T20:49:04Z",
      "updated_at": "2021-07-09T23:26:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Currently New Relic supports two versions of the Synthetics API: v1 and v3. Version 3 was released October 2016. Version 1 is deprecated and will eventually no longer be available. No termination date has been announced. However, no further development or modifications will be made to v1. Caution Recommendation: Create new monitors using the v3 Synthetics API and migrate v1 scripts to their v3 equivalent. To use the REST API for New Relic's synthetic monitoring, you must activate API access and generate your Admin User's API key from your account settings. Then you can make standard API calls via the command line. Managing simple and scripted monitors You must use your Admin User's API key to make Synthetics REST API calls. The account's REST API key will not work. Caution The Synthetics REST API limits an account's rate of requests to three requests per second. Requests made in excess of this threshold will return a 429 response code. These examples show curl commands: Get all monitors To view a list of all monitors in New Relic for your account, send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/monitors. For example: curl -v \\ -H 'X-Api-Key:{Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/monitors Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"count\": integer, \"monitors\": [ { \"id\": UUID, \"name\": string, \"type\": string, \"frequency\": integer, \"uri\": string, \"locations\": array of strings, \"status\": string, \"slaThreshold\": double, \"userId\": integer, \"apiVersion\": string } ] } Copy Get a specific monitor To view a single existing monitor in New Relic, send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}. Replace the { id} in the following example with the specific monitor ID. curl -v \\ -H 'X-Api-Key:{Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id} Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"id\": UUID, \"name\": string, \"type\": string, \"frequency\": integer, \"uri\": string, \"locations\": array of strings, \"status\": string, \"slaThreshold\": double, \"userId\": integer, \"apiVersion\": string } Copy An invalid monitor ID will return the error 404 Not Found: The specified monitor doesn't exist. Create a monitor To add a new monitor to your account in New Relic, send a POST request to https://synthetics.newrelic.com/synthetics/api/v1/monitors with a JSON payload that describes the monitor: { \"name\": string [required], \"type\": string (SIMPLE, BROWSER, SCRIPT_API, SCRIPT_BROWSER) [required], \"frequency\": integer (minutes) [required, must be one of 1, 5, 10, 15, 30, 60, 360, 720, or 1440], \"uri\": string [required for SIMPLE and BROWSER type], \"locations\": array of strings (send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/locations to get a list of valid locations) [at least one required], \"status\": string (ENABLED, MUTED, DISABLED) [required], \"slaThreshold\": double, } Copy In addition, to add a scripted monitor via the REST API, call an additional API endpoint to send the script for the monitor just created. Replace the Synthetics REST API attributes in the following example with your specific values. curl -v \\ -X POST -H 'X-Api-Key:{Admin_User_Key}' \\ -H 'Content-Type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors \\ -d '{ \"name\" : \"monitor1\", \"frequency\" : 15, \"uri\" : \"http://my-uri.com\", \"locations\" : [ \"AWS_US_WEST_1\" ], \"type\" : \"browser\"}' Copy A successful request will return a 201 Created response, with the URI of the newly-created monitor specified in the location header. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example, the frequency is out of bounds or one or more of the specified locations is invalid (See the error message in the body of the response.) 402 Payment Required: Creating the monitor will increase your scheduled checks past your account's purchased check limit. Update an existing monitor To update an existing monitor in New Relic, send a PUT request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}. In addition, for scripted monitors, follow the procedures to update the BASE64 encoded script. Replace the { id} in the following example with the specific monitor ID, and replace the Synthetics REST API attributes with your specific values. curl -v \\ -X PUT -H 'X-Api-Key:{Admin_User_Key}' \\ -H 'Content-Type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id} \\ -d '{ \"name\" : \"updated monitor name\", \"type\" : \"simple\", \"frequency\" : 15, \"uri\" : \"http://my-uri.com/\", \"locations\" : [ \"AWS_US_WEST_1\" ], \"status\" : \"enabled\", \"slaThreshold\": \"7.0\" }' Copy PUT requests are intended to replace target entities, so all attributes required in the JSON payload when creating a new monitor are also required when updating an existing monitor. A successful request will return a 204 No Content response, with an empty body. Possible error codes include: 400 Bad Request: One or more of the monitor values is invalid, or the format of the request is invalid. For example, the frequency is out of bounds or one or more of the specified locations is invalid (See the error message in the body of the response.) 404 Not Found: The specified monitor does not exist. Delete an existing monitor To delete an existing monitor in New Relic, send a DELETE request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}. Replace the { id} in the following example with the specific monitor ID. curl -v \\ -H 'X-Api-Key:{Admin_User_Key}' \\ -X DELETE https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id} Copy A successful request will return a 204 No Content response, with an empty body. An unsuccessful request will return the response, 404 Not Found: The specified monitor does not exist. Get list of valid locations To retrieve the list of valid locations in New Relic, use the following command. curl -v \\ -X GET -H 'X-Api-Key:{Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/locations Copy Managing scripted monitors In addition to the general API, there are several API methods for the scripted browser (SCRIPT_BROWSER) and api test (SCRIPT_API) monitor types. These examples show curl commands. Get monitor script To view the script associated with a specific SCRIPT_BROWSER or SCRIPT_API monitor in New Relic for your account, send a GET request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script. Replace the { id} with the specific monitor ID. For example: curl -v -H 'X-Api-Key: {Admin_User_Key}' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script Copy A successful request will return a 200 OK response. The data returned will be a JSON object in the following format: { \"scriptText\": BASE64 encoded string } Copy Possible error codes include: 403 Forbidden: The specified monitor is not of type SCRIPT_BROWSER or SCRIPT_API. 404 Not Found: The specified monitor doesn't exist or the script associated with the monitor doesn't exist. Add scripted monitor To add a new scripted monitor to New Relic with the REST API: Follow standard API procedures to add a new monitor, and identify the type as a SCRIPT_BROWSER or SCRIPT_API. Update the new monitor with a BASE64 encoded version of the script to the ${MONITOR_UUID}/script endpoint. For more information, refer to the example. Update monitor script To update the script associated with a specific SCRIPT_BROWSER or SCRIPT_API monitor in New Relic for your account, send a PUT request to https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script with a JSON payload that contains the scriptText (required). The scriptLocations data is required only for private locations with Verified Script Execution turned on. The password used to generate the HMAC string must match the password set for the private location. When generating the HMAC string, use the SHA256 algorithm. { \"scriptText\": BASE64 encoded String, \"scriptLocations\": [ { \"name\": Location name, \"hmac\" BASE64 encoded String of SHA256 HMAC for location } ] } Copy Replace the { id} with the specific monitor ID. Here is an example for the script: var assert = require('assert'); assert.equal('1', '1'); Copy This example uses password as the password for the scriptLocation. curl -v -H 'X-Api-Key: '{Admin_User_Key}' -H 'content-type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors/{id}/script -d '{ \"scriptText\": \"dmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpOw0KYXNzZXJ0LmVxdWFsKCcxJywgJzEnKTs=\",\"scriptLocations\": [ { \"name\": \"my_vse_enabled_location\", \"hmac\": \"MjhiNGE4MjVlMDE1N2M4NDQ4MjNjNDFkZDEyYTRjMmUzZDE3NGJlNjU0MWFmOTJlMzNiODExOGU2ZjhkZTY4\"} ]}' Copy A successful request will return a 204 No Content response with an empty body. Possible error codes include: 400 Bad Request: Invalid BASE64 encoded string for scriptText or hmac. 403 Forbidden: The specified monitor is not of the type SCRIPT_BROWSER or SCRIPT_API. 404 Not Found: The specified monitor does not exist. Scripted browser example Here is an example of using New Relic's REST API and the bash script to create a scripted browser monitor. Scripted browser API example The following example shows curl commands to create a scripted browser monitor. At the top of the script, replace the variables with your specific values. For the scriptfile variable, identify the filename for the script to be created. Here is a sample script that can be saved as sample_synth_script.js to use in the example: var assert = require(\"assert\"); $browser.get(\"http://example.com\").then(function(){ // Check the H1 title matches \"Example Domain\" return $browser.findElement($driver.By.css(\"h1\")).then(function(element){ return element.getText().then(function(text){ assert.equal(\"Example Domain\", text, \"Page H1 title did not match\"); }); }); }).then(function(){ // Check that the external link matches \"http://www.iana.org/domains/example\" return $browser.findElement($driver.By.css(\"div > p > a\")).then(function(element){ return element.getAttribute(\"href\").then(function(link){ assert.equal(\"http://www.iana.org/domains/example\", link, \"More information link did not match\"); }); }); }); Copy Bash script example This example show the bash script that will create the SCRIPTED_BROWSER monitor. #!/bin/bash # Admin API key from your account settings adminAPIKey='' # Other attributes found at https://docs.newrelic.com/docs/apis/synthetics-rest-api/monitor-examples/attributes-synthetics-rest-api#api-attributes monitorName='Test API Script' monitorType='SCRIPT_BROWSER' frequency=1440 locations='\"AWS_US_WEST_1\", \"AWS_US_EAST_1\"' slaThreshold=7.0 # Location of the file with your script scriptfile=sample_synth_script.js # Test that the script file exists (does not validate content) if [ -e \"$scriptfile\" ] then script=$(cat \"$scriptfile\") payload=\"{ \\\"name\\\" : \\\"$monitorName\\\", \\\"frequency\\\" : $frequency, \\\"locations\\\" : [ $locations ], \\\"status\\\" : \\\"ENABLED\\\", \\\"type\\\" : \\\"$monitorType\\\", \\\"slaThreshold\\\" : $slaThreshold, \\\"uri\\\":\\\"\\\"}\" echo \"Creating monitor\" # Make cURL call to API and parse response headers to get monitor UUID shopt -s extglob # Required to trim whitespace; see below while IFS=':' read key value; do # trim whitespace in \"value\" value=${value##+([[:space:]])}; value=${value%%+([[:space:]])} case \"$key\" in location) LOCATION=\"$value\" ;; HTTP*) read PROTO STATUS MSG <<< \"$key{$value:+:$value}\" ;; esac done < <(curl -sS -i -X POST -H \"X-Api-Key:$adminAPIKey\" -H 'Content-Type: application/json' https://synthetics.newrelic.com/synthetics/api/v1/monitors -d \"$payload\") # Validate monitor creation & add script unless it failed if [ $STATUS = 201 ]; then echo \"Monitor created, $LOCATION \" echo \"Uploading script\" # base64 encode script encoded=`echo \"$script\" | base64` scriptPayload='{\"scriptText\":\"'$encoded'\"}' curl -s -X PUT -H \"X-Api-Key:$adminAPIKey\" -H 'Content-Type: application/json' \"$LOCATION/script\" -d $scriptPayload echo \"Script uploaded\" else echo \"Monitor creation failed\" fi else echo \"script file not found, not creating monitor\" fi Copy Synthetics attributes Here are the attributes used with Synthetics REST API calls, listed in alphabetical order. Synthetics API attribute Definition apiVersion String: The version number. emails Array of strings: Email addresses for alert notifications with New Relic. frequency Integer: Number of minutes between checks. Valid values include 1, 5, 15, 30, 60, 360, 720, and 1440. id The UUID for the specific Synthetics monitor. locations Array of strings: Array of locations by full label. name String: The monitor's name. scriptLocations String: The name and hmac values for private locations using Verified Script Execution. scriptText String: The BASE64 encoded text for scripted monitors. slaThreshold Double: Value for the Synthetics SLA report, in seconds. status String: Valid values include ENABLED, MUTED, and DISABLED. type String: Type of monitor. Valid values include: SIMPLE (Ping) BROWSER SCRIPT_BROWSER SCRIPT_API uri String: The URI for SIMPLE and BROWSER monitor types; for example, http://my-site.com. Optional for SCRIPT_BROWSER and SCRIPT_API. userID Integer: The specific user ID. Specific monitor endpoint When making REST API calls for a specific monitor, include the monitor_uuid as part of the endpoint. The monitor_uuid is the GUID which is part of the URL. For example, a selected Synthetics monitor has this URL: https://synthetics.newrelic.com/accounts/nnnn/monitors/ab123-c456d-e78-90123-f45g Copy The monitor_uuid is the value that follows /monitors/. For more help Additional documentation resources include: Manage Synthetics monitors via the REST API (v3) (Synthetics API version 3) Manage Synthetics alert notifications via the REST API (REST API calls for email alerts for New Relic monitors) Use Synthetics label APIs (REST API calls for labels and categories used by New Relic monitors)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.21531,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Synthetics</em> <em>REST</em> <em>API</em> version 1 (deprecated)",
        "sections": "<em>Synthetics</em> <em>REST</em> <em>API</em> version 1 (deprecated)",
        "tags": "<em>Synthetics</em> <em>REST</em> <em>API</em>",
        "body": " the SCRIPTED_BROWSER monitor. #!&#x2F;bin&#x2F;bash # Admin <em>API</em> key from your account settings adminAPIKey=&#x27;&#x27; # Other attributes found at https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>apis</em>&#x2F;<em>synthetics</em>-<em>rest</em>-<em>api</em>&#x2F;monitor-<em>examples</em>&#x2F;attributes-<em>synthetics</em>-<em>rest</em>-<em>api</em>#<em>api</em>-attributes monitorName=&#x27;Test <em>API</em> Script&#x27; monitorType=&#x27;SCRIPT_BROWSER"
      },
      "id": "60452541e7b9d27829579a0a"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights",
        "Plugins"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-09-13T14:57:49Z",
      "updated_at": "2021-08-27T04:51:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for many of our more curated tools, such as our open source telemetry integrations and our Telemetry SDKs. Data type Description Metric API Send metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send your log data to New Relic. Trace API Send distributed tracing data to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android Unity REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing plan) For organizations on our original pricing plan, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing plans that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API. Plugins New Relic Plugins have been deprecated. For details, see Plugins EOL.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.433334,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>APIs</em>",
        "sections": "<em>REST</em> <em>API</em>",
        "tags": "<em>APIs</em>",
        "body": " alerts conditions for your mobile apps. Query <em>API</em> To query New Relic data, use NerdGraph. Account management <em>APIs</em> For account-related <em>APIs</em>, see Account <em>APIs</em>. Synthetic monitoring <em>Synthetics</em> <em>API</em> resources include: Resource Details <em>Synthetics</em> <em>REST</em> <em>API</em> The <em>Synthetics</em> <em>REST</em> <em>API</em> functionality includes: Create"
      },
      "id": "609fa5cf196a67066022b194"
    }
  ],
  "/docs/apm/apm-ui-pages/error-analytics/apm-error-profiles-troubleshoot-trends": [
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 309.54456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in <em>APM</em>&#x27;s transaction traces and <em>error</em> <em>analytics</em>. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic&#x27;s webhook IPs"
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "Manage error data",
        "Error data types: events and trace details",
        "Events",
        "Trace details",
        "Caps on error reporting",
        "Charting error rates and counts",
        "Report custom errors",
        "Ignore errors",
        "Reduce noise with expected errors",
        "Disable error traces",
        "Delete error traces",
        "Caution"
      ],
      "title": "Manage error data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "29a2ebdc7b91029a1fada50791b90e9dc548f17e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/manage-error-data/",
      "published_at": "2021-09-14T04:43:58Z",
      "updated_at": "2021-09-08T19:58:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM Errors page helps you identify, triage, and fix errors in your services. The Errors page uses data collected by the APM agent to display stack traces, transaction attributes such as HTTP header values, and any other custom attributes, so you can understand the context of the error and fix it. Error data types: events and trace details By default, our APM agents collect two type of error data: Events Trace details Events The error event data type includes default attributes, as well as any custom attributes instrumented in your service. It doesn't include a stack trace. Find your events data in the Errors UI as follows: The Errors column in the Error traces table. The Top 5 errors chart. When you’ve drilled into a grouping of errors, those errors not displaying a stack trace are based on this type of data. You can disable Show only errors with stack trace to show errors that have this type of data collected, but no associated trace details. Events are subject to sampling (see Caps on error reporting and Charting error rates and counts). For more on error event data, see Events reported by APM. Trace details The trace details error data type includes stack traces and attributes, and supplements events with more data. It's expected that more events will be reported than trace details--see Caps on error reporting. Find your trace details data in the Errors UI as follows: The “Stack traces” column of the Error traces table. When you’ve drilled into a grouping of errors, those errors with a stack trace use this type of data: Show only errors with stack trace is enabled by default, to constrain the errors shown to just those that have this type of data collected. This data is governed by specific retention rules for Error details. Caps on error reporting New Relic caps error reporting at: 100 events per minute per agent instance 20 trace details per minute per agent instance These caps prevent error reporting from negatively impacting application performance. Examples: App running across five EC2 instances, one JVM each. New Relic caps error reporting at: 100 events per minute x 5 instances = 500 events per minute 20 trace details per minute x 5 instances = 100 trace details per minute App running on one host with ten instances. New Relic caps error reporting at: 100 events per minute x 10 instances = 1000 events per minute 20 trace details per minute x 10 instances = 200 events per minute Charting error rates and counts The Error rate chart is driven by a query on metric timeslice data, which is an unsampled aggregate data type that is accurate but has very limited dimensionality. This data can't be faceted or filtered as flexibly as error event data. You can reproduce this chart in a dashboard, or explore the metric timeslice data further by clicking the ... menu on the Error rate chart, and then using the View query or Add to dashboard options. To chart faceted error counts using event data, as in the Top 5 errors chart, use an NRQL event query. Click the ... menu on the Top 5 errors chart and choose View query for a starting point in creating your chart. Since event data can be sampled (see Caps on error reporting), you can use the EXTRAPOLATE keyword to get an accurate error count, even if sampling is occurring. Report custom errors You can report errors not collected by default with our agents using our agent APIs. For more, see the documentation on the API. Ignore errors You can prevent certain errors that would normally be reported to New Relic from being collected using our agent APIs or the server-side configuration UI. For more details, see Manage errors in APM. Reduce noise with expected errors Sometimes you want to collect error data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors page, but won’t affect your service’s error rate or Apdex metrics. Disable error traces To prevent certain errors from being reported to New Relic, disable them in your agent's configuration file. For most agents, you can ignore certain error codes or disable errors completely. For more information, see your specific agent's configuration documentation: C SDK Go (not applicable; the agent only reports errors when configured to do so) Java .NET Node.js PHP Python Ruby Delete error traces Caution You cannot recover error traces after you delete them. Deleting errors is currently only available in the legacy Errors Classic UI. If you want to... Do this... Delete all error traces for your app If you have permissions to delete all error traces for an app: Go to one.newrelic.com > APM > (select an app) > More views > Errors (classic). Select Delete all errors. Delete all error traces for your account To delete all error traces for your New Relic account, get support at support.newrelic.com. Delete individual error traces To delete individual error traces, use APM's Errors (classic) page. Drill into an error from the table of errors, then click Delete this error. In addition to deleting error traces, you may also want to delete transaction traces or database/slow SQL traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 308.7079,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>error</em> data",
        "sections": "Manage <em>error</em> data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " configuration <em>UI</em>. For more details, see Manage errors in <em>APM</em>. Reduce noise with expected errors Sometimes you want to collect <em>error</em> data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors <em>page</em>, but won’t"
      },
      "id": "6044077e28ccbcab752c60d1"
    },
    {
      "sections": [
        "Errors page: Find, fix, and verify problems",
        "View the APM Errors page",
        "Important",
        "Use the Errors workflow to identify problems",
        "Error rate chart: See patterns immediately",
        "Top five errors: Correlate to alerts or find significant groupings",
        "Error traces: Find the line of code and data needed to reproduce the issue",
        "Expected errors",
        "Errors outside transactions",
        "Select the time period for error data"
      ],
      "title": "Errors page: Find, fix, and verify problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "fe321816a8727f65e32b4ec1f381ba9d17c432b7",
      "image": "https://docs.newrelic.com/static/1b3bf12a5d48aa0396de5e488bf17f27/c1b63/WebPortal___New_Relic_One.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/errors-page-find-fix-verify-problems/",
      "published_at": "2021-09-14T04:45:11Z",
      "updated_at": "2021-07-09T07:35:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Errors UI in New Relic One, you can see the line of code that's causing a bad experience for your users, and get enough data to reproduce the issue so you can fix it. When you do, you’ll be able to confirm your fix is working in production. Use Errors in New Relic One to: Group and filter events to triage important errors. Get alert notifications about errors. Review stack traces, logs, and other details. Share the error information with charts and dashboards. Report new errors using instrumentation, prevent certain errors from being reported, and filter out noisy errors using expected errors. View the APM Errors page Important As of October 1, 2021, the APM Errors (classic) UI will be discontinued in favor of the New Relic One APM Errors UI. For more details, see our Explorers Hub post. To view the Errors page: Go to one.newrelic.com > APM > (select an app), then click the Error rate table's title on your selected app's Summary page. OR Go to one.newrelic.com > APM > (select an app) > Events > Errors. APM Errors UI: The Error rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5 by count chart and Error traces table. Use the Instance dropdown to focus on a specific instance. Use the Errors workflow to identify problems Use this basic workflow to get the most out of the information you see from the Errors page. Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. Correlate any general patterns on the Top 5 errors chart to alerts occurring during the same time period. Use the groups and filters to examine the error events and attributes in more detail, and look for patterns with error messages, transaction names, or other groupings. Explore and share Error trace table information, including specific stack trace details, logs, and attributes (host, URL, user, custom attributes, etc.) Also review the Error profiles page to guide your investigation into which attribute values might be correlated to the cause of errors, by comparing the frequency of those values between transactions where the error did and didn't occur (only in the old UI). Error rate chart: See patterns immediately Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. For example, are there any spikes near a recent deployment? You may want to change the selected time period to look for other historical patterns. This chart always shows the overall error rate and count for the selected time period, even when you filter the rest of the page. If you want to focus your investigation on a particular type of error, use the Top 5 errors chart or the Error traces table. Top five errors: Correlate to alerts or find significant groupings Use the Top 5 errors chart to identify what error types and how many of those errors occurred during the same time period as the Error rate chart. For example: Is the error spike related to a specific exception class or transaction? Do the top errors point to a new host/container that recently got moved into production? Are the top error messages repeatedly about failed connections by hosts that you know are in a specific region of your organization? Have the chart backgrounds changed color to indicate an alert condition? (Light pink indicates the alert condition's Warning threshold, and dark pink indicates the Critical threshold.) If you want to... Do this... Change the \"top 5\" selection By default, Top 5 errors chart shows the top five errors by error class and transaction name. To group by other attributes, such as error message, host, or custom attribute, use the search bar. Explore or share error trend data The Top 5 errors chart uses error events, which include rich attribute data b default, along with any custom attributes you have added to the error event type. To examine this data in more detail, or to share it with others, select the View query or Add to dashboard links that appear when you click the chart's ... menu. Error traces: Find the line of code and data needed to reproduce the issue The Error traces table groups errors by the attributes you've selected, and links them to relevant detailed error traces. Each row helps you find answers to questions such as: How many of this transaction/class (or custom grouping) occurred within the selected time period? What is the most recent error message? When did this error first and last occur? Sometimes it may be useful to sort error trace data other than from the most to fewest occurrences. You can change the sort order or filter options to focus on just the types of errors that matter the most to you and your teams. For example: Which error has the fewest occurrences (sort on Errors column)? When did a particular error stop (sort on Last occurred)? Once you find the group of errors you want to fix, click a row in the Error traces table to drill down into the stack traces and attribute data that help pinpoint the cause. Expected errors Reduce noisy errors by marking them as “expected errors”. Such errors won't affect reported error rate or Apdex metrics. See Manage errors for more details. Expected errors aren't shown by default on the Errors page. You can show them by turning on the Show N expected errors switch below the Group by bar. Errors outside transactions Using the New Relic agent API, you can record custom errors at any point in the execution of your code. Sometimes, such custom errors will occur when a transaction is not executing, such as in high-volume aynchronous code that doesn't handle an HTTP transaction. Errors outside transactions are shown by default on the Errors page, but you can hide them by turning off the Show N errors outside transactions switch below the Group by bar. Select the time period for error data Use the time picker to examine details of error events over the past week. The error events view is available for up to a seven-day window of data collected over the last eight days. You may notice slight differences in count if your time window is set to ending now. This occurs because the counts for the list and table may be requested at slightly different times as the page auto-refreshes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 200.99678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Errors</em> <em>page</em>: Find, fix, and verify problems",
        "sections": "View the <em>APM</em> <em>Errors</em> <em>page</em>",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the <em>Error</em> rate table&#x27;s title on your selected app&#x27;s Summary <em>page</em>. OR Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Events &gt; Errors. <em>APM</em> Errors <em>UI</em>: The <em>Error</em> rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5"
      },
      "id": "60440747e7b9d2f2295799b6"
    }
  ],
  "/docs/apm/apm-ui-pages/error-analytics/errors-page-find-fix-verify-problems": [
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 309.54456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in <em>APM</em>&#x27;s transaction traces and <em>error</em> <em>analytics</em>. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic&#x27;s webhook IPs"
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "Manage error data",
        "Error data types: events and trace details",
        "Events",
        "Trace details",
        "Caps on error reporting",
        "Charting error rates and counts",
        "Report custom errors",
        "Ignore errors",
        "Reduce noise with expected errors",
        "Disable error traces",
        "Delete error traces",
        "Caution"
      ],
      "title": "Manage error data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "29a2ebdc7b91029a1fada50791b90e9dc548f17e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/manage-error-data/",
      "published_at": "2021-09-14T04:43:58Z",
      "updated_at": "2021-09-08T19:58:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM Errors page helps you identify, triage, and fix errors in your services. The Errors page uses data collected by the APM agent to display stack traces, transaction attributes such as HTTP header values, and any other custom attributes, so you can understand the context of the error and fix it. Error data types: events and trace details By default, our APM agents collect two type of error data: Events Trace details Events The error event data type includes default attributes, as well as any custom attributes instrumented in your service. It doesn't include a stack trace. Find your events data in the Errors UI as follows: The Errors column in the Error traces table. The Top 5 errors chart. When you’ve drilled into a grouping of errors, those errors not displaying a stack trace are based on this type of data. You can disable Show only errors with stack trace to show errors that have this type of data collected, but no associated trace details. Events are subject to sampling (see Caps on error reporting and Charting error rates and counts). For more on error event data, see Events reported by APM. Trace details The trace details error data type includes stack traces and attributes, and supplements events with more data. It's expected that more events will be reported than trace details--see Caps on error reporting. Find your trace details data in the Errors UI as follows: The “Stack traces” column of the Error traces table. When you’ve drilled into a grouping of errors, those errors with a stack trace use this type of data: Show only errors with stack trace is enabled by default, to constrain the errors shown to just those that have this type of data collected. This data is governed by specific retention rules for Error details. Caps on error reporting New Relic caps error reporting at: 100 events per minute per agent instance 20 trace details per minute per agent instance These caps prevent error reporting from negatively impacting application performance. Examples: App running across five EC2 instances, one JVM each. New Relic caps error reporting at: 100 events per minute x 5 instances = 500 events per minute 20 trace details per minute x 5 instances = 100 trace details per minute App running on one host with ten instances. New Relic caps error reporting at: 100 events per minute x 10 instances = 1000 events per minute 20 trace details per minute x 10 instances = 200 events per minute Charting error rates and counts The Error rate chart is driven by a query on metric timeslice data, which is an unsampled aggregate data type that is accurate but has very limited dimensionality. This data can't be faceted or filtered as flexibly as error event data. You can reproduce this chart in a dashboard, or explore the metric timeslice data further by clicking the ... menu on the Error rate chart, and then using the View query or Add to dashboard options. To chart faceted error counts using event data, as in the Top 5 errors chart, use an NRQL event query. Click the ... menu on the Top 5 errors chart and choose View query for a starting point in creating your chart. Since event data can be sampled (see Caps on error reporting), you can use the EXTRAPOLATE keyword to get an accurate error count, even if sampling is occurring. Report custom errors You can report errors not collected by default with our agents using our agent APIs. For more, see the documentation on the API. Ignore errors You can prevent certain errors that would normally be reported to New Relic from being collected using our agent APIs or the server-side configuration UI. For more details, see Manage errors in APM. Reduce noise with expected errors Sometimes you want to collect error data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors page, but won’t affect your service’s error rate or Apdex metrics. Disable error traces To prevent certain errors from being reported to New Relic, disable them in your agent's configuration file. For most agents, you can ignore certain error codes or disable errors completely. For more information, see your specific agent's configuration documentation: C SDK Go (not applicable; the agent only reports errors when configured to do so) Java .NET Node.js PHP Python Ruby Delete error traces Caution You cannot recover error traces after you delete them. Deleting errors is currently only available in the legacy Errors Classic UI. If you want to... Do this... Delete all error traces for your app If you have permissions to delete all error traces for an app: Go to one.newrelic.com > APM > (select an app) > More views > Errors (classic). Select Delete all errors. Delete all error traces for your account To delete all error traces for your New Relic account, get support at support.newrelic.com. Delete individual error traces To delete individual error traces, use APM's Errors (classic) page. Drill into an error from the table of errors, then click Delete this error. In addition to deleting error traces, you may also want to delete transaction traces or database/slow SQL traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 308.7079,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>error</em> data",
        "sections": "Manage <em>error</em> data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " configuration <em>UI</em>. For more details, see Manage errors in <em>APM</em>. Reduce noise with expected errors Sometimes you want to collect <em>error</em> data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors <em>page</em>, but won’t"
      },
      "id": "6044077e28ccbcab752c60d1"
    },
    {
      "sections": [
        "APM Error profiles: Troubleshoot trends",
        "Tip",
        "Error profile attribute examples",
        "Error profiles feature in APM",
        "Select error profile criteria",
        "Error profile criteria example",
        "Analyze error profile results",
        "Error and non-error distribution",
        "Top deviating values",
        "Other category",
        "No value category",
        "Filters"
      ],
      "title": "APM Error profiles: Troubleshoot trends",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "14c286f0cf0f8cc14674c6422fdfa6286393ca6e",
      "image": "https://docs.newrelic.com/static/fcd404afa812236cf952f7861f28cca3/8c557/apm-error-profile-tab-demo.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/apm-error-profiles-troubleshoot-trends/",
      "published_at": "2021-09-14T04:43:59Z",
      "updated_at": "2021-09-08T19:58:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When DevOps experts need to track down what causes errors in your app, it may not be easy to identify the cause. APM's error profiles automatically compare one set of events to another. Each error profile provides visual details about significant differences in the frequency of different values for the events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of non-erroring transactions This helps you take more of the guesswork out of resolving your app errors. You can more easily determine if you can safely ignore the error, or if you should attempt to resolve the error with a new deployment, code edits, customer communications, or other actions. Tip To view error profiles, you must use the classic APM view in New Relic One. To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. Error profile attribute examples Error profiles appear as a separate tab on your APM Errors page. Error profiles feature in APM Use error profiles to troubleshoot trends and significant differences in the frequency of error events for your app. An error profile is a collection of attributes with significantly different traits compared to non-errors. An attribute is \"unusual\" if a set of events represent what is normal (for example, errors compared to all traffic for a given time window), or differences between similar criteria (for example, two different hosts). Errors may be related to events such as: Specific web transaction names or non-web transaction names, JVM thread names, etc. Unique types of error messages, classes, etc. Random customer interactions; for example, a particular error comes from a single customer's account, while normal traffic comes from a wide variety of accounts External call counts or duration Timing differences among hosts in your ecosystem, cluster agent IDs, etc. Other anomalies Select error profile criteria Based on criteria in your app's Errors page, New Relic analyzes and lists unusual trends by their significance. Your selected criteria includes: Time window Errors page filters Search criteria on the Errors page or the Error profiles tab As you examine error profile results and want to dig deeper, add or change your app's error profile criteria. The Error profile tab refreshes to show the traits that distinguish the errors that match the updated criteria. Error profile criteria example Your app's Error profile tab currently shows several error classes or messages. To filter to a specific error class or message, use any of these options: From the Errors page's time picker, change the time range. For example, change the default (30 minutes) to Last 24 hours, ending now. From the Errors page's filter section: Select Back to groupings list, then select other Error groups, Error attributes, or Custom attributes. From the Errors page's filter section: Click a specific item on the list to narrow the filter. For example, if several error messages are listed, click only the message you are interested in. From the Error profiles tab's search box, type class, message, or other search values. Analyze error profile results To examine details for the attribute results in your app's error profile, you must use the classic APM view in New Relic One. Go to one.newrelic.com/apm > APM > (select an app) > Events > Errors, then toggle Show new view so that APM shows the classic view of the Errors page. From the Errors page, select the Error profile tab. From the Error profile tab, review the list of error attributes that match the currently selected error profile criteria. To view a specific attribute's details, click it. To highlight specific error details, mouse over any pie chart segment or table row for the attribute. To investigate a specific attribute for your app's errors, type its name in the Error profiles tab's search window, or change the currently selected error profile criteria. Compare values with large differences to identify the traits that distinguish the errors for an attribute. The comparative data in the error profile results and the error trace details can help you decide what steps to take for additional troubleshooting and resolving the error. Error and non-error distribution Depending on an error's attributes, sometimes the attribute is distributed differently for errors than for non-errors. Top deviating values New Relic analyzes each attribute for your app's errors and compares the distribution for errors that match your criteria to transactions without errors. If the proportions between these errors are roughly the same compared to transactions without any errors, the attribute does not contain much useful information for debugging. New Relic limits the error profile's pie chart and table for each attribute to show only the top deviating values. When proportions are roughly the same, New Relic does not include them in the error profile. Other category After the top deviating values, the error profile groups the rest into an Other category. This helps you focus on the values that are different for these errors. No value category If values are unusually present or are not present in the errors, you may see a No value category on the list of error profiles. Filters If you do not have any filters selected, the profile shows any distinguishing traits your errors exhibit in aggregate. Example: A certain kind of transaction makes up 20% of all of your traffic and is responsible for 80% of your errors. The error profile will show the unexpected proportions in the Transaction attribute. Adjust your error profile criteria to drill down even deeper into the profile results, so you can more effectively troubleshoot and resolve specific error events.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 308.7078,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "sections": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. <em>Error</em> profile attribute examples <em>Error</em> profiles appear as a separate tab on your <em>APM</em> Errors <em>page</em>. <em>Error</em> profiles feature in <em>APM</em> Use <em>error</em> profiles to troubleshoot trends and significant"
      },
      "id": "6044074764441fe72a378f08"
    }
  ],
  "/docs/apm/apm-ui-pages/error-analytics/manage-error-data": [
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 309.54434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in <em>APM</em>&#x27;s transaction traces and <em>error</em> <em>analytics</em>. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic&#x27;s webhook IPs"
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "APM Error profiles: Troubleshoot trends",
        "Tip",
        "Error profile attribute examples",
        "Error profiles feature in APM",
        "Select error profile criteria",
        "Error profile criteria example",
        "Analyze error profile results",
        "Error and non-error distribution",
        "Top deviating values",
        "Other category",
        "No value category",
        "Filters"
      ],
      "title": "APM Error profiles: Troubleshoot trends",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "14c286f0cf0f8cc14674c6422fdfa6286393ca6e",
      "image": "https://docs.newrelic.com/static/fcd404afa812236cf952f7861f28cca3/8c557/apm-error-profile-tab-demo.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/apm-error-profiles-troubleshoot-trends/",
      "published_at": "2021-09-14T04:43:59Z",
      "updated_at": "2021-09-08T19:58:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When DevOps experts need to track down what causes errors in your app, it may not be easy to identify the cause. APM's error profiles automatically compare one set of events to another. Each error profile provides visual details about significant differences in the frequency of different values for the events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of non-erroring transactions This helps you take more of the guesswork out of resolving your app errors. You can more easily determine if you can safely ignore the error, or if you should attempt to resolve the error with a new deployment, code edits, customer communications, or other actions. Tip To view error profiles, you must use the classic APM view in New Relic One. To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. Error profile attribute examples Error profiles appear as a separate tab on your APM Errors page. Error profiles feature in APM Use error profiles to troubleshoot trends and significant differences in the frequency of error events for your app. An error profile is a collection of attributes with significantly different traits compared to non-errors. An attribute is \"unusual\" if a set of events represent what is normal (for example, errors compared to all traffic for a given time window), or differences between similar criteria (for example, two different hosts). Errors may be related to events such as: Specific web transaction names or non-web transaction names, JVM thread names, etc. Unique types of error messages, classes, etc. Random customer interactions; for example, a particular error comes from a single customer's account, while normal traffic comes from a wide variety of accounts External call counts or duration Timing differences among hosts in your ecosystem, cluster agent IDs, etc. Other anomalies Select error profile criteria Based on criteria in your app's Errors page, New Relic analyzes and lists unusual trends by their significance. Your selected criteria includes: Time window Errors page filters Search criteria on the Errors page or the Error profiles tab As you examine error profile results and want to dig deeper, add or change your app's error profile criteria. The Error profile tab refreshes to show the traits that distinguish the errors that match the updated criteria. Error profile criteria example Your app's Error profile tab currently shows several error classes or messages. To filter to a specific error class or message, use any of these options: From the Errors page's time picker, change the time range. For example, change the default (30 minutes) to Last 24 hours, ending now. From the Errors page's filter section: Select Back to groupings list, then select other Error groups, Error attributes, or Custom attributes. From the Errors page's filter section: Click a specific item on the list to narrow the filter. For example, if several error messages are listed, click only the message you are interested in. From the Error profiles tab's search box, type class, message, or other search values. Analyze error profile results To examine details for the attribute results in your app's error profile, you must use the classic APM view in New Relic One. Go to one.newrelic.com/apm > APM > (select an app) > Events > Errors, then toggle Show new view so that APM shows the classic view of the Errors page. From the Errors page, select the Error profile tab. From the Error profile tab, review the list of error attributes that match the currently selected error profile criteria. To view a specific attribute's details, click it. To highlight specific error details, mouse over any pie chart segment or table row for the attribute. To investigate a specific attribute for your app's errors, type its name in the Error profiles tab's search window, or change the currently selected error profile criteria. Compare values with large differences to identify the traits that distinguish the errors for an attribute. The comparative data in the error profile results and the error trace details can help you decide what steps to take for additional troubleshooting and resolving the error. Error and non-error distribution Depending on an error's attributes, sometimes the attribute is distributed differently for errors than for non-errors. Top deviating values New Relic analyzes each attribute for your app's errors and compares the distribution for errors that match your criteria to transactions without errors. If the proportions between these errors are roughly the same compared to transactions without any errors, the attribute does not contain much useful information for debugging. New Relic limits the error profile's pie chart and table for each attribute to show only the top deviating values. When proportions are roughly the same, New Relic does not include them in the error profile. Other category After the top deviating values, the error profile groups the rest into an Other category. This helps you focus on the values that are different for these errors. No value category If values are unusually present or are not present in the errors, you may see a No value category on the list of error profiles. Filters If you do not have any filters selected, the profile shows any distinguishing traits your errors exhibit in aggregate. Example: A certain kind of transaction makes up 20% of all of your traffic and is responsible for 80% of your errors. The error profile will show the unexpected proportions in the Transaction attribute. Adjust your error profile criteria to drill down even deeper into the profile results, so you can more effectively troubleshoot and resolve specific error events.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 308.7077,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "sections": "<em>APM</em> <em>Error</em> profiles: Troubleshoot trends",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. <em>Error</em> profile attribute examples <em>Error</em> profiles appear as a separate tab on your <em>APM</em> Errors <em>page</em>. <em>Error</em> profiles feature in <em>APM</em> Use <em>error</em> profiles to troubleshoot trends and significant"
      },
      "id": "6044074764441fe72a378f08"
    },
    {
      "sections": [
        "Errors page: Find, fix, and verify problems",
        "View the APM Errors page",
        "Important",
        "Use the Errors workflow to identify problems",
        "Error rate chart: See patterns immediately",
        "Top five errors: Correlate to alerts or find significant groupings",
        "Error traces: Find the line of code and data needed to reproduce the issue",
        "Expected errors",
        "Errors outside transactions",
        "Select the time period for error data"
      ],
      "title": "Errors page: Find, fix, and verify problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "fe321816a8727f65e32b4ec1f381ba9d17c432b7",
      "image": "https://docs.newrelic.com/static/1b3bf12a5d48aa0396de5e488bf17f27/c1b63/WebPortal___New_Relic_One.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/errors-page-find-fix-verify-problems/",
      "published_at": "2021-09-14T04:45:11Z",
      "updated_at": "2021-07-09T07:35:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Errors UI in New Relic One, you can see the line of code that's causing a bad experience for your users, and get enough data to reproduce the issue so you can fix it. When you do, you’ll be able to confirm your fix is working in production. Use Errors in New Relic One to: Group and filter events to triage important errors. Get alert notifications about errors. Review stack traces, logs, and other details. Share the error information with charts and dashboards. Report new errors using instrumentation, prevent certain errors from being reported, and filter out noisy errors using expected errors. View the APM Errors page Important As of October 1, 2021, the APM Errors (classic) UI will be discontinued in favor of the New Relic One APM Errors UI. For more details, see our Explorers Hub post. To view the Errors page: Go to one.newrelic.com > APM > (select an app), then click the Error rate table's title on your selected app's Summary page. OR Go to one.newrelic.com > APM > (select an app) > Events > Errors. APM Errors UI: The Error rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5 by count chart and Error traces table. Use the Instance dropdown to focus on a specific instance. Use the Errors workflow to identify problems Use this basic workflow to get the most out of the information you see from the Errors page. Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. Correlate any general patterns on the Top 5 errors chart to alerts occurring during the same time period. Use the groups and filters to examine the error events and attributes in more detail, and look for patterns with error messages, transaction names, or other groupings. Explore and share Error trace table information, including specific stack trace details, logs, and attributes (host, URL, user, custom attributes, etc.) Also review the Error profiles page to guide your investigation into which attribute values might be correlated to the cause of errors, by comparing the frequency of those values between transactions where the error did and didn't occur (only in the old UI). Error rate chart: See patterns immediately Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. For example, are there any spikes near a recent deployment? You may want to change the selected time period to look for other historical patterns. This chart always shows the overall error rate and count for the selected time period, even when you filter the rest of the page. If you want to focus your investigation on a particular type of error, use the Top 5 errors chart or the Error traces table. Top five errors: Correlate to alerts or find significant groupings Use the Top 5 errors chart to identify what error types and how many of those errors occurred during the same time period as the Error rate chart. For example: Is the error spike related to a specific exception class or transaction? Do the top errors point to a new host/container that recently got moved into production? Are the top error messages repeatedly about failed connections by hosts that you know are in a specific region of your organization? Have the chart backgrounds changed color to indicate an alert condition? (Light pink indicates the alert condition's Warning threshold, and dark pink indicates the Critical threshold.) If you want to... Do this... Change the \"top 5\" selection By default, Top 5 errors chart shows the top five errors by error class and transaction name. To group by other attributes, such as error message, host, or custom attribute, use the search bar. Explore or share error trend data The Top 5 errors chart uses error events, which include rich attribute data b default, along with any custom attributes you have added to the error event type. To examine this data in more detail, or to share it with others, select the View query or Add to dashboard links that appear when you click the chart's ... menu. Error traces: Find the line of code and data needed to reproduce the issue The Error traces table groups errors by the attributes you've selected, and links them to relevant detailed error traces. Each row helps you find answers to questions such as: How many of this transaction/class (or custom grouping) occurred within the selected time period? What is the most recent error message? When did this error first and last occur? Sometimes it may be useful to sort error trace data other than from the most to fewest occurrences. You can change the sort order or filter options to focus on just the types of errors that matter the most to you and your teams. For example: Which error has the fewest occurrences (sort on Errors column)? When did a particular error stop (sort on Last occurred)? Once you find the group of errors you want to fix, click a row in the Error traces table to drill down into the stack traces and attribute data that help pinpoint the cause. Expected errors Reduce noisy errors by marking them as “expected errors”. Such errors won't affect reported error rate or Apdex metrics. See Manage errors for more details. Expected errors aren't shown by default on the Errors page. You can show them by turning on the Show N expected errors switch below the Group by bar. Errors outside transactions Using the New Relic agent API, you can record custom errors at any point in the execution of your code. Sometimes, such custom errors will occur when a transaction is not executing, such as in high-volume aynchronous code that doesn't handle an HTTP transaction. Errors outside transactions are shown by default on the Errors page, but you can hide them by turning off the Show N errors outside transactions switch below the Group by bar. Select the time period for error data Use the time picker to examine details of error events over the past week. The error events view is available for up to a seven-day window of data collected over the last eight days. You may notice slight differences in count if your time window is set to ending now. This occurs because the counts for the list and table may be requested at slightly different times as the page auto-refreshes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 200.99678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Errors</em> <em>page</em>: Find, fix, and verify problems",
        "sections": "View the <em>APM</em> <em>Errors</em> <em>page</em>",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " the <em>Error</em> rate table&#x27;s title on your selected app&#x27;s Summary <em>page</em>. OR Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Events &gt; Errors. <em>APM</em> Errors <em>UI</em>: The <em>Error</em> rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5"
      },
      "id": "60440747e7b9d2f2295799b6"
    }
  ],
  "/docs/apm/apm-ui-pages/errors-inbox/error-limiting": [
    {
      "sections": [
        "View system limits",
        "Responses to limit violations",
        "System limits UI",
        "Troubleshooting limits"
      ],
      "title": "View system limits",
      "type": "docs",
      "tags": [
        "Telemetry Data Platform",
        "Ingest and manage data",
        "Manage data"
      ],
      "external_id": "d6ff940e92c5d1a3ae34f391e9fa3be5dfa21c2f",
      "image": "https://docs.newrelic.com/static/8ee61e3091f6e044202cff92026afada/8c557/limits-graph.png",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/manage-data/view-system-limits/",
      "published_at": "2021-09-13T20:55:22Z",
      "updated_at": "2021-08-09T00:31:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure our systems are always up and ready to support you, and to keep you from unintended use, we place limits on the amount of data you can send, query, and store. Responses to limit violations Limits are enforced per child account, and across our APIs. You might reach a limit if you start monitoring a new high-traffic application, or have a sudden data spike. When you do reach a limit, New Relic responds according to the type of data and the limit that’s reached. For example: We place a limit on the number of ingested requests per minute (RPM) per data type. When this limit is reached, we stop accepting data and return a 429 status code for the duration of the minute. For queries, we place limits on the number of queries per minute and the number of records inspected (see query limits). When the number of queries per minute limit is reached, New Relic will begin rejecting queries until the number of queries is below the limit. When the records inspected limit is reached, New Relic will reject traffic from the source scanning the largest number of records and attempt to allow traffic from other sources. For metrics, we place a limit on the number of unique timeseries (cardinality) per account and per metric. When this limit is reached, aggregated data is turned off for the rest of the UTC day. For every major limit violation, New Relic creates an NrIntegrationError event for that account, which has these limit-related attributes: Attribute Description category RateLimit or ApiLimit. The RateLimit category is used for limits based on a unit of time such as the number of requests ingested per minute. The ApiLimit is used for constant limits, such as the number of attributes on a record. limitName The name of the limit. message Describes the limit and the impact. limitValue The limit reached. System limits UI The system Limits page (from the account dropdown, click Manage your data and click Limits on the left) displays when your account has encountered a rate limit in the specified time period. The page displays a default period of 24 hours; you can set a custom range from the top-right of the page. Non-limit-related NrIntegrationError events are not displayed here. In addition, this page does not display information about limits you have not hit, or how close you are to reaching a limit. For more on creating queries and alerts for data ingest and billing metrics, see Query billing/usage data. one.newrelic.com > account dropdown > Manage your data > Limits: An example of a chart on the Limits UI page displaying a cardinality violation limit issue. To add more detail, or build a dashboard, click the View NRQL button on the chart to see the NRQL powering this view. The graph displays each unique limit type that was reached during the selected time-period. This can help you find any trends based on time. The Limits page also provides a table where you can find the limit name, the limit event message associated with it, and last occurrence time and date. If you click a limit in the table, you see more about what happened, and when. one.newrelic.com > account dropdown > Manage your data > Limits: An example of a limit events table on the Limits UI page. Troubleshooting limits To troubleshoot limits when you reach them, click the limit info in the table, and then follow the docs link that's provided. Different limits have different solutions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.8401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "View system <em>limits</em>",
        "sections": "View system <em>limits</em>",
        "body": " monitoring a new high-traffic application, or have a sudden data spike. When you do <em>reach</em> a <em>limit</em>, New Relic responds according to the type of data and the <em>limit</em> that’s <em>reached</em>. For example: We place a <em>limit</em> on the number of ingested requests per minute (RPM) per data type. When this <em>limit</em> is <em>reached</em>"
      },
      "id": "60446a7c64441f48d7378f2b"
    },
    {
      "sections": [
        "Manage error data",
        "Error data types: events and trace details",
        "Events",
        "Trace details",
        "Caps on error reporting",
        "Charting error rates and counts",
        "Report custom errors",
        "Ignore errors",
        "Reduce noise with expected errors",
        "Disable error traces",
        "Delete error traces",
        "Caution"
      ],
      "title": "Manage error data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "29a2ebdc7b91029a1fada50791b90e9dc548f17e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/manage-error-data/",
      "published_at": "2021-09-14T04:43:58Z",
      "updated_at": "2021-09-08T19:58:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM Errors page helps you identify, triage, and fix errors in your services. The Errors page uses data collected by the APM agent to display stack traces, transaction attributes such as HTTP header values, and any other custom attributes, so you can understand the context of the error and fix it. Error data types: events and trace details By default, our APM agents collect two type of error data: Events Trace details Events The error event data type includes default attributes, as well as any custom attributes instrumented in your service. It doesn't include a stack trace. Find your events data in the Errors UI as follows: The Errors column in the Error traces table. The Top 5 errors chart. When you’ve drilled into a grouping of errors, those errors not displaying a stack trace are based on this type of data. You can disable Show only errors with stack trace to show errors that have this type of data collected, but no associated trace details. Events are subject to sampling (see Caps on error reporting and Charting error rates and counts). For more on error event data, see Events reported by APM. Trace details The trace details error data type includes stack traces and attributes, and supplements events with more data. It's expected that more events will be reported than trace details--see Caps on error reporting. Find your trace details data in the Errors UI as follows: The “Stack traces” column of the Error traces table. When you’ve drilled into a grouping of errors, those errors with a stack trace use this type of data: Show only errors with stack trace is enabled by default, to constrain the errors shown to just those that have this type of data collected. This data is governed by specific retention rules for Error details. Caps on error reporting New Relic caps error reporting at: 100 events per minute per agent instance 20 trace details per minute per agent instance These caps prevent error reporting from negatively impacting application performance. Examples: App running across five EC2 instances, one JVM each. New Relic caps error reporting at: 100 events per minute x 5 instances = 500 events per minute 20 trace details per minute x 5 instances = 100 trace details per minute App running on one host with ten instances. New Relic caps error reporting at: 100 events per minute x 10 instances = 1000 events per minute 20 trace details per minute x 10 instances = 200 events per minute Charting error rates and counts The Error rate chart is driven by a query on metric timeslice data, which is an unsampled aggregate data type that is accurate but has very limited dimensionality. This data can't be faceted or filtered as flexibly as error event data. You can reproduce this chart in a dashboard, or explore the metric timeslice data further by clicking the ... menu on the Error rate chart, and then using the View query or Add to dashboard options. To chart faceted error counts using event data, as in the Top 5 errors chart, use an NRQL event query. Click the ... menu on the Top 5 errors chart and choose View query for a starting point in creating your chart. Since event data can be sampled (see Caps on error reporting), you can use the EXTRAPOLATE keyword to get an accurate error count, even if sampling is occurring. Report custom errors You can report errors not collected by default with our agents using our agent APIs. For more, see the documentation on the API. Ignore errors You can prevent certain errors that would normally be reported to New Relic from being collected using our agent APIs or the server-side configuration UI. For more details, see Manage errors in APM. Reduce noise with expected errors Sometimes you want to collect error data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors page, but won’t affect your service’s error rate or Apdex metrics. Disable error traces To prevent certain errors from being reported to New Relic, disable them in your agent's configuration file. For most agents, you can ignore certain error codes or disable errors completely. For more information, see your specific agent's configuration documentation: C SDK Go (not applicable; the agent only reports errors when configured to do so) Java .NET Node.js PHP Python Ruby Delete error traces Caution You cannot recover error traces after you delete them. Deleting errors is currently only available in the legacy Errors Classic UI. If you want to... Do this... Delete all error traces for your app If you have permissions to delete all error traces for an app: Go to one.newrelic.com > APM > (select an app) > More views > Errors (classic). Select Delete all errors. Delete all error traces for your account To delete all error traces for your New Relic account, get support at support.newrelic.com. Delete individual error traces To delete individual error traces, use APM's Errors (classic) page. Drill into an error from the table of errors, then click Delete this error. In addition to deleting error traces, you may also want to delete transaction traces or database/slow SQL traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.21296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>error</em> data",
        "sections": "Manage <em>error</em> data",
        "tags": "<em>Error</em> analytics",
        "body": "New Relic&#x27;s APM Errors page helps you identify, triage, and fix errors in your services. The Errors page uses data collected by the APM agent to display stack traces, transaction attributes such as HTTP header values, and any other custom attributes, so you can understand the context of the <em>error</em>"
      },
      "id": "6044077e28ccbcab752c60d1"
    },
    {
      "sections": [
        "APM Error profiles: Troubleshoot trends",
        "Tip",
        "Error profile attribute examples",
        "Error profiles feature in APM",
        "Select error profile criteria",
        "Error profile criteria example",
        "Analyze error profile results",
        "Error and non-error distribution",
        "Top deviating values",
        "Other category",
        "No value category",
        "Filters"
      ],
      "title": "APM Error profiles: Troubleshoot trends",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "14c286f0cf0f8cc14674c6422fdfa6286393ca6e",
      "image": "https://docs.newrelic.com/static/fcd404afa812236cf952f7861f28cca3/8c557/apm-error-profile-tab-demo.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/apm-error-profiles-troubleshoot-trends/",
      "published_at": "2021-09-14T04:43:59Z",
      "updated_at": "2021-09-08T19:58:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When DevOps experts need to track down what causes errors in your app, it may not be easy to identify the cause. APM's error profiles automatically compare one set of events to another. Each error profile provides visual details about significant differences in the frequency of different values for the events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of non-erroring transactions This helps you take more of the guesswork out of resolving your app errors. You can more easily determine if you can safely ignore the error, or if you should attempt to resolve the error with a new deployment, code edits, customer communications, or other actions. Tip To view error profiles, you must use the classic APM view in New Relic One. To get a high-level overview of all your applications and services, use the New Relic Explorer in New Relic One. Error profile attribute examples Error profiles appear as a separate tab on your APM Errors page. Error profiles feature in APM Use error profiles to troubleshoot trends and significant differences in the frequency of error events for your app. An error profile is a collection of attributes with significantly different traits compared to non-errors. An attribute is \"unusual\" if a set of events represent what is normal (for example, errors compared to all traffic for a given time window), or differences between similar criteria (for example, two different hosts). Errors may be related to events such as: Specific web transaction names or non-web transaction names, JVM thread names, etc. Unique types of error messages, classes, etc. Random customer interactions; for example, a particular error comes from a single customer's account, while normal traffic comes from a wide variety of accounts External call counts or duration Timing differences among hosts in your ecosystem, cluster agent IDs, etc. Other anomalies Select error profile criteria Based on criteria in your app's Errors page, New Relic analyzes and lists unusual trends by their significance. Your selected criteria includes: Time window Errors page filters Search criteria on the Errors page or the Error profiles tab As you examine error profile results and want to dig deeper, add or change your app's error profile criteria. The Error profile tab refreshes to show the traits that distinguish the errors that match the updated criteria. Error profile criteria example Your app's Error profile tab currently shows several error classes or messages. To filter to a specific error class or message, use any of these options: From the Errors page's time picker, change the time range. For example, change the default (30 minutes) to Last 24 hours, ending now. From the Errors page's filter section: Select Back to groupings list, then select other Error groups, Error attributes, or Custom attributes. From the Errors page's filter section: Click a specific item on the list to narrow the filter. For example, if several error messages are listed, click only the message you are interested in. From the Error profiles tab's search box, type class, message, or other search values. Analyze error profile results To examine details for the attribute results in your app's error profile, you must use the classic APM view in New Relic One. Go to one.newrelic.com/apm > APM > (select an app) > Events > Errors, then toggle Show new view so that APM shows the classic view of the Errors page. From the Errors page, select the Error profile tab. From the Error profile tab, review the list of error attributes that match the currently selected error profile criteria. To view a specific attribute's details, click it. To highlight specific error details, mouse over any pie chart segment or table row for the attribute. To investigate a specific attribute for your app's errors, type its name in the Error profiles tab's search window, or change the currently selected error profile criteria. Compare values with large differences to identify the traits that distinguish the errors for an attribute. The comparative data in the error profile results and the error trace details can help you decide what steps to take for additional troubleshooting and resolving the error. Error and non-error distribution Depending on an error's attributes, sometimes the attribute is distributed differently for errors than for non-errors. Top deviating values New Relic analyzes each attribute for your app's errors and compares the distribution for errors that match your criteria to transactions without errors. If the proportions between these errors are roughly the same compared to transactions without any errors, the attribute does not contain much useful information for debugging. New Relic limits the error profile's pie chart and table for each attribute to show only the top deviating values. When proportions are roughly the same, New Relic does not include them in the error profile. Other category After the top deviating values, the error profile groups the rest into an Other category. This helps you focus on the values that are different for these errors. No value category If values are unusually present or are not present in the errors, you may see a No value category on the list of error profiles. Filters If you do not have any filters selected, the profile shows any distinguishing traits your errors exhibit in aggregate. Example: A certain kind of transaction makes up 20% of all of your traffic and is responsible for 80% of your errors. The error profile will show the unexpected proportions in the Transaction attribute. Adjust your error profile criteria to drill down even deeper into the profile results, so you can more effectively troubleshoot and resolve specific error events.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.21292,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>Error</em> profiles: Troubleshoot trends",
        "sections": "APM <em>Error</em> profiles: Troubleshoot trends",
        "tags": "<em>Error</em> analytics",
        "body": "When DevOps experts need to track down what causes errors in your app, it may not be easy to identify the cause. APM&#x27;s <em>error</em> profiles automatically compare one set of events to another. Each <em>error</em> profile provides visual details about significant differences in the frequency of different values"
      },
      "id": "6044074764441fe72a378f08"
    }
  ],
  "/docs/apm/apm-ui-pages/errors-inbox/errors-inbox": [
    {
      "sections": [
        "New Relic Lookout: Monitor your estate at a glance",
        "Why it matters",
        "Requirements",
        "Get started with New Relic Lookout",
        "Circle visualization and table view",
        "Abnormal golden signals",
        "Instant search",
        "Change view",
        "Drill down into the details",
        "Performance tab",
        "Abnormal History tab",
        "Correlations tab",
        "Profile tab",
        "Traces tab",
        "Create a custom view",
        "Query: Compare the last 15 minutes to the same time 1 day ago",
        "Query: Compare a specific time range to the same range a month ago",
        "Example: Unusual increases in error count"
      ],
      "title": "New Relic Lookout: Monitor your estate at a glance",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "9193dcc8851c185ff5d96f6f93ab412bd1be69e9",
      "image": "https://docs.newrelic.com/static/178b37068bad2a68cff027c8bdcf663a/c1b63/lookout-intro.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/new-relic-lookout-monitor-your-estate-glance/",
      "published_at": "2021-09-14T07:54:08Z",
      "updated_at": "2021-08-21T09:27:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Lookout provides visibility into your entire estate. It doesn't require any configuration — you can query anything in your estate that matters to you right now and understand your system as a whole, or dive deep into causes and effects, so you can quickly get the data you need to take action. Know exactly where to focus your attention with New Relic Lookout. The brighter the color, the more severe the change, and the bigger the size, the bigger the scale. Then dig deeper with correlations and abnormal history to see how it impacts your whole system—no configuration needed. Why it matters New Relic Lookout helps software teams of any size discover potential issues before they have an impact. Fill gaps in monitoring with full coverage out-of-the-box, no configuration or setup required. Immediately see anything deviating from normal across your entire estate. Proactively spot emerging problems in a real-time visualization of all system components. Gain faster incidents resolution through automatically surfaced causes and effects. Analyze any data in New Relic database (NRDB), including third-party, open, and custom data. Launch into other areas of New Relic One for deeper understanding Requirements New Relic Lookout requires Pro or Enterprise edition. If you are on Standard edition, you can still use the New Relic Lookout view in the New Relic Explorer. If you want to see data spanning 13-months, correlations, profiles, traces, and other details, you must upgrade to a higher edition. Get started with New Relic Lookout To access New Relic Lookout, click the Apps button in New Relic One and locate the New Relic Lookout launcher. You can also access New Relic Lookout directly from the New Relic One header bar, via the More dropdown. Enablement of key service performance indicator data is required for New Relic Lookout to provide value from the data you already have. The default view provides insight into three key Service performance indicators broken down by application: throughput, response time, and errors. These metrics are analyzed to show how the data has behaved during the last five minutes compared to the prior hour. one.newrelic.com > Apps > New Relic Lookout: Anything that significantly deviates from the trend is automatically discovered by New Relic Lookout, which doesn't require any configuration. Circle visualization and table view Each application (or other facet) is represented by a circle. The size of the circles indicate the magnitude of the signal for that application and the color indicates whether the value has significantly decreased or increased in the last five minutes, based on the standard deviation of the prior hour (default evaluation and comparison time windows.) Please note that the type of signal is important when interpreting your results. When you first look at the legend below, you might be tempted to interpret yellow as good and dark purple as bad, but that is not always the case. Here are some examples: In the APM/services golden signals, a dark yellow circle in Throughput might signify that something bad has occurred and led to a drop in traffic. At the same time, a dark purple circle might also be concerning due to unexpected load. Both are significant findings worth exploring. In browser golden signals, a dark purple circle in Page Views might be great, as you are seeing more traffic to your site! With errors golden signals (in all entity types), a large circle, even if gray (not deviating from normal volume), is worth exploring because a high count of errors in your system is important to investigate. The legend allows you to change the colors used to highlight deviating services To change the color palette, click the gear icon by the low-high color legend. This allows you to change the colors used to highlight deviating services. To get a table view of the same data, click the toggle on the right. You can also hover over each color to filter the view by degree lower or higher deviance. Abnormal golden signals On the right, New Relic Lookout displays the most significantly deviating applications (or other facet) in a side panel, weighted by both the magnitude of the performance indicators and the scale of their deviations. Details include the name of the key performance indicator, their magnitude during the recent time window, and the difference between the averages from one time compared to the other. Instant search Click the magnifying glass icon in the side panel to open a search box. Typing into the search box filters the circles, table, and abnormal signals to applications (or other facets) that contain the text. This is a good way to quickly zoom to various subsystems. New Relic Lookout doesn't rerun the analysis when using the instant search. Change view Click the Change View button on the right side panel. The panel that appears shows you all the entity-specific golden signals you can toggle between out of the box. By choosing the Browser Golden Signal or other views, you can change from the default view. Each new view will have the golden signals appropriate for that entity type. Drill down into the details To analyze an application or facet, click a circle, table row, or abnormal golden signal. The details panel shows the degree of deviation of the performance indicator, a link to the affected entity, and recent alert and deployment activity for that entity, when available. There’s also an indication of whether the selected evaluation time period would be abnormal or not in reference to other comparison time windows, such as the same time yesterday or the same time last week. This allows you to quickly see if the abnormal behavior is odd in general, or just based on the comparison time window. Performance tab The default tab shows charts for other key performance indicators for the selected application or facet. The charts compare the two time windows being analyzed. You can click their titles to rerun the analysis, focusing on the selected key performance indicator. When the target is a New Relic One application, we show the top transactions, error classes, external services, and database operations, alongside links to the relevant New Relic One features. Abnormal History tab This section analyzes past performance of the selected signal and calls out any time periods with notable abnormalities. Each card represents an abnormal time window and can be clicked for more details. The charts will display any relevant violations and deployments in New Relic. Correlations tab New Relic Lookout can find other signals that began behaving differently around the same time as the selected signal for that entity type. Clicking the name of the signal reruns the analysis, focusing on that key performance indicator. The chart titles link to New Relic One when there’s an associated entity in your account. Note that correlations currently do not analyze across accounts. The correlated signals displayed are for others in the account of the original application you are viewing. This helps focus the data on correlations that are more likely related to your issue. Profile tab Based on the same technology as New Relic’s error profiles, this tab compares the last five minutes to the prior hour by default (or whatever time windows you’ve selected with query editing) and surfaces any attributes that have significantly different distributions in the events being targeted by the selected signal. For example, if a custom attribute indicated that a recent throughput spike came from one user, that would surface highly in Profiles if most of the traffic usually comes from many users. Traces tab If the entity has distributed traces configured and available in the selected evaluated time window, the Traces section is enabled. Each card shows a summary of a trace and can be clicked for details. The Explore all traces links to the distributed traces application, filtered to the selected entity. Create a custom view To target signals and time windows beyond the default values, click the Change view button and select Custom view. To create your own view: Select the account or subaccount. Select the data type (metrics or events). Different functionality is available depending on the type. In View a chart with, select the metric or event you are interested in. Default is golden signals (throughput, response time, and errors). You can also build custom queries (filters) to target a signal that isn't on the list. In Facet by, select what the circles represent. Default is appName, but you can also choose host or any other facetable attribute available for the signal you’ve selected. If you plan to save/favorite this new view, provide a name in the Name your view box. Keep in mind that you can edit this view at any time using the pencil icon. The default time windows analyzed by New Relic Lookout are the last five minutes compared to the hour before. Use the time controls (View data from and Compare data to) to target other time windows. one.newrelic.com > Apps > New Relic Lookout: All event and metric data in the New Relic database can be queried using the Edit query feature. Click Analyze to begin analyzing the signal you’ve selected. You can also create your own query: Create your query. This query is comparing data from the past thirty minutes to data from the same range a day ago. Change from Basic to Advanced after clicking the Custom view button. Select the data type (metrics or events). Different functionality is available depending on the type. Enter your query using NRQL. Please note that not all NRQL features are available in the Lookout Advanced query feature. By default, the system will run this query using the last five minutes of data compared to the previous hour. Some examples of the syntax for changing the comparison and evaluation time windows are below. Click Analyze to begin analyzing the signal you’ve selected. Query: Compare the last 15 minutes to the same time 1 day ago Please note that the UNTIL NOW portion is required here unlike in standard NRQL. Without the UNTIL NOW added, the system will query a 5 minute slice of data starting 15 minutes ago SINCE 15 minutes AGO UNTIL NOW COMPARE WITH 1 day ago Copy Query: Compare a specific time range to the same range a month ago SINCE '2021-03-07 07:00:00-0500' UNTIL '2021-03-08 07:00:00-0500' COMPARE WITH 1 month ago Copy Or: SINCE 'today at midnight' UNTIL 'now' COMPARE WITH 1 MONTH AGO Copy Example: Unusual increases in error count The default view of New Relic Lookout shows application status across your estate, comparing the last five minutes to the hour before. Under regular operation, most large systems may have a handful of abnormalities, but usually most things will indicate normal behavior. Suddenly, several circles begin to change to red under the Errors section. This indicates that several applications are experiencing unusual increases in error count. It may be that one or two circles for important systems are red, and perhaps much larger than they usually appear. Clicking one of these can provide more information on what is happening. You might see that the error rate is substantially elevated, even thousands of percent higher than normal. To troubleshoot this issue, here's what you might discover in the New Relic Lookout tabs: Performance would show you data about other signals, illuminating the characteristics of the change in system dynamics. Correlations would surface other applications that are affected and how, as well as opportunities to pivot to other applications that may be closer to the underlying causes. Traces, in turn, would show distributed traces, which can provide specific examples of traffic running through those systems. Abnormal history would show other times in the past week with elevated errors, showing whether or not this problem happens regularly, such as every day at the same time or whenever there is a deployment. Profiles might show that all or most of the new errors share common properties, such as all being isolated to just one region/account/user. Combining the information from these sections, not only can you get a sense of what is going on, but also where to focus actions to resolve the problem.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.17957,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic Lookout: Monitor <em>your</em> estate at a glance",
        "sections": "New Relic Lookout: Monitor <em>your</em> estate at a glance",
        "tags": "New Relic <em>One</em>",
        "body": " signals, a dark purple circle in Page Views might be great, as you are seeing more traffic to <em>your</em> site! With <em>errors</em> golden signals (in <em>all</em> entity types), a large circle, even if gray (not deviating from normal volume), is worth exploring because a high count of <em>errors</em> in <em>your</em> system is important"
      },
      "id": "603e821e64441f5a444e8845"
    },
    {
      "sections": [
        "App remediation: Gather performance statistics",
        "1. Use semantic naming throughout New Relic",
        "2. Deploy the New Relic agent",
        "Tip",
        "3. Identify application performance outliers and errors",
        "4. Drill into specific time frames",
        "5. Drill into transaction traces to investigate outliers",
        "6. Identify performance outliers in the database",
        "7. Explore and Resolve Clusters of Errors",
        "For more help"
      ],
      "title": "App remediation: Gather performance statistics",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "7e0b2680082f204dce29e84d86cbf01351704f41",
      "image": "https://docs.newrelic.com/static/80c91a53603f582332f27c851c819738/6e88f/app_Performance_DevOps_Catalyst.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/app-remediation-gather-performance-statistics/",
      "published_at": "2021-09-14T06:04:42Z",
      "updated_at": "2021-09-14T06:04:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Application remediation involves gathering metrics and performance statistics about your application. This helps you identify bottlenecks and errors that can lead to instability in your software (and frustration for your users). New Relic provides views of your application’s performance to help you quickly identify and remediate errors. These quick wins ensure you and your colleagues can accelerate the momentum of DevOps in your organization. 1. Use semantic naming throughout New Relic Use semantic naming to give meaningful, structured names and labels to the applications you’re monitoring. Create a scalable syntax that can be understood, filtered, and sorted by any team who might use New Relic now or in the future. When you create your naming structure, be sure to consider growth and the potential for scaling/changes in your application’s architecture. Consider the following naming structure: store--us-web-prod store--us-web-stage store--us-web-dev This structure allows for additions to scale (for example, store-eu-web-prod-02), and makes the application’s environment searchable. Any convention you use should be unique to your organization’s structure, but be sure to use a convention that will allow you to optimize your environment as need. 2. Deploy the New Relic agent Review the compatibility and requirements for New Relic agents and products, and then follow the documentation to install the appropriate agent in your application. Once the agent is installed, you should see data begin to populate in New Relic within minutes. Tip If after several minutes, New Relic is not showing performance information, see No data appears. 3. Identify application performance outliers and errors The default charts in New Relic tell a story about your application’s performance. If there are performance issues, patterns in the charts highlight the causes. The following figure, from the Overview page in APM, shows a large spike occurred at noon on March 27th, and was nearly double the response time of our application’s overall trend: one.newrelic.com > APM > (select an app) > Monitoring > Overview Additionally, the response time breakdown shows a spike in Web external (which indicates downstream dependencies). Since the spike seems to correlate with periods of higher throughput, we can then use the Throughput chart to analyze the problem in more detail. 4. Drill into specific time frames Click and drag on a graph, to drill into a focused time slice of performance data to better isolate any issue you’re investigating. In this example, we’ve narrowed the view on the spike we saw in web transactions times: one.newrelic.com > APM > (select an app) > Monitoring > Overview Here, it’s obvious that some part of Web external, which is an application or service called by our Web portal app, is likely the source of the issue. 5. Drill into transaction traces to investigate outliers New Relic displays transactions ordered with the most time consuming transaction at the top. Click a transaction to navigate to the Transactions page and expand that transaction into its component parts and see any transaction traces that have been captured as a result of any performance issues. New Relic automatically captures these traces whenever a transaction violates your Apdex score by more than four times for a specific number of seconds. Tip If you’re not capturing any transaction traces, you may not be violating these thresholds. Be sure to configure transaction traces for your applications as needed. In the following example, we see that interceptor.ServletConfigInter... has significant transaction times: one.newrelic.com > APM > (select an app) > Monitoring > Overview In fact, it’s responsible for 99.9% of the app server time, which means we’re getting closer to identifying the culprit of our spike. Here, we see the same spike from before, but the performance of the transaction is broken down into its components: one.newrelic.com > APM > (select an app) > Monitoring > Overview While the share of the response times for most components of this transaction remained stable, GetPlansController (in brown) spiked massively. From the Transaction traces table, we can drill further into the transaction trace to get method-level detail of where the issue is occurring. 6. Identify performance outliers in the database We identified that GetPlansController is consuming the vast majority of our response time. Here we see it in the transaction trace summary: one.newrelic.com > APM > (select an app) > Monitoring > Overview Trace details shows an execution timeline of this transaction, and we see that Plan Service is the external transaction causing the issues—the red color-coding indicates the problem. one.newrelic.com > APM > (select an app) > Monitoring > Overview From this point, we can navigate to the Transactions summary page for Plan Service: one.newrelic.com > APM > (select an app) > Monitoring > Transactions The breakdown of the GetPlans transaction shows that database calls, particularly MySQL PlansTable select, appear to be a significant portion of the overall response time. The Breakdown table further identifies the problem: the number of database calls per transaction is very high. Note again that it’s highlighted in red. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Once again, we can look at a transaction trace to find what might be causing these queries. one.newrelic.com > APM > (select an app) > Monitoring > Transactions Finally we find that an extremely large number of select methods account for the majority of transaction time. We can now take steps to address this potential N+1 query problem. After we remediate this issue, improved response times will lead to fewer frustrated requests and more satisfied customers—which will be reflected in this application's Apdex score. 7. Explore and Resolve Clusters of Errors When you need to track down what causes errors in your app, it may not be easy to identify the cause. Using applied intelligence developed by New Relic, APM Error Profiles automatically compare one set of events to another. An error profile is a collection of attributes with significantly different traits compared to non-errors. New Relic displays pie charts that sorts error attributes by the greatest deviation from the “norm.\" For backend errors, go to APM, select Error Analytics in the left nav, and then click on the Error Profile tab. In this example, the culprit is obviously a web transaction validating coupons, and now you can view the error stack trace, message, and the line of code from which the error was thrown. one.newrelic.com > APM > (select an app) > Error Analytics > Error Profile As a quality customer experience increasingly relies on complex client-side logic, it’s important to quickly analyze and understand JavaScript errors. From one.newrelic.com, click Browser in the top header, and then click JS errors in left navigation menu. Expand the details about JavaScript errors by clicking on a attribute. In this case, we've expanded the transaction names that are related to the errors: one.newrelic.com > Browser > (select an app) > JS errors Roughly half of the errors come from phone.jsp, so that is the place to start investigating. Then determine if you can safely ignore the error, or if you should resolve the error with code edits and a new deployment, or provide communication about the issue to your customers. Now that you have dealt with performance outliers and clusters of errors, you are well on your way to optimizing your application so you can baseline it for trend analysis. For more help Error Rate: Watch for spikes or values changing under load Throughput: Watch for high spikes or low dips",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.59232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "3. Identify application performance outliers and <em>errors</em>",
        "body": " the cause. Using applied intelligence developed by New Relic, APM <em>Error</em> Profiles automatically compare <em>one</em> set of events to another. An <em>error</em> profile is a collection of attributes with significantly different traits compared to non-<em>errors</em>. New Relic displays pie charts that sorts <em>error</em> attributes"
      },
      "id": "60440e5328ccbccc972c60c0"
    },
    {
      "sections": [
        "Identify issues and roadblocks",
        "1. Identify components",
        "2. Identify KPIs",
        "3. Deploy monitoring tools",
        "Deploy APM",
        "Deploy browser monitoring",
        "Deploy New Relic Infrastructure",
        "Tip",
        "Set up alerts",
        "4. Set up cloud integrations",
        "5. Identify issues and roadblocks",
        "Expert tip for alerting on JavaScript errors"
      ],
      "title": "Identify issues and roadblocks",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Cloud adoption"
      ],
      "external_id": "12c79f8e91e131ddf9015d1617760261d71660d1",
      "image": "https://docs.newrelic.com/static/cc629d8a7fe9dd09ac59711b669baedc/c1b63/screen-javascript-errors.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/plan-your-cloud-adoption/identify-issues-roadblocks/",
      "published_at": "2021-09-14T06:10:23Z",
      "updated_at": "2021-09-14T06:10:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "As you migrate your applications to the cloud, you want to catch and correct any unexpected behavior or outcomes as soon as possible. Detecting errors and issues related to your new cloud architecture, performance, and scale is critical—getting the right information at the right time can be the difference between success and failure. 1. Identify components Create a list all of applications, services, and their underlying server infrastructures in your application portfolio that you want to migrate to the cloud. 2. Identify KPIs To provide quantifiable measures that your teams can use to assess your migration, identify a list of corporate KPIs (key performance indicators). Using the New Relic platform to measure KPIs helps you eliminate blindspots and see the connections between entities—from your application code, to your cloud infrastructure (including containers running in highly distributed microservices), to your customer experience. Your goal is to create a collection of metrics in several categories that you can visualize in our Dashboards. To validate cloud improvements, group KPIs in the following categories, from least to most strong: Application and infrastructure performance End-user experience, including website and mobile application performance Audience and content trends DevOps productivity Application revenue analytics Future business goals 3. Deploy monitoring tools To start monitoring your KPIs, verify that the applications that you want to migrate are compatible with the requirements for the New Relic products you will use. Then, install the New Relic agents: Deploy APM Review the compatibility and requirements and then install APM agents on your application stack. After installing the APM agents, review the architecture of the applications that you instrumented with an APM agent. Take note of all hosts that are part of each tier of the application stack (database, application, web server, etc.), so you can install infrastructure monitoring agents on each of those hosts. Deploy browser monitoring In a nutshell, browser monitoring is a snippet of JavaScript that needs to appear in all of your application's webpages. It has no dependencies on other libraries, so it does not cause additional delays when bringing jQuery or other frameworks into the webpage. There are three ways to install the browser agent: Method When to use this method Enable via APM Typically, the quickest path is to let the APM agent dynamically inject the snippet into your pages on the server side. This works for many common web technologies, such as .NET, JSP, and other Java solutions. The documentation provides a complete reference for the languages and frameworks that allow this option. Copy/paste method If you are using an unsupported framework or are in an environment where you can instrument only the webpages but cannot install APM on the backend, use the copy-paste method. The UI generates a simple JavaScript snippet. Copy that snippet, and paste it into a global page template on your end to get browser monitoring deployed across your site. Enable via the API You can perform a manual instrumentation, in which your developers add instrumentation to your webpages using a server-side API. New Relic supports this for many server-side languages. Refer to the documentation for an example of how to do this in Java. Deploy New Relic Infrastructure After reviewing the requirements for New Relic Infrastructure, install the Infrastructure agent on the hosts that you identified so you can start to gather data for your KPIs. Tip If you use Ansible, Chef, or Puppet for automation, you can use those tools to deploy Infrastructure agents to your hosts. Set up alerts New Relic Alerts is a single integrated solution with a centralized UI to help you focus on the metrics that you care about most. When you set up New Relic Alerts and NRQL alerting, you establish flexible policies and conditions to receive alerts and notifications on multiple channels (email, Slack, OpsGenie, etc.). For more detailed information about creating, managing, and using alerts, check out the New Relic University tutorials. 4. Set up cloud integrations Tip Cloud-based integrations available through New Relic include Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform. Once your applications are migrated to the cloud and you start to integrate new cloud services, you can use New Relic to monitor and report data about your cloud services, offering you a comprehensive view of your entire architecture in one place. For example, to capture and record AWS account activity for audit and governance purposes, use the New Relic AWS CloudTrail integration. Tracking error events gives you awareness about API calls and services that have failed, while console logins help you monitor console activity and potential intrusion attempts. New Relic collects this event data so you can display it in a Dashboard or alert on it with NRQL. To gain extended visibility into applications that your code depends on, you can also deploy on-host integrations for commonly used application components, such as MySQL, Apache, and NGINX. In addition, you can create your own custom on-host integration with the New Relic Integrations SDK. 5. Identify issues and roadblocks Once your applications are running in the cloud, they may generate new types of errors that are different from the errors that they generated when running on-premise. You can use New Relic APM and browser monitoring to view error events, error metrics, and detailed error traces for your applications. If an error or unhandled exception happens, the data appears on the JavaScript errors page and the APM Error analytics page. From these pages, you can quickly troubleshoot runtime errors. Then, further analyze errors by grouping them according to attributes, by filtering them, or by searching for keywords in the event data. Each unhandled exception generates a transaction error event in Insights, and the dashboards are updated in real-time. Event data is a record of a single event at a particular moment in time and consists of default attributes, like a timestamp, and an event type. You can also add custom attributes to provide more context. Tip Once you start capturing JavaScript errors as events in Insights, set up NRQL alerting so you can stay on top of your error data. Use the JavaScript errors page to get visibility into real-time user experience: one.newrelic.com > Browser > (select an app) > JS errors: Use the charts on this page to get visibility into the real-time user experience. Then, create a Dashboard that covers a longer period of time and aligns the error and unhandled exception data with your KPIs: one.newrelic.com > Dashboards > Create a dashboard: Use dashboards to align the error and unhandled exception data with your KPIs. Expert tip for alerting on JavaScript errors To get notifications for error spikes that are different from known or common JavaScript errors, use the following NRQL query for browser-monitored: SELECT count(*) FROM JavaScriptError WHERE appName = '<BrowserAppName>' AND errorClass NOT IN ('<ErrorClass1>','<ErrorClass2>') Copy Replace <BrowserAppName> with the browser app name that you want to monitor with this alert. Replace <ErrorClass1> and <ErrorClass2> with the on-premise error class names that you do not want New Relic to alert you about. Set the threshold based on your alerting needs. Using this query, New Relic alerts you every time a JavaScript error occurs when it has an error class that is not normally reported.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.04163,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Expert tip <em>for</em> alerting on JavaScript <em>errors</em>",
        "body": " as events in Insights, set up NRQL alerting so you can stay on top of <em>your</em> <em>error</em> data. Use the JavaScript <em>errors</em> page to get visibility into real-time user experience: <em>one</em>.newrelic.com &gt; Browser &gt; (select an app) &gt; JS <em>errors</em>: Use the charts on this page to get visibility into the real-time user"
      },
      "id": "60445b87196a67bb33960f21"
    }
  ],
  "/docs/apm/apm-ui-pages/events/deployments-page-view-impact-your-app-users": [
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 268.64465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Events</em> &gt; Alerts. one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Alerts: Use this <em>page</em> to view or filter information about alerts over the past two weeks"
      },
      "id": "603ebe4c196a676588a83dd6"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 239.4395,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.7075,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/apm-ui-pages/events/thread-profiler-tool": [
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 268.64465,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com &gt; Explorer &gt; (select an app) &gt; <em>Events</em> &gt; Alerts. one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Alerts: Use this <em>page</em> to view or filter information about alerts over the past two weeks"
      },
      "id": "603ebe4c196a676588a83dd6"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 239.4395,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.7075,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/apm-ui-pages/features/analyze-database-instance-level-performance-issues": [
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 304.9545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.34694,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Alerts <em>page</em> shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your"
      },
      "id": "603ebe4c196a676588a83dd6"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.33884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/apm-ui-pages/features/request-queuing-tracking-front-end-time": [
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 304.9545,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.34694,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Alerts <em>page</em> shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your"
      },
      "id": "603ebe4c196a676588a83dd6"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.33884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/agent-specific-ui-pages": [
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.69733,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.22054,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.34688,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Alerts <em>page</em> shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your"
      },
      "id": "603ebe4c196a676588a83dd6"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data": [
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.22054,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.34688,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Alerts <em>page</em> shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your"
      },
      "id": "603ebe4c196a676588a83dd6"
    },
    {
      "sections": [
        "Manage error data",
        "Error data types: events and trace details",
        "Events",
        "Trace details",
        "Caps on error reporting",
        "Charting error rates and counts",
        "Report custom errors",
        "Ignore errors",
        "Reduce noise with expected errors",
        "Disable error traces",
        "Delete error traces",
        "Caution"
      ],
      "title": "Manage error data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "29a2ebdc7b91029a1fada50791b90e9dc548f17e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/manage-error-data/",
      "published_at": "2021-09-14T04:43:58Z",
      "updated_at": "2021-09-08T19:58:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM Errors page helps you identify, triage, and fix errors in your services. The Errors page uses data collected by the APM agent to display stack traces, transaction attributes such as HTTP header values, and any other custom attributes, so you can understand the context of the error and fix it. Error data types: events and trace details By default, our APM agents collect two type of error data: Events Trace details Events The error event data type includes default attributes, as well as any custom attributes instrumented in your service. It doesn't include a stack trace. Find your events data in the Errors UI as follows: The Errors column in the Error traces table. The Top 5 errors chart. When you’ve drilled into a grouping of errors, those errors not displaying a stack trace are based on this type of data. You can disable Show only errors with stack trace to show errors that have this type of data collected, but no associated trace details. Events are subject to sampling (see Caps on error reporting and Charting error rates and counts). For more on error event data, see Events reported by APM. Trace details The trace details error data type includes stack traces and attributes, and supplements events with more data. It's expected that more events will be reported than trace details--see Caps on error reporting. Find your trace details data in the Errors UI as follows: The “Stack traces” column of the Error traces table. When you’ve drilled into a grouping of errors, those errors with a stack trace use this type of data: Show only errors with stack trace is enabled by default, to constrain the errors shown to just those that have this type of data collected. This data is governed by specific retention rules for Error details. Caps on error reporting New Relic caps error reporting at: 100 events per minute per agent instance 20 trace details per minute per agent instance These caps prevent error reporting from negatively impacting application performance. Examples: App running across five EC2 instances, one JVM each. New Relic caps error reporting at: 100 events per minute x 5 instances = 500 events per minute 20 trace details per minute x 5 instances = 100 trace details per minute App running on one host with ten instances. New Relic caps error reporting at: 100 events per minute x 10 instances = 1000 events per minute 20 trace details per minute x 10 instances = 200 events per minute Charting error rates and counts The Error rate chart is driven by a query on metric timeslice data, which is an unsampled aggregate data type that is accurate but has very limited dimensionality. This data can't be faceted or filtered as flexibly as error event data. You can reproduce this chart in a dashboard, or explore the metric timeslice data further by clicking the ... menu on the Error rate chart, and then using the View query or Add to dashboard options. To chart faceted error counts using event data, as in the Top 5 errors chart, use an NRQL event query. Click the ... menu on the Top 5 errors chart and choose View query for a starting point in creating your chart. Since event data can be sampled (see Caps on error reporting), you can use the EXTRAPOLATE keyword to get an accurate error count, even if sampling is occurring. Report custom errors You can report errors not collected by default with our agents using our agent APIs. For more, see the documentation on the API. Ignore errors You can prevent certain errors that would normally be reported to New Relic from being collected using our agent APIs or the server-side configuration UI. For more details, see Manage errors in APM. Reduce noise with expected errors Sometimes you want to collect error data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors page, but won’t affect your service’s error rate or Apdex metrics. Disable error traces To prevent certain errors from being reported to New Relic, disable them in your agent's configuration file. For most agents, you can ignore certain error codes or disable errors completely. For more information, see your specific agent's configuration documentation: C SDK Go (not applicable; the agent only reports errors when configured to do so) Java .NET Node.js PHP Python Ruby Delete error traces Caution You cannot recover error traces after you delete them. Deleting errors is currently only available in the legacy Errors Classic UI. If you want to... Do this... Delete all error traces for your app If you have permissions to delete all error traces for an app: Go to one.newrelic.com > APM > (select an app) > More views > Errors (classic). Select Delete all errors. Delete all error traces for your account To delete all error traces for your New Relic account, get support at support.newrelic.com. Delete individual error traces To delete individual error traces, use APM's Errors (classic) page. Drill into an error from the table of errors, then click Delete this error. In addition to deleting error traces, you may also want to delete transaction traces or database/slow SQL traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.9726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " configuration <em>UI</em>. For more details, see Manage errors in <em>APM</em>. Reduce noise with expected errors Sometimes you want to collect error data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors <em>page</em>, but won’t"
      },
      "id": "6044077e28ccbcab752c60d1"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/databases-page-view-operations-throughput-response-time": [
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.69725,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.22037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.34682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Alerts <em>page</em> shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your"
      },
      "id": "603ebe4c196a676588a83dd6"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/external-services-page-view-web-cloud-network-data": [
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.69725,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.22037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.34682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Alerts <em>page</em> shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your"
      },
      "id": "603ebe4c196a676588a83dd6"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/response-time-chart-types-apm-browser": [
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.69717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.22021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.34676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Alerts <em>page</em> shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your"
      },
      "id": "603ebe4c196a676588a83dd6"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/transactions-page-find-specific-performance-problems": [
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.69717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.22021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.34676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Alerts <em>page</em> shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your"
      },
      "id": "603ebe4c196a676588a83dd6"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/view-slow-query-details": [
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.69708,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.22003,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.3467,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Alerts <em>page</em> shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your"
      },
      "id": "603ebe4c196a676588a83dd6"
    }
  ],
  "/docs/apm/apm-ui-pages/monitoring/view-your-applications-index": [
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.69708,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    },
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 227.22003,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "View alert history",
        "Tip",
        "Alerts for specific apps",
        "Alerts across apps and hosts"
      ],
      "title": "View alert history",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "7e8a0d04e47d51735e156f50bb823b31691d9929",
      "image": "https://docs.newrelic.com/static/2ad296d1897574998b28865d9c9b6d7b/8c557/alerts_dashboard_0.png",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/events/view-alert-history/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-09-08T20:02:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's Alerts page shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your subscription level. Alerts for specific apps To view a list of alerts for a specific app: Go to one.newrelic.com > Explorer > (select an app) > Events > Alerts. one.newrelic.com > APM > (select an app) > Events > Alerts: Use this page to view or filter information about alerts over the past two weeks. The Alerts page shows a list of alerts over the past two weeks, if any. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Each alert notification includes the alert icon and summary information. To view details about an alert notification on the Alerts page, select its link. For example: To view details about a specific alert, select its name. To narrow the list of alerts, use the Filter. To view all alerts for all of your apps and hosts, select the All alerts link. To select a specific Java Virtual Machine (JVM) if applicable, select your choice from the JVMs menu. Alerts across apps and hosts To view history about Critical alerts and outages across all of your applications and hosts: Go to rpm.newrelic.com/apm > Alerts > Alert history. Optional: Select Show alerts for hidden applications. The list separates alerts into categories, including: In progress Today Yesterday This week Prior to last week From here you can filter and select select specific incidents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.3467,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em>&#x27;s Alerts <em>page</em> shows a table of alerts over the past two weeks that you can drill down into detailed information, including throughput, error rate percentage, and history. You can view alert history for a specific application or for all applications. Tip Access to this feature depends on your"
      },
      "id": "603ebe4c196a676588a83dd6"
    }
  ],
  "/docs/apm/applications-menu/events/view-alert-history": [
    {
      "sections": [
        "Ticketing integrations",
        "Requirements",
        "Integrate with New Relic",
        "File tickets"
      ],
      "title": "Ticketing integrations",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c6004eab5c13506e5bdf175be670ff86b0a24f52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/share-your-data/ticketing-integrations/",
      "published_at": "2021-09-14T11:13:33Z",
      "updated_at": "2021-09-14T11:13:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can integrate New Relic with Lighthouse. This is useful to create tickets about performance issues in APM's transaction traces and error analytics. Requirements New Relic sends information to the ticketing system with webhooks. Make sure your system accepts traffic from New Relic's webhook IPs. In addition, Lighthouse setup requires: The subdomain for your installation; for example, https://subdomain.lighthouseapp.com Your Lighthouse account's email and password for ticket tracking Integrate with New Relic To connect your New Relic account to Lighthouse: How you find the integrations UI depends on your user model: Original user model: from one.newrelic.com, click the account dropdown, and select Ticketing integrations. New Relic One user model: from one.newrelic.com, click the account dropdown, click Administration, and click Integrations. Select the tab for Lighthouse. After your ticketing system has been integrated, the corresponding tab's health status indicator in New Relic's UI changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected APM transaction trace or APM error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 239.43845,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " ticketing system has been integrated, the corresponding tab&#x27;s health status indicator in New Relic&#x27;s <em>UI</em> changes to green (enabled). File tickets To use the ticketing system integrated with your New Relic account: From the selected <em>APM</em> transaction trace or <em>APM</em> error trace, select File a ticket. Follow standard procedures to create a ticket from your Lighthouse account."
      },
      "id": "603ebd11e7b9d292fc2a07ef"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-09-14T04:46:15Z",
      "updated_at": "2021-09-08T20:00:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.70712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "sections": "<em>APM</em> Summary <em>page</em>: View transaction, Apdex, usage data",
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app). For more information, see the documentation about navigating core <em>UI</em> components in New Relic One. View app performance Use the Summary <em>page</em> for a quick summary of your website"
      },
      "id": "603ebe1928ccbc1acceba776"
    },
    {
      "sections": [
        "Thread profiler tool",
        "Supported agents",
        "Start the profiler",
        "View profile data",
        "Agent considerations",
        ".NET-specific notes",
        "Python-specific notes",
        "Ruby-specific notes"
      ],
      "title": "Thread profiler tool",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Events"
      ],
      "external_id": "e2d300aa5dd9bdbf73684a04080773db0d1acd2b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/events/thread-profiler-tool/",
      "published_at": "2021-09-13T20:09:42Z",
      "updated_at": "2021-07-15T21:45:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The thread profiler is a low-impact profiling tool that can be used in production to identify bottlenecks in an application. It works by periodically (100ms) capturing the stack trace of each thread for a specified duration. At the end of the specified duration, the stack traces are aggregated to build a tree. The call count in the tree corresponds to the number of times that function was present in the stack traces under the same context. Although the call tree cannot capture the entire execution, a large enough sample can be a good representation of the application behavior. This provides insights into the \"hot\" functions of the app where most of the time is spent. With this scope, entries sampled less than 0.05% are omitted. Supported agents This feature is available only for specific agents and versions: Java: Agent versions 1.2.004.6 or higher .NET: Framework: Agent versions 2.12.146.0 or higher .NET Core 2.0: Agent versions 8.3.360.0 or higher (Windows only) Linux: .NET Core 3.0 or higher and agent versions 8.23 or higher Python: Agent versions 1.7.0 or higher Ruby: Agent versions 3.5.5 or higher Start the profiler The thread profiler feature is enabled by default. You also may be able to turn it on or off in your agent configuration file: Java: thread_profiler.enabled NET: You cannot disable the thread profiler with .NET apps. Python: thread_profiler.enabled Ruby: thread_profiler.enabled When enabled, you can view the thread profiler from our user interface: Go to one.newrelic.com > APM > (select an app) > Events > Thread profiler. Select the host you want to run the profiler on. Set the duration for the profiling session. Select Start profiler. This triggers the agent to start the thread profiler during the next harvest cycle (every one minute) and capture data for the specified duration. We record thread backtraces whether or not they are in a runnable state at the time the sample is taken. Threads that are sleeping or blocked on IO may appear in the call tree. ![This is an image of the thread profiler.] (./images/thread-profiler-session.png \"Thread profiler overview) one.newrelic.com > APM > (select an app) > Events > Thread profiler: Use this page to define the settings for the thread profiler duration and to view the results. View profile data After the profiler finishes running, the agent will report the profile data. The call tree automatically appears on the Thread profiler page. The percentages in the call tree represent the percentage of thread backtrace samples in which each call path appeared during the profiling session. The data collection started at the PROFILE COLLECTED time. The page color-codes the tree results: Red: Percentages greater than 30% Yellow: Percentages greater than 10% Black: Percentages less than 10% If you want to... Do this... Change how the thread profile information appears Select your choices of available options in the Tree settings, and select Refresh tree. Change how much information appears Select the Expand or Collapse options above the call tree, or select the name or arrow on any line in the call tree. View summary information about any line in the call tree Mouse over the line. Email the thread profile results to others Select Share this profile. Start another session or view a different thread profile Select Back to all profiles. Agent considerations Depending on which agent you use, the thread profiling feature has additional considerations. .NET-specific notes When using thread profiling with the .NET Framework agent, be aware of the following. .NET agent Thread profiler notes Supported on Linux Thread profiling on Linux is supported on .NET Core 3.0 or later applications when running .NET agent version 8.23 or later. Managed threads only For .NET agents, the thread profiler only captures stack traces on managed threads. It does not capture stack traces on unmanaged threads. If a call to an unmanaged function occurs on a managed thread, the thread profiler will show Native:Function Call in the call tree. No line numbers A .NET thread profile does not include line numbers in the call tree. The Show line numbers checkbox in the Tree Settings does not have any effect. Bug with 64-bit v4.0 .NET CLR There is a bug in the 64-bit version 4.0 .NET Common Language Runtime (CLR) that interferes with the agent's ability to retrieve managed stack traces. If your app experiences this bug, APM will show empty thread profiles. This bug does not affect 32-bit applications. The bug is fixed in the CLR releases for .NET 4.5. To verify whether your 64-bit application has the fixed version, look at the full version of the mscorlib.dll in the C: \\ Windows \\ Microsoft.NET \\ Framework64 \\ v4.0.30319 directory. The fix is in versions 4.0.30319.17379 or higher. Other category only All threads are put in the Other category. The Web Request and Background categories are not supported. Python-specific notes When using thread profiling with the Python agent, be aware of the following. Python agent Thread profiler notes Co-routine based systems There are limits to capturing details when a co-routine based system is being used, such as gevent or eventlet modes of gunicorn. If creating a new thread, the Python agent will actually create a greenlet instead of a thread profiler background thread. Therefore, the thread profiler will not capture any web request and background transactions on the thread profiler page. Greenlets A greenlet can run only when other greenlets explicitly yield control, such as when they block. For example, if the thread sampler does get to run, it will only sample the stack for other greenlets at a point where they are blocked. It will not sample them when they are executing arbitrary code. It can completely miss execution within a greenlet if it never blocked or otherwise yielded to another greenlet. Time in Python code Time spent in pure Python code that isn't blocking requests will not be picked up, and no information will be recorded or reported. This is because results are misleading when co-routines are used. Ruby-specific notes When using thread profiling with the Ruby agent, be aware of the following. Ruby agent Thread profiler notes Backtraces The thread profiler depends on the ability to capture thread backtraces from within your Ruby application. For this reason, it requires MRI 1.9.2 or higher (for the Thread#backtrace method). Resque The Ruby agent does not currently support thread profiles with Resque background jobs. A thread profiling session initiated against Resque will only capture traces from the parent process, not the job processes. JRuby JRuby support is considered experimental at this time. There are known issues with JRuby's Thread#backtrace implementation that will affect the accuracy of and reliability of backtraces collected under JRuby.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 176.9934,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " profiler overview) one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Events</em> &gt; Thread profiler: Use this <em>page</em> to define the settings for the thread profiler duration and to view the results. View profile data After the profiler finishes running, the agent will report the profile data. The call tree"
      },
      "id": "603ebd4928ccbccc3ceba78e"
    }
  ]
}