{
  "/docs/apm/agents/net-agent/troubleshooting/net-agent-reports-handled-errors": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-05T09:03:16Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.19254,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-05T06:47:16Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.09122,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Guide to using the .NET agent API",
        "Requirements",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "View calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser monitoring agent"
      ],
      "title": "Guide to using the .NET agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "API guides"
      ],
      "external_id": "03f79d963725d4c950219143dedb6efa443be9f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api/",
      "published_at": "2021-12-05T06:04:13Z",
      "updated_at": "2021-11-26T07:39:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent includes an API that allows you to extend the agent's standard functionality. For example, you can use the .NET agent API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET agent's default behavior by adjusting configuration settings or using custom instrumentation. Requirements Important As of September 2021, a small subset of APIs, configuration options, and installation options for .NET will be replaced by new methods. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. To use the .NET agent API: Make sure you have the latest .NET agent release. Add a reference to the agent in your project: Add a reference to NewRelic.Api.Agent.dll to your project. OR View and download the API package from the NuGet Package Library. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Prevent a transaction from reporting to New Relic Use IgnoreTransaction() or an XML file to ignore the transaction. Create a transaction where none exists Use attributes or an XML file to create a new transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. When you want to instrument a method within an existing transaction, see Custom instrumentation via attributes or Add detail to transactions via XML. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them in dashboards. Use these methods when you want to change how New Relic instruments a transaction that's already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction Use SetTransactionName() or an XML file. Prevent a transaction from affecting your Apdex score Use IgnoreApdex(). Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See AddCustomAttribute(). See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: TraceMetadata GetLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks, the .NET agent usually detects async work and instruments it correctly. However, if your app uses another framework, or the default async instrumentation is inaccurate, you can explicitly connect async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. Trace an async method that New Relic is not instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. View calls to external services For .NET agent version 8.9 or higher, you can use the following distributed tracing payload APIs to manually pass distributed tracing context between New Relic-monitored services that don't automatically connect to one another in a distributed trace. If you want to... Do this... Instrument an outgoing request to an external application or database Create a distributed trace payload to attach to an outgoing request using CreateDistributedTracePayload(). Connect incoming requests with the originator of the request to complete a span of the trace Receive a payload on an incoming request using AcceptDistributedTracePayload(). For .NET agent versions lower than 8.9, use cross application tracing. Collect or ignore errors Usually the .NET agent detects errors automatically. However, you can manually mark an error with the agent. You can also ignore errors . If you want to... Do this... Report an error the .NET agent does not report automatically Use NoticeError(). Capture errors or prevent the .NET agent from reporting an error at all Use your .NET agent configuration file. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See RecordCustomEvent(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. See .NET agent attributes and Enable and disable attributes. Report custom performance data Use RecordMetric() to create a custom metric. To view the data, use the query builder. Control the browser monitoring agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.61128,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "sections": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> includes an API that allows you to extend the <em>agent</em>&#x27;s standard functionality. For example, you can use the .<em>NET</em> <em>agent</em> API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .<em>NET</em> <em>agent</em>"
      },
      "id": "61a08f1564441fd10c9840d0"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/new-relic-net-status-monitor": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-05T09:03:16Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.19244,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-05T06:47:16Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.091125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Guide to using the .NET agent API",
        "Requirements",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "View calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser monitoring agent"
      ],
      "title": "Guide to using the .NET agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "API guides"
      ],
      "external_id": "03f79d963725d4c950219143dedb6efa443be9f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api/",
      "published_at": "2021-12-05T06:04:13Z",
      "updated_at": "2021-11-26T07:39:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent includes an API that allows you to extend the agent's standard functionality. For example, you can use the .NET agent API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET agent's default behavior by adjusting configuration settings or using custom instrumentation. Requirements Important As of September 2021, a small subset of APIs, configuration options, and installation options for .NET will be replaced by new methods. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. To use the .NET agent API: Make sure you have the latest .NET agent release. Add a reference to the agent in your project: Add a reference to NewRelic.Api.Agent.dll to your project. OR View and download the API package from the NuGet Package Library. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Prevent a transaction from reporting to New Relic Use IgnoreTransaction() or an XML file to ignore the transaction. Create a transaction where none exists Use attributes or an XML file to create a new transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. When you want to instrument a method within an existing transaction, see Custom instrumentation via attributes or Add detail to transactions via XML. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them in dashboards. Use these methods when you want to change how New Relic instruments a transaction that's already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction Use SetTransactionName() or an XML file. Prevent a transaction from affecting your Apdex score Use IgnoreApdex(). Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See AddCustomAttribute(). See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: TraceMetadata GetLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks, the .NET agent usually detects async work and instruments it correctly. However, if your app uses another framework, or the default async instrumentation is inaccurate, you can explicitly connect async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. Trace an async method that New Relic is not instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. View calls to external services For .NET agent version 8.9 or higher, you can use the following distributed tracing payload APIs to manually pass distributed tracing context between New Relic-monitored services that don't automatically connect to one another in a distributed trace. If you want to... Do this... Instrument an outgoing request to an external application or database Create a distributed trace payload to attach to an outgoing request using CreateDistributedTracePayload(). Connect incoming requests with the originator of the request to complete a span of the trace Receive a payload on an incoming request using AcceptDistributedTracePayload(). For .NET agent versions lower than 8.9, use cross application tracing. Collect or ignore errors Usually the .NET agent detects errors automatically. However, you can manually mark an error with the agent. You can also ignore errors . If you want to... Do this... Report an error the .NET agent does not report automatically Use NoticeError(). Capture errors or prevent the .NET agent from reporting an error at all Use your .NET agent configuration file. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See RecordCustomEvent(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. See .NET agent attributes and Enable and disable attributes. Report custom performance data Use RecordMetric() to create a custom metric. To view the data, use the query builder. Control the browser monitoring agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.61125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "sections": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> includes an API that allows you to extend the <em>agent</em>&#x27;s standard functionality. For example, you can use the .<em>NET</em> <em>agent</em> API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .<em>NET</em> <em>agent</em>"
      },
      "id": "61a08f1564441fd10c9840d0"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-05T09:03:16Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.19244,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-05T06:47:16Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.091125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Guide to using the .NET agent API",
        "Requirements",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "View calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser monitoring agent"
      ],
      "title": "Guide to using the .NET agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "API guides"
      ],
      "external_id": "03f79d963725d4c950219143dedb6efa443be9f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api/",
      "published_at": "2021-12-05T06:04:13Z",
      "updated_at": "2021-11-26T07:39:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent includes an API that allows you to extend the agent's standard functionality. For example, you can use the .NET agent API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET agent's default behavior by adjusting configuration settings or using custom instrumentation. Requirements Important As of September 2021, a small subset of APIs, configuration options, and installation options for .NET will be replaced by new methods. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. To use the .NET agent API: Make sure you have the latest .NET agent release. Add a reference to the agent in your project: Add a reference to NewRelic.Api.Agent.dll to your project. OR View and download the API package from the NuGet Package Library. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Prevent a transaction from reporting to New Relic Use IgnoreTransaction() or an XML file to ignore the transaction. Create a transaction where none exists Use attributes or an XML file to create a new transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. When you want to instrument a method within an existing transaction, see Custom instrumentation via attributes or Add detail to transactions via XML. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them in dashboards. Use these methods when you want to change how New Relic instruments a transaction that's already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction Use SetTransactionName() or an XML file. Prevent a transaction from affecting your Apdex score Use IgnoreApdex(). Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See AddCustomAttribute(). See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: TraceMetadata GetLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks, the .NET agent usually detects async work and instruments it correctly. However, if your app uses another framework, or the default async instrumentation is inaccurate, you can explicitly connect async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. Trace an async method that New Relic is not instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. View calls to external services For .NET agent version 8.9 or higher, you can use the following distributed tracing payload APIs to manually pass distributed tracing context between New Relic-monitored services that don't automatically connect to one another in a distributed trace. If you want to... Do this... Instrument an outgoing request to an external application or database Create a distributed trace payload to attach to an outgoing request using CreateDistributedTracePayload(). Connect incoming requests with the originator of the request to complete a span of the trace Receive a payload on an incoming request using AcceptDistributedTracePayload(). For .NET agent versions lower than 8.9, use cross application tracing. Collect or ignore errors Usually the .NET agent detects errors automatically. However, you can manually mark an error with the agent. You can also ignore errors . If you want to... Do this... Report an error the .NET agent does not report automatically Use NoticeError(). Capture errors or prevent the .NET agent from reporting an error at all Use your .NET agent configuration file. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See RecordCustomEvent(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. See .NET agent attributes and Enable and disable attributes. Report custom performance data Use RecordMetric() to create a custom metric. To view the data, use the query builder. Control the browser monitoring agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.61125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "sections": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> includes an API that allows you to extend the <em>agent</em>&#x27;s standard functionality. For example, you can use the .<em>NET</em> <em>agent</em> API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .<em>NET</em> <em>agent</em>"
      },
      "id": "61a08f1564441fd10c9840d0"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-data-appears-after-disabling-tls-10": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-05T09:03:16Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.19244,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-05T06:47:16Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.091125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Guide to using the .NET agent API",
        "Requirements",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "View calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser monitoring agent"
      ],
      "title": "Guide to using the .NET agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "API guides"
      ],
      "external_id": "03f79d963725d4c950219143dedb6efa443be9f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api/",
      "published_at": "2021-12-05T06:04:13Z",
      "updated_at": "2021-11-26T07:39:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent includes an API that allows you to extend the agent's standard functionality. For example, you can use the .NET agent API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET agent's default behavior by adjusting configuration settings or using custom instrumentation. Requirements Important As of September 2021, a small subset of APIs, configuration options, and installation options for .NET will be replaced by new methods. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. To use the .NET agent API: Make sure you have the latest .NET agent release. Add a reference to the agent in your project: Add a reference to NewRelic.Api.Agent.dll to your project. OR View and download the API package from the NuGet Package Library. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Prevent a transaction from reporting to New Relic Use IgnoreTransaction() or an XML file to ignore the transaction. Create a transaction where none exists Use attributes or an XML file to create a new transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. When you want to instrument a method within an existing transaction, see Custom instrumentation via attributes or Add detail to transactions via XML. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them in dashboards. Use these methods when you want to change how New Relic instruments a transaction that's already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction Use SetTransactionName() or an XML file. Prevent a transaction from affecting your Apdex score Use IgnoreApdex(). Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See AddCustomAttribute(). See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: TraceMetadata GetLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks, the .NET agent usually detects async work and instruments it correctly. However, if your app uses another framework, or the default async instrumentation is inaccurate, you can explicitly connect async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. Trace an async method that New Relic is not instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. View calls to external services For .NET agent version 8.9 or higher, you can use the following distributed tracing payload APIs to manually pass distributed tracing context between New Relic-monitored services that don't automatically connect to one another in a distributed trace. If you want to... Do this... Instrument an outgoing request to an external application or database Create a distributed trace payload to attach to an outgoing request using CreateDistributedTracePayload(). Connect incoming requests with the originator of the request to complete a span of the trace Receive a payload on an incoming request using AcceptDistributedTracePayload(). For .NET agent versions lower than 8.9, use cross application tracing. Collect or ignore errors Usually the .NET agent detects errors automatically. However, you can manually mark an error with the agent. You can also ignore errors . If you want to... Do this... Report an error the .NET agent does not report automatically Use NoticeError(). Capture errors or prevent the .NET agent from reporting an error at all Use your .NET agent configuration file. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See RecordCustomEvent(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. See .NET agent attributes and Enable and disable attributes. Report custom performance data Use RecordMetric() to create a custom metric. To view the data, use the query builder. Control the browser monitoring agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.61125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "sections": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> includes an API that allows you to extend the <em>agent</em>&#x27;s standard functionality. For example, you can use the .<em>NET</em> <em>agent</em> API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .<em>NET</em> <em>agent</em>"
      },
      "id": "61a08f1564441fd10c9840d0"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-data-appears-net": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-05T09:03:16Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.19233,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-05T06:47:16Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.091034,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Guide to using the .NET agent API",
        "Requirements",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "View calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser monitoring agent"
      ],
      "title": "Guide to using the .NET agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "API guides"
      ],
      "external_id": "03f79d963725d4c950219143dedb6efa443be9f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api/",
      "published_at": "2021-12-05T06:04:13Z",
      "updated_at": "2021-11-26T07:39:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent includes an API that allows you to extend the agent's standard functionality. For example, you can use the .NET agent API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET agent's default behavior by adjusting configuration settings or using custom instrumentation. Requirements Important As of September 2021, a small subset of APIs, configuration options, and installation options for .NET will be replaced by new methods. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. To use the .NET agent API: Make sure you have the latest .NET agent release. Add a reference to the agent in your project: Add a reference to NewRelic.Api.Agent.dll to your project. OR View and download the API package from the NuGet Package Library. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Prevent a transaction from reporting to New Relic Use IgnoreTransaction() or an XML file to ignore the transaction. Create a transaction where none exists Use attributes or an XML file to create a new transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. When you want to instrument a method within an existing transaction, see Custom instrumentation via attributes or Add detail to transactions via XML. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them in dashboards. Use these methods when you want to change how New Relic instruments a transaction that's already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction Use SetTransactionName() or an XML file. Prevent a transaction from affecting your Apdex score Use IgnoreApdex(). Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See AddCustomAttribute(). See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: TraceMetadata GetLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks, the .NET agent usually detects async work and instruments it correctly. However, if your app uses another framework, or the default async instrumentation is inaccurate, you can explicitly connect async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. Trace an async method that New Relic is not instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. View calls to external services For .NET agent version 8.9 or higher, you can use the following distributed tracing payload APIs to manually pass distributed tracing context between New Relic-monitored services that don't automatically connect to one another in a distributed trace. If you want to... Do this... Instrument an outgoing request to an external application or database Create a distributed trace payload to attach to an outgoing request using CreateDistributedTracePayload(). Connect incoming requests with the originator of the request to complete a span of the trace Receive a payload on an incoming request using AcceptDistributedTracePayload(). For .NET agent versions lower than 8.9, use cross application tracing. Collect or ignore errors Usually the .NET agent detects errors automatically. However, you can manually mark an error with the agent. You can also ignore errors . If you want to... Do this... Report an error the .NET agent does not report automatically Use NoticeError(). Capture errors or prevent the .NET agent from reporting an error at all Use your .NET agent configuration file. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See RecordCustomEvent(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. See .NET agent attributes and Enable and disable attributes. Report custom performance data Use RecordMetric() to create a custom metric. To view the data, use the query builder. Control the browser monitoring agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.61122,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "sections": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> includes an API that allows you to extend the <em>agent</em>&#x27;s standard functionality. For example, you can use the .<em>NET</em> <em>agent</em> API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .<em>NET</em> <em>agent</em>"
      },
      "id": "61a08f1564441fd10c9840d0"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-data-registry-key-permission-issues": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-05T09:03:16Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.19233,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-05T06:47:16Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.091034,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Guide to using the .NET agent API",
        "Requirements",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "View calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser monitoring agent"
      ],
      "title": "Guide to using the .NET agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "API guides"
      ],
      "external_id": "03f79d963725d4c950219143dedb6efa443be9f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api/",
      "published_at": "2021-12-05T06:04:13Z",
      "updated_at": "2021-11-26T07:39:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent includes an API that allows you to extend the agent's standard functionality. For example, you can use the .NET agent API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET agent's default behavior by adjusting configuration settings or using custom instrumentation. Requirements Important As of September 2021, a small subset of APIs, configuration options, and installation options for .NET will be replaced by new methods. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. To use the .NET agent API: Make sure you have the latest .NET agent release. Add a reference to the agent in your project: Add a reference to NewRelic.Api.Agent.dll to your project. OR View and download the API package from the NuGet Package Library. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Prevent a transaction from reporting to New Relic Use IgnoreTransaction() or an XML file to ignore the transaction. Create a transaction where none exists Use attributes or an XML file to create a new transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. When you want to instrument a method within an existing transaction, see Custom instrumentation via attributes or Add detail to transactions via XML. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them in dashboards. Use these methods when you want to change how New Relic instruments a transaction that's already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction Use SetTransactionName() or an XML file. Prevent a transaction from affecting your Apdex score Use IgnoreApdex(). Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See AddCustomAttribute(). See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: TraceMetadata GetLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks, the .NET agent usually detects async work and instruments it correctly. However, if your app uses another framework, or the default async instrumentation is inaccurate, you can explicitly connect async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. Trace an async method that New Relic is not instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. View calls to external services For .NET agent version 8.9 or higher, you can use the following distributed tracing payload APIs to manually pass distributed tracing context between New Relic-monitored services that don't automatically connect to one another in a distributed trace. If you want to... Do this... Instrument an outgoing request to an external application or database Create a distributed trace payload to attach to an outgoing request using CreateDistributedTracePayload(). Connect incoming requests with the originator of the request to complete a span of the trace Receive a payload on an incoming request using AcceptDistributedTracePayload(). For .NET agent versions lower than 8.9, use cross application tracing. Collect or ignore errors Usually the .NET agent detects errors automatically. However, you can manually mark an error with the agent. You can also ignore errors . If you want to... Do this... Report an error the .NET agent does not report automatically Use NoticeError(). Capture errors or prevent the .NET agent from reporting an error at all Use your .NET agent configuration file. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See RecordCustomEvent(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. See .NET agent attributes and Enable and disable attributes. Report custom performance data Use RecordMetric() to create a custom metric. To view the data, use the query builder. Control the browser monitoring agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.61122,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "sections": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> includes an API that allows you to extend the <em>agent</em>&#x27;s standard functionality. For example, you can use the .<em>NET</em> <em>agent</em> API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .<em>NET</em> <em>agent</em>"
      },
      "id": "61a08f1564441fd10c9840d0"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-stack-traces-dotnet": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-05T09:03:16Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.19222,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-05T06:47:16Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.09093,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Guide to using the .NET agent API",
        "Requirements",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "View calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser monitoring agent"
      ],
      "title": "Guide to using the .NET agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "API guides"
      ],
      "external_id": "03f79d963725d4c950219143dedb6efa443be9f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api/",
      "published_at": "2021-12-05T06:04:13Z",
      "updated_at": "2021-11-26T07:39:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent includes an API that allows you to extend the agent's standard functionality. For example, you can use the .NET agent API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET agent's default behavior by adjusting configuration settings or using custom instrumentation. Requirements Important As of September 2021, a small subset of APIs, configuration options, and installation options for .NET will be replaced by new methods. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. To use the .NET agent API: Make sure you have the latest .NET agent release. Add a reference to the agent in your project: Add a reference to NewRelic.Api.Agent.dll to your project. OR View and download the API package from the NuGet Package Library. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Prevent a transaction from reporting to New Relic Use IgnoreTransaction() or an XML file to ignore the transaction. Create a transaction where none exists Use attributes or an XML file to create a new transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. When you want to instrument a method within an existing transaction, see Custom instrumentation via attributes or Add detail to transactions via XML. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them in dashboards. Use these methods when you want to change how New Relic instruments a transaction that's already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction Use SetTransactionName() or an XML file. Prevent a transaction from affecting your Apdex score Use IgnoreApdex(). Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See AddCustomAttribute(). See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: TraceMetadata GetLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks, the .NET agent usually detects async work and instruments it correctly. However, if your app uses another framework, or the default async instrumentation is inaccurate, you can explicitly connect async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. Trace an async method that New Relic is not instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. View calls to external services For .NET agent version 8.9 or higher, you can use the following distributed tracing payload APIs to manually pass distributed tracing context between New Relic-monitored services that don't automatically connect to one another in a distributed trace. If you want to... Do this... Instrument an outgoing request to an external application or database Create a distributed trace payload to attach to an outgoing request using CreateDistributedTracePayload(). Connect incoming requests with the originator of the request to complete a span of the trace Receive a payload on an incoming request using AcceptDistributedTracePayload(). For .NET agent versions lower than 8.9, use cross application tracing. Collect or ignore errors Usually the .NET agent detects errors automatically. However, you can manually mark an error with the agent. You can also ignore errors . If you want to... Do this... Report an error the .NET agent does not report automatically Use NoticeError(). Capture errors or prevent the .NET agent from reporting an error at all Use your .NET agent configuration file. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See RecordCustomEvent(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. See .NET agent attributes and Enable and disable attributes. Report custom performance data Use RecordMetric() to create a custom metric. To view the data, use the query builder. Control the browser monitoring agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.61119,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "sections": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> includes an API that allows you to extend the <em>agent</em>&#x27;s standard functionality. For example, you can use the .<em>NET</em> <em>agent</em> API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .<em>NET</em> <em>agent</em>"
      },
      "id": "61a08f1564441fd10c9840d0"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/profiler-conflicts": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-05T09:03:16Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.19222,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-05T06:47:16Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.09093,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Guide to using the .NET agent API",
        "Requirements",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "View calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser monitoring agent"
      ],
      "title": "Guide to using the .NET agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "API guides"
      ],
      "external_id": "03f79d963725d4c950219143dedb6efa443be9f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api/",
      "published_at": "2021-12-05T06:04:13Z",
      "updated_at": "2021-11-26T07:39:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent includes an API that allows you to extend the agent's standard functionality. For example, you can use the .NET agent API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET agent's default behavior by adjusting configuration settings or using custom instrumentation. Requirements Important As of September 2021, a small subset of APIs, configuration options, and installation options for .NET will be replaced by new methods. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. To use the .NET agent API: Make sure you have the latest .NET agent release. Add a reference to the agent in your project: Add a reference to NewRelic.Api.Agent.dll to your project. OR View and download the API package from the NuGet Package Library. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Prevent a transaction from reporting to New Relic Use IgnoreTransaction() or an XML file to ignore the transaction. Create a transaction where none exists Use attributes or an XML file to create a new transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. When you want to instrument a method within an existing transaction, see Custom instrumentation via attributes or Add detail to transactions via XML. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them in dashboards. Use these methods when you want to change how New Relic instruments a transaction that's already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction Use SetTransactionName() or an XML file. Prevent a transaction from affecting your Apdex score Use IgnoreApdex(). Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See AddCustomAttribute(). See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: TraceMetadata GetLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks, the .NET agent usually detects async work and instruments it correctly. However, if your app uses another framework, or the default async instrumentation is inaccurate, you can explicitly connect async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. Trace an async method that New Relic is not instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. View calls to external services For .NET agent version 8.9 or higher, you can use the following distributed tracing payload APIs to manually pass distributed tracing context between New Relic-monitored services that don't automatically connect to one another in a distributed trace. If you want to... Do this... Instrument an outgoing request to an external application or database Create a distributed trace payload to attach to an outgoing request using CreateDistributedTracePayload(). Connect incoming requests with the originator of the request to complete a span of the trace Receive a payload on an incoming request using AcceptDistributedTracePayload(). For .NET agent versions lower than 8.9, use cross application tracing. Collect or ignore errors Usually the .NET agent detects errors automatically. However, you can manually mark an error with the agent. You can also ignore errors . If you want to... Do this... Report an error the .NET agent does not report automatically Use NoticeError(). Capture errors or prevent the .NET agent from reporting an error at all Use your .NET agent configuration file. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See RecordCustomEvent(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. See .NET agent attributes and Enable and disable attributes. Report custom performance data Use RecordMetric() to create a custom metric. To view the data, use the query builder. Control the browser monitoring agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.61119,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "sections": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> includes an API that allows you to extend the <em>agent</em>&#x27;s standard functionality. For example, you can use the .<em>NET</em> <em>agent</em> API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .<em>NET</em> <em>agent</em>"
      },
      "id": "61a08f1564441fd10c9840d0"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/resolve-net-scom-conflicts": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-05T09:03:16Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.192116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-05T06:47:16Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.090836,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Guide to using the .NET agent API",
        "Requirements",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "View calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser monitoring agent"
      ],
      "title": "Guide to using the .NET agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "API guides"
      ],
      "external_id": "03f79d963725d4c950219143dedb6efa443be9f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api/",
      "published_at": "2021-12-05T06:04:13Z",
      "updated_at": "2021-11-26T07:39:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent includes an API that allows you to extend the agent's standard functionality. For example, you can use the .NET agent API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET agent's default behavior by adjusting configuration settings or using custom instrumentation. Requirements Important As of September 2021, a small subset of APIs, configuration options, and installation options for .NET will be replaced by new methods. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. To use the .NET agent API: Make sure you have the latest .NET agent release. Add a reference to the agent in your project: Add a reference to NewRelic.Api.Agent.dll to your project. OR View and download the API package from the NuGet Package Library. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Prevent a transaction from reporting to New Relic Use IgnoreTransaction() or an XML file to ignore the transaction. Create a transaction where none exists Use attributes or an XML file to create a new transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. When you want to instrument a method within an existing transaction, see Custom instrumentation via attributes or Add detail to transactions via XML. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them in dashboards. Use these methods when you want to change how New Relic instruments a transaction that's already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction Use SetTransactionName() or an XML file. Prevent a transaction from affecting your Apdex score Use IgnoreApdex(). Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See AddCustomAttribute(). See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: TraceMetadata GetLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks, the .NET agent usually detects async work and instruments it correctly. However, if your app uses another framework, or the default async instrumentation is inaccurate, you can explicitly connect async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. Trace an async method that New Relic is not instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. View calls to external services For .NET agent version 8.9 or higher, you can use the following distributed tracing payload APIs to manually pass distributed tracing context between New Relic-monitored services that don't automatically connect to one another in a distributed trace. If you want to... Do this... Instrument an outgoing request to an external application or database Create a distributed trace payload to attach to an outgoing request using CreateDistributedTracePayload(). Connect incoming requests with the originator of the request to complete a span of the trace Receive a payload on an incoming request using AcceptDistributedTracePayload(). For .NET agent versions lower than 8.9, use cross application tracing. Collect or ignore errors Usually the .NET agent detects errors automatically. However, you can manually mark an error with the agent. You can also ignore errors . If you want to... Do this... Report an error the .NET agent does not report automatically Use NoticeError(). Capture errors or prevent the .NET agent from reporting an error at all Use your .NET agent configuration file. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See RecordCustomEvent(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. See .NET agent attributes and Enable and disable attributes. Report custom performance data Use RecordMetric() to create a custom metric. To view the data, use the query builder. Control the browser monitoring agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.61116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "sections": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> includes an API that allows you to extend the <em>agent</em>&#x27;s standard functionality. For example, you can use the .<em>NET</em> <em>agent</em> API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .<em>NET</em> <em>agent</em>"
      },
      "id": "61a08f1564441fd10c9840d0"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "0e75eec7071fa9b7626de140bc5537159da8d826",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-12-05T09:03:16Z",
      "updated_at": "2021-12-05T09:03:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile # Use the correct tagged version for your application's targeted runtime. See https://hub.docker.com/_/microsoft-dotnet-aspnet/ FROM mcr.microsoft.com/dotnet/aspnet:6.0 # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile # This example uses .NET 6.0. For other versions, see https://hub.docker.com/_/microsoft-dotnet-sdk/ FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet publish -c Release -o /app ./YOUR_APP_NAME # The runtime tag version should match the SDK tag version FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM mcr.microsoft.com/dotnet/framework/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Download the New Relic .NET agent installer RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Download the New Relic .NET agent installer RUN powershell.exe [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\\ Invoke-WebRequest \"https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi\"\\ -UseBasicParsing -OutFile \"NewRelicDotNetAgent_x64.msi\" # Install the New Relic .NET agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"NewRelicDotNetAgent_x64.msi\", /qn,\\ NR_LICENSE_KEY=YOUR_LICENSE_KEY # Remove the New Relic .NET agent installer RUN powershell.exe Remove-Item \"NewRelicDotNetAgent_x64.msi\" # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windows/servercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.192116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "Install .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "617ea1c8e7b9d28b99c04bdb"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "6d4cb5f679b1c0c5cb468b07d6135e99479a1bfb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-12-05T06:47:16Z",
      "updated_at": "2021-12-05T06:47:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. Alternatively, you may use the Metric explorer under one.newrelic.com > APM > (select an app) > More views. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.090836,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "617ea18e196a67eaf9f7cb46"
    },
    {
      "sections": [
        "Guide to using the .NET agent API",
        "Requirements",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "View calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser monitoring agent"
      ],
      "title": "Guide to using the .NET agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "API guides"
      ],
      "external_id": "03f79d963725d4c950219143dedb6efa443be9f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api/",
      "published_at": "2021-12-05T06:04:13Z",
      "updated_at": "2021-11-26T07:39:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent includes an API that allows you to extend the agent's standard functionality. For example, you can use the .NET agent API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET agent's default behavior by adjusting configuration settings or using custom instrumentation. Requirements Important As of September 2021, a small subset of APIs, configuration options, and installation options for .NET will be replaced by new methods. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. To use the .NET agent API: Make sure you have the latest .NET agent release. Add a reference to the agent in your project: Add a reference to NewRelic.Api.Agent.dll to your project. OR View and download the API package from the NuGet Package Library. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Prevent a transaction from reporting to New Relic Use IgnoreTransaction() or an XML file to ignore the transaction. Create a transaction where none exists Use attributes or an XML file to create a new transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. When you want to instrument a method within an existing transaction, see Custom instrumentation via attributes or Add detail to transactions via XML. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them in dashboards. Use these methods when you want to change how New Relic instruments a transaction that's already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction Use SetTransactionName() or an XML file. Prevent a transaction from affecting your Apdex score Use IgnoreApdex(). Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See AddCustomAttribute(). See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: TraceMetadata GetLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks, the .NET agent usually detects async work and instruments it correctly. However, if your app uses another framework, or the default async instrumentation is inaccurate, you can explicitly connect async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. Trace an async method that New Relic is not instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. View calls to external services For .NET agent version 8.9 or higher, you can use the following distributed tracing payload APIs to manually pass distributed tracing context between New Relic-monitored services that don't automatically connect to one another in a distributed trace. If you want to... Do this... Instrument an outgoing request to an external application or database Create a distributed trace payload to attach to an outgoing request using CreateDistributedTracePayload(). Connect incoming requests with the originator of the request to complete a span of the trace Receive a payload on an incoming request using AcceptDistributedTracePayload(). For .NET agent versions lower than 8.9, use cross application tracing. Collect or ignore errors Usually the .NET agent detects errors automatically. However, you can manually mark an error with the agent. You can also ignore errors . If you want to... Do this... Report an error the .NET agent does not report automatically Use NoticeError(). Capture errors or prevent the .NET agent from reporting an error at all Use your .NET agent configuration file. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See RecordCustomEvent(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. See .NET agent attributes and Enable and disable attributes. Report custom performance data Use RecordMetric() to create a custom metric. To view the data, use the query builder. Control the browser monitoring agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.61116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "sections": "Guide to using the .<em>NET</em> <em>agent</em> API",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "New Relic&#x27;s .<em>NET</em> <em>agent</em> includes an API that allows you to extend the <em>agent</em>&#x27;s standard functionality. For example, you can use the .<em>NET</em> <em>agent</em> API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .<em>NET</em> <em>agent</em>"
      },
      "id": "61a08f1564441fd10c9840d0"
    }
  ],
  "/docs/apm/agents/nodejs-agent/api-guides/guide-using-nodejs-agent-api": [
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "f28b2d754b30452a11d4cf5d0d8ddc25a2254530",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-12-05T06:20:40Z",
      "updated_at": "2021-11-06T21:12:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.75195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " and the <em>Node.js</em> <em>agent</em> <em>API</em> documentation on Github. Request names The <em>Node.js</em> <em>agent</em> captures the HTTP method along with a potentially parameterized path (such as &#x2F;user&#x2F;:id) or a regular expression (such as &#x2F;^&#x2F;user&#x2F;([-0-9a-f]+)$&#x2F;). These pieces of information become part of the request name. If you have support"
      },
      "id": "617ea3da196a67da9ef7d092"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-05T06:31:04Z",
      "updated_at": "2021-11-26T00:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.035934,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "You can tailor the <em>Node.js</em> <em>agent</em> to your app&#x27;s requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the <em>Node.js</em> <em>agent</em> <em>API</em>. Get started You&#x27;ll"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.495316,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the Node.js <em>agent</em>",
        "sections": "Install the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "To complete a basic <em>Node.js</em> <em>agent</em> installation, you can use our guided installation for an automated install, (choose EU if you&#x27;re in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don&#x27;t already have one. (It&#x27;s free, forever!) Get an account"
      },
      "id": "617ea532e7b9d296b8c05c6d"
    }
  ],
  "/docs/apm/agents/nodejs-agent/api-guides/nodejs-agent-api": [
    {
      "sections": [
        "Guide to using the Node.js agent API",
        "Requirements",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "Instrument calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser agent",
        "Extend custom instrumentation"
      ],
      "title": "Guide to using the Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "e596220fdf37db967eed78335de47bca653cbde9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/api-guides/guide-using-nodejs-agent-api/",
      "published_at": "2021-12-05T06:19:56Z",
      "updated_at": "2021-11-25T21:00:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent API allows you to extend the agent's standard functionality. You can use this API to: Create custom transaction parameters Report custom errors and metrics You can also use the API for custom instrumentation. For supported frameworks, the agent instruments most activity automatically. Custom instrumentation lets you extend that monitoring to frameworks without default instrumentation. Other resources: The Node.js agent API documentation on GitHub has more detail and practical tutorials. You can also adjust the Node.js agent's default behavior with configuration settings. To see all available New Relic APIs, see Intro to APIs. Requirements To use the Node.js agent API, make sure you have the latest Node.js agent release. In addition, see: Node.js agent API requirements Getting started procedures on GitHub Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Start timing a method New Relic is not instrumenting automatically Create a new transaction. See newrelic.startWebTransaction(). Stop timing a method after its work is completed Use either of these options: Return a promise from the callback handed to newrelic.startWebTransaction. Call end on a handle returned from newrelic.getTransaction. Prevent a transaction from reporting to New Relic Ignore the transaction using any of these options: See Rules for ignoring requests. Call ignore() on a handle returned from newrelic.getTransaction. Time specific methods using segments If a transaction is already visible in New Relic, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. Use this method when you want to instrument a method within an existing transaction: If you want to... Do this... Time a particular method See newrelic.startSegment(). For more information about timing, see the instrumentation tutorial on GitHub. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in New Relic, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them . Use these methods when you want to change how New Relic instruments a transaction that's already visible in New Relic: If you want to... Do this... Change the name of a transaction See newrelic.setTransactionName and rules.name. Add metadata (such as your customer’s account name or subscription level) to your transactions Use custom attributes. (Custom attribute collection is enabled by default in the Node.js agent.) See newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). Create a new transaction for background work See newrelic.startBackgroundTransaction(). Create a new web transaction Use newrelic.startWebTransaction(). Prevent a transaction from affecting your Apdex score See Rules for naming and ignoring requests, including the ignoring rules example. Record other performance data, such as timing or computer resource data Use the custom metrics API. See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: newrelic.getTraceMetadata newrelic.getLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks and supported Node.js versions, New Relic's Node.js agent usually correctly instruments async work. However, if your app uses another framework, or if the default async instrumentation is inaccurate, you can explicitly track async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting See newrelic.startSegment. Trace an async method that New Relic is not instrumenting See newrelic.startSegment. Trace a transaction that got lost See newrelic.startSegment. You can also create your own custom instrumentation for libraries that are losing your transactions. Trace a lost transaction state A common issue is the loss of transaction state while using uninstrumented libraries. For more information, see the transaction preservation tutorial on GitHub. Instrument calls to external services Once the request naming API loads, New Relic's Node.js agent can automatically identify external service calls. You can also use these methods to collect data about your app's connections to other apps or databases: If you want to... Do this... Time a call to an external resource (such as an external service, database server, or message queue) Use any of these as appropriate: Custom instrumentation API Message queues Also see the tutorials on GitHub for datastore shims and message shims. Connect activity to another app instrumented by a New Relic agent Use cross application tracing. Collect or ignore errors Usually the agent detects errors automatically. However, you can manually mark an error with the agent. You can also mark errors as ignored. If you want to... Do this... Report an error the agent does not report automatically See newrelic.noticeError(). Send custom event and metric data from your app New Relic includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in New Relic Create a custom event. See newrelic.recordCustomEvent(). Tag your events with metadata to filter and facet them Add custom attributes if needed. (Custom attribute collection is enabled by default in the Node.js agent.) See newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). Report custom performance data Create a custom metric. See newrelic.recordMetric() and newrelic.incrementMetric(). To view the data, use the data explorer. Control the browser agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add browser apps to New Relic. You can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the Node.js agent. Extend custom instrumentation The newrelic.instrument() provides additional flexibility for custom instrumentation. For more information, including tutorials and examples, see the shims documentation on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.9549,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the Node.js <em>agent</em> <em>API</em>",
        "sections": "<em>Guide</em> to using the Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> <em>API</em> allows you to extend the <em>agent</em>&#x27;s standard functionality. You can use this <em>API</em> to: Create custom transaction parameters Report custom errors and metrics You can also use the <em>API</em> for custom instrumentation. For supported frameworks, the <em>agent</em> instruments most activity"
      },
      "id": "617ea409196a67a5e7f7dd68"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-05T06:31:04Z",
      "updated_at": "2021-11-26T00:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.035934,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "You can tailor the <em>Node.js</em> <em>agent</em> to your app&#x27;s requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the <em>Node.js</em> <em>agent</em> <em>API</em>. Get started You&#x27;ll"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.495316,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the Node.js <em>agent</em>",
        "sections": "Install the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "To complete a basic <em>Node.js</em> <em>agent</em> installation, you can use our guided installation for an automated install, (choose EU if you&#x27;re in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don&#x27;t already have one. (It&#x27;s free, forever!) Get an account"
      },
      "id": "617ea532e7b9d296b8c05c6d"
    }
  ],
  "/docs/apm/agents/nodejs-agent/attributes/nodejs-agent-attributes": [
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-05T06:31:04Z",
      "updated_at": "2021-11-26T00:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.9808,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "<em>Attributes</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " and connecting to New Relic&#x27;s servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in <em>Node.js</em> <em>agent</em> <em>attributes</em>. Type Boolean Default false Caution Any header-related include"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    },
    {
      "sections": [
        "Guide to using the Node.js agent API",
        "Requirements",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "Instrument calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser agent",
        "Extend custom instrumentation"
      ],
      "title": "Guide to using the Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "e596220fdf37db967eed78335de47bca653cbde9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/api-guides/guide-using-nodejs-agent-api/",
      "published_at": "2021-12-05T06:19:56Z",
      "updated_at": "2021-11-25T21:00:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent API allows you to extend the agent's standard functionality. You can use this API to: Create custom transaction parameters Report custom errors and metrics You can also use the API for custom instrumentation. For supported frameworks, the agent instruments most activity automatically. Custom instrumentation lets you extend that monitoring to frameworks without default instrumentation. Other resources: The Node.js agent API documentation on GitHub has more detail and practical tutorials. You can also adjust the Node.js agent's default behavior with configuration settings. To see all available New Relic APIs, see Intro to APIs. Requirements To use the Node.js agent API, make sure you have the latest Node.js agent release. In addition, see: Node.js agent API requirements Getting started procedures on GitHub Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Start timing a method New Relic is not instrumenting automatically Create a new transaction. See newrelic.startWebTransaction(). Stop timing a method after its work is completed Use either of these options: Return a promise from the callback handed to newrelic.startWebTransaction. Call end on a handle returned from newrelic.getTransaction. Prevent a transaction from reporting to New Relic Ignore the transaction using any of these options: See Rules for ignoring requests. Call ignore() on a handle returned from newrelic.getTransaction. Time specific methods using segments If a transaction is already visible in New Relic, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. Use this method when you want to instrument a method within an existing transaction: If you want to... Do this... Time a particular method See newrelic.startSegment(). For more information about timing, see the instrumentation tutorial on GitHub. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in New Relic, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them . Use these methods when you want to change how New Relic instruments a transaction that's already visible in New Relic: If you want to... Do this... Change the name of a transaction See newrelic.setTransactionName and rules.name. Add metadata (such as your customer’s account name or subscription level) to your transactions Use custom attributes. (Custom attribute collection is enabled by default in the Node.js agent.) See newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). Create a new transaction for background work See newrelic.startBackgroundTransaction(). Create a new web transaction Use newrelic.startWebTransaction(). Prevent a transaction from affecting your Apdex score See Rules for naming and ignoring requests, including the ignoring rules example. Record other performance data, such as timing or computer resource data Use the custom metrics API. See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: newrelic.getTraceMetadata newrelic.getLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks and supported Node.js versions, New Relic's Node.js agent usually correctly instruments async work. However, if your app uses another framework, or if the default async instrumentation is inaccurate, you can explicitly track async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting See newrelic.startSegment. Trace an async method that New Relic is not instrumenting See newrelic.startSegment. Trace a transaction that got lost See newrelic.startSegment. You can also create your own custom instrumentation for libraries that are losing your transactions. Trace a lost transaction state A common issue is the loss of transaction state while using uninstrumented libraries. For more information, see the transaction preservation tutorial on GitHub. Instrument calls to external services Once the request naming API loads, New Relic's Node.js agent can automatically identify external service calls. You can also use these methods to collect data about your app's connections to other apps or databases: If you want to... Do this... Time a call to an external resource (such as an external service, database server, or message queue) Use any of these as appropriate: Custom instrumentation API Message queues Also see the tutorials on GitHub for datastore shims and message shims. Connect activity to another app instrumented by a New Relic agent Use cross application tracing. Collect or ignore errors Usually the agent detects errors automatically. However, you can manually mark an error with the agent. You can also mark errors as ignored. If you want to... Do this... Report an error the agent does not report automatically See newrelic.noticeError(). Send custom event and metric data from your app New Relic includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in New Relic Create a custom event. See newrelic.recordCustomEvent(). Tag your events with metadata to filter and facet them Add custom attributes if needed. (Custom attribute collection is enabled by default in the Node.js agent.) See newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). Report custom performance data Create a custom metric. See newrelic.recordMetric() and newrelic.incrementMetric(). To view the data, use the data explorer. Control the browser agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add browser apps to New Relic. You can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the Node.js agent. Extend custom instrumentation The newrelic.instrument() provides additional flexibility for custom instrumentation. For more information, including tutorials and examples, see the shims documentation on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.29506,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the Node.js <em>agent</em> API",
        "sections": "Guide to using the Node.js <em>agent</em> API",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " and rules.name. Add metadata (such as your customer’s account name or subscription level) to your transactions Use custom <em>attributes</em>. (Custom attribute collection is enabled by default in the <em>Node.js</em> <em>agent</em>.) See newrelic.addCustomAttribute() and newrelic.addCustom<em>Attributes</em>(). Create a new transaction"
      },
      "id": "617ea409196a67a5e7f7dd68"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "f28b2d754b30452a11d4cf5d0d8ddc25a2254530",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-12-05T06:20:40Z",
      "updated_at": "2021-11-06T21:12:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.60743,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> API",
        "sections": "newrelic.recordCustomEvent(eventType, <em>attributes</em>)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional <em>attributes</em> are ignored. Testing your naming rules [#testing-rules] The <em>Node.js</em> <em>agent</em> comes with a command-line tool for testing naming rules. For more information, run the following command"
      },
      "id": "617ea3da196a67da9ef7d092"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/apollo-server-plugin-nodejs": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.2676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js custom metrics",
        "Caution",
        "Name your metrics",
        "Important",
        "Record custom metrics",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Node.js custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "e1173330d4285da9aa1910543d9d4a6e3d11c384",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-metrics/",
      "published_at": "2021-12-05T06:21:22Z",
      "updated_at": "2021-10-31T14:12:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Record arbitrary performance data via an API call (for example, timing or computer resource data). Use the data explorer to search your custom metrics, create customizable charts, and add those charts to New Relic dashboards. Using custom metrics unifies your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Name your metrics Metric names are paths delimited by the / character. For custom metrics use this pattern: <category>/<class>/<method> Copy For custom metric names, use <class>/<method> or <category>/<name>. For example, use MyCategory/My_method). Important For versions prior to Node Agent v5, you need to prepend your metrics with Custom/. The agent will not automatically prepend custom metrics with this to prevent collision with internal metrics. Record custom metrics The public API for recording metric data consists of two methods on newrelic: recordMetric: Use to create a new custom metric. incrementMetric: Use to update the value of a custom metric. Example custom metric Here is an example that shows how you can use metrics to track currency flowing through a site: app.post('/cart/checkout', function(req, res) { var total = computeCartTotal(req.user); newrelic.recordMetric('Cart/ChargeAmount', total); ... }); Copy View custom metrics To view custom metrics, use the data explorer to search metrics, create customizable charts, and add those charts to New Relic dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.53305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Name <em>your</em> metrics",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " Collecting too many metrics can impact the performance of <em>your</em> application and <em>your</em> New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Name <em>your</em> metrics Metric names are paths delimited by the &#x2F; character. For custom metrics use this pattern: &lt;category"
      },
      "id": "617ea46228ccbc3422800b7e"
    },
    {
      "sections": [
        "Message queues",
        "Performance improvements with background tasks",
        "Queue operations",
        "View in New Relic UI",
        "Tip"
      ],
      "title": "Message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "38a3f46c9e840509297b5cd18daaf432ea3a3c11",
      "image": "https://docs.newrelic.com/static/8d6b1b9b8c8ecc25a1110677443633ff/e6c84/Screen-Shot-2017-07-12-at-1.29.28-PM.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/message-queues/",
      "published_at": "2021-12-05T06:21:23Z",
      "updated_at": "2021-10-23T21:22:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Node.js agent supports the amqplib RabbitMQ client library, giving you insight into the performance of your message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe/consume messages) as Message background tasks. Message creation via RabbitMQ also appears in transaction traces. This feature requires New Relic Node.js agent version 2.0.0 or higher. Performance improvements with background tasks One way to increase responsiveness of web applications is to delegate work to background processes. Message queues are commonly used for this inter-process communication. In the context of message queuing systems, applications typically interact with message brokers to send and receive messages. The amqplib client library allows Node applications to interface with message brokers that implement the Advanced Message Queueing Protocol (AMQP) 0.9 or higher. New Relic's Node.js agent shows messages sent and received using the RabbitMQ client library. With this visibility, you can see details including: Number of messages produced by your app Time your app spends publishing messages Time your app spends processing \"consumed\" messages APM conveniently groups and reports operations that interact with queues. By analyzing this information, you can more easily identify bottlenecks and areas for performance improvement in your message passing architecture. Queue operations Supported entry points for queue operations appear as Put (publish a message) or Take (receive a message) in APM's user interface. Queue operations Publish a message (Put in UI) Receive a message (Take in UI) RabbitMQ publish sendToQueue get consume View in New Relic UI Queue operations appear on APM's Transactions page for the selected app. The Put and Take metrics appear in the Breakdown table and are categorized as MessageBroker metrics. Here is an example: one.newrelic.com > APM > Applications > (select an app) > Transactions > (select a transaction): The transaction's Breakdown table categorizes queue operations as MessageBroker metrics and labels them as Put (publish a message) or Take (receive a message). The Transaction trace summary page may show Put and Take operations in the Slowest components section. For example: one.newrelic.com > APM > Applications > (select an app) > Summary > (select a transaction trace): In this example, the selected transaction trace's Summary shows RabbitMQ operations in the colored bar chart. The Slowest components section also lists the RabbitMQ Put and Take results. The Transaction trace page also includes a dedicated Messages tab that shows a summary of the message activity that occurred as part of the transaction. Tip You can select transaction traces from the app's Summary or Transactions pages in APM.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.26988,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "The New Relic <em>Node.js</em> <em>agent</em> supports the amqplib RabbitMQ client library, giving you insight into the performance of <em>your</em> message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe&#x2F;consume messages) as Message"
      },
      "id": "617ea436e7b9d2de47c055a9"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.2676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js custom metrics",
        "Caution",
        "Name your metrics",
        "Important",
        "Record custom metrics",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Node.js custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "e1173330d4285da9aa1910543d9d4a6e3d11c384",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-metrics/",
      "published_at": "2021-12-05T06:21:22Z",
      "updated_at": "2021-10-31T14:12:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Record arbitrary performance data via an API call (for example, timing or computer resource data). Use the data explorer to search your custom metrics, create customizable charts, and add those charts to New Relic dashboards. Using custom metrics unifies your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Name your metrics Metric names are paths delimited by the / character. For custom metrics use this pattern: <category>/<class>/<method> Copy For custom metric names, use <class>/<method> or <category>/<name>. For example, use MyCategory/My_method). Important For versions prior to Node Agent v5, you need to prepend your metrics with Custom/. The agent will not automatically prepend custom metrics with this to prevent collision with internal metrics. Record custom metrics The public API for recording metric data consists of two methods on newrelic: recordMetric: Use to create a new custom metric. incrementMetric: Use to update the value of a custom metric. Example custom metric Here is an example that shows how you can use metrics to track currency flowing through a site: app.post('/cart/checkout', function(req, res) { var total = computeCartTotal(req.user); newrelic.recordMetric('Cart/ChargeAmount', total); ... }); Copy View custom metrics To view custom metrics, use the data explorer to search metrics, create customizable charts, and add those charts to New Relic dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.53305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Name <em>your</em> metrics",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " Collecting too many metrics can impact the performance of <em>your</em> application and <em>your</em> New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Name <em>your</em> metrics Metric names are paths delimited by the &#x2F; character. For custom metrics use this pattern: &lt;category"
      },
      "id": "617ea46228ccbc3422800b7e"
    },
    {
      "sections": [
        "Message queues",
        "Performance improvements with background tasks",
        "Queue operations",
        "View in New Relic UI",
        "Tip"
      ],
      "title": "Message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "38a3f46c9e840509297b5cd18daaf432ea3a3c11",
      "image": "https://docs.newrelic.com/static/8d6b1b9b8c8ecc25a1110677443633ff/e6c84/Screen-Shot-2017-07-12-at-1.29.28-PM.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/message-queues/",
      "published_at": "2021-12-05T06:21:23Z",
      "updated_at": "2021-10-23T21:22:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Node.js agent supports the amqplib RabbitMQ client library, giving you insight into the performance of your message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe/consume messages) as Message background tasks. Message creation via RabbitMQ also appears in transaction traces. This feature requires New Relic Node.js agent version 2.0.0 or higher. Performance improvements with background tasks One way to increase responsiveness of web applications is to delegate work to background processes. Message queues are commonly used for this inter-process communication. In the context of message queuing systems, applications typically interact with message brokers to send and receive messages. The amqplib client library allows Node applications to interface with message brokers that implement the Advanced Message Queueing Protocol (AMQP) 0.9 or higher. New Relic's Node.js agent shows messages sent and received using the RabbitMQ client library. With this visibility, you can see details including: Number of messages produced by your app Time your app spends publishing messages Time your app spends processing \"consumed\" messages APM conveniently groups and reports operations that interact with queues. By analyzing this information, you can more easily identify bottlenecks and areas for performance improvement in your message passing architecture. Queue operations Supported entry points for queue operations appear as Put (publish a message) or Take (receive a message) in APM's user interface. Queue operations Publish a message (Put in UI) Receive a message (Take in UI) RabbitMQ publish sendToQueue get consume View in New Relic UI Queue operations appear on APM's Transactions page for the selected app. The Put and Take metrics appear in the Breakdown table and are categorized as MessageBroker metrics. Here is an example: one.newrelic.com > APM > Applications > (select an app) > Transactions > (select a transaction): The transaction's Breakdown table categorizes queue operations as MessageBroker metrics and labels them as Put (publish a message) or Take (receive a message). The Transaction trace summary page may show Put and Take operations in the Slowest components section. For example: one.newrelic.com > APM > Applications > (select an app) > Summary > (select a transaction trace): In this example, the selected transaction trace's Summary shows RabbitMQ operations in the colored bar chart. The Slowest components section also lists the RabbitMQ Put and Take results. The Transaction trace page also includes a dedicated Messages tab that shows a summary of the message activity that occurred as part of the transaction. Tip You can select transaction traces from the app's Summary or Transactions pages in APM.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.26988,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "The New Relic <em>Node.js</em> <em>agent</em> supports the amqplib RabbitMQ client library, giving you insight into the performance of <em>your</em> message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe&#x2F;consume messages) as Message"
      },
      "id": "617ea436e7b9d2de47c055a9"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/message-queues": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.2676,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js custom metrics",
        "Caution",
        "Name your metrics",
        "Important",
        "Record custom metrics",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Node.js custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "e1173330d4285da9aa1910543d9d4a6e3d11c384",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-metrics/",
      "published_at": "2021-12-05T06:21:22Z",
      "updated_at": "2021-10-31T14:12:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Record arbitrary performance data via an API call (for example, timing or computer resource data). Use the data explorer to search your custom metrics, create customizable charts, and add those charts to New Relic dashboards. Using custom metrics unifies your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Name your metrics Metric names are paths delimited by the / character. For custom metrics use this pattern: <category>/<class>/<method> Copy For custom metric names, use <class>/<method> or <category>/<name>. For example, use MyCategory/My_method). Important For versions prior to Node Agent v5, you need to prepend your metrics with Custom/. The agent will not automatically prepend custom metrics with this to prevent collision with internal metrics. Record custom metrics The public API for recording metric data consists of two methods on newrelic: recordMetric: Use to create a new custom metric. incrementMetric: Use to update the value of a custom metric. Example custom metric Here is an example that shows how you can use metrics to track currency flowing through a site: app.post('/cart/checkout', function(req, res) { var total = computeCartTotal(req.user); newrelic.recordMetric('Cart/ChargeAmount', total); ... }); Copy View custom metrics To view custom metrics, use the data explorer to search metrics, create customizable charts, and add those charts to New Relic dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.53305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Name <em>your</em> metrics",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " Collecting too many metrics can impact the performance of <em>your</em> application and <em>your</em> New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Name <em>your</em> metrics Metric names are paths delimited by the &#x2F; character. For custom metrics use this pattern: &lt;category"
      },
      "id": "617ea46228ccbc3422800b7e"
    },
    {
      "sections": [
        "Node.js v1 custom instrumentation (legacy)",
        "Instrumenting web transactions",
        "Important",
        "Example: Instrument two transactions in socket.io",
        "Tip",
        "Instrumenting background transactions",
        "Example: Instrument within setInterval",
        "Expanding instrumentation within transactions",
        "Example: Instrument a callback",
        "Example: Instrument an async function"
      ],
      "title": "Node.js v1 custom instrumentation (legacy)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "43deee1b59363ef4a82e3d2a08e498744dc09e6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-v1-custom-instrumentation-legacy/",
      "published_at": "2021-12-05T06:22:04Z",
      "updated_at": "2021-10-23T21:22:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With custom instrumentation, you can instrument web sockets, background jobs, and unsupported databases. Custom instrumentation can also target specific sections of your code for deeper insight. Custom instrumentation is available in versions 1.10.0 or higher of the Node.js agent. To take advantage of the latest Node.js agent features, upgrade your agent. Instrumenting web transactions To instrument web transactions, such as websocket requests, create a custom transaction. Creating a custom transaction gives you the same type of visibility into that custom transaction that you would get from a transaction that the agent automatically instruments. Wrap the handler you want to instrument with createWebTransaction(). Ensure you call endTransaction() at the end of the transaction. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. Example: Instrument two transactions in socket.io This example instruments a /websocket/ping transaction and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message example is asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', nr.createWebTransaction('/websocket/ping', function (data) { socket.emit('pong') nr.endTransaction() })) socket.on('new-message', nr.createWebTransaction('/websocket/new-message', function (data) { addMessageToChat(data, function () { socket.emit('message-received') nr.endTransaction() }) })) }) Copy Tip Ensure you call endTransaction() at the end of the transaction. Instrumenting background transactions You can also use custom transactions to instrument background tasks, such as periodic jobs within your app or work that continues after a request completes. To instrument background tasks, wrap the handler you want to instrument with createBackgroundTransaction(). Ensure you call endTransaction() at the end of the transaction. Example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() setInterval(nr.createBackgroundTransaction('update:cache', function () { var newValue = someDataGenerator() redis.set('some:cache:key', newValue, function () { nr.endTransaction() // End the transaction once redis is done }) }), 30000) // Every 30s Copy Tip Ensure you call endTransaction() at the end of the transaction. Expanding instrumentation within transactions You can also use custom instrumentation to provide more visibility into web transactions that are already instrumented, or to gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument callbacks, wrap the callback with createTracer(). If you want to instrument a function that is called inside an asynchronous function, you need to wrap both the target function and its parent asynchronous function with createTracer(). Tip You must place these examples inside an already instrumented transaction. The transaction can be automatically instrumented, or via a custom transaction. Example: Instrument a callback This examples wraps a single callback: // Wrap the callback in a segment db.createObject(nr.createTracer('db:createObject', function (err, result) { // Some error handler that will end the response for us if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() })) Copy Example: Instrument an async function This example wraps both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, we would not get any data from client.query. This allows createTracer() to propagate the active transaction across those asynchronous boundaries. pg.connect(config.db_string, nr.createTracer('pg:connect', function (err, client, done) { if (util.handleError(err, '500', res)) { return done() } client.query('SELECT count(*) FROM test_count', nr.createTracer('pg:query', function (err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') })) })) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.26988,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js v1 custom <em>instrumentation</em> (legacy)",
        "sections": "Node.js v1 custom <em>instrumentation</em> (legacy)",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " for deeper insight. Custom <em>instrumentation</em> is available in versions 1.10.0 or higher of the <em>Node.js</em> <em>agent</em>. To take advantage of the latest <em>Node.js</em> <em>agent</em> features, upgrade <em>your</em> <em>agent</em>. Instrumenting web transactions To <em>instrument</em> web transactions, such as websocket requests, create a custom"
      },
      "id": "617ea462196a67866df7d93d"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.26758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js custom metrics",
        "Caution",
        "Name your metrics",
        "Important",
        "Record custom metrics",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Node.js custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "e1173330d4285da9aa1910543d9d4a6e3d11c384",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-metrics/",
      "published_at": "2021-12-05T06:21:22Z",
      "updated_at": "2021-10-31T14:12:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Record arbitrary performance data via an API call (for example, timing or computer resource data). Use the data explorer to search your custom metrics, create customizable charts, and add those charts to New Relic dashboards. Using custom metrics unifies your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Name your metrics Metric names are paths delimited by the / character. For custom metrics use this pattern: <category>/<class>/<method> Copy For custom metric names, use <class>/<method> or <category>/<name>. For example, use MyCategory/My_method). Important For versions prior to Node Agent v5, you need to prepend your metrics with Custom/. The agent will not automatically prepend custom metrics with this to prevent collision with internal metrics. Record custom metrics The public API for recording metric data consists of two methods on newrelic: recordMetric: Use to create a new custom metric. incrementMetric: Use to update the value of a custom metric. Example custom metric Here is an example that shows how you can use metrics to track currency flowing through a site: app.post('/cart/checkout', function(req, res) { var total = computeCartTotal(req.user); newrelic.recordMetric('Cart/ChargeAmount', total); ... }); Copy View custom metrics To view custom metrics, use the data explorer to search metrics, create customizable charts, and add those charts to New Relic dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.53304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Name <em>your</em> metrics",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " Collecting too many metrics can impact the performance of <em>your</em> application and <em>your</em> New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Name <em>your</em> metrics Metric names are paths delimited by the &#x2F; character. For custom metrics use this pattern: &lt;category"
      },
      "id": "617ea46228ccbc3422800b7e"
    },
    {
      "sections": [
        "Message queues",
        "Performance improvements with background tasks",
        "Queue operations",
        "View in New Relic UI",
        "Tip"
      ],
      "title": "Message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "38a3f46c9e840509297b5cd18daaf432ea3a3c11",
      "image": "https://docs.newrelic.com/static/8d6b1b9b8c8ecc25a1110677443633ff/e6c84/Screen-Shot-2017-07-12-at-1.29.28-PM.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/message-queues/",
      "published_at": "2021-12-05T06:21:23Z",
      "updated_at": "2021-10-23T21:22:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Node.js agent supports the amqplib RabbitMQ client library, giving you insight into the performance of your message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe/consume messages) as Message background tasks. Message creation via RabbitMQ also appears in transaction traces. This feature requires New Relic Node.js agent version 2.0.0 or higher. Performance improvements with background tasks One way to increase responsiveness of web applications is to delegate work to background processes. Message queues are commonly used for this inter-process communication. In the context of message queuing systems, applications typically interact with message brokers to send and receive messages. The amqplib client library allows Node applications to interface with message brokers that implement the Advanced Message Queueing Protocol (AMQP) 0.9 or higher. New Relic's Node.js agent shows messages sent and received using the RabbitMQ client library. With this visibility, you can see details including: Number of messages produced by your app Time your app spends publishing messages Time your app spends processing \"consumed\" messages APM conveniently groups and reports operations that interact with queues. By analyzing this information, you can more easily identify bottlenecks and areas for performance improvement in your message passing architecture. Queue operations Supported entry points for queue operations appear as Put (publish a message) or Take (receive a message) in APM's user interface. Queue operations Publish a message (Put in UI) Receive a message (Take in UI) RabbitMQ publish sendToQueue get consume View in New Relic UI Queue operations appear on APM's Transactions page for the selected app. The Put and Take metrics appear in the Breakdown table and are categorized as MessageBroker metrics. Here is an example: one.newrelic.com > APM > Applications > (select an app) > Transactions > (select a transaction): The transaction's Breakdown table categorizes queue operations as MessageBroker metrics and labels them as Put (publish a message) or Take (receive a message). The Transaction trace summary page may show Put and Take operations in the Slowest components section. For example: one.newrelic.com > APM > Applications > (select an app) > Summary > (select a transaction trace): In this example, the selected transaction trace's Summary shows RabbitMQ operations in the colored bar chart. The Slowest components section also lists the RabbitMQ Put and Take results. The Transaction trace page also includes a dedicated Messages tab that shows a summary of the message activity that occurred as part of the transaction. Tip You can select transaction traces from the app's Summary or Transactions pages in APM.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.26988,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "The New Relic <em>Node.js</em> <em>agent</em> supports the amqplib RabbitMQ client library, giving you insight into the performance of <em>your</em> message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe&#x2F;consume messages) as Message"
      },
      "id": "617ea436e7b9d2de47c055a9"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-metrics": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.26758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Message queues",
        "Performance improvements with background tasks",
        "Queue operations",
        "View in New Relic UI",
        "Tip"
      ],
      "title": "Message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "38a3f46c9e840509297b5cd18daaf432ea3a3c11",
      "image": "https://docs.newrelic.com/static/8d6b1b9b8c8ecc25a1110677443633ff/e6c84/Screen-Shot-2017-07-12-at-1.29.28-PM.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/message-queues/",
      "published_at": "2021-12-05T06:21:23Z",
      "updated_at": "2021-10-23T21:22:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Node.js agent supports the amqplib RabbitMQ client library, giving you insight into the performance of your message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe/consume messages) as Message background tasks. Message creation via RabbitMQ also appears in transaction traces. This feature requires New Relic Node.js agent version 2.0.0 or higher. Performance improvements with background tasks One way to increase responsiveness of web applications is to delegate work to background processes. Message queues are commonly used for this inter-process communication. In the context of message queuing systems, applications typically interact with message brokers to send and receive messages. The amqplib client library allows Node applications to interface with message brokers that implement the Advanced Message Queueing Protocol (AMQP) 0.9 or higher. New Relic's Node.js agent shows messages sent and received using the RabbitMQ client library. With this visibility, you can see details including: Number of messages produced by your app Time your app spends publishing messages Time your app spends processing \"consumed\" messages APM conveniently groups and reports operations that interact with queues. By analyzing this information, you can more easily identify bottlenecks and areas for performance improvement in your message passing architecture. Queue operations Supported entry points for queue operations appear as Put (publish a message) or Take (receive a message) in APM's user interface. Queue operations Publish a message (Put in UI) Receive a message (Take in UI) RabbitMQ publish sendToQueue get consume View in New Relic UI Queue operations appear on APM's Transactions page for the selected app. The Put and Take metrics appear in the Breakdown table and are categorized as MessageBroker metrics. Here is an example: one.newrelic.com > APM > Applications > (select an app) > Transactions > (select a transaction): The transaction's Breakdown table categorizes queue operations as MessageBroker metrics and labels them as Put (publish a message) or Take (receive a message). The Transaction trace summary page may show Put and Take operations in the Slowest components section. For example: one.newrelic.com > APM > Applications > (select an app) > Summary > (select a transaction trace): In this example, the selected transaction trace's Summary shows RabbitMQ operations in the colored bar chart. The Slowest components section also lists the RabbitMQ Put and Take results. The Transaction trace page also includes a dedicated Messages tab that shows a summary of the message activity that occurred as part of the transaction. Tip You can select transaction traces from the app's Summary or Transactions pages in APM.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.26988,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "The New Relic <em>Node.js</em> <em>agent</em> supports the amqplib RabbitMQ client library, giving you insight into the performance of <em>your</em> message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe&#x2F;consume messages) as Message"
      },
      "id": "617ea436e7b9d2de47c055a9"
    },
    {
      "sections": [
        "Node.js v1 custom instrumentation (legacy)",
        "Instrumenting web transactions",
        "Important",
        "Example: Instrument two transactions in socket.io",
        "Tip",
        "Instrumenting background transactions",
        "Example: Instrument within setInterval",
        "Expanding instrumentation within transactions",
        "Example: Instrument a callback",
        "Example: Instrument an async function"
      ],
      "title": "Node.js v1 custom instrumentation (legacy)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "43deee1b59363ef4a82e3d2a08e498744dc09e6a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-v1-custom-instrumentation-legacy/",
      "published_at": "2021-12-05T06:22:04Z",
      "updated_at": "2021-10-23T21:22:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With custom instrumentation, you can instrument web sockets, background jobs, and unsupported databases. Custom instrumentation can also target specific sections of your code for deeper insight. Custom instrumentation is available in versions 1.10.0 or higher of the Node.js agent. To take advantage of the latest Node.js agent features, upgrade your agent. Instrumenting web transactions To instrument web transactions, such as websocket requests, create a custom transaction. Creating a custom transaction gives you the same type of visibility into that custom transaction that you would get from a transaction that the agent automatically instruments. Wrap the handler you want to instrument with createWebTransaction(). Ensure you call endTransaction() at the end of the transaction. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. Example: Instrument two transactions in socket.io This example instruments a /websocket/ping transaction and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message example is asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', nr.createWebTransaction('/websocket/ping', function (data) { socket.emit('pong') nr.endTransaction() })) socket.on('new-message', nr.createWebTransaction('/websocket/new-message', function (data) { addMessageToChat(data, function () { socket.emit('message-received') nr.endTransaction() }) })) }) Copy Tip Ensure you call endTransaction() at the end of the transaction. Instrumenting background transactions You can also use custom transactions to instrument background tasks, such as periodic jobs within your app or work that continues after a request completes. To instrument background tasks, wrap the handler you want to instrument with createBackgroundTransaction(). Ensure you call endTransaction() at the end of the transaction. Example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() setInterval(nr.createBackgroundTransaction('update:cache', function () { var newValue = someDataGenerator() redis.set('some:cache:key', newValue, function () { nr.endTransaction() // End the transaction once redis is done }) }), 30000) // Every 30s Copy Tip Ensure you call endTransaction() at the end of the transaction. Expanding instrumentation within transactions You can also use custom instrumentation to provide more visibility into web transactions that are already instrumented, or to gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument callbacks, wrap the callback with createTracer(). If you want to instrument a function that is called inside an asynchronous function, you need to wrap both the target function and its parent asynchronous function with createTracer(). Tip You must place these examples inside an already instrumented transaction. The transaction can be automatically instrumented, or via a custom transaction. Example: Instrument a callback This examples wraps a single callback: // Wrap the callback in a segment db.createObject(nr.createTracer('db:createObject', function (err, result) { // Some error handler that will end the response for us if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() })) Copy Example: Instrument an async function This example wraps both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, we would not get any data from client.query. This allows createTracer() to propagate the active transaction across those asynchronous boundaries. pg.connect(config.db_string, nr.createTracer('pg:connect', function (err, client, done) { if (util.handleError(err, '500', res)) { return done() } client.query('SELECT count(*) FROM test_count', nr.createTracer('pg:query', function (err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') })) })) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.26988,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js v1 custom <em>instrumentation</em> (legacy)",
        "sections": "Node.js v1 custom <em>instrumentation</em> (legacy)",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " for deeper insight. Custom <em>instrumentation</em> is available in versions 1.10.0 or higher of the <em>Node.js</em> <em>agent</em>. To take advantage of the latest <em>Node.js</em> <em>agent</em> features, upgrade <em>your</em> <em>agent</em>. Instrumenting web transactions To <em>instrument</em> web transactions, such as websocket requests, create a custom"
      },
      "id": "617ea462196a67866df7d93d"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-v1-custom-instrumentation-legacy": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.26755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js custom metrics",
        "Caution",
        "Name your metrics",
        "Important",
        "Record custom metrics",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Node.js custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "e1173330d4285da9aa1910543d9d4a6e3d11c384",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-metrics/",
      "published_at": "2021-12-05T06:21:22Z",
      "updated_at": "2021-10-31T14:12:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Record arbitrary performance data via an API call (for example, timing or computer resource data). Use the data explorer to search your custom metrics, create customizable charts, and add those charts to New Relic dashboards. Using custom metrics unifies your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Name your metrics Metric names are paths delimited by the / character. For custom metrics use this pattern: <category>/<class>/<method> Copy For custom metric names, use <class>/<method> or <category>/<name>. For example, use MyCategory/My_method). Important For versions prior to Node Agent v5, you need to prepend your metrics with Custom/. The agent will not automatically prepend custom metrics with this to prevent collision with internal metrics. Record custom metrics The public API for recording metric data consists of two methods on newrelic: recordMetric: Use to create a new custom metric. incrementMetric: Use to update the value of a custom metric. Example custom metric Here is an example that shows how you can use metrics to track currency flowing through a site: app.post('/cart/checkout', function(req, res) { var total = computeCartTotal(req.user); newrelic.recordMetric('Cart/ChargeAmount', total); ... }); Copy View custom metrics To view custom metrics, use the data explorer to search metrics, create customizable charts, and add those charts to New Relic dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.53302,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Name <em>your</em> metrics",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " Collecting too many metrics can impact the performance of <em>your</em> application and <em>your</em> New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Name <em>your</em> metrics Metric names are paths delimited by the &#x2F; character. For custom metrics use this pattern: &lt;category"
      },
      "id": "617ea46228ccbc3422800b7e"
    },
    {
      "sections": [
        "Message queues",
        "Performance improvements with background tasks",
        "Queue operations",
        "View in New Relic UI",
        "Tip"
      ],
      "title": "Message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "38a3f46c9e840509297b5cd18daaf432ea3a3c11",
      "image": "https://docs.newrelic.com/static/8d6b1b9b8c8ecc25a1110677443633ff/e6c84/Screen-Shot-2017-07-12-at-1.29.28-PM.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/message-queues/",
      "published_at": "2021-12-05T06:21:23Z",
      "updated_at": "2021-10-23T21:22:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Node.js agent supports the amqplib RabbitMQ client library, giving you insight into the performance of your message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe/consume messages) as Message background tasks. Message creation via RabbitMQ also appears in transaction traces. This feature requires New Relic Node.js agent version 2.0.0 or higher. Performance improvements with background tasks One way to increase responsiveness of web applications is to delegate work to background processes. Message queues are commonly used for this inter-process communication. In the context of message queuing systems, applications typically interact with message brokers to send and receive messages. The amqplib client library allows Node applications to interface with message brokers that implement the Advanced Message Queueing Protocol (AMQP) 0.9 or higher. New Relic's Node.js agent shows messages sent and received using the RabbitMQ client library. With this visibility, you can see details including: Number of messages produced by your app Time your app spends publishing messages Time your app spends processing \"consumed\" messages APM conveniently groups and reports operations that interact with queues. By analyzing this information, you can more easily identify bottlenecks and areas for performance improvement in your message passing architecture. Queue operations Supported entry points for queue operations appear as Put (publish a message) or Take (receive a message) in APM's user interface. Queue operations Publish a message (Put in UI) Receive a message (Take in UI) RabbitMQ publish sendToQueue get consume View in New Relic UI Queue operations appear on APM's Transactions page for the selected app. The Put and Take metrics appear in the Breakdown table and are categorized as MessageBroker metrics. Here is an example: one.newrelic.com > APM > Applications > (select an app) > Transactions > (select a transaction): The transaction's Breakdown table categorizes queue operations as MessageBroker metrics and labels them as Put (publish a message) or Take (receive a message). The Transaction trace summary page may show Put and Take operations in the Slowest components section. For example: one.newrelic.com > APM > Applications > (select an app) > Summary > (select a transaction trace): In this example, the selected transaction trace's Summary shows RabbitMQ operations in the colored bar chart. The Slowest components section also lists the RabbitMQ Put and Take results. The Transaction trace page also includes a dedicated Messages tab that shows a summary of the message activity that occurred as part of the transaction. Tip You can select transaction traces from the app's Summary or Transactions pages in APM.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.26987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "The New Relic <em>Node.js</em> <em>agent</em> supports the amqplib RabbitMQ client library, giving you insight into the performance of <em>your</em> message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe&#x2F;consume messages) as Message"
      },
      "id": "617ea436e7b9d2de47c055a9"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-vm-measurements": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.26755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js custom metrics",
        "Caution",
        "Name your metrics",
        "Important",
        "Record custom metrics",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Node.js custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "e1173330d4285da9aa1910543d9d4a6e3d11c384",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-metrics/",
      "published_at": "2021-12-05T06:21:22Z",
      "updated_at": "2021-10-31T14:12:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Record arbitrary performance data via an API call (for example, timing or computer resource data). Use the data explorer to search your custom metrics, create customizable charts, and add those charts to New Relic dashboards. Using custom metrics unifies your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Name your metrics Metric names are paths delimited by the / character. For custom metrics use this pattern: <category>/<class>/<method> Copy For custom metric names, use <class>/<method> or <category>/<name>. For example, use MyCategory/My_method). Important For versions prior to Node Agent v5, you need to prepend your metrics with Custom/. The agent will not automatically prepend custom metrics with this to prevent collision with internal metrics. Record custom metrics The public API for recording metric data consists of two methods on newrelic: recordMetric: Use to create a new custom metric. incrementMetric: Use to update the value of a custom metric. Example custom metric Here is an example that shows how you can use metrics to track currency flowing through a site: app.post('/cart/checkout', function(req, res) { var total = computeCartTotal(req.user); newrelic.recordMetric('Cart/ChargeAmount', total); ... }); Copy View custom metrics To view custom metrics, use the data explorer to search metrics, create customizable charts, and add those charts to New Relic dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.53302,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Name <em>your</em> metrics",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " Collecting too many metrics can impact the performance of <em>your</em> application and <em>your</em> New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Name <em>your</em> metrics Metric names are paths delimited by the &#x2F; character. For custom metrics use this pattern: &lt;category"
      },
      "id": "617ea46228ccbc3422800b7e"
    },
    {
      "sections": [
        "Message queues",
        "Performance improvements with background tasks",
        "Queue operations",
        "View in New Relic UI",
        "Tip"
      ],
      "title": "Message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "38a3f46c9e840509297b5cd18daaf432ea3a3c11",
      "image": "https://docs.newrelic.com/static/8d6b1b9b8c8ecc25a1110677443633ff/e6c84/Screen-Shot-2017-07-12-at-1.29.28-PM.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/message-queues/",
      "published_at": "2021-12-05T06:21:23Z",
      "updated_at": "2021-10-23T21:22:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Node.js agent supports the amqplib RabbitMQ client library, giving you insight into the performance of your message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe/consume messages) as Message background tasks. Message creation via RabbitMQ also appears in transaction traces. This feature requires New Relic Node.js agent version 2.0.0 or higher. Performance improvements with background tasks One way to increase responsiveness of web applications is to delegate work to background processes. Message queues are commonly used for this inter-process communication. In the context of message queuing systems, applications typically interact with message brokers to send and receive messages. The amqplib client library allows Node applications to interface with message brokers that implement the Advanced Message Queueing Protocol (AMQP) 0.9 or higher. New Relic's Node.js agent shows messages sent and received using the RabbitMQ client library. With this visibility, you can see details including: Number of messages produced by your app Time your app spends publishing messages Time your app spends processing \"consumed\" messages APM conveniently groups and reports operations that interact with queues. By analyzing this information, you can more easily identify bottlenecks and areas for performance improvement in your message passing architecture. Queue operations Supported entry points for queue operations appear as Put (publish a message) or Take (receive a message) in APM's user interface. Queue operations Publish a message (Put in UI) Receive a message (Take in UI) RabbitMQ publish sendToQueue get consume View in New Relic UI Queue operations appear on APM's Transactions page for the selected app. The Put and Take metrics appear in the Breakdown table and are categorized as MessageBroker metrics. Here is an example: one.newrelic.com > APM > Applications > (select an app) > Transactions > (select a transaction): The transaction's Breakdown table categorizes queue operations as MessageBroker metrics and labels them as Put (publish a message) or Take (receive a message). The Transaction trace summary page may show Put and Take operations in the Slowest components section. For example: one.newrelic.com > APM > Applications > (select an app) > Summary > (select a transaction trace): In this example, the selected transaction trace's Summary shows RabbitMQ operations in the colored bar chart. The Slowest components section also lists the RabbitMQ Put and Take results. The Transaction trace page also includes a dedicated Messages tab that shows a summary of the message activity that occurred as part of the transaction. Tip You can select transaction traces from the app's Summary or Transactions pages in APM.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.26987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "The New Relic <em>Node.js</em> <em>agent</em> supports the amqplib RabbitMQ client library, giving you insight into the performance of <em>your</em> message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe&#x2F;consume messages) as Message"
      },
      "id": "617ea436e7b9d2de47c055a9"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.26753,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js custom metrics",
        "Caution",
        "Name your metrics",
        "Important",
        "Record custom metrics",
        "Example custom metric",
        "View custom metrics"
      ],
      "title": "Node.js custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "e1173330d4285da9aa1910543d9d4a6e3d11c384",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-metrics/",
      "published_at": "2021-12-05T06:21:22Z",
      "updated_at": "2021-10-31T14:12:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Record arbitrary performance data via an API call (for example, timing or computer resource data). Use the data explorer to search your custom metrics, create customizable charts, and add those charts to New Relic dashboards. Using custom metrics unifies your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Name your metrics Metric names are paths delimited by the / character. For custom metrics use this pattern: <category>/<class>/<method> Copy For custom metric names, use <class>/<method> or <category>/<name>. For example, use MyCategory/My_method). Important For versions prior to Node Agent v5, you need to prepend your metrics with Custom/. The agent will not automatically prepend custom metrics with this to prevent collision with internal metrics. Record custom metrics The public API for recording metric data consists of two methods on newrelic: recordMetric: Use to create a new custom metric. incrementMetric: Use to update the value of a custom metric. Example custom metric Here is an example that shows how you can use metrics to track currency flowing through a site: app.post('/cart/checkout', function(req, res) { var total = computeCartTotal(req.user); newrelic.recordMetric('Cart/ChargeAmount', total); ... }); Copy View custom metrics To view custom metrics, use the data explorer to search metrics, create customizable charts, and add those charts to New Relic dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.53302,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Name <em>your</em> metrics",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " Collecting too many metrics can impact the performance of <em>your</em> application and <em>your</em> New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Name <em>your</em> metrics Metric names are paths delimited by the &#x2F; character. For custom metrics use this pattern: &lt;category"
      },
      "id": "617ea46228ccbc3422800b7e"
    },
    {
      "sections": [
        "Message queues",
        "Performance improvements with background tasks",
        "Queue operations",
        "View in New Relic UI",
        "Tip"
      ],
      "title": "Message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "38a3f46c9e840509297b5cd18daaf432ea3a3c11",
      "image": "https://docs.newrelic.com/static/8d6b1b9b8c8ecc25a1110677443633ff/e6c84/Screen-Shot-2017-07-12-at-1.29.28-PM.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/extend-your-instrumentation/message-queues/",
      "published_at": "2021-12-05T06:21:23Z",
      "updated_at": "2021-10-23T21:22:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Node.js agent supports the amqplib RabbitMQ client library, giving you insight into the performance of your message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe/consume messages) as Message background tasks. Message creation via RabbitMQ also appears in transaction traces. This feature requires New Relic Node.js agent version 2.0.0 or higher. Performance improvements with background tasks One way to increase responsiveness of web applications is to delegate work to background processes. Message queues are commonly used for this inter-process communication. In the context of message queuing systems, applications typically interact with message brokers to send and receive messages. The amqplib client library allows Node applications to interface with message brokers that implement the Advanced Message Queueing Protocol (AMQP) 0.9 or higher. New Relic's Node.js agent shows messages sent and received using the RabbitMQ client library. With this visibility, you can see details including: Number of messages produced by your app Time your app spends publishing messages Time your app spends processing \"consumed\" messages APM conveniently groups and reports operations that interact with queues. By analyzing this information, you can more easily identify bottlenecks and areas for performance improvement in your message passing architecture. Queue operations Supported entry points for queue operations appear as Put (publish a message) or Take (receive a message) in APM's user interface. Queue operations Publish a message (Put in UI) Receive a message (Take in UI) RabbitMQ publish sendToQueue get consume View in New Relic UI Queue operations appear on APM's Transactions page for the selected app. The Put and Take metrics appear in the Breakdown table and are categorized as MessageBroker metrics. Here is an example: one.newrelic.com > APM > Applications > (select an app) > Transactions > (select a transaction): The transaction's Breakdown table categorizes queue operations as MessageBroker metrics and labels them as Put (publish a message) or Take (receive a message). The Transaction trace summary page may show Put and Take operations in the Slowest components section. For example: one.newrelic.com > APM > Applications > (select an app) > Summary > (select a transaction trace): In this example, the selected transaction trace's Summary shows RabbitMQ operations in the colored bar chart. The Slowest components section also lists the RabbitMQ Put and Take results. The Transaction trace page also includes a dedicated Messages tab that shows a summary of the message activity that occurred as part of the transaction. Tip You can select transaction traces from the app's Summary or Transactions pages in APM.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.26987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "The New Relic <em>Node.js</em> <em>agent</em> supports the amqplib RabbitMQ client library, giving you insight into the performance of <em>your</em> message processing, for both incoming and outgoing messages. The APM UI will show transactions initiated via RabbitMQ message receipt (subscribe&#x2F;consume messages) as Message"
      },
      "id": "617ea436e7b9d2de47c055a9"
    }
  ],
  "/docs/apm/agents/nodejs-agent/getting-started/apm-agent-security-nodejs": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.967255,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Pinpoint and solve issues down to the line of code with <em>Node.js</em> monitoring from New Relic. With features like service maps and error analytics, our <em>Node.js</em> <em>agent</em> helps you <em>get</em> the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-05T09:30:38Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.04614,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Install the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2021-12-05T06:57:09Z",
      "updated_at": "2021-12-05T06:57:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.160194,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> requirements and supported frameworks",
        "sections": "Ruby <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s Ruby <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The Ruby <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    }
  ],
  "/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.96724,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Pinpoint and solve issues down to the line of code with <em>Node.js</em> monitoring from New Relic. With features like service maps and error analytics, our <em>Node.js</em> <em>agent</em> helps you <em>get</em> the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-05T09:30:38Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.04604,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Install the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2021-12-05T06:57:09Z",
      "updated_at": "2021-12-05T06:57:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.1601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> requirements and supported frameworks",
        "sections": "Ruby <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s Ruby <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The Ruby <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    }
  ],
  "/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-05T09:30:38Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.04604,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Install the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2021-12-05T06:57:09Z",
      "updated_at": "2021-12-05T06:57:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.1601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> requirements and supported frameworks",
        "sections": "Ruby <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s Ruby <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The Ruby <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.992805,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Install the <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the PHP <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment": [
    {
      "sections": [
        "Node.js agent on Microsoft Azure Web Apps",
        "What you need",
        "Installing the Node.js agent",
        "Adding app settings in Azure",
        "Optional: Adding app settings with the CLI",
        "Using environment variables"
      ],
      "title": "Node.js agent on Microsoft Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "5b430639304bd8a0df1214dcd5f26bcd25993b1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/hosting-services/nodejs-agent-microsoft-azure/",
      "published_at": "2021-12-05T06:49:53Z",
      "updated_at": "2021-10-31T14:15:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a hosting service with New Relic's Node.js agent. What you need In addition to the Compatibility and requirements for the Node.js agent, this tutorial assumes you have a working installation of Node.js and the Windows Azure SDK for Node.js for your platform: Install the Azure SDK for Node.js. Ensure Git is installed. Installing the Node.js agent To add the New Relic Node.js agent to your Azure application: In your app's root, verify that there is a package.json file. If there is not, create one via the command line: touch package.json Copy Add the following to your package.json file: { \"name\": \"node\", \"version\": \"0.0.1\", \"dependencies\" : { \"newrelic\" : \"*\" }, \"engine\": { \"node\": \"10.18\" } } Copy Add require('newrelic'); to the top of the server.js file. For example: require('newrelic'); var http = require('http') var port = process.env.PORT || 1337; http.createServer(function(req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello New Relic Node.js agent!\\n'); }).listen(port); Copy Adding app settings in Azure After installation, you must configure your app in Azure Web Apps: Sign in to portal.azure.com. Select App Services > (select a Node.js app) > Configure. Add the following to the app settings: new_relic_app_name: Your Windows Azure website name new_relic_license_key: Your New Relic license key Save your settings. Restart your Node.js app. Generate some traffic to your app and wait a few minutes. After waiting, see your data by going to one.newrelic.com > APM > (select your app). Optional: Adding app settings with the CLI Optional: Here is an example of how to add the app settings by using the CLI (Node SDK): azure account download \"YOUR_SUBSCRIPTION_NAME\" azure account import \"PATH_TO_PUBLISH_SETTINGS_FILE\" azure site config add \"new_relic_app_name=REPLACE_WITH_YOUR_APP_NAME\" azure site config add \"new_relic_license_key=REPLACE_WITH_YOUR_LICENSE_KEY\" azure site restart AZURE_WEB_APP_NAME Copy Using environment variables If your agent runs in PaaS environments such as Heroku or Azure Web Apps, all of the configuration variables in newrelic.js have counterparts that can be set as environment variables. You can freely mix and match variables in the configuration file. Environment variables override your configuration file settings. For example, as a convenience to Azure users, the agent will use APP_POOL_ID as the application name (NEW_RELIC_APP_NAME) if it's set, so you can use the name you chose without setting it twice. For more information, see Configuring Node.js with environment variables.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.49144,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "sections": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a <em>hosting</em> service with New Relic&#x27;s <em>Node.js</em> <em>agent</em>. What you need In addition to the Compatibility and requirements for the <em>Node.js</em> <em>agent</em>, this tutorial assumes you have a working installation of <em>Node.js</em>"
      },
      "id": "617ea50764441f43fffbd2a5"
    },
    {
      "sections": [
        "Node.js agent and Heroku",
        "Install the agent add-on",
        "Troubleshoot your installation",
        "Customize your configuration",
        "Upgrade from an existing New Relic installation"
      ],
      "title": "Node.js agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "47ab3d157a42abaaa59f5c48f3f7a9b35c3a05c0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/hosting-services/nodejs-agent-heroku/",
      "published_at": "2021-12-05T06:49:53Z",
      "updated_at": "2021-10-31T14:15:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Node.js. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a hosting service with New Relic's Node.js agent. Install the agent add-on After deploying your Node.js app on Heroku, install the New Relic agent. Installing the add-on automatically creates a private New Relic account and configures access for Heroku servers. To install the New Relic add-on through the Heroku website's Add-on page for New Relic, you must be logged in to Heroku. From Heroku's Add-on page for New Relic, select the appropriate subscription plan. Then run this toolbelt command: heroku addons:create newrelic:$planlevel Copy From Select an app, select your New Relic app. Use this toolbelt command to give your app a descriptive name: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy If you are using environment variables instead of your newrelic.js config file settings to customize your Node.js agent configuration, use this toolbelt command: heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy Verify your New Relic app name, license key, and log setting: heroku config Copy Install the Node.js agent and save to your npm dependencies. npm install newrelic --save Copy To ensure that the newrelic package is properly included in your package.json file when you push to Heroku, install the New Relic Node.js agent package on your local system. Include New Relic on the first line of your app's main module: require ('newrelic'); Copy Run the following commands: git add . && git commit -m \"Add New Relic\" git push heroku master && heroku logs --tail Copy Restart your dyno. Generate some traffic to your app. New Relic will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Troubleshoot your installation If no data appears within a few minutes after you complete the installation procedures, follow the Node.js agent troubleshooting procedures. Customize your configuration You can customize the New Relic newrelic.js config file for your Node.js agent. You can also use New Relic's Node.js agent environment variables in the Heroku environment to override your config file values. Here is an example of using the Heroku command line to set environment variables instead of using your newrelic.js config file. $ heroku config:set NEW_RELIC_LICENSE_KEY=your license key $ heroku config:set NEW_RELIC_APP_NAME=your production app name $ heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy To confirm your settings from the command line, use: $ heroku config Copy Upgrade from an existing New Relic installation To upgrade your Node.js agent version if New Relic is already installed, use this toolbelt command: npm install newrelic --save Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.49144,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> and Heroku",
        "sections": "Node.js <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for <em>hosting</em> web applications in various <em>agent</em> languages, including <em>Node.js</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a <em>hosting</em> service with New"
      },
      "id": "617ea50728ccbc53447fff34"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-05T06:31:04Z",
      "updated_at": "2021-11-26T00:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.03577,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " the <em>Node.js</em> <em>agent</em> variables in the order they typically appear in the process_<em>host</em>: { section of your app&#x27;s newrelic.js configuration file. These options control behavior regarding the <em>host</em> display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    }
  ],
  "/docs/apm/agents/nodejs-agent/hosting-services/nodejs-agent-heroku": [
    {
      "sections": [
        "Node.js agent on Microsoft Azure Web Apps",
        "What you need",
        "Installing the Node.js agent",
        "Adding app settings in Azure",
        "Optional: Adding app settings with the CLI",
        "Using environment variables"
      ],
      "title": "Node.js agent on Microsoft Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "5b430639304bd8a0df1214dcd5f26bcd25993b1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/hosting-services/nodejs-agent-microsoft-azure/",
      "published_at": "2021-12-05T06:49:53Z",
      "updated_at": "2021-10-31T14:15:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a hosting service with New Relic's Node.js agent. What you need In addition to the Compatibility and requirements for the Node.js agent, this tutorial assumes you have a working installation of Node.js and the Windows Azure SDK for Node.js for your platform: Install the Azure SDK for Node.js. Ensure Git is installed. Installing the Node.js agent To add the New Relic Node.js agent to your Azure application: In your app's root, verify that there is a package.json file. If there is not, create one via the command line: touch package.json Copy Add the following to your package.json file: { \"name\": \"node\", \"version\": \"0.0.1\", \"dependencies\" : { \"newrelic\" : \"*\" }, \"engine\": { \"node\": \"10.18\" } } Copy Add require('newrelic'); to the top of the server.js file. For example: require('newrelic'); var http = require('http') var port = process.env.PORT || 1337; http.createServer(function(req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello New Relic Node.js agent!\\n'); }).listen(port); Copy Adding app settings in Azure After installation, you must configure your app in Azure Web Apps: Sign in to portal.azure.com. Select App Services > (select a Node.js app) > Configure. Add the following to the app settings: new_relic_app_name: Your Windows Azure website name new_relic_license_key: Your New Relic license key Save your settings. Restart your Node.js app. Generate some traffic to your app and wait a few minutes. After waiting, see your data by going to one.newrelic.com > APM > (select your app). Optional: Adding app settings with the CLI Optional: Here is an example of how to add the app settings by using the CLI (Node SDK): azure account download \"YOUR_SUBSCRIPTION_NAME\" azure account import \"PATH_TO_PUBLISH_SETTINGS_FILE\" azure site config add \"new_relic_app_name=REPLACE_WITH_YOUR_APP_NAME\" azure site config add \"new_relic_license_key=REPLACE_WITH_YOUR_LICENSE_KEY\" azure site restart AZURE_WEB_APP_NAME Copy Using environment variables If your agent runs in PaaS environments such as Heroku or Azure Web Apps, all of the configuration variables in newrelic.js have counterparts that can be set as environment variables. You can freely mix and match variables in the configuration file. Environment variables override your configuration file settings. For example, as a convenience to Azure users, the agent will use APP_POOL_ID as the application name (NEW_RELIC_APP_NAME) if it's set, so you can use the name you chose without setting it twice. For more information, see Configuring Node.js with environment variables.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.49144,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "sections": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a <em>hosting</em> service with New Relic&#x27;s <em>Node.js</em> <em>agent</em>. What you need In addition to the Compatibility and requirements for the <em>Node.js</em> <em>agent</em>, this tutorial assumes you have a working installation of <em>Node.js</em>"
      },
      "id": "617ea50764441f43fffbd2a5"
    },
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "51371bb5a622be62a82119649be2b915e88a2052",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-12-05T06:49:14Z",
      "updated_at": "2021-10-23T21:44:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.2972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "617ea50828ccbc73cc7fff08"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-05T06:31:04Z",
      "updated_at": "2021-11-26T00:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.03577,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " the <em>Node.js</em> <em>agent</em> variables in the order they typically appear in the process_<em>host</em>: { section of your app&#x27;s newrelic.js configuration file. These options control behavior regarding the <em>host</em> display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    }
  ],
  "/docs/apm/agents/nodejs-agent/hosting-services/nodejs-agent-microsoft-azure": [
    {
      "sections": [
        "Node.js agent and Heroku",
        "Install the agent add-on",
        "Troubleshoot your installation",
        "Customize your configuration",
        "Upgrade from an existing New Relic installation"
      ],
      "title": "Node.js agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "47ab3d157a42abaaa59f5c48f3f7a9b35c3a05c0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/hosting-services/nodejs-agent-heroku/",
      "published_at": "2021-12-05T06:49:53Z",
      "updated_at": "2021-10-31T14:15:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Node.js. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a hosting service with New Relic's Node.js agent. Install the agent add-on After deploying your Node.js app on Heroku, install the New Relic agent. Installing the add-on automatically creates a private New Relic account and configures access for Heroku servers. To install the New Relic add-on through the Heroku website's Add-on page for New Relic, you must be logged in to Heroku. From Heroku's Add-on page for New Relic, select the appropriate subscription plan. Then run this toolbelt command: heroku addons:create newrelic:$planlevel Copy From Select an app, select your New Relic app. Use this toolbelt command to give your app a descriptive name: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy If you are using environment variables instead of your newrelic.js config file settings to customize your Node.js agent configuration, use this toolbelt command: heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy Verify your New Relic app name, license key, and log setting: heroku config Copy Install the Node.js agent and save to your npm dependencies. npm install newrelic --save Copy To ensure that the newrelic package is properly included in your package.json file when you push to Heroku, install the New Relic Node.js agent package on your local system. Include New Relic on the first line of your app's main module: require ('newrelic'); Copy Run the following commands: git add . && git commit -m \"Add New Relic\" git push heroku master && heroku logs --tail Copy Restart your dyno. Generate some traffic to your app. New Relic will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Troubleshoot your installation If no data appears within a few minutes after you complete the installation procedures, follow the Node.js agent troubleshooting procedures. Customize your configuration You can customize the New Relic newrelic.js config file for your Node.js agent. You can also use New Relic's Node.js agent environment variables in the Heroku environment to override your config file values. Here is an example of using the Heroku command line to set environment variables instead of using your newrelic.js config file. $ heroku config:set NEW_RELIC_LICENSE_KEY=your license key $ heroku config:set NEW_RELIC_APP_NAME=your production app name $ heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy To confirm your settings from the command line, use: $ heroku config Copy Upgrade from an existing New Relic installation To upgrade your Node.js agent version if New Relic is already installed, use this toolbelt command: npm install newrelic --save Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.49142,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> and Heroku",
        "sections": "Node.js <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for <em>hosting</em> web applications in various <em>agent</em> languages, including <em>Node.js</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a <em>hosting</em> service with New"
      },
      "id": "617ea50728ccbc53447fff34"
    },
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "51371bb5a622be62a82119649be2b915e88a2052",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-12-05T06:49:14Z",
      "updated_at": "2021-10-23T21:44:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.2972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "617ea50828ccbc73cc7fff08"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-05T06:31:04Z",
      "updated_at": "2021-11-26T00:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.03574,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " the <em>Node.js</em> <em>agent</em> variables in the order they typically appear in the process_<em>host</em>: { section of your app&#x27;s newrelic.js configuration file. These options control behavior regarding the <em>host</em> display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    }
  ],
  "/docs/apm/agents/nodejs-agent/index": [
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-05T06:31:04Z",
      "updated_at": "2021-11-26T00:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.03574,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "You can tailor the <em>Node.js</em> <em>agent</em> to your app&#x27;s requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the <em>Node.js</em> <em>agent</em> API. Get started You&#x27;ll"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    },
    {
      "sections": [
        "Guide to using the Node.js agent API",
        "Requirements",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "Instrument calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser agent",
        "Extend custom instrumentation"
      ],
      "title": "Guide to using the Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "e596220fdf37db967eed78335de47bca653cbde9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/api-guides/guide-using-nodejs-agent-api/",
      "published_at": "2021-12-05T06:19:56Z",
      "updated_at": "2021-11-25T21:00:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent API allows you to extend the agent's standard functionality. You can use this API to: Create custom transaction parameters Report custom errors and metrics You can also use the API for custom instrumentation. For supported frameworks, the agent instruments most activity automatically. Custom instrumentation lets you extend that monitoring to frameworks without default instrumentation. Other resources: The Node.js agent API documentation on GitHub has more detail and practical tutorials. You can also adjust the Node.js agent's default behavior with configuration settings. To see all available New Relic APIs, see Intro to APIs. Requirements To use the Node.js agent API, make sure you have the latest Node.js agent release. In addition, see: Node.js agent API requirements Getting started procedures on GitHub Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Start timing a method New Relic is not instrumenting automatically Create a new transaction. See newrelic.startWebTransaction(). Stop timing a method after its work is completed Use either of these options: Return a promise from the callback handed to newrelic.startWebTransaction. Call end on a handle returned from newrelic.getTransaction. Prevent a transaction from reporting to New Relic Ignore the transaction using any of these options: See Rules for ignoring requests. Call ignore() on a handle returned from newrelic.getTransaction. Time specific methods using segments If a transaction is already visible in New Relic, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. Use this method when you want to instrument a method within an existing transaction: If you want to... Do this... Time a particular method See newrelic.startSegment(). For more information about timing, see the instrumentation tutorial on GitHub. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in New Relic, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them . Use these methods when you want to change how New Relic instruments a transaction that's already visible in New Relic: If you want to... Do this... Change the name of a transaction See newrelic.setTransactionName and rules.name. Add metadata (such as your customer’s account name or subscription level) to your transactions Use custom attributes. (Custom attribute collection is enabled by default in the Node.js agent.) See newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). Create a new transaction for background work See newrelic.startBackgroundTransaction(). Create a new web transaction Use newrelic.startWebTransaction(). Prevent a transaction from affecting your Apdex score See Rules for naming and ignoring requests, including the ignoring rules example. Record other performance data, such as timing or computer resource data Use the custom metrics API. See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: newrelic.getTraceMetadata newrelic.getLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks and supported Node.js versions, New Relic's Node.js agent usually correctly instruments async work. However, if your app uses another framework, or if the default async instrumentation is inaccurate, you can explicitly track async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting See newrelic.startSegment. Trace an async method that New Relic is not instrumenting See newrelic.startSegment. Trace a transaction that got lost See newrelic.startSegment. You can also create your own custom instrumentation for libraries that are losing your transactions. Trace a lost transaction state A common issue is the loss of transaction state while using uninstrumented libraries. For more information, see the transaction preservation tutorial on GitHub. Instrument calls to external services Once the request naming API loads, New Relic's Node.js agent can automatically identify external service calls. You can also use these methods to collect data about your app's connections to other apps or databases: If you want to... Do this... Time a call to an external resource (such as an external service, database server, or message queue) Use any of these as appropriate: Custom instrumentation API Message queues Also see the tutorials on GitHub for datastore shims and message shims. Connect activity to another app instrumented by a New Relic agent Use cross application tracing. Collect or ignore errors Usually the agent detects errors automatically. However, you can manually mark an error with the agent. You can also mark errors as ignored. If you want to... Do this... Report an error the agent does not report automatically See newrelic.noticeError(). Send custom event and metric data from your app New Relic includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in New Relic Create a custom event. See newrelic.recordCustomEvent(). Tag your events with metadata to filter and facet them Add custom attributes if needed. (Custom attribute collection is enabled by default in the Node.js agent.) See newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). Report custom performance data Create a custom metric. See newrelic.recordMetric() and newrelic.incrementMetric(). To view the data, use the data explorer. Control the browser agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add browser apps to New Relic. You can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the Node.js agent. Extend custom instrumentation The newrelic.instrument() provides additional flexibility for custom instrumentation. For more information, including tutorials and examples, see the shims documentation on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.694534,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the Node.js <em>agent</em> API",
        "sections": "Guide to using the Node.js <em>agent</em> API",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> API allows you to extend the <em>agent</em>&#x27;s standard functionality. You can use this API to: Create custom transaction parameters Report custom errors and metrics You can also use the API for custom instrumentation. For supported frameworks, the <em>agent</em> instruments most activity"
      },
      "id": "617ea409196a67a5e7f7dd68"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.49512,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the Node.js <em>agent</em>",
        "sections": "Install the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "To complete a basic <em>Node.js</em> <em>agent</em> installation, you can use our guided installation for an automated install, (choose EU if you&#x27;re in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don&#x27;t already have one. (It&#x27;s free, forever!) Get an account"
      },
      "id": "617ea532e7b9d296b8c05c6d"
    }
  ],
  "/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker": [
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-05T06:31:04Z",
      "updated_at": "2021-11-26T00:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 235.89645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side <em>configuration</em>. The <em>Node.js</em> <em>agent</em>"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 234.52568,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "To complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>, you can use our guided <em>installation</em> for an automated install, (choose EU if you&#x27;re in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don&#x27;t already have one. (It&#x27;s free, forever!) Get an account"
      },
      "id": "617ea532e7b9d296b8c05c6d"
    },
    {
      "sections": [
        "Uninstall the Node.js agent",
        "Tip"
      ],
      "title": "Uninstall the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "cf80feeef6b9b3115ef617cfa58eed160b87fc89",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-10-31T14:17:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Node.js agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall the New Relic Node.js agent: Remove require('newrelic'); as the first line of the app's main module. Remove the npm package with npm uninstall newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining Node.js. Tip You may also want to remove your app from New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.31485,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the Node.js <em>agent</em>",
        "sections": "Uninstall the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Read on to learn how to uninstall the New Relic <em>Node.js</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall the New Relic <em>Node.js</em> <em>agent</em>: Remove require(&#x27;newrelic&#x27;); as the first line of the app&#x27;s main module. Remove the npm package with npm uninstall"
      },
      "id": "617ea562e7b9d2251ec03a82"
    }
  ],
  "/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-05T06:31:04Z",
      "updated_at": "2021-11-26T00:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 235.89645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side <em>configuration</em>. The <em>Node.js</em> <em>agent</em>"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    },
    {
      "sections": [
        "Uninstall the Node.js agent",
        "Tip"
      ],
      "title": "Uninstall the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "cf80feeef6b9b3115ef617cfa58eed160b87fc89",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-10-31T14:17:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Node.js agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall the New Relic Node.js agent: Remove require('newrelic'); as the first line of the app's main module. Remove the npm package with npm uninstall newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining Node.js. Tip You may also want to remove your app from New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.31485,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the Node.js <em>agent</em>",
        "sections": "Uninstall the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Read on to learn how to uninstall the New Relic <em>Node.js</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall the New Relic <em>Node.js</em> <em>agent</em>: Remove require(&#x27;newrelic&#x27;); as the first line of the app&#x27;s main module. Remove the npm package with npm uninstall"
      },
      "id": "617ea562e7b9d2251ec03a82"
    },
    {
      "sections": [
        "Update the Node.js agent",
        "Upgrade to Node.js agent version 8",
        "Node version support",
        "Tip",
        "Upgrade to Node.js agent version 7",
        "Upgrade to Node.js agent version 6",
        "Upgrade to Node.js agent version 5",
        "Feature flags as of v5",
        "Upgrade to Node.js agent version 4",
        "Upgrade https-proxy-agent from v0 to v2",
        "Upgrade to Node.js agent version 3",
        "Major changes with Node.js v3 agent",
        "Feature flags as of v3",
        "Upgrade to Node.js agent version 2",
        "Major changes with Node.js v2 agent",
        "Updated configuration options as of v2",
        "Deprecated API methods as of v2",
        "newrelic.createWebTransaction()",
        "newrelic.createBackgroundTransaction()",
        "newrelic.addCustomParameter()",
        "newrelic.addCustomParameters()",
        "New v2 agent API methods",
        "newrelic.getTransaction()",
        "newrelic.startWebTransaction()newrelic.startBackgroundTransaction()",
        "newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages()",
        "newrelic.addCustomAttribute()",
        "newrelic.addCustomAttributes()",
        "Node version support for v2",
        "npm version support as of v2",
        "Feature flags as of v2",
        "Framework minimum versions as of v2"
      ],
      "title": "Update the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "db881c41e9f89ad40c06e74b8de651bd83e99161",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/update-nodejs-agent/",
      "published_at": "2021-12-05T06:34:06Z",
      "updated_at": "2021-10-23T21:42:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your Node.js agent to the latest version. For additional information about specific agent updates, refer to the Node.js agent release notes. The release notes include a download link when applicable, plus instructions to download and install the latest version. If the newrelic module is listed in your package.json, run npm install. If you want to target just the newrelic module, run npm update newrelic. Recommendation: Test your updated version before moving it into production. If you have problems, follow the Node.js agent troubleshooting procedures. Upgrade to Node.js agent version 8 Before upgrading to Node.js version 8, review this information for major changes. Major changes with Node.js agent v8 Comments Added official parity support for Node 16. BREAKING: Dropped Node v10.x support. For further information see our support policy. BREAKING: Removed serverless_mode as a feature flag. The standard serverless_mode configuration still exists. BREAKING: The agent no-longer includes the New Relic certificate bundle automatically when using the 'certificates' configuration (commonly with proxies). If you find this breaking your current environment, you may leverage a feature-flag to temporarily restore this functionality. Example configuration: feature_flag: { certificate_bundle: true }. In this case, we recommend getting a certificate bundle for your environment such as the one from Mozilla. The New Relic bundle and feature flag will be fully removed in next major release. Defaulted config.feature_flags.certificate_bundle to false. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v4.0.1 @newrelic/koa v6.0.1 @newrelic/native-metrics v7.0.1 @newrelic/superagent v5.0.1 @newrelic/test-utilities v6.0.0 Node version support Node v12 is the earliest version supported by the New Relic Node.js v8 agent. Node 10 and 11 are not supported by v8. Customers running Node 11 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v8 agent's new features. Remain on New Relic Node.js v7 agent without the ability to use new features only available with update agent versions. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 12. Upgrade to Node.js agent version 7 Before upgrading to Node.js version 7, review this information for major changes. Major changes with Node.js agent v7 Comments BREAKING Removed deprecated httpResponseCode, response.status and httpResponseMessage http response attributes v6.4.2-v6.14.0: Starting in agent v6.4.2, these attributes were marked as deprecated but left in to give a transition period for the new attributes. v7: When http response attribute reporting is enabled, http.statusCode and http.statusText will be reported. BREAKING Removed deprecated setIgnoreTransaction API method v5 - v6: Starting in agent v5.0.0, this method was marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API method transactionHandle.ignore(). BREAKING Removed the api.custom_parameters_enabled configuration item and associated environment variable NEW_RELIC_API_CUSTOM_PARAMETERS. Applications must use the configuration api.custom_attributes_enabled or the associated environment variable NEW_RELIC_API_CUSTOM_ATTRIBUTES to enable newrelic.addCustomAttribute and newrelic.addCustomAttributes. BREAKING Removed deprecated Distributed Tracing API methods, createDistributedTracePayload() and acceptDistributedTracePayload() v6.4.0-v6.14.0: Starting in agent v6.4.0, these method were marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API methods transactionHandle.insertDistributedTraceHeaders(headers) and transactionHandle.acceptDistributedTraceHeaders(transportType, headers) . With these methods, the Node agent will now accept W3C's traceparent and tracestate headers when calling transactionHandle.acceptDistributedTraceHeaders(headers) and include the W3C headers along with the New Relic distributed tracing header when calling transactionHandle.insertDistributedTraceHeaders(headers), unless the New Relic trace header format is disabled using distributed_tracing.exclude_newrelic_header:true. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v3.0.0 @newrelic/koa v5.0.0 @newrelic/native-metrics v6.0.0 @newrelic/superagent v4.0.0 @newrelic/test-utilities v5.0.0 Node version support Node v10 is the earliest version supported by the New Relic Node.js v7 agent. Node 8 and 9 are not supported by v7. Customers running Node 9 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v7 agent's new features. Remain on New Relic Node.js v6 agent without the ability to use new features only available with update agent versions. Node 10 does not receive updates. Upgrade to a newer version of Node as soon as possible. Support for Node 10 has been discontinued with the New Relic Node.js agent v8. Upgrade to Node.js agent version 6 Before upgrading to Node.js agent version 6, review this information for major changes. Major changes with Node.js agent v6 Comments Upgraded official Koa framework instrumentation module to v3.0.0 v6: Added support for @koa/router up to v8.0.2. @koa/router v8.0.3 and greater are currently unsupported. v6: Added support for Node v12 and removed support for Node v6, 7, and 9. The minimum supported version is Node v8. Also see New Relic's Koa Release Notes on Github.. Removed deprecated max_samples_per_minute configuration parameter, which is replaced by max_samples_stored behavior v1 - v5: max_samples_per_minute defined the maximum number of events the agent collects per minute. If your application previously used max_samples_per_minute as an upper bound, you may need to lower the threshold to a valid maximum to avoid data being dropped on the server. We recommend less than 10k. v5: In agent v5 and lower, max_samples_stored defined the maximum number of events the agent stores if it's unable to communicate with the New Relic collector. v6: The new behavior of max_samples_stored defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. This usage of the configuration is consistent with the other APM agents. Troubleshooting tips: If you're missing event data, increase the value of max_samples_stored or revert to the default value. The value of max_samples_stored should not be over 10,000. Node version support Node 8 is the earliest version supported by the New Relic Node.js v6 agent. Node 6, 7 and 9 are not supported by v6. Customers running Node 6, 7 and 9 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v6 agent's new features. Remain on New Relic Node.js v5 agent without the ability to use new features only available with update agent versions. Node 8 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 8. Upgrade to Node.js agent version 5 Before upgrading to Node.js agent v5, review this information for major changes. Also see New Relic's Node.js v5 migration guide on GitHub. Major changes with Node.js v5 agent Comments Removed deprecated addCustomParameter methods. v2 - v4: Starting in agent v2.7.0, these methods were marked as deprecated but left in to give a transition period for the new methods. v5: Applications must use the API methods newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). These are drop-in replacements for the old methods. Removed deprecated create*Transaction methods. v2 - v4: Starting in agent v2.0.2, these methods were marked as deprecated but left in to give a transition period to the new methods. v5: Applications must update to the API methods newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Troubleshooting tips: These new methods are not drop-in replacements for the old ones. Before moving to these new methods, review our custom instrumentation guide. Removed deprecated createTracer method. v3 - v4: Starting in agent v3.3.0, this method was marked as deprecated in favor of newrelic.startSegment(). v5: Applications must update to newrelic.startSegment(). Removed node-cassandra-cql instrumentation. v4: Applications using the npm package node-cassandra-cql would get datastore metrics for Cassandra. v5: Applications must migrate to the cassandra-driver package to get Cassandra datastore metrics. This module is actively maintained by the same developers. The node-cassandra-cql package was abandoned in February of 2014 in favor of the cassandra-driver package. Removed deprecated capture_params and ignored_params configurations. v2 - v4: Starting in agent v2.7.0, these configuration parameters caused a warning to be logged, and the values were automatically upgraded to the new attributes configurations. v5: A warning will still be logged but the configuration is ignored, and no automatic upgrading happens any more. Troubleshooting tips: If your application had parameters listed in the ignored_params configuration, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic Node.js v5 agent. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v5 agent's new features. Remain on New Relic Node.js v4 agent without the ability to use new features only available with update agent versions. Node 7 and 9 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 6 and 7. Feature flags as of v5 As of New Relic for Node.js v5: custom_instrumentation: This feature is no longer configurable. custom_metrics: This feature is no longer configurable. synthetics: This feature is no longer configurable. native_metrics: This feature is now controlled by the plugins.native_metrics.enabled configuration value. Upgrade to Node.js agent version 4 Before upgrading to Node.js agent v4, review this information for major changes. Also see New Relic's Node.js v4 migration guide on GitHub. Upgrade https-proxy-agent from v0 to v2 Major changes with Node.js v4 agent include an upgrade of the https-proxy-agent from v0 to v2. This dependency has been updated due to a security issue in the https-proxy-agent that the New Relic Node.js agent used. Because https-proxy v2 is incompatible with node v0.10 and v0.12, New Relic has deprecated those agent versions. There is no required action to migrate from v3 to v4 of New Relic's Node.js agent. Node version support Node 4 is the earliest version supported by the New Relic Node.js v4 agent. Node 0.10 and 0.12 are not supported by v4. Customers running Node 0.10 or 0.12 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v4 agent's new features. Remain on the New Relic Node.js v3 agent without the ability to use new features only available with updated agent versions. Node 4, 5, and 7 also no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 4 and 5. Upgrade to Node.js agent version 3 Before upgrading to Node.js agent agent v3, review this information for major changes. Also see New Relic's Node.js v3 migration guide on GitHub. Major changes with Node.js v3 agent Major changes with Node.js v3 agent Comments Removed SSL configuration v2: With the v2 agent, it was possible to configure the agent to connect to New Relic without encryption. v3: Node.js agent v3 always connects to New Relic servers using TLS encryption to protect communications. If the agent is configured to disable this, a warning is logged and the setting is ignored. Request parameters now prefixed with request.parameters. v2: The v2 agent collects request parameters, such as route parameters (/users/:userId) and query parameters (/users?userId=123), as the parameter name (userId). v3: The v3 agent prefixes all request parameters with the string request.parameters.. For example,userId appears as request.parameters.userId. Troubleshooting tips: If you have dashboards, alert policies, or other NRQL queries based on request parameters, update them with the new parameter names. Feature flags as of v3 As of New Relic Node.js agent v3, the send_request_uri_attribute feature is no longer configurable. Upgrade to Node.js agent version 2 Before upgrading to Node.js agent v2, review this information for major changes. Also see New Relic's Node.js v2 migration guide on GitHub. Major changes with Node.js v2 agent Major changes with Node.js v2 agent Comments Reversed naming and ignore rules v1: With the v1 agent, rules defined in the config properties rules.name and rules.ignore were applied in reverse order; the first rule in the list was applied last. v2: Node.js agent v2 applies rules in the order they are defined, so the first rule in the list is applied first. Troubleshooting tips: If you used naming rules in the v1 agent and notice problems, reverse the order of your rules in your configuration. De-duplicated HTTP request transactions v1: The v1 agent started a new transaction for each listener on an HTTP server's request event. In applications with multiple listeners on the request event, this resulted in extraneous transactions being created that almost always did not get named correctly. v2: The v2 agent only creates a single transaction for each request event emitted. Troubleshooting tips: If you used multiple request event listeners and added a call to newrelic.ignoreTransaction() to remove the extra transactions, remove those calls. Stopped swallowing outbound request errors v1: The v1 agent swallowed unhandled error events emitted by outbound HTTP request objects. v2: The v2 agent removes this behavior. Instead, the v2 agent does not change normal Node execution. This means the error event will always be emitted. Troubleshooting tips: If you are making outbound requests and currently do not listen for the error event, add a listener and handle the error as appropriate for your application. Updated configuration options as of v2 In newrelic.js, edit the Node.js agent configuration properties you use for compatiblity with the latest versions: Deprecated property New property capture_params attributes.enabled: false By default, request attributes are not sent to New Relic. Set attributes.enabled: true to include agent-defined or custom attributes in traces. The capture_params property has been deprecated. ignored_params attributes.exclude: [] Add any request attribute keys to the attributes.exclude list. Now, instead of having to be an exact match, wildcards (*) may be appended to each item for broader filtering. The ignored_params property has been deprecated. These Node.js agent configuration properties also have overrides for specific destinations, including: transaction_tracer transaction_events error_collector browser_monitoring For example, if the root attributes.enabled is true and you set transaction_tracer.attributes.enabled: false, this will restrict attributes from being collected in transaction traces, while still allowing them for all others. Deprecated API methods as of v2 The following methods from the Node.js agent have been deprecated, and New Relic has deleted them in v5 of the agent. Each has an easy replacement that accomplishes the same task in a more flexible and reliable way. newrelic.createWebTransaction() Replace with newrelic.startWebTransaction() and newrelic.getTransaction(). newrelic.createBackgroundTransaction() Replace with newrelic.startBackgroundTransaction() and newrelic.getTransaction(). newrelic.addCustomParameter() Replace with newrelic.addCustomAttribute(). newrelic.addCustomParameters() Replace with newrelic.addCustomAttributes(). New v2 agent API methods The following API methods are new with the New Relic Node.js v2 agent. newrelic.getTransaction() This method gets a reference to the currently running transaction. Use in conjunction with: newrelic.startWebTransaction newrelic.startBackgroundTransaction Callback-based message consumer services for troubleshooting message consumers newrelic.startWebTransaction()newrelic.startBackgroundTransaction() These new API methods replace the older create*Transaction methods. They are easier to use and seamlessly work with promises. Unlike the v1 method, the provided callback is invoked immediately. newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages() Use these methods to add custom instrumentation for third party modules, including those already instrumented by the New Relic Node.js agent. For more information, see New Relic's Node.js instrumentation tutorials on GitHub. newrelic.addCustomAttribute() Use this method to add a custom trace attribute. newrelic.addCustomAttributes() Use this method to add multiple custom trace attributes. Node version support for v2 The earliest version of Node supported by the New Relic Node.js v2 agent is 0.10. Node 0.8, which has not been updated since July of 2014, is not supported by v2. Customers running Node 0.8 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v2 agent's new features. Remain on New Relic Node.js v1 agent without the ability to use new features only available with updated agent versions. Node 0.10 also no longer receives updates, but New Relic will continue to support this version of Node for the time being. Recommendation: Upgrade to a newer version of Node as soon as possible. npm version support as of v2 The New Relic Node.js agent now requires npm version 2.0.0 or higher. This version of npm comes packaged with Node 0.10.44 or higher. If you are using an earlier version of Node 0.10 you will need to first install npm 2.0.0 or higher, or upgrade to a newer version of Node. To install npm version 2: $ npm install --global npm@2 Copy Feature flags as of v2 As of New Relic Node.js agent v2: express_segments: This feature is no longer configurable. cat: This feature is now controlled by the cross_application_tracer.enabled configuration value. Framework minimum versions as of v2 As of New Relic Node.js agent v2: Module V2 minimum Minimum before v2 express 4.6.0 2.0.0 mysql 2.0.0 0.9.0",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.65846,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the Node.js <em>agent</em>",
        "sections": "Update the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " in the ignored_params <em>configuration</em>, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic <em>Node.js</em> v5 <em>agent</em>. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node"
      },
      "id": "617ea607196a672142f7e0ae"
    }
  ],
  "/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration": [
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 234.52562,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "To complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>, you can use our guided <em>installation</em> for an automated install, (choose EU if you&#x27;re in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don&#x27;t already have one. (It&#x27;s free, forever!) Get an account"
      },
      "id": "617ea532e7b9d296b8c05c6d"
    },
    {
      "sections": [
        "Uninstall the Node.js agent",
        "Tip"
      ],
      "title": "Uninstall the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "cf80feeef6b9b3115ef617cfa58eed160b87fc89",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-10-31T14:17:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Node.js agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall the New Relic Node.js agent: Remove require('newrelic'); as the first line of the app's main module. Remove the npm package with npm uninstall newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining Node.js. Tip You may also want to remove your app from New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.31485,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the Node.js <em>agent</em>",
        "sections": "Uninstall the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Read on to learn how to uninstall the New Relic <em>Node.js</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall the New Relic <em>Node.js</em> <em>agent</em>: Remove require(&#x27;newrelic&#x27;); as the first line of the app&#x27;s main module. Remove the npm package with npm uninstall"
      },
      "id": "617ea562e7b9d2251ec03a82"
    },
    {
      "sections": [
        "Update the Node.js agent",
        "Upgrade to Node.js agent version 8",
        "Node version support",
        "Tip",
        "Upgrade to Node.js agent version 7",
        "Upgrade to Node.js agent version 6",
        "Upgrade to Node.js agent version 5",
        "Feature flags as of v5",
        "Upgrade to Node.js agent version 4",
        "Upgrade https-proxy-agent from v0 to v2",
        "Upgrade to Node.js agent version 3",
        "Major changes with Node.js v3 agent",
        "Feature flags as of v3",
        "Upgrade to Node.js agent version 2",
        "Major changes with Node.js v2 agent",
        "Updated configuration options as of v2",
        "Deprecated API methods as of v2",
        "newrelic.createWebTransaction()",
        "newrelic.createBackgroundTransaction()",
        "newrelic.addCustomParameter()",
        "newrelic.addCustomParameters()",
        "New v2 agent API methods",
        "newrelic.getTransaction()",
        "newrelic.startWebTransaction()newrelic.startBackgroundTransaction()",
        "newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages()",
        "newrelic.addCustomAttribute()",
        "newrelic.addCustomAttributes()",
        "Node version support for v2",
        "npm version support as of v2",
        "Feature flags as of v2",
        "Framework minimum versions as of v2"
      ],
      "title": "Update the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "db881c41e9f89ad40c06e74b8de651bd83e99161",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/update-nodejs-agent/",
      "published_at": "2021-12-05T06:34:06Z",
      "updated_at": "2021-10-23T21:42:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your Node.js agent to the latest version. For additional information about specific agent updates, refer to the Node.js agent release notes. The release notes include a download link when applicable, plus instructions to download and install the latest version. If the newrelic module is listed in your package.json, run npm install. If you want to target just the newrelic module, run npm update newrelic. Recommendation: Test your updated version before moving it into production. If you have problems, follow the Node.js agent troubleshooting procedures. Upgrade to Node.js agent version 8 Before upgrading to Node.js version 8, review this information for major changes. Major changes with Node.js agent v8 Comments Added official parity support for Node 16. BREAKING: Dropped Node v10.x support. For further information see our support policy. BREAKING: Removed serverless_mode as a feature flag. The standard serverless_mode configuration still exists. BREAKING: The agent no-longer includes the New Relic certificate bundle automatically when using the 'certificates' configuration (commonly with proxies). If you find this breaking your current environment, you may leverage a feature-flag to temporarily restore this functionality. Example configuration: feature_flag: { certificate_bundle: true }. In this case, we recommend getting a certificate bundle for your environment such as the one from Mozilla. The New Relic bundle and feature flag will be fully removed in next major release. Defaulted config.feature_flags.certificate_bundle to false. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v4.0.1 @newrelic/koa v6.0.1 @newrelic/native-metrics v7.0.1 @newrelic/superagent v5.0.1 @newrelic/test-utilities v6.0.0 Node version support Node v12 is the earliest version supported by the New Relic Node.js v8 agent. Node 10 and 11 are not supported by v8. Customers running Node 11 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v8 agent's new features. Remain on New Relic Node.js v7 agent without the ability to use new features only available with update agent versions. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 12. Upgrade to Node.js agent version 7 Before upgrading to Node.js version 7, review this information for major changes. Major changes with Node.js agent v7 Comments BREAKING Removed deprecated httpResponseCode, response.status and httpResponseMessage http response attributes v6.4.2-v6.14.0: Starting in agent v6.4.2, these attributes were marked as deprecated but left in to give a transition period for the new attributes. v7: When http response attribute reporting is enabled, http.statusCode and http.statusText will be reported. BREAKING Removed deprecated setIgnoreTransaction API method v5 - v6: Starting in agent v5.0.0, this method was marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API method transactionHandle.ignore(). BREAKING Removed the api.custom_parameters_enabled configuration item and associated environment variable NEW_RELIC_API_CUSTOM_PARAMETERS. Applications must use the configuration api.custom_attributes_enabled or the associated environment variable NEW_RELIC_API_CUSTOM_ATTRIBUTES to enable newrelic.addCustomAttribute and newrelic.addCustomAttributes. BREAKING Removed deprecated Distributed Tracing API methods, createDistributedTracePayload() and acceptDistributedTracePayload() v6.4.0-v6.14.0: Starting in agent v6.4.0, these method were marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API methods transactionHandle.insertDistributedTraceHeaders(headers) and transactionHandle.acceptDistributedTraceHeaders(transportType, headers) . With these methods, the Node agent will now accept W3C's traceparent and tracestate headers when calling transactionHandle.acceptDistributedTraceHeaders(headers) and include the W3C headers along with the New Relic distributed tracing header when calling transactionHandle.insertDistributedTraceHeaders(headers), unless the New Relic trace header format is disabled using distributed_tracing.exclude_newrelic_header:true. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v3.0.0 @newrelic/koa v5.0.0 @newrelic/native-metrics v6.0.0 @newrelic/superagent v4.0.0 @newrelic/test-utilities v5.0.0 Node version support Node v10 is the earliest version supported by the New Relic Node.js v7 agent. Node 8 and 9 are not supported by v7. Customers running Node 9 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v7 agent's new features. Remain on New Relic Node.js v6 agent without the ability to use new features only available with update agent versions. Node 10 does not receive updates. Upgrade to a newer version of Node as soon as possible. Support for Node 10 has been discontinued with the New Relic Node.js agent v8. Upgrade to Node.js agent version 6 Before upgrading to Node.js agent version 6, review this information for major changes. Major changes with Node.js agent v6 Comments Upgraded official Koa framework instrumentation module to v3.0.0 v6: Added support for @koa/router up to v8.0.2. @koa/router v8.0.3 and greater are currently unsupported. v6: Added support for Node v12 and removed support for Node v6, 7, and 9. The minimum supported version is Node v8. Also see New Relic's Koa Release Notes on Github.. Removed deprecated max_samples_per_minute configuration parameter, which is replaced by max_samples_stored behavior v1 - v5: max_samples_per_minute defined the maximum number of events the agent collects per minute. If your application previously used max_samples_per_minute as an upper bound, you may need to lower the threshold to a valid maximum to avoid data being dropped on the server. We recommend less than 10k. v5: In agent v5 and lower, max_samples_stored defined the maximum number of events the agent stores if it's unable to communicate with the New Relic collector. v6: The new behavior of max_samples_stored defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. This usage of the configuration is consistent with the other APM agents. Troubleshooting tips: If you're missing event data, increase the value of max_samples_stored or revert to the default value. The value of max_samples_stored should not be over 10,000. Node version support Node 8 is the earliest version supported by the New Relic Node.js v6 agent. Node 6, 7 and 9 are not supported by v6. Customers running Node 6, 7 and 9 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v6 agent's new features. Remain on New Relic Node.js v5 agent without the ability to use new features only available with update agent versions. Node 8 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 8. Upgrade to Node.js agent version 5 Before upgrading to Node.js agent v5, review this information for major changes. Also see New Relic's Node.js v5 migration guide on GitHub. Major changes with Node.js v5 agent Comments Removed deprecated addCustomParameter methods. v2 - v4: Starting in agent v2.7.0, these methods were marked as deprecated but left in to give a transition period for the new methods. v5: Applications must use the API methods newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). These are drop-in replacements for the old methods. Removed deprecated create*Transaction methods. v2 - v4: Starting in agent v2.0.2, these methods were marked as deprecated but left in to give a transition period to the new methods. v5: Applications must update to the API methods newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Troubleshooting tips: These new methods are not drop-in replacements for the old ones. Before moving to these new methods, review our custom instrumentation guide. Removed deprecated createTracer method. v3 - v4: Starting in agent v3.3.0, this method was marked as deprecated in favor of newrelic.startSegment(). v5: Applications must update to newrelic.startSegment(). Removed node-cassandra-cql instrumentation. v4: Applications using the npm package node-cassandra-cql would get datastore metrics for Cassandra. v5: Applications must migrate to the cassandra-driver package to get Cassandra datastore metrics. This module is actively maintained by the same developers. The node-cassandra-cql package was abandoned in February of 2014 in favor of the cassandra-driver package. Removed deprecated capture_params and ignored_params configurations. v2 - v4: Starting in agent v2.7.0, these configuration parameters caused a warning to be logged, and the values were automatically upgraded to the new attributes configurations. v5: A warning will still be logged but the configuration is ignored, and no automatic upgrading happens any more. Troubleshooting tips: If your application had parameters listed in the ignored_params configuration, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic Node.js v5 agent. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v5 agent's new features. Remain on New Relic Node.js v4 agent without the ability to use new features only available with update agent versions. Node 7 and 9 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 6 and 7. Feature flags as of v5 As of New Relic for Node.js v5: custom_instrumentation: This feature is no longer configurable. custom_metrics: This feature is no longer configurable. synthetics: This feature is no longer configurable. native_metrics: This feature is now controlled by the plugins.native_metrics.enabled configuration value. Upgrade to Node.js agent version 4 Before upgrading to Node.js agent v4, review this information for major changes. Also see New Relic's Node.js v4 migration guide on GitHub. Upgrade https-proxy-agent from v0 to v2 Major changes with Node.js v4 agent include an upgrade of the https-proxy-agent from v0 to v2. This dependency has been updated due to a security issue in the https-proxy-agent that the New Relic Node.js agent used. Because https-proxy v2 is incompatible with node v0.10 and v0.12, New Relic has deprecated those agent versions. There is no required action to migrate from v3 to v4 of New Relic's Node.js agent. Node version support Node 4 is the earliest version supported by the New Relic Node.js v4 agent. Node 0.10 and 0.12 are not supported by v4. Customers running Node 0.10 or 0.12 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v4 agent's new features. Remain on the New Relic Node.js v3 agent without the ability to use new features only available with updated agent versions. Node 4, 5, and 7 also no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 4 and 5. Upgrade to Node.js agent version 3 Before upgrading to Node.js agent agent v3, review this information for major changes. Also see New Relic's Node.js v3 migration guide on GitHub. Major changes with Node.js v3 agent Major changes with Node.js v3 agent Comments Removed SSL configuration v2: With the v2 agent, it was possible to configure the agent to connect to New Relic without encryption. v3: Node.js agent v3 always connects to New Relic servers using TLS encryption to protect communications. If the agent is configured to disable this, a warning is logged and the setting is ignored. Request parameters now prefixed with request.parameters. v2: The v2 agent collects request parameters, such as route parameters (/users/:userId) and query parameters (/users?userId=123), as the parameter name (userId). v3: The v3 agent prefixes all request parameters with the string request.parameters.. For example,userId appears as request.parameters.userId. Troubleshooting tips: If you have dashboards, alert policies, or other NRQL queries based on request parameters, update them with the new parameter names. Feature flags as of v3 As of New Relic Node.js agent v3, the send_request_uri_attribute feature is no longer configurable. Upgrade to Node.js agent version 2 Before upgrading to Node.js agent v2, review this information for major changes. Also see New Relic's Node.js v2 migration guide on GitHub. Major changes with Node.js v2 agent Major changes with Node.js v2 agent Comments Reversed naming and ignore rules v1: With the v1 agent, rules defined in the config properties rules.name and rules.ignore were applied in reverse order; the first rule in the list was applied last. v2: Node.js agent v2 applies rules in the order they are defined, so the first rule in the list is applied first. Troubleshooting tips: If you used naming rules in the v1 agent and notice problems, reverse the order of your rules in your configuration. De-duplicated HTTP request transactions v1: The v1 agent started a new transaction for each listener on an HTTP server's request event. In applications with multiple listeners on the request event, this resulted in extraneous transactions being created that almost always did not get named correctly. v2: The v2 agent only creates a single transaction for each request event emitted. Troubleshooting tips: If you used multiple request event listeners and added a call to newrelic.ignoreTransaction() to remove the extra transactions, remove those calls. Stopped swallowing outbound request errors v1: The v1 agent swallowed unhandled error events emitted by outbound HTTP request objects. v2: The v2 agent removes this behavior. Instead, the v2 agent does not change normal Node execution. This means the error event will always be emitted. Troubleshooting tips: If you are making outbound requests and currently do not listen for the error event, add a listener and handle the error as appropriate for your application. Updated configuration options as of v2 In newrelic.js, edit the Node.js agent configuration properties you use for compatiblity with the latest versions: Deprecated property New property capture_params attributes.enabled: false By default, request attributes are not sent to New Relic. Set attributes.enabled: true to include agent-defined or custom attributes in traces. The capture_params property has been deprecated. ignored_params attributes.exclude: [] Add any request attribute keys to the attributes.exclude list. Now, instead of having to be an exact match, wildcards (*) may be appended to each item for broader filtering. The ignored_params property has been deprecated. These Node.js agent configuration properties also have overrides for specific destinations, including: transaction_tracer transaction_events error_collector browser_monitoring For example, if the root attributes.enabled is true and you set transaction_tracer.attributes.enabled: false, this will restrict attributes from being collected in transaction traces, while still allowing them for all others. Deprecated API methods as of v2 The following methods from the Node.js agent have been deprecated, and New Relic has deleted them in v5 of the agent. Each has an easy replacement that accomplishes the same task in a more flexible and reliable way. newrelic.createWebTransaction() Replace with newrelic.startWebTransaction() and newrelic.getTransaction(). newrelic.createBackgroundTransaction() Replace with newrelic.startBackgroundTransaction() and newrelic.getTransaction(). newrelic.addCustomParameter() Replace with newrelic.addCustomAttribute(). newrelic.addCustomParameters() Replace with newrelic.addCustomAttributes(). New v2 agent API methods The following API methods are new with the New Relic Node.js v2 agent. newrelic.getTransaction() This method gets a reference to the currently running transaction. Use in conjunction with: newrelic.startWebTransaction newrelic.startBackgroundTransaction Callback-based message consumer services for troubleshooting message consumers newrelic.startWebTransaction()newrelic.startBackgroundTransaction() These new API methods replace the older create*Transaction methods. They are easier to use and seamlessly work with promises. Unlike the v1 method, the provided callback is invoked immediately. newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages() Use these methods to add custom instrumentation for third party modules, including those already instrumented by the New Relic Node.js agent. For more information, see New Relic's Node.js instrumentation tutorials on GitHub. newrelic.addCustomAttribute() Use this method to add a custom trace attribute. newrelic.addCustomAttributes() Use this method to add multiple custom trace attributes. Node version support for v2 The earliest version of Node supported by the New Relic Node.js v2 agent is 0.10. Node 0.8, which has not been updated since July of 2014, is not supported by v2. Customers running Node 0.8 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v2 agent's new features. Remain on New Relic Node.js v1 agent without the ability to use new features only available with updated agent versions. Node 0.10 also no longer receives updates, but New Relic will continue to support this version of Node for the time being. Recommendation: Upgrade to a newer version of Node as soon as possible. npm version support as of v2 The New Relic Node.js agent now requires npm version 2.0.0 or higher. This version of npm comes packaged with Node 0.10.44 or higher. If you are using an earlier version of Node 0.10 you will need to first install npm 2.0.0 or higher, or upgrade to a newer version of Node. To install npm version 2: $ npm install --global npm@2 Copy Feature flags as of v2 As of New Relic Node.js agent v2: express_segments: This feature is no longer configurable. cat: This feature is now controlled by the cross_application_tracer.enabled configuration value. Framework minimum versions as of v2 As of New Relic Node.js agent v2: Module V2 minimum Minimum before v2 express 4.6.0 2.0.0 mysql 2.0.0 0.9.0",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.65845,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the Node.js <em>agent</em>",
        "sections": "Update the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " in the ignored_params <em>configuration</em>, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic <em>Node.js</em> v5 <em>agent</em>. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node"
      },
      "id": "617ea607196a672142f7e0ae"
    }
  ],
  "/docs/apm/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-05T06:31:04Z",
      "updated_at": "2021-11-26T00:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 235.8964,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side <em>configuration</em>. The <em>Node.js</em> <em>agent</em>"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 234.52562,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "To complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>, you can use our guided <em>installation</em> for an automated install, (choose EU if you&#x27;re in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don&#x27;t already have one. (It&#x27;s free, forever!) Get an account"
      },
      "id": "617ea532e7b9d296b8c05c6d"
    },
    {
      "sections": [
        "Update the Node.js agent",
        "Upgrade to Node.js agent version 8",
        "Node version support",
        "Tip",
        "Upgrade to Node.js agent version 7",
        "Upgrade to Node.js agent version 6",
        "Upgrade to Node.js agent version 5",
        "Feature flags as of v5",
        "Upgrade to Node.js agent version 4",
        "Upgrade https-proxy-agent from v0 to v2",
        "Upgrade to Node.js agent version 3",
        "Major changes with Node.js v3 agent",
        "Feature flags as of v3",
        "Upgrade to Node.js agent version 2",
        "Major changes with Node.js v2 agent",
        "Updated configuration options as of v2",
        "Deprecated API methods as of v2",
        "newrelic.createWebTransaction()",
        "newrelic.createBackgroundTransaction()",
        "newrelic.addCustomParameter()",
        "newrelic.addCustomParameters()",
        "New v2 agent API methods",
        "newrelic.getTransaction()",
        "newrelic.startWebTransaction()newrelic.startBackgroundTransaction()",
        "newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages()",
        "newrelic.addCustomAttribute()",
        "newrelic.addCustomAttributes()",
        "Node version support for v2",
        "npm version support as of v2",
        "Feature flags as of v2",
        "Framework minimum versions as of v2"
      ],
      "title": "Update the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "db881c41e9f89ad40c06e74b8de651bd83e99161",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/update-nodejs-agent/",
      "published_at": "2021-12-05T06:34:06Z",
      "updated_at": "2021-10-23T21:42:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your Node.js agent to the latest version. For additional information about specific agent updates, refer to the Node.js agent release notes. The release notes include a download link when applicable, plus instructions to download and install the latest version. If the newrelic module is listed in your package.json, run npm install. If you want to target just the newrelic module, run npm update newrelic. Recommendation: Test your updated version before moving it into production. If you have problems, follow the Node.js agent troubleshooting procedures. Upgrade to Node.js agent version 8 Before upgrading to Node.js version 8, review this information for major changes. Major changes with Node.js agent v8 Comments Added official parity support for Node 16. BREAKING: Dropped Node v10.x support. For further information see our support policy. BREAKING: Removed serverless_mode as a feature flag. The standard serverless_mode configuration still exists. BREAKING: The agent no-longer includes the New Relic certificate bundle automatically when using the 'certificates' configuration (commonly with proxies). If you find this breaking your current environment, you may leverage a feature-flag to temporarily restore this functionality. Example configuration: feature_flag: { certificate_bundle: true }. In this case, we recommend getting a certificate bundle for your environment such as the one from Mozilla. The New Relic bundle and feature flag will be fully removed in next major release. Defaulted config.feature_flags.certificate_bundle to false. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v4.0.1 @newrelic/koa v6.0.1 @newrelic/native-metrics v7.0.1 @newrelic/superagent v5.0.1 @newrelic/test-utilities v6.0.0 Node version support Node v12 is the earliest version supported by the New Relic Node.js v8 agent. Node 10 and 11 are not supported by v8. Customers running Node 11 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v8 agent's new features. Remain on New Relic Node.js v7 agent without the ability to use new features only available with update agent versions. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 12. Upgrade to Node.js agent version 7 Before upgrading to Node.js version 7, review this information for major changes. Major changes with Node.js agent v7 Comments BREAKING Removed deprecated httpResponseCode, response.status and httpResponseMessage http response attributes v6.4.2-v6.14.0: Starting in agent v6.4.2, these attributes were marked as deprecated but left in to give a transition period for the new attributes. v7: When http response attribute reporting is enabled, http.statusCode and http.statusText will be reported. BREAKING Removed deprecated setIgnoreTransaction API method v5 - v6: Starting in agent v5.0.0, this method was marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API method transactionHandle.ignore(). BREAKING Removed the api.custom_parameters_enabled configuration item and associated environment variable NEW_RELIC_API_CUSTOM_PARAMETERS. Applications must use the configuration api.custom_attributes_enabled or the associated environment variable NEW_RELIC_API_CUSTOM_ATTRIBUTES to enable newrelic.addCustomAttribute and newrelic.addCustomAttributes. BREAKING Removed deprecated Distributed Tracing API methods, createDistributedTracePayload() and acceptDistributedTracePayload() v6.4.0-v6.14.0: Starting in agent v6.4.0, these method were marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API methods transactionHandle.insertDistributedTraceHeaders(headers) and transactionHandle.acceptDistributedTraceHeaders(transportType, headers) . With these methods, the Node agent will now accept W3C's traceparent and tracestate headers when calling transactionHandle.acceptDistributedTraceHeaders(headers) and include the W3C headers along with the New Relic distributed tracing header when calling transactionHandle.insertDistributedTraceHeaders(headers), unless the New Relic trace header format is disabled using distributed_tracing.exclude_newrelic_header:true. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v3.0.0 @newrelic/koa v5.0.0 @newrelic/native-metrics v6.0.0 @newrelic/superagent v4.0.0 @newrelic/test-utilities v5.0.0 Node version support Node v10 is the earliest version supported by the New Relic Node.js v7 agent. Node 8 and 9 are not supported by v7. Customers running Node 9 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v7 agent's new features. Remain on New Relic Node.js v6 agent without the ability to use new features only available with update agent versions. Node 10 does not receive updates. Upgrade to a newer version of Node as soon as possible. Support for Node 10 has been discontinued with the New Relic Node.js agent v8. Upgrade to Node.js agent version 6 Before upgrading to Node.js agent version 6, review this information for major changes. Major changes with Node.js agent v6 Comments Upgraded official Koa framework instrumentation module to v3.0.0 v6: Added support for @koa/router up to v8.0.2. @koa/router v8.0.3 and greater are currently unsupported. v6: Added support for Node v12 and removed support for Node v6, 7, and 9. The minimum supported version is Node v8. Also see New Relic's Koa Release Notes on Github.. Removed deprecated max_samples_per_minute configuration parameter, which is replaced by max_samples_stored behavior v1 - v5: max_samples_per_minute defined the maximum number of events the agent collects per minute. If your application previously used max_samples_per_minute as an upper bound, you may need to lower the threshold to a valid maximum to avoid data being dropped on the server. We recommend less than 10k. v5: In agent v5 and lower, max_samples_stored defined the maximum number of events the agent stores if it's unable to communicate with the New Relic collector. v6: The new behavior of max_samples_stored defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. This usage of the configuration is consistent with the other APM agents. Troubleshooting tips: If you're missing event data, increase the value of max_samples_stored or revert to the default value. The value of max_samples_stored should not be over 10,000. Node version support Node 8 is the earliest version supported by the New Relic Node.js v6 agent. Node 6, 7 and 9 are not supported by v6. Customers running Node 6, 7 and 9 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v6 agent's new features. Remain on New Relic Node.js v5 agent without the ability to use new features only available with update agent versions. Node 8 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 8. Upgrade to Node.js agent version 5 Before upgrading to Node.js agent v5, review this information for major changes. Also see New Relic's Node.js v5 migration guide on GitHub. Major changes with Node.js v5 agent Comments Removed deprecated addCustomParameter methods. v2 - v4: Starting in agent v2.7.0, these methods were marked as deprecated but left in to give a transition period for the new methods. v5: Applications must use the API methods newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). These are drop-in replacements for the old methods. Removed deprecated create*Transaction methods. v2 - v4: Starting in agent v2.0.2, these methods were marked as deprecated but left in to give a transition period to the new methods. v5: Applications must update to the API methods newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Troubleshooting tips: These new methods are not drop-in replacements for the old ones. Before moving to these new methods, review our custom instrumentation guide. Removed deprecated createTracer method. v3 - v4: Starting in agent v3.3.0, this method was marked as deprecated in favor of newrelic.startSegment(). v5: Applications must update to newrelic.startSegment(). Removed node-cassandra-cql instrumentation. v4: Applications using the npm package node-cassandra-cql would get datastore metrics for Cassandra. v5: Applications must migrate to the cassandra-driver package to get Cassandra datastore metrics. This module is actively maintained by the same developers. The node-cassandra-cql package was abandoned in February of 2014 in favor of the cassandra-driver package. Removed deprecated capture_params and ignored_params configurations. v2 - v4: Starting in agent v2.7.0, these configuration parameters caused a warning to be logged, and the values were automatically upgraded to the new attributes configurations. v5: A warning will still be logged but the configuration is ignored, and no automatic upgrading happens any more. Troubleshooting tips: If your application had parameters listed in the ignored_params configuration, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic Node.js v5 agent. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v5 agent's new features. Remain on New Relic Node.js v4 agent without the ability to use new features only available with update agent versions. Node 7 and 9 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 6 and 7. Feature flags as of v5 As of New Relic for Node.js v5: custom_instrumentation: This feature is no longer configurable. custom_metrics: This feature is no longer configurable. synthetics: This feature is no longer configurable. native_metrics: This feature is now controlled by the plugins.native_metrics.enabled configuration value. Upgrade to Node.js agent version 4 Before upgrading to Node.js agent v4, review this information for major changes. Also see New Relic's Node.js v4 migration guide on GitHub. Upgrade https-proxy-agent from v0 to v2 Major changes with Node.js v4 agent include an upgrade of the https-proxy-agent from v0 to v2. This dependency has been updated due to a security issue in the https-proxy-agent that the New Relic Node.js agent used. Because https-proxy v2 is incompatible with node v0.10 and v0.12, New Relic has deprecated those agent versions. There is no required action to migrate from v3 to v4 of New Relic's Node.js agent. Node version support Node 4 is the earliest version supported by the New Relic Node.js v4 agent. Node 0.10 and 0.12 are not supported by v4. Customers running Node 0.10 or 0.12 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v4 agent's new features. Remain on the New Relic Node.js v3 agent without the ability to use new features only available with updated agent versions. Node 4, 5, and 7 also no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 4 and 5. Upgrade to Node.js agent version 3 Before upgrading to Node.js agent agent v3, review this information for major changes. Also see New Relic's Node.js v3 migration guide on GitHub. Major changes with Node.js v3 agent Major changes with Node.js v3 agent Comments Removed SSL configuration v2: With the v2 agent, it was possible to configure the agent to connect to New Relic without encryption. v3: Node.js agent v3 always connects to New Relic servers using TLS encryption to protect communications. If the agent is configured to disable this, a warning is logged and the setting is ignored. Request parameters now prefixed with request.parameters. v2: The v2 agent collects request parameters, such as route parameters (/users/:userId) and query parameters (/users?userId=123), as the parameter name (userId). v3: The v3 agent prefixes all request parameters with the string request.parameters.. For example,userId appears as request.parameters.userId. Troubleshooting tips: If you have dashboards, alert policies, or other NRQL queries based on request parameters, update them with the new parameter names. Feature flags as of v3 As of New Relic Node.js agent v3, the send_request_uri_attribute feature is no longer configurable. Upgrade to Node.js agent version 2 Before upgrading to Node.js agent v2, review this information for major changes. Also see New Relic's Node.js v2 migration guide on GitHub. Major changes with Node.js v2 agent Major changes with Node.js v2 agent Comments Reversed naming and ignore rules v1: With the v1 agent, rules defined in the config properties rules.name and rules.ignore were applied in reverse order; the first rule in the list was applied last. v2: Node.js agent v2 applies rules in the order they are defined, so the first rule in the list is applied first. Troubleshooting tips: If you used naming rules in the v1 agent and notice problems, reverse the order of your rules in your configuration. De-duplicated HTTP request transactions v1: The v1 agent started a new transaction for each listener on an HTTP server's request event. In applications with multiple listeners on the request event, this resulted in extraneous transactions being created that almost always did not get named correctly. v2: The v2 agent only creates a single transaction for each request event emitted. Troubleshooting tips: If you used multiple request event listeners and added a call to newrelic.ignoreTransaction() to remove the extra transactions, remove those calls. Stopped swallowing outbound request errors v1: The v1 agent swallowed unhandled error events emitted by outbound HTTP request objects. v2: The v2 agent removes this behavior. Instead, the v2 agent does not change normal Node execution. This means the error event will always be emitted. Troubleshooting tips: If you are making outbound requests and currently do not listen for the error event, add a listener and handle the error as appropriate for your application. Updated configuration options as of v2 In newrelic.js, edit the Node.js agent configuration properties you use for compatiblity with the latest versions: Deprecated property New property capture_params attributes.enabled: false By default, request attributes are not sent to New Relic. Set attributes.enabled: true to include agent-defined or custom attributes in traces. The capture_params property has been deprecated. ignored_params attributes.exclude: [] Add any request attribute keys to the attributes.exclude list. Now, instead of having to be an exact match, wildcards (*) may be appended to each item for broader filtering. The ignored_params property has been deprecated. These Node.js agent configuration properties also have overrides for specific destinations, including: transaction_tracer transaction_events error_collector browser_monitoring For example, if the root attributes.enabled is true and you set transaction_tracer.attributes.enabled: false, this will restrict attributes from being collected in transaction traces, while still allowing them for all others. Deprecated API methods as of v2 The following methods from the Node.js agent have been deprecated, and New Relic has deleted them in v5 of the agent. Each has an easy replacement that accomplishes the same task in a more flexible and reliable way. newrelic.createWebTransaction() Replace with newrelic.startWebTransaction() and newrelic.getTransaction(). newrelic.createBackgroundTransaction() Replace with newrelic.startBackgroundTransaction() and newrelic.getTransaction(). newrelic.addCustomParameter() Replace with newrelic.addCustomAttribute(). newrelic.addCustomParameters() Replace with newrelic.addCustomAttributes(). New v2 agent API methods The following API methods are new with the New Relic Node.js v2 agent. newrelic.getTransaction() This method gets a reference to the currently running transaction. Use in conjunction with: newrelic.startWebTransaction newrelic.startBackgroundTransaction Callback-based message consumer services for troubleshooting message consumers newrelic.startWebTransaction()newrelic.startBackgroundTransaction() These new API methods replace the older create*Transaction methods. They are easier to use and seamlessly work with promises. Unlike the v1 method, the provided callback is invoked immediately. newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages() Use these methods to add custom instrumentation for third party modules, including those already instrumented by the New Relic Node.js agent. For more information, see New Relic's Node.js instrumentation tutorials on GitHub. newrelic.addCustomAttribute() Use this method to add a custom trace attribute. newrelic.addCustomAttributes() Use this method to add multiple custom trace attributes. Node version support for v2 The earliest version of Node supported by the New Relic Node.js v2 agent is 0.10. Node 0.8, which has not been updated since July of 2014, is not supported by v2. Customers running Node 0.8 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v2 agent's new features. Remain on New Relic Node.js v1 agent without the ability to use new features only available with updated agent versions. Node 0.10 also no longer receives updates, but New Relic will continue to support this version of Node for the time being. Recommendation: Upgrade to a newer version of Node as soon as possible. npm version support as of v2 The New Relic Node.js agent now requires npm version 2.0.0 or higher. This version of npm comes packaged with Node 0.10.44 or higher. If you are using an earlier version of Node 0.10 you will need to first install npm 2.0.0 or higher, or upgrade to a newer version of Node. To install npm version 2: $ npm install --global npm@2 Copy Feature flags as of v2 As of New Relic Node.js agent v2: express_segments: This feature is no longer configurable. cat: This feature is now controlled by the cross_application_tracer.enabled configuration value. Framework minimum versions as of v2 As of New Relic Node.js agent v2: Module V2 minimum Minimum before v2 express 4.6.0 2.0.0 mysql 2.0.0 0.9.0",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.65845,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the Node.js <em>agent</em>",
        "sections": "Update the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " in the ignored_params <em>configuration</em>, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic <em>Node.js</em> v5 <em>agent</em>. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node"
      },
      "id": "617ea607196a672142f7e0ae"
    }
  ],
  "/docs/apm/agents/nodejs-agent/installation-configuration/update-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-05T06:31:04Z",
      "updated_at": "2021-11-26T00:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 235.89633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side <em>configuration</em>. The <em>Node.js</em> <em>agent</em>"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 234.52556,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "To complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>, you can use our guided <em>installation</em> for an automated install, (choose EU if you&#x27;re in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don&#x27;t already have one. (It&#x27;s free, forever!) Get an account"
      },
      "id": "617ea532e7b9d296b8c05c6d"
    },
    {
      "sections": [
        "Uninstall the Node.js agent",
        "Tip"
      ],
      "title": "Uninstall the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "cf80feeef6b9b3115ef617cfa58eed160b87fc89",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-10-31T14:17:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Node.js agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall the New Relic Node.js agent: Remove require('newrelic'); as the first line of the app's main module. Remove the npm package with npm uninstall newrelic --save. Delete the newrelic.js file and unset any environment variables being used. When the uninstall process finishes, restart your app. For more information about installation, see Installing and maintaining Node.js. Tip You may also want to remove your app from New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.31483,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the Node.js <em>agent</em>",
        "sections": "Uninstall the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Read on to learn how to uninstall the New Relic <em>Node.js</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall the New Relic <em>Node.js</em> <em>agent</em>: Remove require(&#x27;newrelic&#x27;); as the first line of the app&#x27;s main module. Remove the npm package with npm uninstall"
      },
      "id": "617ea562e7b9d2251ec03a82"
    }
  ],
  "/docs/apm/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs": [
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.57968,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the Node.js <em>agent</em>",
        "sections": "Install the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " <em>Node.js</em> <em>agent</em> up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the <em>Node.js</em> release notes. When applicable, the release notes include a download link with instructions on how to update the <em>Node.js</em> <em>agent</em>. <em>Troubleshooting</em> After you update the <em>agent</em>, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the <em>troubleshooting</em> procedures."
      },
      "id": "617ea532e7b9d296b8c05c6d"
    },
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.31329,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshoot</em> your installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. <em>Troubleshoot</em> your installation If you encounter issues with your <em>Node.js</em> <em>agent</em>, see our <em>troubleshooting</em> information: Large memory usage: If you&#x27;ve installed the <em>Node.js</em> <em>agent</em> and your memory"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Troubleshoot your Node.js installation",
        "Problem",
        "Solution",
        "Not seeing data",
        "Installation problems",
        "Log files",
        "Missing VM metrics"
      ],
      "title": "Troubleshoot your Node.js installation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "ac8a295dad179b2f8ac01410a0cb6a5bd33108a2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation/",
      "published_at": "2021-12-05T05:48:15Z",
      "updated_at": "2021-10-23T22:19:28Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have encountered any of these common problems after installing your New Relic Node.js agent, try these troubleshooting tips. Solution Some common problems users encounter after installing the New Relic Node.js agent include: Not seeing data To minimize the amount of bandwidth the Node.js agent consumes, New Relic only reports data once per minute. If you add the agent to tests that take less than a minute to run, it will not have time to report data to New Relic. If you do not see transaction traces or other data after deploying the agent, this may be due to configuration, framework, or Apdex settings. Use New Relic Diagnostics to try to automatically identify the issue. Installation problems What to check Comments Main module Ensure that you have added require('newrelic'); as the first line of the app's main module. If the require is added later, the Node.js agent may not properly instrument your application. Conditional logic If you have any conditional logic in your require, move the conditional logic to your newrelic.js configuration file. Frameworks For problems with supported frameworks, make sure you are using Connect, Express, Hapi, Kraken, or Restify. There are other Node.js frameworks, but New Relic does not support all of them. Apdex For problems with your Apdex results, try adjusting your Apdex score via your Node.js agent config file (newrelic.js) or the New Relic user interface. Log files The Node.js agent writes its log to the newrelic_agent.log file in the application directory, unless you have changed the logging settings. If the agent does not send data or crashes your app, you can generate a troubleshooting log file to accompany bug reports and support requests. Missing VM metrics The agent can collect VM metrics related to garbage collection (GC), memory, and CPU. Some of these metrics require an additional native module to be installed. Here are some common problems and their solutions: Problem During installation, npm shows one of the following error messages: gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable. Copy gyp ERR! build error gyp ERR! stack Error: not found: make Copy make: g++: Command not found Copy Solution Ensure that the prerequisites for the node-gyp module are installed. On Debian/Ubuntu platforms, use this command: apt-get install build-essential Copy For more information, see Node.js VM measurements. Other troubleshooting resources on our Explorers Hub forum: Troubleshooting install General configuration troubleshooting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.76196,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> your Node.js installation",
        "sections": "<em>Troubleshoot</em> your Node.js installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have encountered any of these common problems after installing your New Relic <em>Node.js</em> <em>agent</em>, try these <em>troubleshooting</em> tips. Solution Some common problems users encounter after installing the New Relic <em>Node.js</em> <em>agent</em> include: Not seeing data To minimize the amount of bandwidth"
      },
      "id": "617ea5ce64441fa10bfbd7d5"
    }
  ],
  "/docs/apm/agents/nodejs-agent/troubleshooting/troubleshoot-browser-instrumentation-nodejs": [
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.57965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the Node.js <em>agent</em>",
        "sections": "Install the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " <em>Node.js</em> <em>agent</em> up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the <em>Node.js</em> release notes. When applicable, the release notes include a download link with instructions on how to update the <em>Node.js</em> <em>agent</em>. <em>Troubleshooting</em> After you update the <em>agent</em>, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the <em>troubleshooting</em> procedures."
      },
      "id": "617ea532e7b9d296b8c05c6d"
    },
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.31328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshoot</em> your installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. <em>Troubleshoot</em> your installation If you encounter issues with your <em>Node.js</em> <em>agent</em>, see our <em>troubleshooting</em> information: Large memory usage: If you&#x27;ve installed the <em>Node.js</em> <em>agent</em> and your memory"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Troubleshoot your Node.js installation",
        "Problem",
        "Solution",
        "Not seeing data",
        "Installation problems",
        "Log files",
        "Missing VM metrics"
      ],
      "title": "Troubleshoot your Node.js installation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "ac8a295dad179b2f8ac01410a0cb6a5bd33108a2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation/",
      "published_at": "2021-12-05T05:48:15Z",
      "updated_at": "2021-10-23T22:19:28Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have encountered any of these common problems after installing your New Relic Node.js agent, try these troubleshooting tips. Solution Some common problems users encounter after installing the New Relic Node.js agent include: Not seeing data To minimize the amount of bandwidth the Node.js agent consumes, New Relic only reports data once per minute. If you add the agent to tests that take less than a minute to run, it will not have time to report data to New Relic. If you do not see transaction traces or other data after deploying the agent, this may be due to configuration, framework, or Apdex settings. Use New Relic Diagnostics to try to automatically identify the issue. Installation problems What to check Comments Main module Ensure that you have added require('newrelic'); as the first line of the app's main module. If the require is added later, the Node.js agent may not properly instrument your application. Conditional logic If you have any conditional logic in your require, move the conditional logic to your newrelic.js configuration file. Frameworks For problems with supported frameworks, make sure you are using Connect, Express, Hapi, Kraken, or Restify. There are other Node.js frameworks, but New Relic does not support all of them. Apdex For problems with your Apdex results, try adjusting your Apdex score via your Node.js agent config file (newrelic.js) or the New Relic user interface. Log files The Node.js agent writes its log to the newrelic_agent.log file in the application directory, unless you have changed the logging settings. If the agent does not send data or crashes your app, you can generate a troubleshooting log file to accompany bug reports and support requests. Missing VM metrics The agent can collect VM metrics related to garbage collection (GC), memory, and CPU. Some of these metrics require an additional native module to be installed. Here are some common problems and their solutions: Problem During installation, npm shows one of the following error messages: gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable. Copy gyp ERR! build error gyp ERR! stack Error: not found: make Copy make: g++: Command not found Copy Solution Ensure that the prerequisites for the node-gyp module are installed. On Debian/Ubuntu platforms, use this command: apt-get install build-essential Copy For more information, see Node.js VM measurements. Other troubleshooting resources on our Explorers Hub forum: Troubleshooting install General configuration troubleshooting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.761955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> your Node.js installation",
        "sections": "<em>Troubleshoot</em> your Node.js installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have encountered any of these common problems after installing your New Relic <em>Node.js</em> <em>agent</em>, try these <em>troubleshooting</em> tips. Solution Some common problems users encounter after installing the New Relic <em>Node.js</em> <em>agent</em> include: Not seeing data To minimize the amount of bandwidth"
      },
      "id": "617ea5ce64441fa10bfbd7d5"
    }
  ],
  "/docs/apm/agents/nodejs-agent/troubleshooting/troubleshoot-message-consumers": [
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.57965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the Node.js <em>agent</em>",
        "sections": "Install the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " <em>Node.js</em> <em>agent</em> up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the <em>Node.js</em> release notes. When applicable, the release notes include a download link with instructions on how to update the <em>Node.js</em> <em>agent</em>. <em>Troubleshooting</em> After you update the <em>agent</em>, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the <em>troubleshooting</em> procedures."
      },
      "id": "617ea532e7b9d296b8c05c6d"
    },
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.31328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshoot</em> your installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. <em>Troubleshoot</em> your installation If you encounter issues with your <em>Node.js</em> <em>agent</em>, see our <em>troubleshooting</em> information: Large memory usage: If you&#x27;ve installed the <em>Node.js</em> <em>agent</em> and your memory"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Troubleshoot your Node.js installation",
        "Problem",
        "Solution",
        "Not seeing data",
        "Installation problems",
        "Log files",
        "Missing VM metrics"
      ],
      "title": "Troubleshoot your Node.js installation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "ac8a295dad179b2f8ac01410a0cb6a5bd33108a2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation/",
      "published_at": "2021-12-05T05:48:15Z",
      "updated_at": "2021-10-23T22:19:28Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have encountered any of these common problems after installing your New Relic Node.js agent, try these troubleshooting tips. Solution Some common problems users encounter after installing the New Relic Node.js agent include: Not seeing data To minimize the amount of bandwidth the Node.js agent consumes, New Relic only reports data once per minute. If you add the agent to tests that take less than a minute to run, it will not have time to report data to New Relic. If you do not see transaction traces or other data after deploying the agent, this may be due to configuration, framework, or Apdex settings. Use New Relic Diagnostics to try to automatically identify the issue. Installation problems What to check Comments Main module Ensure that you have added require('newrelic'); as the first line of the app's main module. If the require is added later, the Node.js agent may not properly instrument your application. Conditional logic If you have any conditional logic in your require, move the conditional logic to your newrelic.js configuration file. Frameworks For problems with supported frameworks, make sure you are using Connect, Express, Hapi, Kraken, or Restify. There are other Node.js frameworks, but New Relic does not support all of them. Apdex For problems with your Apdex results, try adjusting your Apdex score via your Node.js agent config file (newrelic.js) or the New Relic user interface. Log files The Node.js agent writes its log to the newrelic_agent.log file in the application directory, unless you have changed the logging settings. If the agent does not send data or crashes your app, you can generate a troubleshooting log file to accompany bug reports and support requests. Missing VM metrics The agent can collect VM metrics related to garbage collection (GC), memory, and CPU. Some of these metrics require an additional native module to be installed. Here are some common problems and their solutions: Problem During installation, npm shows one of the following error messages: gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable. Copy gyp ERR! build error gyp ERR! stack Error: not found: make Copy make: g++: Command not found Copy Solution Ensure that the prerequisites for the node-gyp module are installed. On Debian/Ubuntu platforms, use this command: apt-get install build-essential Copy For more information, see Node.js VM measurements. Other troubleshooting resources on our Explorers Hub forum: Troubleshooting install General configuration troubleshooting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.761955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> your Node.js installation",
        "sections": "<em>Troubleshoot</em> your Node.js installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have encountered any of these common problems after installing your New Relic <em>Node.js</em> <em>agent</em>, try these <em>troubleshooting</em> tips. Solution Some common problems users encounter after installing the New Relic <em>Node.js</em> <em>agent</em> include: Not seeing data To minimize the amount of bandwidth"
      },
      "id": "617ea5ce64441fa10bfbd7d5"
    }
  ],
  "/docs/apm/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation": [
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.57962,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the Node.js <em>agent</em>",
        "sections": "Install the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " <em>Node.js</em> <em>agent</em> up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the <em>Node.js</em> release notes. When applicable, the release notes include a download link with instructions on how to update the <em>Node.js</em> <em>agent</em>. <em>Troubleshooting</em> After you update the <em>agent</em>, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the <em>troubleshooting</em> procedures."
      },
      "id": "617ea532e7b9d296b8c05c6d"
    },
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.31326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshoot</em> your installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. <em>Troubleshoot</em> your installation If you encounter issues with your <em>Node.js</em> <em>agent</em>, see our <em>troubleshooting</em> information: Large memory usage: If you&#x27;ve installed the <em>Node.js</em> <em>agent</em> and your memory"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Generate trace log for troubleshooting (Node.js)",
        "Important",
        "Generate log files",
        "Examine log file"
      ],
      "title": "Generate trace log for troubleshooting (Node.js)",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "3421d4243bcf05070a999d7bc79eab6c6f1372a0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs/",
      "published_at": "2021-12-05T06:51:19Z",
      "updated_at": "2021-10-31T14:17:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your New Relic Node.js agent log captures errors at the default info level. However, when troubleshooting or debugging, generate a more verbose trace log to help find and investigate problems. Important The trace log setting is a highly verbose logging level. To reduce disk space consumption, return the logging : { section's level to its original setting after testing. Generate log files To generate the detailed trace log file: Edit your newrelic.js file and change the logging section's level to trace. logging: { level: 'trace' } Copy Restart Node. Exercise your web application for about five minutes to generate sufficient logging data. After testing, change the level to a less verbose logging level, such as info (default). Open and examine the generated log file. Examine log file By default, the Node.js agent stores the log file in the current working directory as newrelic_agent.log. If the log file or folder are not visible: Check whether you have set the logging path to stdout or stderr. Verify that the current working directory is the same as the directory where you expect the log file to be located.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.841644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "sections": "Generate trace log for <em>troubleshooting</em> (Node.js)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Your New Relic <em>Node.js</em> <em>agent</em> log captures errors at the default info level. However, when <em>troubleshooting</em> or debugging, generate a more verbose trace log to help find and investigate problems. Important The trace log setting is a highly verbose logging level. To reduce disk space consumption"
      },
      "id": "617ea562e7b9d2fd44c05078"
    }
  ],
  "/docs/apm/agents/nodejs-agent/troubleshooting/troubleshooting-large-memory-usage-nodejs": [
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "View logs for your APM and infrastructure data",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6c1368271a70bf6f2274d39e9b309ea4ad9b9b48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-12-05T06:50:39Z",
      "updated_at": "2021-11-25T18:39:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To complete a basic Node.js agent installation, you can use our guided installation for an automated install, (choose EU if you're in the EU) or follow the instructions in this document. Either way, you need a New Relic account if you don't already have one. (It's free, forever!) Get an account Start agent install EU guided install Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Important If you are using Babel or a similar transpiler you can safeguard against any issues related to module load order by utilizing the Node command line option '-r' to preload the 'newrelic' module at application startup. For example, if your application's entry point is ./dist/server.js then you would use the require flag like so: node -r newrelic ./dist/server.js Copy Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.57962,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the Node.js <em>agent</em>",
        "sections": "Install the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " <em>Node.js</em> <em>agent</em> up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the <em>Node.js</em> release notes. When applicable, the release notes include a download link with instructions on how to update the <em>Node.js</em> <em>agent</em>. <em>Troubleshooting</em> After you update the <em>agent</em>, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the <em>troubleshooting</em> procedures."
      },
      "id": "617ea532e7b9d296b8c05c6d"
    },
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "View logs for your APM and infrastructure data",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-12-05T06:49:12Z",
      "updated_at": "2021-11-15T18:05:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.31326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshoot</em> your installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. <em>Troubleshoot</em> your installation If you encounter issues with your <em>Node.js</em> <em>agent</em>, see our <em>troubleshooting</em> information: Large memory usage: If you&#x27;ve installed the <em>Node.js</em> <em>agent</em> and your memory"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Troubleshoot your Node.js installation",
        "Problem",
        "Solution",
        "Not seeing data",
        "Installation problems",
        "Log files",
        "Missing VM metrics"
      ],
      "title": "Troubleshoot your Node.js installation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Troubleshooting"
      ],
      "external_id": "ac8a295dad179b2f8ac01410a0cb6a5bd33108a2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation/",
      "published_at": "2021-12-05T05:48:15Z",
      "updated_at": "2021-10-23T22:19:28Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem If you have encountered any of these common problems after installing your New Relic Node.js agent, try these troubleshooting tips. Solution Some common problems users encounter after installing the New Relic Node.js agent include: Not seeing data To minimize the amount of bandwidth the Node.js agent consumes, New Relic only reports data once per minute. If you add the agent to tests that take less than a minute to run, it will not have time to report data to New Relic. If you do not see transaction traces or other data after deploying the agent, this may be due to configuration, framework, or Apdex settings. Use New Relic Diagnostics to try to automatically identify the issue. Installation problems What to check Comments Main module Ensure that you have added require('newrelic'); as the first line of the app's main module. If the require is added later, the Node.js agent may not properly instrument your application. Conditional logic If you have any conditional logic in your require, move the conditional logic to your newrelic.js configuration file. Frameworks For problems with supported frameworks, make sure you are using Connect, Express, Hapi, Kraken, or Restify. There are other Node.js frameworks, but New Relic does not support all of them. Apdex For problems with your Apdex results, try adjusting your Apdex score via your Node.js agent config file (newrelic.js) or the New Relic user interface. Log files The Node.js agent writes its log to the newrelic_agent.log file in the application directory, unless you have changed the logging settings. If the agent does not send data or crashes your app, you can generate a troubleshooting log file to accompany bug reports and support requests. Missing VM metrics The agent can collect VM metrics related to garbage collection (GC), memory, and CPU. Some of these metrics require an additional native module to be installed. Here are some common problems and their solutions: Problem During installation, npm shows one of the following error messages: gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable. Copy gyp ERR! build error gyp ERR! stack Error: not found: make Copy make: g++: Command not found Copy Solution Ensure that the prerequisites for the node-gyp module are installed. On Debian/Ubuntu platforms, use this command: apt-get install build-essential Copy For more information, see Node.js VM measurements. Other troubleshooting resources on our Explorers Hub forum: Troubleshooting install General configuration troubleshooting",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.76195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> your Node.js installation",
        "sections": "<em>Troubleshoot</em> your Node.js installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Problem If you have encountered any of these common problems after installing your New Relic <em>Node.js</em> <em>agent</em>, try these <em>troubleshooting</em> tips. Solution Some common problems users encounter after installing the New Relic <em>Node.js</em> <em>agent</em> include: Not seeing data To minimize the amount of bandwidth"
      },
      "id": "617ea5ce64441fa10bfbd7d5"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.8017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " script that automates some <em>installation</em> tasks) For other types of <em>PHP</em> installations and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "def3952764ac1ebff92507dcc0a4fe4f5f895fee",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-12-05T09:04:56Z",
      "updated_at": "2021-10-31T13:19:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.34195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including <em>PHP</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the <em>PHP</em> <em>agent</em>, make sure your <em>PHP</em> web application"
      },
      "id": "617e97d5e7b9d24146c03cbc"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic."
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "5ae0d9a60d397b0d07cedd4c5a3536011f4e5fb2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-12-05T09:06:47Z",
      "updated_at": "2021-10-31T13:37:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.345825,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "617e9c16196a67e6d9f7c853"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/install-new-relic-php-agent-gae-flexible-environment": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 492.81143,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> for <em>PHP</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ") Silent mode for the <em>install</em> script Google App Engine (<em>GAE</em>) flex <em>environment</em> installation for <em>New</em> <em>Relic</em>&#x27;s <em>PHP</em> <em>agent</em> Configure the <em>agent</em> The <em>agent</em> includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of <em>agent</em> configuration"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-05T09:30:38Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 384.22876,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> for Python",
        "sections": "<em>Install</em> the Python <em>agent</em>",
        "tags": "<em>Agents</em>",
        "body": " <em>agent</em> in a Google App Engine <em>flexible</em> <em>environment</em>. Monitor app performance After you <em>install</em> the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in <em>New</em> <em>Relic</em> One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). Get"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Install the Go agent in GAE flexible environment",
        "Important",
        "Build a custom runtime using Docker",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Disable health checks",
        "Get agent troubleshooting logs from GAE"
      ],
      "title": "Install the Go agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "45635e5ca8f209b31de810abc207ae9926c03274",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/go-agent/installation/install-go-agent-gae-flexible-environment/",
      "published_at": "2021-12-05T04:02:48Z",
      "updated_at": "2021-10-23T20:23:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our Go agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. Here we explain how to add New Relic to your GAE flex app by configuring a custom runtime, and give an example of deploying a Go app with Docker. Important The Go agent can run in a GAE flexible environment using a custom runtime. Due to limitations of other environments, do not use the GAE standard environment or Google App Engine's \"native mode\" installation. Build a custom runtime using Docker See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by installing the Go agent, building a custom Go runtime for Docker, and deploying a golang application. For more information about deploying and configuring your Go app in the GAE flexible environment, see: Google App Engine's documentation for Go Google App Engine's tutorials to deploy a Go app 1. Set up the GAE project and install dependencies Follow standard procedures to install the Go agent for your specific app server, including your license key. Follow Google App Engine procedures for Go to create a new Cloud Platform project, create an App Engine application, download and install git, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. The following Dockerfile example code defines the golang version used. FROM golang:1.8-onbuild CMD go run main.go Copy 4. Build a Docker image To build the Docker image, run the following command. Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build --rm -t Docker-image-name . Copy 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud --project go-app-name app deploy Copy Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. Recommendation: Configure your app.yaml to disable health checks by adding: health_check: enable_health_check: False Copy Get agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see GAE's documentation for debugging an instance. To redirect New Relic Go agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.yml file to: log_file_name: STDOUT Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 302.69748,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Go <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "sections": "<em>Install</em> the Go <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "tags": "<em>Installation</em>",
        "body": "With our Go <em>agent</em>, you can monitor applications that reside in the Google App Engine (<em>GAE</em>) <em>flexible</em> <em>environment</em>. Adding <em>New</em> <em>Relic</em> to your <em>GAE</em> flex app gives you insight into the health and performance of your app and extends <em>GAE</em> with metrics you can view in APM and browser monitoring. Here we"
      },
      "id": "617e6e9ee7b9d27090c06297"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/php-agent-heroku": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.80154,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " script that automates some <em>installation</em> tasks) For other types of <em>PHP</em> installations and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "00f2e7a62d2d7360f625743a72f3f359b57955ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-12-05T05:49:02Z",
      "updated_at": "2021-10-31T14:18:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.04929,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "617ea5cd28ccbc90217ffa69"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic."
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "5ae0d9a60d397b0d07cedd4c5a3536011f4e5fb2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-12-05T09:06:47Z",
      "updated_at": "2021-10-31T13:37:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.34582,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "617e9c16196a67e6d9f7c853"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.80154,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " script that automates some <em>installation</em> tasks) For other types of <em>PHP</em> installations and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "00f2e7a62d2d7360f625743a72f3f359b57955ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-12-05T05:49:02Z",
      "updated_at": "2021-10-31T14:18:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.04929,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "617ea5cd28ccbc90217ffa69"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "def3952764ac1ebff92507dcc0a4fe4f5f895fee",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-12-05T09:04:56Z",
      "updated_at": "2021-10-31T13:19:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.34193,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including <em>PHP</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the <em>PHP</em> <em>agent</em>, make sure your <em>PHP</em> web application"
      },
      "id": "617e97d5e7b9d24146c03cbc"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/silent-mode-install-script-advanced": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.8014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " script that automates some <em>installation</em> tasks) For other types of <em>PHP</em> installations and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "00f2e7a62d2d7360f625743a72f3f359b57955ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-12-05T05:49:02Z",
      "updated_at": "2021-10-31T14:18:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.04929,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "617ea5cd28ccbc90217ffa69"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "def3952764ac1ebff92507dcc0a4fe4f5f895fee",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-12-05T09:04:56Z",
      "updated_at": "2021-10-31T13:19:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.34193,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including <em>PHP</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the <em>PHP</em> <em>agent</em>, make sure your <em>PHP</em> web application"
      },
      "id": "617e97d5e7b9d24146c03cbc"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/starting-php-daemon-advanced": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.8014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " script that automates some <em>installation</em> tasks) For other types of <em>PHP</em> installations and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "00f2e7a62d2d7360f625743a72f3f359b57955ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-12-05T05:49:02Z",
      "updated_at": "2021-10-31T14:18:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.04929,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "617ea5cd28ccbc90217ffa69"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "def3952764ac1ebff92507dcc0a4fe4f5f895fee",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-12-05T09:04:56Z",
      "updated_at": "2021-10-31T13:19:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.34193,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including <em>PHP</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the <em>PHP</em> <em>agent</em>, make sure your <em>PHP</em> web application"
      },
      "id": "617e97d5e7b9d24146c03cbc"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/uninstalling-php-agent": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.8014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " script that automates some <em>installation</em> tasks) For other types of <em>PHP</em> installations and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "00f2e7a62d2d7360f625743a72f3f359b57955ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-12-05T05:49:02Z",
      "updated_at": "2021-10-31T14:18:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.04929,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "617ea5cd28ccbc90217ffa69"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "def3952764ac1ebff92507dcc0a4fe4f5f895fee",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-12-05T09:04:56Z",
      "updated_at": "2021-10-31T13:19:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.34193,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including <em>PHP</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the <em>PHP</em> <em>agent</em>, make sure your <em>PHP</em> web application"
      },
      "id": "617e97d5e7b9d24146c03cbc"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/use-newrelic-install-script-php": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.80127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " script that automates some <em>installation</em> tasks) For other types of <em>PHP</em> installations and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "00f2e7a62d2d7360f625743a72f3f359b57955ad",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-12-05T05:49:02Z",
      "updated_at": "2021-10-31T14:18:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.04929,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "617ea5cd28ccbc90217ffa69"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "def3952764ac1ebff92507dcc0a4fe4f5f895fee",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-12-05T09:04:56Z",
      "updated_at": "2021-10-31T13:19:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.34192,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including <em>PHP</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the <em>PHP</em> <em>agent</em>, make sure your <em>PHP</em> web application"
      },
      "id": "617e97d5e7b9d24146c03cbc"
    }
  ],
  "/docs/apm/agents/php-agent/attributes/attribute-examples": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.0722,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " questions about application performance and customer experience. Use default transaction <em>attributes</em> or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent attributes",
        "response.statusCode",
        "newrelic_add_custom_parameter API call",
        "request.headers.accept",
        "request.headers.contentType",
        "request.headers.contentLength",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.\\*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "SERVER_NAME",
        "Change where attributes are sent",
        "Upgrading the PHP agent"
      ],
      "title": "PHP agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "d0d8d50c30e576f3a323330d87045fb2b120b434",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/attributes/php-agent-attributes/",
      "published_at": "2021-12-05T05:43:32Z",
      "updated_at": "2021-10-31T14:22:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can help you gain greater insight into your application and annotate the data in New Relic. Both default and custom attributes are visible in APM transaction traces, distributed traces, and error analytics; and APM and browser events. You can customize exactly which attributes will be sent to each of these destinations. Read on to learn about the PHP agent attributes, how to enable or disable them, and the rules the agent follows to determine which attributes to include or exclude for a destination. PHP agent attributes In addition to the default APM attributes, you can configure the following attributes in the PHP agent. See PHP agent (newrelic.ini) settings and Enabling and disabling attributes for more information. response.statusCode The response status code for a web request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable newrelic_add_custom_parameter API call Attributes added to an newrelic_add_custom_parameter() call on the New Relic API. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Enabled request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Disabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.headers.userAgent The contents of the User-Agent HTTP header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.\\* Request parameters from the transaction. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.uri The request URI from the transaction. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType The outgoing response content-type as read from the Content-Type response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable SERVER_NAME The name of the server host under which the current script is executing. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Disabled Change where attributes are sent Tip All destinations are open to attribute collection by default in the PHP agent, except newrelic.browser_monitoring.attributes.enabled. To change which attributes are sent to New Relic destinations: Open or close any destination to attribute collection by changing the .enabled destination property. Change the default attribute setting by adding the attribute name to the destination's .include or .exclude properties. See Attribute rules for which settings supersede each other. Upgrading the PHP agent When upgrading to PHP agent 4.9 or higher, upgrade your configuration file. For more information about deprecated properties, see Enabling and disabling attributes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.42908,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", distributed traces, and error analytics; and APM and browser events. You can customize exactly which <em>attributes</em> will be sent to each of these destinations. Read on to learn about the <em>PHP</em> <em>agent</em> <em>attributes</em>, how to enable or disable them, and the rules the <em>agent</em> follows to determine which <em>attributes</em>"
      },
      "id": "617ea6a028ccbc6f9f7ff1cb"
    },
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "4dd8b3887cb6da183aa5d7079863d6f5d55f4ade",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-12-05T05:40:25Z",
      "updated_at": "2021-10-31T13:20:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent in page view data. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.861984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable or disable <em>attributes</em>",
        "sections": "Enable or disable <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Learn about properties to enable or disable <em>attributes</em>, and the rules that New Relic uses when determining which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the <em>PHP</em> <em>agent</em> properties that have been deprecated with the release of New Relic <em>agent</em> <em>attributes</em>"
      },
      "id": "617e983864441fa35dfbe368"
    }
  ],
  "/docs/apm/agents/php-agent/attributes/enable-or-disable-attributes": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.07205,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " questions about application performance and customer experience. Use default transaction <em>attributes</em> or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent attributes",
        "response.statusCode",
        "newrelic_add_custom_parameter API call",
        "request.headers.accept",
        "request.headers.contentType",
        "request.headers.contentLength",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.\\*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "SERVER_NAME",
        "Change where attributes are sent",
        "Upgrading the PHP agent"
      ],
      "title": "PHP agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "d0d8d50c30e576f3a323330d87045fb2b120b434",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/attributes/php-agent-attributes/",
      "published_at": "2021-12-05T05:43:32Z",
      "updated_at": "2021-10-31T14:22:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can help you gain greater insight into your application and annotate the data in New Relic. Both default and custom attributes are visible in APM transaction traces, distributed traces, and error analytics; and APM and browser events. You can customize exactly which attributes will be sent to each of these destinations. Read on to learn about the PHP agent attributes, how to enable or disable them, and the rules the agent follows to determine which attributes to include or exclude for a destination. PHP agent attributes In addition to the default APM attributes, you can configure the following attributes in the PHP agent. See PHP agent (newrelic.ini) settings and Enabling and disabling attributes for more information. response.statusCode The response status code for a web request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable newrelic_add_custom_parameter API call Attributes added to an newrelic_add_custom_parameter() call on the New Relic API. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Enabled request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Disabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.headers.userAgent The contents of the User-Agent HTTP header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.\\* Request parameters from the transaction. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.uri The request URI from the transaction. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType The outgoing response content-type as read from the Content-Type response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable SERVER_NAME The name of the server host under which the current script is executing. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Disabled Change where attributes are sent Tip All destinations are open to attribute collection by default in the PHP agent, except newrelic.browser_monitoring.attributes.enabled. To change which attributes are sent to New Relic destinations: Open or close any destination to attribute collection by changing the .enabled destination property. Change the default attribute setting by adding the attribute name to the destination's .include or .exclude properties. See Attribute rules for which settings supersede each other. Upgrading the PHP agent When upgrading to PHP agent 4.9 or higher, upgrade your configuration file. For more information about deprecated properties, see Enabling and disabling attributes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.42908,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", distributed traces, and error analytics; and APM and browser events. You can customize exactly which <em>attributes</em> will be sent to each of these destinations. Read on to learn about the <em>PHP</em> <em>agent</em> <em>attributes</em>, how to enable or disable them, and the rules the <em>agent</em> follows to determine which <em>attributes</em>"
      },
      "id": "617ea6a028ccbc6f9f7ff1cb"
    },
    {
      "sections": [
        "Attribute examples",
        "Capture request parameters",
        "Capture only specific request parameters",
        "Disabling all attributes",
        "Selecting specific destinations",
        "Selecting values and destinations"
      ],
      "title": "Attribute examples",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "9c34e7a08ee35fc0a3b7e1c5485c729e007cc988",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/attributes/attribute-examples/",
      "published_at": "2021-12-05T05:34:02Z",
      "updated_at": "2021-10-31T13:20:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some examples of using attributes with the New Relic PHP agent. To use these settings: Modify your newrelic.ini file as applicable. Restart the agent and its daemon for changes to take effect. Capture request parameters By default, the agent does not capture request parameters. You can use the following configuration to turn on parameter capture for these default destinations: transaction_tracer, transaction_events, and error_collector. If you want to limit the destinations that you capture parameters for, see Selecting specific destinations. Configuration: newrelic.attributes.include = request.parameters.* Copy Capture only specific request parameters To capture only specific request parameters, you can pass a list to attributes.include: Configuration: newrelic.attributes.include = request.parameters.user_id request.parameters.product_id Copy Disabling all attributes In this example, attributes are disabled, so the include and exclude lists will be ignored and all attributes will be filtered out. Configuration: newrelic.attributes.enabled = false newrelic.attributes.include = request.parameters.* Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: none transaction_events: none browser_monitoring: none Copy Selecting specific destinations In this example: Attributes are disabled for transaction traces. The include and exclude lists will be ignored, and all attributes will be filtered out for this destination. Attributes are also disabled for browser monitoring by default. Request parameters (prefixed with request.parameters.) are off by default for all destinations. As a result, only bar is sent in traced errors and transaction events. Configuration: newrelic.attributes.enabled = true newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.exclude = foo Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: bar transaction_events: bar browser_monitoring: none Copy Selecting values and destinations In this example, specific input keys are selected for certain output destinations and excluded from others. The food.fruit.banana key will be excluded only from transaction traces. The food and food.bread keys will be excluded from all destinations. Configuration: newrelic.browser_monitoring.attributes.enabled = true newrelic.attributes.exclude = food* newrelic.attributes.include = food.fruit.* newrelic.transaction_tracer.attributes.exclude = food.fruit.banana Copy Input keys: food, food.bread, food.fruit.banana, food.fruit.apple Copy Output for destinations: transaction_tracer: food.fruit.apple error_collector: food.fruit.banana, food.fruit.apple transaction_events: food.fruit.banana, food.fruit.apple browser_monitoring: food.fruit.banana, food.fruit.apple Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.861664,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Attribute</em> examples",
        "sections": "Disabling all <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Here are some examples of using <em>attributes</em> with the New Relic <em>PHP</em> <em>agent</em>. To use these settings: Modify your newrelic.ini file as applicable. Restart the <em>agent</em> and its daemon for changes to take effect. Capture request parameters By default, the <em>agent</em> does not capture request parameters. You can use"
      },
      "id": "617e980764441f2a90fbe081"
    }
  ],
  "/docs/apm/agents/php-agent/attributes/php-agent-attributes": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.07205,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " questions about application performance and customer experience. Use default transaction <em>attributes</em> or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "4dd8b3887cb6da183aa5d7079863d6f5d55f4ade",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-12-05T05:40:25Z",
      "updated_at": "2021-10-31T13:20:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent in page view data. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.861984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable or disable <em>attributes</em>",
        "sections": "Enable or disable <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Learn about properties to enable or disable <em>attributes</em>, and the rules that New Relic uses when determining which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the <em>PHP</em> <em>agent</em> properties that have been deprecated with the release of New Relic <em>agent</em> <em>attributes</em>"
      },
      "id": "617e983864441fa35dfbe368"
    },
    {
      "sections": [
        "Attribute examples",
        "Capture request parameters",
        "Capture only specific request parameters",
        "Disabling all attributes",
        "Selecting specific destinations",
        "Selecting values and destinations"
      ],
      "title": "Attribute examples",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "9c34e7a08ee35fc0a3b7e1c5485c729e007cc988",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/attributes/attribute-examples/",
      "published_at": "2021-12-05T05:34:02Z",
      "updated_at": "2021-10-31T13:20:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some examples of using attributes with the New Relic PHP agent. To use these settings: Modify your newrelic.ini file as applicable. Restart the agent and its daemon for changes to take effect. Capture request parameters By default, the agent does not capture request parameters. You can use the following configuration to turn on parameter capture for these default destinations: transaction_tracer, transaction_events, and error_collector. If you want to limit the destinations that you capture parameters for, see Selecting specific destinations. Configuration: newrelic.attributes.include = request.parameters.* Copy Capture only specific request parameters To capture only specific request parameters, you can pass a list to attributes.include: Configuration: newrelic.attributes.include = request.parameters.user_id request.parameters.product_id Copy Disabling all attributes In this example, attributes are disabled, so the include and exclude lists will be ignored and all attributes will be filtered out. Configuration: newrelic.attributes.enabled = false newrelic.attributes.include = request.parameters.* Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: none transaction_events: none browser_monitoring: none Copy Selecting specific destinations In this example: Attributes are disabled for transaction traces. The include and exclude lists will be ignored, and all attributes will be filtered out for this destination. Attributes are also disabled for browser monitoring by default. Request parameters (prefixed with request.parameters.) are off by default for all destinations. As a result, only bar is sent in traced errors and transaction events. Configuration: newrelic.attributes.enabled = true newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.exclude = foo Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: bar transaction_events: bar browser_monitoring: none Copy Selecting values and destinations In this example, specific input keys are selected for certain output destinations and excluded from others. The food.fruit.banana key will be excluded only from transaction traces. The food and food.bread keys will be excluded from all destinations. Configuration: newrelic.browser_monitoring.attributes.enabled = true newrelic.attributes.exclude = food* newrelic.attributes.include = food.fruit.* newrelic.transaction_tracer.attributes.exclude = food.fruit.banana Copy Input keys: food, food.bread, food.fruit.banana, food.fruit.apple Copy Output for destinations: transaction_tracer: food.fruit.apple error_collector: food.fruit.banana, food.fruit.apple transaction_events: food.fruit.banana, food.fruit.apple browser_monitoring: food.fruit.banana, food.fruit.apple Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.861664,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Attribute</em> examples",
        "sections": "Disabling all <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Here are some examples of using <em>attributes</em> with the New Relic <em>PHP</em> <em>agent</em>. To use these settings: Modify your newrelic.ini file as applicable. Restart the <em>agent</em> and its daemon for changes to take effect. Capture request parameters By default, the <em>agent</em> does not capture request parameters. You can use"
      },
      "id": "617e980764441f2a90fbe081"
    }
  ],
  "/docs/apm/agents/php-agent/configuration/name-your-php-application": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.08095,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Configure</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP: Configure logs in context",
        "Set up your PHP app",
        "PHP configuration with Monolog",
        "Tip",
        "PHP configuration with other log forwarders",
        "What's next?"
      ],
      "title": "PHP: Configure logs in context",
      "type": "docs",
      "tags": [
        "Logs",
        "Enable log management in New Relic",
        "Logs in context for PHP"
      ],
      "external_id": "bddc3ec75de7bde2b5eff995d85d11715fd61be9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/logs/logs-context/configure-logs-context-php/",
      "published_at": "2021-12-04T22:02:35Z",
      "updated_at": "2021-12-04T22:02:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Logs in context for the PHP agent connects your logs and APM data in New Relic. Bringing all of this data together in a single tool helps you quickly get to the root cause of an issue and find the log lines that you need to identify and resolve a problem. Set up your PHP app To enable logs in context for APM apps monitored by PHP: Make sure you have already set up logging in New Relic. This includes configuring a supported log forwarder that collects your application logs and extends the metadata that is forwarded to New Relic. Install or update to the latest PHP agent version, and enable distributed tracing. Use PHP agent version 9.13.0.270 or higher for logs in context. Install Monolog version 1 or 2, or use a compatible log forwarding plugin if you are not using the built-in Monolog Handler for New Relic. Configure logs in context for PHP using the Monolog extension, if used. PHP configuration with Monolog You must install the Monolog log enricher package before you can configure Monolog for New Relic logs in context. This is done by using Composer to install the newrelic/monolog-enricher package. In most cases, use the Processor and Handler classes provided by the log enricher package in conjunction with Monolog's built-in BufferHandler. The Processor adds the contextual metadata required for New Relic logs in context to operate. The Handler sends the log records to New Relic Logs. The BufferHandler ensures that the logs are delivered with as little overhead as possible. At the point where you create the Monolog\\Logger object, add the following pushProcessor and pushHandler calls to add the Processor and Handler: <?php use Monolog\\Handler\\BufferHandler; use Monolog\\Logger; use NewRelic\\Monolog\\Enricher\\{Handler, Processor}; $log = new Logger('log'); $log->pushProcessor(new Processor); $log->pushHandler(new BufferHandler(new Handler)); Copy Tip You can use the Processor and Handler in conjunction with any existing Monolog setup. You do not need to remove your existing processors and handlers. PHP configuration with other log forwarders If you use Monolog to send logs to a compatible log forwarder, and if you have already configured that tool to send logs to New Relic, you can use the Processor and Formatter solely for that tool. This option prevents additional overhead of sending logs directly to New Relic with the Handler. You will need to be using a handler that supports the setFormatter() method, and your logging tool must be able to ingest JSON logs. Here's an example of configuring Monolog to handle other log forwarders: <?php use Monolog\\Handler\\StreamHandler; use Monolog\\Logger; use NewRelic\\Monolog\\Enricher\\{Formatter, Processor}; $log = new Logger('log'); $log->pushProcessor(new Processor); $handler = new StreamHandler('php://stderr'); $handler->setFormatter(new Formatter); $log->pushHandler($handler); Copy To verify that you have configured the log appender correctly, run your application, then check your logs data in New Relic One using the query operator has:span.id has:trace.id. If everything is configured correctly and your data is being forwarded to New Relic with the enriched metadata, your logs should now be emitted as JSON and contain trace.id and span.id fields. If you don't see log data in the UI, follow the troubleshooting procedures. If the logs from your application do not include fields like trace.id and span.id, there may be a problem with the configuration of the Monolog log enricher. In this situation: Check that the PHP agent for your app has been installed and is configured to enable distributed tracing. Check that your application is using the Monolog logger object when sending log records, not syslog(). Check that another Monolog handler is not preventing the log record from bubbling. What's next? After you set up APM logs in context, make the most of your logging data: Explore the logging data across your platform with our Logs UI. View your logs in context data in distributed tracing. Note that for PHP, logs in context data doesn't appear in the Logs tab of the APM UI. Get deeper visibility into both your application and your platform performance data by forwarding your logs with our infrastructure monitoring agent. Review your infrastructure logs in the UI. Set up alerts. Query your data and create dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.13397,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em>: <em>Configure</em> logs in context",
        "sections": "<em>PHP</em>: <em>Configure</em> logs in context",
        "tags": "Logs in context for <em>PHP</em>",
        "body": " the troubleshooting procedures. If the logs from your application do not include fields like trace.id and span.id, there may be a problem with the <em>configuration</em> of the Monolog log enricher. In this situation: Check that the <em>PHP</em> <em>agent</em> for your app has been installed and is configured to enable distributed"
      },
      "id": "612b7ab4196a6714904948ae"
    },
    {
      "sections": [
        "Custom SSL certificates (Ruby)",
        "Use a custom CA bundle",
        "Installing SSL Certificates"
      ],
      "title": "Custom SSL certificates (Ruby)",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "4988704d9e8125f52d5f2a1a0335f205a320d8db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/configuration/custom-ssl-certificates-ruby/",
      "published_at": "2021-12-05T09:17:20Z",
      "updated_at": "2021-12-05T09:17:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic requires HTTPS for all traffic to APM and the New Relic REST API. The Ruby agent connects to New Relic collector servers over SSL by default, and uses a system/host installed set of SSL certificate to validate the identity of the collector servers when connecting. In most cases, this default set of certificates is sufficient. In certain configurations, you may need to use a custom CA bundle. For example, you may use an HTTP proxy to intercept and decrypt SSL traffic from the agent, which then establishes a separate SSL connection to New Relic. Custom CA bundles are available in versions 3.9.4 or higher of the Ruby agent. Use a custom CA bundle To configure the agent to use a custom CA bundle when validating the SSL certificate presented by a proxy, set the ca_bundle_path configuration setting in your newrelic.yml file or via the NEW_RELIC_CA_BUNDLE_PATH environment variable: common: &default_settings ca_bundle_path: certificates/mycert.pem # ... other settings ... Copy Specify a path to a .pem file containing each certificate you want the agent to use when validating the identity of the proxy or server. You can concatenate multiple certificates into a single .pem file. Relative path: If you specify a relative path, the agent will assign a path relative to the working directory of your app server process at runtime. Absolute path: If your working directory is / rather than the root of your application, be sure to specify an absolute path. Installing SSL Certificates If you're deploying a Ruby application and agent to a container or server that does not have CA certificates installed, you need to ensure they're now installed for 7.0 or highter releases of the agent to make successful HTTPS connections to New Relic servers. These CA certificates may be installed in various ways, depending on your host. The following external links are helpful guidiance for testing the readiness of your host and installing CA certificates: Troubleshooting SSL Certificate Errors Automated SSL Check Installing CA Certificates How to handle Certificates in Docker",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.75341,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Agents</em>",
        "body": " in versions 3.9.4 or higher of the Ruby <em>agent</em>. Use a custom CA bundle To configure the <em>agent</em> to use a custom CA bundle when validating the SSL certificate presented by a proxy, set the ca_bundle_path <em>configuration</em> setting in your newrelic.yml file or via the NEW_RELIC_CA_BUNDLE_PATH environment variable"
      },
      "id": "617e9526e7b9d244dbc05e66"
    }
  ],
  "/docs/apm/agents/php-agent/configuration/php-agent-configuration": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.08083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Configure</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP: Configure logs in context",
        "Set up your PHP app",
        "PHP configuration with Monolog",
        "Tip",
        "PHP configuration with other log forwarders",
        "What's next?"
      ],
      "title": "PHP: Configure logs in context",
      "type": "docs",
      "tags": [
        "Logs",
        "Enable log management in New Relic",
        "Logs in context for PHP"
      ],
      "external_id": "bddc3ec75de7bde2b5eff995d85d11715fd61be9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/logs/logs-context/configure-logs-context-php/",
      "published_at": "2021-12-04T22:02:35Z",
      "updated_at": "2021-12-04T22:02:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Logs in context for the PHP agent connects your logs and APM data in New Relic. Bringing all of this data together in a single tool helps you quickly get to the root cause of an issue and find the log lines that you need to identify and resolve a problem. Set up your PHP app To enable logs in context for APM apps monitored by PHP: Make sure you have already set up logging in New Relic. This includes configuring a supported log forwarder that collects your application logs and extends the metadata that is forwarded to New Relic. Install or update to the latest PHP agent version, and enable distributed tracing. Use PHP agent version 9.13.0.270 or higher for logs in context. Install Monolog version 1 or 2, or use a compatible log forwarding plugin if you are not using the built-in Monolog Handler for New Relic. Configure logs in context for PHP using the Monolog extension, if used. PHP configuration with Monolog You must install the Monolog log enricher package before you can configure Monolog for New Relic logs in context. This is done by using Composer to install the newrelic/monolog-enricher package. In most cases, use the Processor and Handler classes provided by the log enricher package in conjunction with Monolog's built-in BufferHandler. The Processor adds the contextual metadata required for New Relic logs in context to operate. The Handler sends the log records to New Relic Logs. The BufferHandler ensures that the logs are delivered with as little overhead as possible. At the point where you create the Monolog\\Logger object, add the following pushProcessor and pushHandler calls to add the Processor and Handler: <?php use Monolog\\Handler\\BufferHandler; use Monolog\\Logger; use NewRelic\\Monolog\\Enricher\\{Handler, Processor}; $log = new Logger('log'); $log->pushProcessor(new Processor); $log->pushHandler(new BufferHandler(new Handler)); Copy Tip You can use the Processor and Handler in conjunction with any existing Monolog setup. You do not need to remove your existing processors and handlers. PHP configuration with other log forwarders If you use Monolog to send logs to a compatible log forwarder, and if you have already configured that tool to send logs to New Relic, you can use the Processor and Formatter solely for that tool. This option prevents additional overhead of sending logs directly to New Relic with the Handler. You will need to be using a handler that supports the setFormatter() method, and your logging tool must be able to ingest JSON logs. Here's an example of configuring Monolog to handle other log forwarders: <?php use Monolog\\Handler\\StreamHandler; use Monolog\\Logger; use NewRelic\\Monolog\\Enricher\\{Formatter, Processor}; $log = new Logger('log'); $log->pushProcessor(new Processor); $handler = new StreamHandler('php://stderr'); $handler->setFormatter(new Formatter); $log->pushHandler($handler); Copy To verify that you have configured the log appender correctly, run your application, then check your logs data in New Relic One using the query operator has:span.id has:trace.id. If everything is configured correctly and your data is being forwarded to New Relic with the enriched metadata, your logs should now be emitted as JSON and contain trace.id and span.id fields. If you don't see log data in the UI, follow the troubleshooting procedures. If the logs from your application do not include fields like trace.id and span.id, there may be a problem with the configuration of the Monolog log enricher. In this situation: Check that the PHP agent for your app has been installed and is configured to enable distributed tracing. Check that your application is using the Monolog logger object when sending log records, not syslog(). Check that another Monolog handler is not preventing the log record from bubbling. What's next? After you set up APM logs in context, make the most of your logging data: Explore the logging data across your platform with our Logs UI. View your logs in context data in distributed tracing. Note that for PHP, logs in context data doesn't appear in the Logs tab of the APM UI. Get deeper visibility into both your application and your platform performance data by forwarding your logs with our infrastructure monitoring agent. Review your infrastructure logs in the UI. Set up alerts. Query your data and create dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.13389,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em>: <em>Configure</em> logs in context",
        "sections": "<em>PHP</em>: <em>Configure</em> logs in context",
        "tags": "Logs in context for <em>PHP</em>",
        "body": " the troubleshooting procedures. If the logs from your application do not include fields like trace.id and span.id, there may be a problem with the <em>configuration</em> of the Monolog log enricher. In this situation: Check that the <em>PHP</em> <em>agent</em> for your app has been installed and is configured to enable distributed"
      },
      "id": "612b7ab4196a6714904948ae"
    },
    {
      "sections": [
        "Custom SSL certificates (Ruby)",
        "Use a custom CA bundle",
        "Installing SSL Certificates"
      ],
      "title": "Custom SSL certificates (Ruby)",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "4988704d9e8125f52d5f2a1a0335f205a320d8db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/configuration/custom-ssl-certificates-ruby/",
      "published_at": "2021-12-05T09:17:20Z",
      "updated_at": "2021-12-05T09:17:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic requires HTTPS for all traffic to APM and the New Relic REST API. The Ruby agent connects to New Relic collector servers over SSL by default, and uses a system/host installed set of SSL certificate to validate the identity of the collector servers when connecting. In most cases, this default set of certificates is sufficient. In certain configurations, you may need to use a custom CA bundle. For example, you may use an HTTP proxy to intercept and decrypt SSL traffic from the agent, which then establishes a separate SSL connection to New Relic. Custom CA bundles are available in versions 3.9.4 or higher of the Ruby agent. Use a custom CA bundle To configure the agent to use a custom CA bundle when validating the SSL certificate presented by a proxy, set the ca_bundle_path configuration setting in your newrelic.yml file or via the NEW_RELIC_CA_BUNDLE_PATH environment variable: common: &default_settings ca_bundle_path: certificates/mycert.pem # ... other settings ... Copy Specify a path to a .pem file containing each certificate you want the agent to use when validating the identity of the proxy or server. You can concatenate multiple certificates into a single .pem file. Relative path: If you specify a relative path, the agent will assign a path relative to the working directory of your app server process at runtime. Absolute path: If your working directory is / rather than the root of your application, be sure to specify an absolute path. Installing SSL Certificates If you're deploying a Ruby application and agent to a container or server that does not have CA certificates installed, you need to ensure they're now installed for 7.0 or highter releases of the agent to make successful HTTPS connections to New Relic servers. These CA certificates may be installed in various ways, depending on your host. The following external links are helpful guidiance for testing the readiness of your host and installing CA certificates: Troubleshooting SSL Certificate Errors Automated SSL Check Installing CA Certificates How to handle Certificates in Docker",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.75333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Agents</em>",
        "body": " in versions 3.9.4 or higher of the Ruby <em>agent</em>. Use a custom CA bundle To configure the <em>agent</em> to use a custom CA bundle when validating the SSL certificate presented by a proxy, set the ca_bundle_path <em>configuration</em> setting in your newrelic.yml file or via the NEW_RELIC_CA_BUNDLE_PATH environment variable"
      },
      "id": "617e9526e7b9d244dbc05e66"
    }
  ],
  "/docs/apm/agents/php-agent/configuration/php-directory-ini-settings": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.08083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Configure</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP: Configure logs in context",
        "Set up your PHP app",
        "PHP configuration with Monolog",
        "Tip",
        "PHP configuration with other log forwarders",
        "What's next?"
      ],
      "title": "PHP: Configure logs in context",
      "type": "docs",
      "tags": [
        "Logs",
        "Enable log management in New Relic",
        "Logs in context for PHP"
      ],
      "external_id": "bddc3ec75de7bde2b5eff995d85d11715fd61be9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/logs/logs-context/configure-logs-context-php/",
      "published_at": "2021-12-04T22:02:35Z",
      "updated_at": "2021-12-04T22:02:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Logs in context for the PHP agent connects your logs and APM data in New Relic. Bringing all of this data together in a single tool helps you quickly get to the root cause of an issue and find the log lines that you need to identify and resolve a problem. Set up your PHP app To enable logs in context for APM apps monitored by PHP: Make sure you have already set up logging in New Relic. This includes configuring a supported log forwarder that collects your application logs and extends the metadata that is forwarded to New Relic. Install or update to the latest PHP agent version, and enable distributed tracing. Use PHP agent version 9.13.0.270 or higher for logs in context. Install Monolog version 1 or 2, or use a compatible log forwarding plugin if you are not using the built-in Monolog Handler for New Relic. Configure logs in context for PHP using the Monolog extension, if used. PHP configuration with Monolog You must install the Monolog log enricher package before you can configure Monolog for New Relic logs in context. This is done by using Composer to install the newrelic/monolog-enricher package. In most cases, use the Processor and Handler classes provided by the log enricher package in conjunction with Monolog's built-in BufferHandler. The Processor adds the contextual metadata required for New Relic logs in context to operate. The Handler sends the log records to New Relic Logs. The BufferHandler ensures that the logs are delivered with as little overhead as possible. At the point where you create the Monolog\\Logger object, add the following pushProcessor and pushHandler calls to add the Processor and Handler: <?php use Monolog\\Handler\\BufferHandler; use Monolog\\Logger; use NewRelic\\Monolog\\Enricher\\{Handler, Processor}; $log = new Logger('log'); $log->pushProcessor(new Processor); $log->pushHandler(new BufferHandler(new Handler)); Copy Tip You can use the Processor and Handler in conjunction with any existing Monolog setup. You do not need to remove your existing processors and handlers. PHP configuration with other log forwarders If you use Monolog to send logs to a compatible log forwarder, and if you have already configured that tool to send logs to New Relic, you can use the Processor and Formatter solely for that tool. This option prevents additional overhead of sending logs directly to New Relic with the Handler. You will need to be using a handler that supports the setFormatter() method, and your logging tool must be able to ingest JSON logs. Here's an example of configuring Monolog to handle other log forwarders: <?php use Monolog\\Handler\\StreamHandler; use Monolog\\Logger; use NewRelic\\Monolog\\Enricher\\{Formatter, Processor}; $log = new Logger('log'); $log->pushProcessor(new Processor); $handler = new StreamHandler('php://stderr'); $handler->setFormatter(new Formatter); $log->pushHandler($handler); Copy To verify that you have configured the log appender correctly, run your application, then check your logs data in New Relic One using the query operator has:span.id has:trace.id. If everything is configured correctly and your data is being forwarded to New Relic with the enriched metadata, your logs should now be emitted as JSON and contain trace.id and span.id fields. If you don't see log data in the UI, follow the troubleshooting procedures. If the logs from your application do not include fields like trace.id and span.id, there may be a problem with the configuration of the Monolog log enricher. In this situation: Check that the PHP agent for your app has been installed and is configured to enable distributed tracing. Check that your application is using the Monolog logger object when sending log records, not syslog(). Check that another Monolog handler is not preventing the log record from bubbling. What's next? After you set up APM logs in context, make the most of your logging data: Explore the logging data across your platform with our Logs UI. View your logs in context data in distributed tracing. Note that for PHP, logs in context data doesn't appear in the Logs tab of the APM UI. Get deeper visibility into both your application and your platform performance data by forwarding your logs with our infrastructure monitoring agent. Review your infrastructure logs in the UI. Set up alerts. Query your data and create dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.13389,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em>: <em>Configure</em> logs in context",
        "sections": "<em>PHP</em>: <em>Configure</em> logs in context",
        "tags": "Logs in context for <em>PHP</em>",
        "body": " the troubleshooting procedures. If the logs from your application do not include fields like trace.id and span.id, there may be a problem with the <em>configuration</em> of the Monolog log enricher. In this situation: Check that the <em>PHP</em> <em>agent</em> for your app has been installed and is configured to enable distributed"
      },
      "id": "612b7ab4196a6714904948ae"
    },
    {
      "sections": [
        "Custom SSL certificates (Ruby)",
        "Use a custom CA bundle",
        "Installing SSL Certificates"
      ],
      "title": "Custom SSL certificates (Ruby)",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "4988704d9e8125f52d5f2a1a0335f205a320d8db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/configuration/custom-ssl-certificates-ruby/",
      "published_at": "2021-12-05T09:17:20Z",
      "updated_at": "2021-12-05T09:17:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic requires HTTPS for all traffic to APM and the New Relic REST API. The Ruby agent connects to New Relic collector servers over SSL by default, and uses a system/host installed set of SSL certificate to validate the identity of the collector servers when connecting. In most cases, this default set of certificates is sufficient. In certain configurations, you may need to use a custom CA bundle. For example, you may use an HTTP proxy to intercept and decrypt SSL traffic from the agent, which then establishes a separate SSL connection to New Relic. Custom CA bundles are available in versions 3.9.4 or higher of the Ruby agent. Use a custom CA bundle To configure the agent to use a custom CA bundle when validating the SSL certificate presented by a proxy, set the ca_bundle_path configuration setting in your newrelic.yml file or via the NEW_RELIC_CA_BUNDLE_PATH environment variable: common: &default_settings ca_bundle_path: certificates/mycert.pem # ... other settings ... Copy Specify a path to a .pem file containing each certificate you want the agent to use when validating the identity of the proxy or server. You can concatenate multiple certificates into a single .pem file. Relative path: If you specify a relative path, the agent will assign a path relative to the working directory of your app server process at runtime. Absolute path: If your working directory is / rather than the root of your application, be sure to specify an absolute path. Installing SSL Certificates If you're deploying a Ruby application and agent to a container or server that does not have CA certificates installed, you need to ensure they're now installed for 7.0 or highter releases of the agent to make successful HTTPS connections to New Relic servers. These CA certificates may be installed in various ways, depending on your host. The following external links are helpful guidiance for testing the readiness of your host and installing CA certificates: Troubleshooting SSL Certificate Errors Automated SSL Check Installing CA Certificates How to handle Certificates in Docker",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.75333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Agents</em>",
        "body": " in versions 3.9.4 or higher of the Ruby <em>agent</em>. Use a custom CA bundle To configure the <em>agent</em> to use a custom CA bundle when validating the SSL certificate presented by a proxy, set the ca_bundle_path <em>configuration</em> setting in your newrelic.yml file or via the NEW_RELIC_CA_BUNDLE_PATH environment variable"
      },
      "id": "617e9526e7b9d244dbc05e66"
    }
  ],
  "/docs/apm/agents/php-agent/configuration/proxy-daemon-newreliccfg-settings": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.0807,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Configure</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP: Configure logs in context",
        "Set up your PHP app",
        "PHP configuration with Monolog",
        "Tip",
        "PHP configuration with other log forwarders",
        "What's next?"
      ],
      "title": "PHP: Configure logs in context",
      "type": "docs",
      "tags": [
        "Logs",
        "Enable log management in New Relic",
        "Logs in context for PHP"
      ],
      "external_id": "bddc3ec75de7bde2b5eff995d85d11715fd61be9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/logs/logs-context/configure-logs-context-php/",
      "published_at": "2021-12-04T22:02:35Z",
      "updated_at": "2021-12-04T22:02:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Logs in context for the PHP agent connects your logs and APM data in New Relic. Bringing all of this data together in a single tool helps you quickly get to the root cause of an issue and find the log lines that you need to identify and resolve a problem. Set up your PHP app To enable logs in context for APM apps monitored by PHP: Make sure you have already set up logging in New Relic. This includes configuring a supported log forwarder that collects your application logs and extends the metadata that is forwarded to New Relic. Install or update to the latest PHP agent version, and enable distributed tracing. Use PHP agent version 9.13.0.270 or higher for logs in context. Install Monolog version 1 or 2, or use a compatible log forwarding plugin if you are not using the built-in Monolog Handler for New Relic. Configure logs in context for PHP using the Monolog extension, if used. PHP configuration with Monolog You must install the Monolog log enricher package before you can configure Monolog for New Relic logs in context. This is done by using Composer to install the newrelic/monolog-enricher package. In most cases, use the Processor and Handler classes provided by the log enricher package in conjunction with Monolog's built-in BufferHandler. The Processor adds the contextual metadata required for New Relic logs in context to operate. The Handler sends the log records to New Relic Logs. The BufferHandler ensures that the logs are delivered with as little overhead as possible. At the point where you create the Monolog\\Logger object, add the following pushProcessor and pushHandler calls to add the Processor and Handler: <?php use Monolog\\Handler\\BufferHandler; use Monolog\\Logger; use NewRelic\\Monolog\\Enricher\\{Handler, Processor}; $log = new Logger('log'); $log->pushProcessor(new Processor); $log->pushHandler(new BufferHandler(new Handler)); Copy Tip You can use the Processor and Handler in conjunction with any existing Monolog setup. You do not need to remove your existing processors and handlers. PHP configuration with other log forwarders If you use Monolog to send logs to a compatible log forwarder, and if you have already configured that tool to send logs to New Relic, you can use the Processor and Formatter solely for that tool. This option prevents additional overhead of sending logs directly to New Relic with the Handler. You will need to be using a handler that supports the setFormatter() method, and your logging tool must be able to ingest JSON logs. Here's an example of configuring Monolog to handle other log forwarders: <?php use Monolog\\Handler\\StreamHandler; use Monolog\\Logger; use NewRelic\\Monolog\\Enricher\\{Formatter, Processor}; $log = new Logger('log'); $log->pushProcessor(new Processor); $handler = new StreamHandler('php://stderr'); $handler->setFormatter(new Formatter); $log->pushHandler($handler); Copy To verify that you have configured the log appender correctly, run your application, then check your logs data in New Relic One using the query operator has:span.id has:trace.id. If everything is configured correctly and your data is being forwarded to New Relic with the enriched metadata, your logs should now be emitted as JSON and contain trace.id and span.id fields. If you don't see log data in the UI, follow the troubleshooting procedures. If the logs from your application do not include fields like trace.id and span.id, there may be a problem with the configuration of the Monolog log enricher. In this situation: Check that the PHP agent for your app has been installed and is configured to enable distributed tracing. Check that your application is using the Monolog logger object when sending log records, not syslog(). Check that another Monolog handler is not preventing the log record from bubbling. What's next? After you set up APM logs in context, make the most of your logging data: Explore the logging data across your platform with our Logs UI. View your logs in context data in distributed tracing. Note that for PHP, logs in context data doesn't appear in the Logs tab of the APM UI. Get deeper visibility into both your application and your platform performance data by forwarding your logs with our infrastructure monitoring agent. Review your infrastructure logs in the UI. Set up alerts. Query your data and create dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.133804,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em>: <em>Configure</em> logs in context",
        "sections": "<em>PHP</em>: <em>Configure</em> logs in context",
        "tags": "Logs in context for <em>PHP</em>",
        "body": " the troubleshooting procedures. If the logs from your application do not include fields like trace.id and span.id, there may be a problem with the <em>configuration</em> of the Monolog log enricher. In this situation: Check that the <em>PHP</em> <em>agent</em> for your app has been installed and is configured to enable distributed"
      },
      "id": "612b7ab4196a6714904948ae"
    },
    {
      "sections": [
        "Custom SSL certificates (Ruby)",
        "Use a custom CA bundle",
        "Installing SSL Certificates"
      ],
      "title": "Custom SSL certificates (Ruby)",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "4988704d9e8125f52d5f2a1a0335f205a320d8db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/configuration/custom-ssl-certificates-ruby/",
      "published_at": "2021-12-05T09:17:20Z",
      "updated_at": "2021-12-05T09:17:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic requires HTTPS for all traffic to APM and the New Relic REST API. The Ruby agent connects to New Relic collector servers over SSL by default, and uses a system/host installed set of SSL certificate to validate the identity of the collector servers when connecting. In most cases, this default set of certificates is sufficient. In certain configurations, you may need to use a custom CA bundle. For example, you may use an HTTP proxy to intercept and decrypt SSL traffic from the agent, which then establishes a separate SSL connection to New Relic. Custom CA bundles are available in versions 3.9.4 or higher of the Ruby agent. Use a custom CA bundle To configure the agent to use a custom CA bundle when validating the SSL certificate presented by a proxy, set the ca_bundle_path configuration setting in your newrelic.yml file or via the NEW_RELIC_CA_BUNDLE_PATH environment variable: common: &default_settings ca_bundle_path: certificates/mycert.pem # ... other settings ... Copy Specify a path to a .pem file containing each certificate you want the agent to use when validating the identity of the proxy or server. You can concatenate multiple certificates into a single .pem file. Relative path: If you specify a relative path, the agent will assign a path relative to the working directory of your app server process at runtime. Absolute path: If your working directory is / rather than the root of your application, be sure to specify an absolute path. Installing SSL Certificates If you're deploying a Ruby application and agent to a container or server that does not have CA certificates installed, you need to ensure they're now installed for 7.0 or highter releases of the agent to make successful HTTPS connections to New Relic servers. These CA certificates may be installed in various ways, depending on your host. The following external links are helpful guidiance for testing the readiness of your host and installing CA certificates: Troubleshooting SSL Certificate Errors Automated SSL Check Installing CA Certificates How to handle Certificates in Docker",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.75325,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Agents</em>",
        "body": " in versions 3.9.4 or higher of the Ruby <em>agent</em>. Use a custom CA bundle To configure the <em>agent</em> to use a custom CA bundle when validating the SSL certificate presented by a proxy, set the ca_bundle_path <em>configuration</em> setting in your newrelic.yml file or via the NEW_RELIC_CA_BUNDLE_PATH environment variable"
      },
      "id": "617e9526e7b9d244dbc05e66"
    }
  ],
  "/docs/apm/agents/php-agent/features/browser-monitoring-php-agent": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.13622,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Examine logs for trace details",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "0db910fae1663d7ef7b4f5496f32b04cc509fd50",
      "image": "https://docs.newrelic.com/static/ee7733b8ef099e619b93592bf8ebcbef/c1b63/logs-in-context-traces.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-12-05T06:24:55Z",
      "updated_at": "2021-11-15T18:23:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.55856,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "617ea6a128ccbccec77ffab5"
    },
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "20bfe5f4e70f0a6e13c31ff9c6fd78f7b74c1f21",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-12-05T06:24:55Z",
      "updated_at": "2021-10-31T14:22:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.61572,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can send information about application deployments to New Relic via the REST API or via a <em>PHP</em> program or script. To record deployments via a script, you must have libcurl available for your <em>PHP</em> installation. Customizing the script Customize the example script to record deployments with your <em>PHP</em>"
      },
      "id": "617ea6a1e7b9d264f8c04530"
    }
  ],
  "/docs/apm/agents/php-agent/features/distributed-tracing-php-agent": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.136116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "d4e960ae345d271ab761af9e1d96cde6e1868670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-12-05T06:24:20Z",
      "updated_at": "2021-10-31T13:20:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.02759,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "617e983864441f5fa8fbcccf"
    },
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Customizing the script",
        "Example script",
        "Caution"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "20bfe5f4e70f0a6e13c31ff9c6fd78f7b74c1f21",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-12-05T06:24:55Z",
      "updated_at": "2021-10-31T14:22:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.615715,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "You can send information about application deployments to New Relic via the REST API or via a <em>PHP</em> program or script. To record deployments via a script, you must have libcurl available for your <em>PHP</em> installation. Customizing the script Customize the example script to record deployments with your <em>PHP</em>"
      },
      "id": "617ea6a1e7b9d264f8c04530"
    }
  ],
  "/docs/apm/agents/php-agent/features/multiple-accounts": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.136116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Examine logs for trace details",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "0db910fae1663d7ef7b4f5496f32b04cc509fd50",
      "image": "https://docs.newrelic.com/static/ee7733b8ef099e619b93592bf8ebcbef/c1b63/logs-in-context-traces.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-12-05T06:24:55Z",
      "updated_at": "2021-11-15T18:23:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.55855,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "617ea6a128ccbccec77ffab5"
    },
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "d4e960ae345d271ab761af9e1d96cde6e1868670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-12-05T06:24:20Z",
      "updated_at": "2021-10-31T13:20:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.02759,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "617e983864441f5fa8fbcccf"
    }
  ],
  "/docs/apm/agents/php-agent/features/php-custom-instrumentation": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.13602,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Examine logs for trace details",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "0db910fae1663d7ef7b4f5496f32b04cc509fd50",
      "image": "https://docs.newrelic.com/static/ee7733b8ef099e619b93592bf8ebcbef/c1b63/logs-in-context-traces.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-12-05T06:24:55Z",
      "updated_at": "2021-11-15T18:23:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.55853,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "617ea6a128ccbccec77ffab5"
    },
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "d4e960ae345d271ab761af9e1d96cde6e1868670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-12-05T06:24:20Z",
      "updated_at": "2021-10-31T13:20:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.02758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "617e983864441f5fa8fbcccf"
    }
  ],
  "/docs/apm/agents/php-agent/features/recording-deployments-using-php-script": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.13602,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Examine logs for trace details",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "0db910fae1663d7ef7b4f5496f32b04cc509fd50",
      "image": "https://docs.newrelic.com/static/ee7733b8ef099e619b93592bf8ebcbef/c1b63/logs-in-context-traces.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-12-05T06:24:55Z",
      "updated_at": "2021-11-15T18:23:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.55853,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "617ea6a128ccbccec77ffab5"
    },
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "d4e960ae345d271ab761af9e1d96cde6e1868670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-12-05T06:24:20Z",
      "updated_at": "2021-10-31T13:20:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.02758,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "617e983864441f5fa8fbcccf"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/analyze-phpunit-test-data-new-relic": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.67084,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>, databases, and <em>libraries</em>. You can also use the <em>agent</em> in a Google App Engine (GAE) flexible environment. Tip If you are installing the <em>agent</em> on a shared hosting service, ensure you have root permissions to install"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "23810f7b919c30380bbe455638607702074d5482",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-12-05T06:26:21Z",
      "updated_at": "2021-10-31T13:39:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.66438,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "617e9c83e7b9d21482c04cc6"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6cb2b025e9c32fa8200b53b651fc5c5692ad5f76",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-12-05T06:25:40Z",
      "updated_at": "2021-10-31T14:23:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.8074,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "617ea6cb64441f0a96fbc8b3"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/aws-elastic-beanstalk-installation-php": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.67084,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>, databases, and <em>libraries</em>. You can also use the <em>agent</em> in a Google App Engine (GAE) flexible environment. Tip If you are installing the <em>agent</em> on a shared hosting service, ensure you have root permissions to install"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "23810f7b919c30380bbe455638607702074d5482",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-12-05T06:26:21Z",
      "updated_at": "2021-10-31T13:39:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.66438,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "617e9c83e7b9d21482c04cc6"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6cb2b025e9c32fa8200b53b651fc5c5692ad5f76",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-12-05T06:25:40Z",
      "updated_at": "2021-10-31T14:23:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.8074,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "617ea6cb64441f0a96fbc8b3"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/drupal-specific-functionality": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.6707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>, databases, and <em>libraries</em>. You can also use the <em>agent</em> in a Google App Engine (GAE) flexible environment. Tip If you are installing the <em>agent</em> on a shared hosting service, ensure you have root permissions to install"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "23810f7b919c30380bbe455638607702074d5482",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-12-05T06:26:21Z",
      "updated_at": "2021-10-31T13:39:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.66437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "617e9c83e7b9d21482c04cc6"
    },
    {
      "sections": [
        "WordPress specific functionality",
        "Configuration",
        "Metrics",
        "Integration with New Relic partners",
        "WordPress plugin for browser monitoring"
      ],
      "title": "WordPress specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "89c1d591a4f86ffbf1f7e5400d09d555129691f2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/wordpress-specific-functionality/",
      "published_at": "2021-12-05T06:27:04Z",
      "updated_at": "2021-10-31T13:41:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you install New Relic for WordPress websites, the PHP agent receives additional metrics. A WordPress page appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a WordPress app). Configuration You can control which WordPress-specific metrics your app sends to New Relic by using the PHP agent's ini setting newrelic.framework.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.framework.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic, including hooks, plugins, and themes. Metrics The PHP agent receives metrics for the following: Hooks: These metrics indicate time spent within each WordPress hook. Time is calculated from the hook dispatch functions apply_filters, apply_filters_ref_array, do_action, and do_action_ref_array. Plugins and themes: These metrics indicate time spent within each WordPress plugin and theme. Time is calculated from the dispatch functions for hooks. Integration with New Relic partners By integrating your WordPress application with APM, you can view performance directly from your WordPress app's Administration page. For example, W3 Total Cache is one of New Relic's Connect partners that specializes in WordPress apps. WordPress plugin for browser monitoring Signing up for a New Relic account and adding browser monitoring to your WordPress site is fast and easy with the browser monitoring plugin for WordPress. The plugin and our browser monitoring do not require the special access required to install our PHP agent. This makes them generally compatible with all WordPress hosting providers. In addition, the WordPress plugin is supported by the authors and the WordPress community.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.38177,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by using the <em>PHP</em> <em>agent</em>&#x27;s ini setting newrelic.<em>framework</em>.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.<em>framework</em>.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic"
      },
      "id": "617e9cf4e7b9d25f7dc05b91"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/guzzle": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.6707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>, databases, and <em>libraries</em>. You can also use the <em>agent</em> in a Google App Engine (GAE) flexible environment. Tip If you are installing the <em>agent</em> on a shared hosting service, ensure you have root permissions to install"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "23810f7b919c30380bbe455638607702074d5482",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-12-05T06:26:21Z",
      "updated_at": "2021-10-31T13:39:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.66437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "617e9c83e7b9d21482c04cc6"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6cb2b025e9c32fa8200b53b651fc5c5692ad5f76",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-12-05T06:25:40Z",
      "updated_at": "2021-10-31T14:23:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.8074,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "617ea6cb64441f0a96fbc8b3"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/magento-specific-functionality": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.6707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>, databases, and <em>libraries</em>. You can also use the <em>agent</em> in a Google App Engine (GAE) flexible environment. Tip If you are installing the <em>agent</em> on a shared hosting service, ensure you have root permissions to install"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6cb2b025e9c32fa8200b53b651fc5c5692ad5f76",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-12-05T06:25:40Z",
      "updated_at": "2021-10-31T14:23:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.8074,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "617ea6cb64441f0a96fbc8b3"
    },
    {
      "sections": [
        "WordPress specific functionality",
        "Configuration",
        "Metrics",
        "Integration with New Relic partners",
        "WordPress plugin for browser monitoring"
      ],
      "title": "WordPress specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "89c1d591a4f86ffbf1f7e5400d09d555129691f2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/wordpress-specific-functionality/",
      "published_at": "2021-12-05T06:27:04Z",
      "updated_at": "2021-10-31T13:41:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you install New Relic for WordPress websites, the PHP agent receives additional metrics. A WordPress page appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a WordPress app). Configuration You can control which WordPress-specific metrics your app sends to New Relic by using the PHP agent's ini setting newrelic.framework.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.framework.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic, including hooks, plugins, and themes. Metrics The PHP agent receives metrics for the following: Hooks: These metrics indicate time spent within each WordPress hook. Time is calculated from the hook dispatch functions apply_filters, apply_filters_ref_array, do_action, and do_action_ref_array. Plugins and themes: These metrics indicate time spent within each WordPress plugin and theme. Time is calculated from the dispatch functions for hooks. Integration with New Relic partners By integrating your WordPress application with APM, you can view performance directly from your WordPress app's Administration page. For example, W3 Total Cache is one of New Relic's Connect partners that specializes in WordPress apps. WordPress plugin for browser monitoring Signing up for a New Relic account and adding browser monitoring to your WordPress site is fast and easy with the browser monitoring plugin for WordPress. The plugin and our browser monitoring do not require the special access required to install our PHP agent. This makes them generally compatible with all WordPress hosting providers. In addition, the WordPress plugin is supported by the authors and the WordPress community.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.38177,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by using the <em>PHP</em> <em>agent</em>&#x27;s ini setting newrelic.<em>framework</em>.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.<em>framework</em>.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic"
      },
      "id": "617e9cf4e7b9d25f7dc05b91"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/php-frameworks-integrate-support-new-relic": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.67056,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>, databases, and <em>libraries</em>. You can also use the <em>agent</em> in a Google App Engine (GAE) flexible environment. Tip If you are installing the <em>agent</em> on a shared hosting service, ensure you have root permissions to install"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "23810f7b919c30380bbe455638607702074d5482",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-12-05T06:26:21Z",
      "updated_at": "2021-10-31T13:39:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.66437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "617e9c83e7b9d21482c04cc6"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6cb2b025e9c32fa8200b53b651fc5c5692ad5f76",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-12-05T06:25:40Z",
      "updated_at": "2021-10-31T14:23:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.80739,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "617ea6cb64441f0a96fbc8b3"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/predis-library-php": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.67056,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>, databases, and <em>libraries</em>. You can also use the <em>agent</em> in a Google App Engine (GAE) flexible environment. Tip If you are installing the <em>agent</em> on a shared hosting service, ensure you have root permissions to install"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "23810f7b919c30380bbe455638607702074d5482",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-12-05T06:26:21Z",
      "updated_at": "2021-10-31T13:39:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.66437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "617e9c83e7b9d21482c04cc6"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6cb2b025e9c32fa8200b53b651fc5c5692ad5f76",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-12-05T06:25:40Z",
      "updated_at": "2021-10-31T14:23:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.80739,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "617ea6cb64441f0a96fbc8b3"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/wordpress-specific-functionality": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.67043,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>, databases, and <em>libraries</em>. You can also use the <em>agent</em> in a Google App Engine (GAE) flexible environment. Tip If you are installing the <em>agent</em> on a shared hosting service, ensure you have root permissions to install"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "23810f7b919c30380bbe455638607702074d5482",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-12-05T06:26:21Z",
      "updated_at": "2021-10-31T13:39:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.66435,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "617e9c83e7b9d21482c04cc6"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6cb2b025e9c32fa8200b53b651fc5c5692ad5f76",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-12-05T06:25:40Z",
      "updated_at": "2021-10-31T14:23:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.80737,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "617ea6cb64441f0a96fbc8b3"
    }
  ],
  "/docs/apm/agents/php-agent/getting-started/apm-agent-security-php": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 200.53452,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the <em>PHP</em> <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-05T09:30:38Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.04399,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Install the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2021-12-05T06:57:09Z",
      "updated_at": "2021-12-05T06:57:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.15811,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> requirements and supported frameworks",
        "sections": "Ruby <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s Ruby <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The Ruby <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    }
  ],
  "/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php": [
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-05T09:30:38Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.0439,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Install the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2021-12-05T06:57:09Z",
      "updated_at": "2021-12-05T06:57:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.15801,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> requirements and supported frameworks",
        "sections": "Ruby <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s Ruby <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The Ruby <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    },
    {
      "sections": [
        "Introduction to New Relic for Go",
        "Monitor application and microservice performance",
        "Get New Relic for Go",
        "Additional instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "caf9fff1b2d7cfb490aa6262f05d7993bf2678a7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/go-agent/get-started/introduction-new-relic-go/",
      "published_at": "2021-12-05T04:29:07Z",
      "updated_at": "2021-12-05T04:29:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Go monitors your Go language applications and microservices to help you identify and solve performance issues. You can also use your data to improve your customers' experience and make data-driven business decisions. Go is a compiled language, and doesn’t use a virtual machine. The best way to monitor Go applications is to use the Go API. Our API provides exceptional flexibility and control over what gets instrumented. Get New Relic for Go in a few simple steps. Monitor application and microservice performance The Go programming language, also called Golang, has become a popular coding choice for its ease of use, concurrency, and impressive speed. With New Relic for Go, you will gain a new level of visibility into your Golang applications: See the big picture: Monitor the throughput, response times, and errors of the transactions in your applications and services. Understand your application's runtime health by seeing memory usage, garbage collection behavior, and CPU usage over time. With deployment markers, see how code changes impact application performance and health. Use infrastructure monitoring to view detailed host and server data. Use distributed tracing to understand how your services and microservices are interacting. Identify and fix errors: Find bottlenecks by seeing time spent on database calls, external system calls, and key blocks of code. View Goroutine counts and identify possible Goroutine leaks. Get alerts for problems or errors before they affect users. Create custom dashboards for important metrics. View logs for your APM and infrastructure data: You can bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data: Query user-related data and improve business processes. Create custom queries of your Go application data. Send your own custom data to New Relic. Create and share visual, interactive displays of your data. Get New Relic for Go To use New Relic for Go: Check the compatibility and requirements. If you do not already have one, sign up for a free New Relic account. To install the agent, use our launcher, or follow the New Relic Go agent's installation and instrumentation procedures. Wait a few minutes to view data from your Go app in your New Relic account's UI. Read the install docs Add Go data We recommend instrumenting your Go code to get the maximum benefits from the New Relic Go agent. But we make it easy to get great data in couple of ways: Simply import the agent and create an application to get useful runtime information about your number of goroutines, garbage collection statistics, and memory and CPU usage. Use our many integration packages for out-of-the box support for many popular Go web frameworks and libraries. We continue to add integration packages based on your feedback. You can weigh in on potential integrations on the Explorers Hub and our New Relic Go agent GitHub project. Additional instrumentation After installing the agent, consider the Go Telemetry SDK Check the source code The Go agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.325745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Get</em> New Relic for Go",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " your own custom data to New Relic. Create and share visual, interactive displays of your data. <em>Get</em> New Relic for Go To use New Relic for Go: Check the compatibility and requirements. If you do not already have one, sign up for a free New Relic account. To install the <em>agent</em>, use our launcher, or follow"
      },
      "id": "617e6e9f196a6757b4f7ce1d"
    }
  ],
  "/docs/apm/agents/php-agent/getting-started/new-relic-daemon-processes": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 200.53433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the <em>PHP</em> <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-05T09:30:38Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.0439,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Install the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2021-12-05T06:57:09Z",
      "updated_at": "2021-12-05T06:57:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.15801,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> requirements and supported frameworks",
        "sections": "Ruby <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s Ruby <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The Ruby <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    }
  ],
  "/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 200.53418,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the <em>PHP</em> <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-12-05T09:30:38Z",
      "updated_at": "2021-12-05T09:30:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads View logs for your APM and infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Extend agent instrumentation Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider the Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.0438,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Install the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    },
    {
      "sections": [
        "Ruby agent requirements and supported frameworks",
        "Operating systems",
        "Security requirements",
        "Ruby versions",
        "Web servers",
        "Web frameworks",
        "Databases",
        "Other APM software",
        "Instance details",
        "Background jobs",
        "HTTP clients",
        "Message queuing",
        "Other",
        "Connect the agent to other parts of New Relic"
      ],
      "title": "Ruby agent requirements and supported frameworks",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "179f221ee5c24cb6795a843b9b952de1a6746346",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/getting-started/ruby-agent-requirements-supported-frameworks/",
      "published_at": "2021-12-05T06:57:09Z",
      "updated_at": "2021-12-05T06:57:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Ruby agent, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don't have one already, start by creating a New Relic account. It's free, forever. Operating systems The Ruby agent supports UNIX-like operating systems such as Linux, Solaris, FreeBSD, and macOS. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Ruby versions The New Relic Ruby agent does not support experimental versions. Ruby versions supported by the Ruby agent include: Ruby versions Supported Deprecated JRuby 9.0.x 9.1.x 9.2.x 1.7.x or earlier: Last supported agent was 3.18.1.330. MRI 1.8.7 1.9.x 2.0.x 2.1.x 2.2.x 2.3.x 2.4.x 2.5.x 2.6.x 2.7.x 3.0.x 2.0.x, 2.1.x Last supported agent: 6.15.0. 1.8.7, 1.9.2, 1.9.3: Last supported agent was 3.18.1.330. 1.8.6: Last supported agent was 3.6.8.168. Web servers Web servers supported by the Ruby agent include: Web servers Supported Deprecated Experimental Passenger 2.2.x 3.0.x 4.0.x 5.x.x 6.0.x Puma 2.0.x 3.x.x 1.0.x Rainbows! 4.5.0 Thin 1.x.x Unicorn 4.x.x 5.x.x 6.0.x 1.0.x 2.0.x 3.0.x Webrick Supported for all agent-supported versions of Ruby Web frameworks The Ruby agent does not support experimental versions. Web frameworks supported by the Ruby agent are listed below. Please note that Grape, Padrino, and Sinatra are not supported for Ruby 3.0+. Web frameworks Supported Deprecated Grape 0.2.0 1.2.x 1.3.x 1.4.x Padrino 0.14.x 0.15.x Rack 1.1.0 or higher 2.0.3 or higher 1.0.x Rails 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x: Last supported agent was 3.6.8.168. 3.0.x, 3.1.x: Last supported agent was 6.15.0. Sinatra 1.4.x 1.5.x 2.0.x 2.1.x 1.2.x, 1.3.x: Last supported in agent version 6.15.0 Databases The Ruby agent does not support experimental versions. Databases supported by the Ruby agent include: Databases Supported Deprecated ActiveRecord 3.2.x 4.0.x 4.1.x 4.2.x 5.0.x 5.1.x 5.2.x 6.0.x 6.1.x 3.0.x, 3.1.x: Last supported in agent version 6.15.0. 2.1.x, 2.2.x, 2.3.x: Last supported agent was 3.18.1.330. 2.0.x Last supported agent was 3.6.8.168. DataMapper 1.0 Mongo 1.8.x or higher 1.9.x 2.0.x or higher Redis 3.x 4.0.x 4.1.x 4.2.x Sequel 3.37.x 4.0.x 5.5.x or higher Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Ruby agent version 3.17.0 or higher supports the following ORM databases: ORM Database Adapter name Minimum agent version ActiveRecord 5 or higher PostgreSQL pg 3.17.0 MySQL mysql2 3.17.0 ActiveRecord 2.1 to 4 PostgreSQL pg 3.17.0 MySQL mysql 3.17.0 MySQL mysql2 3.17.0 The Ruby agent also supports these gem databases: Gem database Gem name Minimum gem version Minimum agent version Memcached Dalli memcached memcache-client 2.7.6 1.8.0 1.5.0 3.17.0 Mongo DB mongo 1.8.6 3.17.0 Redis redis-rb 3.0.7 3.17.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Background jobs Background jobs supported by the New Relic Ruby agent include: Background jobs Supported Deprecated Delayed_Job 2.0.x 3.0.x 4.0.x 4.1.x Rake 12.3.3 or higher 13.x 10.x 11.x 12.3.2 or earlier. NOTE: Only 12.3.3 or higher tested due to exploit potential in earlier versions. Resque 1.23.x 1.27.x 2.0.0 or higher 1.22.x and earlier Sidekiq 4.2.x 5.0.x 6.0.x 6.1.x 2.8.x, 3.4.x, 4.0.x, and 4.1.x: Last supported in agent version 6.15.0 HTTP clients HTTP clients supported by the Ruby agent include: Net::HTTP : Supported for all agent-supported versions of Ruby. Curb: 0.8.1 or higher Excon: 0.10.1 or higher HttpClient: 2.2.0 or higher HttpRb: 0.9.9 or higher Typhoeus: 0.5.3 or higher Message queuing Message queue instrumentation is only available with the Ruby agent version 4.3.0 or higher. Currently supported message brokers: RabbitMQ Other APM's Ruby agent also supports: ActiveMerchant: 1.25.0 or higher Acts_as_Solr authlogic Bunny: 2.0 or higher Dalli Memcache-Client Sunspot Tilt: 2.x for Ruby 2.2 or higher; 1.x for Ruby 2.7 or lower Yajl-Ruby: 1.1.0 or higher Connect the agent to other parts of New Relic The Ruby agent integrates with other New Relic capabilities to give you end-to-end visibility. Capability Integration Browser monitoring The Ruby agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see the browser and Ruby agent documentation. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.15792,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Ruby <em>agent</em> requirements and supported frameworks",
        "sections": "Ruby <em>agent</em> requirements and supported frameworks",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Before you install New Relic&#x27;s Ruby <em>agent</em>, make sure you meet these requirements for compatible operating systems, security requirements, and supported frameworks. If you don&#x27;t have one already, <em>start</em> by creating a New Relic account. It&#x27;s free, forever. Operating systems The Ruby <em>agent</em> supports"
      },
      "id": "617e9527e7b9d295d9c046b5"
    }
  ],
  "/docs/apm/agents/php-agent/index": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.13539,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-05T03:06:16Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.05485,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> installation fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "PHP: Configure logs in context",
        "Set up your PHP app",
        "PHP configuration with Monolog",
        "Tip",
        "PHP configuration with other log forwarders",
        "What's next?"
      ],
      "title": "PHP: Configure logs in context",
      "type": "docs",
      "tags": [
        "Logs",
        "Enable log management in New Relic",
        "Logs in context for PHP"
      ],
      "external_id": "bddc3ec75de7bde2b5eff995d85d11715fd61be9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/logs/logs-context/configure-logs-context-php/",
      "published_at": "2021-12-04T22:02:35Z",
      "updated_at": "2021-12-04T22:02:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Logs in context for the PHP agent connects your logs and APM data in New Relic. Bringing all of this data together in a single tool helps you quickly get to the root cause of an issue and find the log lines that you need to identify and resolve a problem. Set up your PHP app To enable logs in context for APM apps monitored by PHP: Make sure you have already set up logging in New Relic. This includes configuring a supported log forwarder that collects your application logs and extends the metadata that is forwarded to New Relic. Install or update to the latest PHP agent version, and enable distributed tracing. Use PHP agent version 9.13.0.270 or higher for logs in context. Install Monolog version 1 or 2, or use a compatible log forwarding plugin if you are not using the built-in Monolog Handler for New Relic. Configure logs in context for PHP using the Monolog extension, if used. PHP configuration with Monolog You must install the Monolog log enricher package before you can configure Monolog for New Relic logs in context. This is done by using Composer to install the newrelic/monolog-enricher package. In most cases, use the Processor and Handler classes provided by the log enricher package in conjunction with Monolog's built-in BufferHandler. The Processor adds the contextual metadata required for New Relic logs in context to operate. The Handler sends the log records to New Relic Logs. The BufferHandler ensures that the logs are delivered with as little overhead as possible. At the point where you create the Monolog\\Logger object, add the following pushProcessor and pushHandler calls to add the Processor and Handler: <?php use Monolog\\Handler\\BufferHandler; use Monolog\\Logger; use NewRelic\\Monolog\\Enricher\\{Handler, Processor}; $log = new Logger('log'); $log->pushProcessor(new Processor); $log->pushHandler(new BufferHandler(new Handler)); Copy Tip You can use the Processor and Handler in conjunction with any existing Monolog setup. You do not need to remove your existing processors and handlers. PHP configuration with other log forwarders If you use Monolog to send logs to a compatible log forwarder, and if you have already configured that tool to send logs to New Relic, you can use the Processor and Formatter solely for that tool. This option prevents additional overhead of sending logs directly to New Relic with the Handler. You will need to be using a handler that supports the setFormatter() method, and your logging tool must be able to ingest JSON logs. Here's an example of configuring Monolog to handle other log forwarders: <?php use Monolog\\Handler\\StreamHandler; use Monolog\\Logger; use NewRelic\\Monolog\\Enricher\\{Formatter, Processor}; $log = new Logger('log'); $log->pushProcessor(new Processor); $handler = new StreamHandler('php://stderr'); $handler->setFormatter(new Formatter); $log->pushHandler($handler); Copy To verify that you have configured the log appender correctly, run your application, then check your logs data in New Relic One using the query operator has:span.id has:trace.id. If everything is configured correctly and your data is being forwarded to New Relic with the enriched metadata, your logs should now be emitted as JSON and contain trace.id and span.id fields. If you don't see log data in the UI, follow the troubleshooting procedures. If the logs from your application do not include fields like trace.id and span.id, there may be a problem with the configuration of the Monolog log enricher. In this situation: Check that the PHP agent for your app has been installed and is configured to enable distributed tracing. Check that your application is using the Monolog logger object when sending log records, not syslog(). Check that another Monolog handler is not preventing the log record from bubbling. What's next? After you set up APM logs in context, make the most of your logging data: Explore the logging data across your platform with our Logs UI. View your logs in context data in distributed tracing. Note that for PHP, logs in context data doesn't appear in the Logs tab of the APM UI. Get deeper visibility into both your application and your platform performance data by forwarding your logs with our infrastructure monitoring agent. Review your infrastructure logs in the UI. Set up alerts. Query your data and create dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 78.415665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em>: Configure logs in context",
        "sections": "<em>PHP</em>: Configure logs in context",
        "tags": "Logs in context for <em>PHP</em>",
        "body": "Logs in context for the <em>PHP</em> <em>agent</em> connects your logs and APM data in New Relic. Bringing all of this data together in a single tool helps you quickly get to the root cause of an issue and find the log lines that you need to identify and resolve a problem. Set up your <em>PHP</em> app To enable logs"
      },
      "id": "612b7ab4196a6714904948ae"
    }
  ],
  "/docs/apm/agents/php-agent/installation/install-php-agent-shared-hosting-service": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.69809,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-05T03:06:16Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.43805,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "View logs for your APM and infrastructure data",
        "Install PHP with partnership accounts"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "09b58ebc9092c835d89eebc9cf97ca5cb95a2571",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-12-05T06:29:00Z",
      "updated_at": "2021-11-15T18:40:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our guided installation for an automated install, or follow the instructions in this document to complete a basic PHP agent installation. Either way, you need a New Relic account. (It's free, forever.) Get an account Start guided install EU guided install PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.97998,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Install <em>PHP</em> with partnership accounts <em>Installation</em> procedures may be different for admins who install the <em>PHP</em> <em>agent</em> through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership <em>installation</em> procedures Not all partners support <em>PHP</em> <em>agents</em>."
      },
      "id": "617e9d27e7b9d29455c04c8b"
    }
  ],
  "/docs/apm/agents/php-agent/installation/php-agent-installation-arm64": [
    {
      "sections": [
        "Requirements for the infrastructure agent",
        "Processor architectures",
        "Operating systems",
        "Unique hostname",
        "Permissions",
        "Libraries",
        "Network access",
        "Container software",
        "CPU, memory, and disk usage",
        "Configuration management tools"
      ],
      "title": "Requirements for the infrastructure agent",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Install the infrastructure agent",
        "Get started"
      ],
      "external_id": "517b5d94efa0139aa3ef5238569d5b04d28fb932",
      "image": "https://docs.newrelic.com/static/8de19e871ebba1c3d12258efc569dc6f/103b3/amazon-linux.png",
      "url": "https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/get-started/requirements-infrastructure-agent/",
      "published_at": "2021-12-04T17:41:19Z",
      "updated_at": "2021-12-04T17:41:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before installing our infrastructure agent, make sure your system and any on-host integrations you configure meet the requirements. You also need a New Relic account. Sign up for free. No credit card required. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations are also supported (with the exception of the Oracle integration). macOS: 64-bit x86 processor (M1 processor is not supported yet). Operating systems The infrastructure agent supports these operating systems up to their manufacturer's end-of-life. Operating system Supported by the infrastructure agent Amazon Linux 2 All versions CentOS Version 7 or higher Debian Version 8 (\"Jessie\") or higher Docker Docker 1.12 Kubernetes Tested with versions 1.16 to 1.22 Red Hat Enterprise Linux (RHEL) Version 7 or higher Oracle Linux Version 7 or higher SUSE Linux Enterprise Server (SLES) Versions 11.4, 12.1, 12.2, 12.3, 12.4, 12.5, 15, 15.1, 15.2, 15.3 Ubuntu LTS versions 16.04.x, 18.04.x, 20.04.x Interim releases 20.10, 21.04. Windows Windows Server 2012, 2016, and 2019, and their service packs. Windows 10 and their service packs. macOS 10.15 (Catalina), 11 (Big Sur), 12 (Monterey). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the Kubernetes integration. For ECS clusters, deploy the ECS integration. Unique hostname The infrastructure agent uses the hostname to uniquely identify each server. To avoid inaccurate metrics from combining multiple servers under a single hostname, make sure that each monitored server has a unique hostname. You can use the optional display_name setting to override the default hostname. Servers named localhost are not reported because this is a default name and inherently non-unique. Permissions The infrastructure agent requires these permissions: Linux: By default, the agent runs and installs as root. You can also select privileged or unprivileged run modes. Windows: The agent must be installed from an Administrator account and requires Administrator privileges to run. macOS: The agent can be installed from any user account. Libraries For agent versions 1.1.19 or higher, you need the libcap library in order to install Infrastructure. It's available in the official repositories of your distribution. Network access In order to report data to New Relic, our infrastructure agent must have outbound access to certain domains and ports. If your system needs a proxy to connect to these domains, use the proxy setting. Container software The infrastructure agent instruments Docker containers when installed on the host server. We support Docker versions 1.12 or higher. CPU, memory, and disk usage The infrastructure agent is fairly lightweight. For typical CPU, memory, and disk usage, see our page on agent performance overhead. For more information on supported file systems, see Storage sample attributes. Configuration management tools The infrastructure agent can be deployed programmatically using several config management and deploy tools: Ansible Chef Elastic Beanstalk Puppet",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 382.2792,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Requirements for the infrastructure <em>agent</em>",
        "sections": "Requirements for the infrastructure <em>agent</em>",
        "tags": "<em>Install</em> the infrastructure <em>agent</em>",
        "body": ": Linux: <em>64</em>-bit for x86 processor architectures (also requires <em>64</em>-bit package manager and dependencies) Windows: both 32 and <em>64</em>-bit for x86 processor architectures <em>ARM</em>: <em>arm64</em> architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations"
      },
      "id": "60440aca28ccbc8ce02c60cf"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Important",
        "Target framework version",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "d0fa683a97252cb5ea0460070b0ff94ea107cb18",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-12-05T06:03:51Z",
      "updated_at": "2021-11-25T12:00:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0 and 6.0. Table of minimum agent versions required per .NET Core version .NET Core version Minimum required .NET agent version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 .NET 6.0 > = 9.2.0 Important On Linux ARM64 platforms, the .NET agent only supports versions of .NET 5.0 or later. The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0 and 6.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy <TargetFramework>net6.0</TargetFramework> Copy Important On Linux ARM64 platforms, the .NET agent only supports target frameworks of net5.0 or later. Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5+ runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Linux (ARM64/aarch64 architectures) All ARM64 Linux distributions supported by the .NET 5+ runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as both 64-bit (x64) and ARM64 (aarch64) versions on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, 5.0 and 6.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Cosmos DB The .NET agent v9.2.0 or later automatically instruments Microsoft.Azure.Cosmos library v3.17.0 or later (v3.23.0 is the latest tested version). Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Driver version 2.3.x - 2.13.x: The .NET agent will support instrumenting pre-exising and new API methods in 2.6.x, but not new methods introduced in 2.7.x and higher. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 293.33188,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".NET <em>agent</em>: compatibility and requirements for .NET Core",
        "sections": ".NET <em>agent</em>: compatibility and requirements for .NET Core",
        "tags": "<em>Agents</em>",
        "body": " &gt; = 8.19.353.0 .NET Core 2.2 &gt; = 8.19.353.0 .NET Core 3.0 &gt; = 8.21.34.0 .NET Core 3.1 &gt; = 8.21.34.0 .NET 5.0 &gt; = 8.35.0 .NET 6.0 &gt; = 9.2.0 Important On Linux <em>ARM64</em> platforms, the .NET <em>agent</em> only supports versions of .NET 5.0 or later. The <em>agent</em> is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core"
      },
      "id": "617e9ff0e7b9d2ab0dc04da1"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-10-31T13:41:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher Linux (ARM64) AWS Linux 2 (including AWS Graviton 2) CentOS 8 Important ARM64 is only supported with PHP 8.0 and with New Relic PHP Agent 9.18.1 or later. For more information on Arm64 support, please see the ARM64 installation info. macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher. Because modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 286.51215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " see the <em>ARM64</em> <em>installation</em> info. macOS (x86_<em>64</em> only) Important As of January 2021, we will discontinue support for macOS. For more information, see our <em>PHP</em> <em>agent</em> release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher. Because modern versions of macOS can&#x27;t run 32-bit applications"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/php-agent/installation/php-agent-installation-aws-linux-redhat-centos": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.69794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-05T03:06:16Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.43802,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "View logs for your APM and infrastructure data",
        "Install PHP with partnership accounts"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "09b58ebc9092c835d89eebc9cf97ca5cb95a2571",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-12-05T06:29:00Z",
      "updated_at": "2021-11-15T18:40:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our guided installation for an automated install, or follow the instructions in this document to complete a basic PHP agent installation. Either way, you need a New Relic account. (It's free, forever.) Get an account Start guided install EU guided install PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.979965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Install <em>PHP</em> with partnership accounts <em>Installation</em> procedures may be different for admins who install the <em>PHP</em> <em>agent</em> through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership <em>installation</em> procedures Not all partners support <em>PHP</em> <em>agents</em>."
      },
      "id": "617e9d27e7b9d29455c04c8b"
    }
  ],
  "/docs/apm/agents/php-agent/installation/php-agent-installation-overview": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.69794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-05T03:06:16Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.43802,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "PHP agent installation: AWS Linux, RedHat, CentOS",
        "Install the agent",
        "Tell the package manager (rpm) about the New Relic repository",
        "Download the rpm file from New Relic",
        "yum",
        "32-bit rpm",
        "64-bit rpm",
        "tarball"
      ],
      "title": "PHP agent installation: AWS Linux, RedHat, CentOS",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "972b908daa245dd5295541e88a00ba1f79488be1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-aws-linux-redhat-centos/",
      "published_at": "2021-12-05T06:28:18Z",
      "updated_at": "2021-10-31T14:24:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. Follow this procedure to install New Relic's PHP agent for APM using AWS Linux 2, RedHat, or CentOS. Exception: If you have an earlier version installed, upgrade the agent instead. Install the agent Even though the package name for the PHP agent refers to PHP 5, the package works for all supported PHP versions, including PHP 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the installation package: Tell the package manager (rpm) about the New Relic repository For 32-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/i386/newrelic-repo-5-3.noarch.rpm Copy For 64-bit systems, run: sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm Copy Download the rpm file from New Relic For 32-bit systems, download these three files from the 32-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.i386.rpm Copy newrelic-php5-X.X.X.X-1.i386.rpm Copy For 64-bit systems, download these three files from the 64-bit packages (replacing X.X.X.X with the most recent PHP agent version number): newrelic-php5-common-X.X.X.X-1.noarch.rpm Copy newrelic-daemon-X.X.X.X-1.x86_64.rpm Copy newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Install the agent and daemon using your preferred package manager: yum sudo yum install newrelic-php5 Copy The first time you install New Relic for PHP, yum prompts you to accept the New Relic public key. New Relic's key ID is 548C16BF. 32-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Replace X.X.X.X with the most recent PHP agent version number when you run this command: rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy tarball If yum and rpm do not work with your host config, install from the binary tarball. Run the newrelic-install script and follow the instructions. sudo newrelic-install install Copy Restart your web server (Apache, NGINX, PHP-FPM, etc.). Generate traffic to your application, and wait a few minutes for it to send data to New Relic. Then, check your app's performance in New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.15962,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: AWS Linux, RedHat, CentOS",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the package name for the <em>PHP</em> <em>agent</em> refers to <em>PHP</em> 5, the package works for all supported <em>PHP</em> versions, including <em>PHP</em> 8 versions. Make sure you have your New Relic license key accessible. Use either of the following ways to obtain the <em>installation</em> package: Tell the package manager (rpm) about the New Relic"
      },
      "id": "617ea72e28ccbc7edc7fef76"
    }
  ],
  "/docs/apm/agents/php-agent/installation/php-agent-installation-tar-file": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.69778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-05T03:06:16Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.43799,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "View logs for your APM and infrastructure data",
        "Install PHP with partnership accounts"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "09b58ebc9092c835d89eebc9cf97ca5cb95a2571",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-12-05T06:29:00Z",
      "updated_at": "2021-11-15T18:40:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our guided installation for an automated install, or follow the instructions in this document to complete a basic PHP agent installation. Either way, you need a New Relic account. (It's free, forever.) Get an account Start guided install EU guided install PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.97996,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Install <em>PHP</em> with partnership accounts <em>Installation</em> procedures may be different for admins who install the <em>PHP</em> <em>agent</em> through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership <em>installation</em> procedures Not all partners support <em>PHP</em> <em>agents</em>."
      },
      "id": "617e9d27e7b9d29455c04c8b"
    }
  ],
  "/docs/apm/agents/php-agent/installation/php-agent-installation-ubuntu-debian": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.69778,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-05T03:06:16Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.43799,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "View logs for your APM and infrastructure data",
        "Install PHP with partnership accounts"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "09b58ebc9092c835d89eebc9cf97ca5cb95a2571",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-12-05T06:29:00Z",
      "updated_at": "2021-11-15T18:40:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our guided installation for an automated install, or follow the instructions in this document to complete a basic PHP agent installation. Either way, you need a New Relic account. (It's free, forever.) Get an account Start guided install EU guided install PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.97996,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Install <em>PHP</em> with partnership accounts <em>Installation</em> procedures may be different for admins who install the <em>PHP</em> <em>agent</em> through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership <em>installation</em> procedures Not all partners support <em>PHP</em> <em>agents</em>."
      },
      "id": "617e9d27e7b9d29455c04c8b"
    }
  ],
  "/docs/apm/agents/php-agent/installation/update-php-agent": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.69763,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP installation fails on macOS 10.11 (El Capitan)",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause"
      ],
      "title": "PHP installation fails on macOS 10.11 (El Capitan)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "3b3d9e4e790bbdf19a34b5b8231b5862d7c59a88",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-12-05T03:06:16Z",
      "updated_at": "2021-11-25T18:40:41Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on macOS 10.11 (El Capitan), and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.43796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "sections": "<em>PHP</em> <em>installation</em> fails on macOS 10.11 (El Capitan)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "617db584e7b9d226b2c04b1e"
    },
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "View logs for your APM and infrastructure data",
        "Install PHP with partnership accounts"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "09b58ebc9092c835d89eebc9cf97ca5cb95a2571",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-12-05T06:29:00Z",
      "updated_at": "2021-11-15T18:40:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our guided installation for an automated install, or follow the instructions in this document to complete a basic PHP agent installation. Either way, you need a New Relic account. (It's free, forever.) Get an account Start guided install EU guided install PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.97994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em> overview",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Install <em>PHP</em> with partnership accounts <em>Installation</em> procedures may be different for admins who install the <em>PHP</em> <em>agent</em> through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership <em>installation</em> procedures Not all partners support <em>PHP</em> <em>agents</em>."
      },
      "id": "617e9d27e7b9d29455c04c8b"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/guide-using-php-agent-api": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-12-05T06:27:42Z",
      "updated_at": "2021-12-05T06:27:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces View logs for your infrastructure data Bring your logs and application's data together to make troubleshooting easier and faster. No need to switch to another UI page in New Relic One. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.13498,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code. The daemon acts as a proxy between the <em>agent</em> and the New Relic platform. You can connect up to 500 applications&#x2F;<em>agents</em> to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Guide to using the Java agent API",
        "Important",
        "Use the API",
        "Transactions",
        "See related logs",
        "Instrument asynchronous work",
        "Distributed tracing API usage",
        "Caution",
        "Cross application tracing (CAT) API usage",
        "Obtain references to New Relic API classes",
        "Additional API functionality",
        "Additional API usage examples"
      ],
      "title": "Guide to using the Java agent API ",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "API guides"
      ],
      "external_id": "0c7cdbb53a4bf3107cc95f3260e6848b558238b0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/api-guides/guide-using-java-agent-api/",
      "published_at": "2021-12-05T04:46:29Z",
      "updated_at": "2021-11-26T09:30:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent API lets you control, customize, and extend the functionality of the APM Java agent. This API consists of: Static methods on the com.newrelic.api.agent.NewRelic class A @Trace annotation for implementing custom instrumentation A hierarchy of API objects providing additional functionality Use this API to set up custom instrumentation of your Java app and collect more in-depth data. For detailed information about this API, see the complete Javadoc on GitHub. Another way to set up custom instrumentation is to use XML instrumentation. The XML option is simpler and does not require modification of your app code, but it lacks the complete functionality of the Java agent API. Important For best results when using the API, ensure that you have the latest Java agent release. Several APIs used in the examples require Java agent 6.4.0 or higher. For all available New Relic APIs, see Intro to APIs. Use the API To access the API class, add newrelic-api.jar to your application class path. The jar is in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The API methods are just stubs; the implementation is added when the Java agent loads the class. Transactions To instrument Transactions in your application, use the following APIs. If you want to... Use this Create a Transaction when New Relic does not create one automatically @Trace(dispatcher = true) on the method that encompasses the work to be reported. When this annotation is used on a method within the context of an existing transaction, this will not start a new transaction, but rather include the method in the existing transaction. Capture the duration of a method that New Relic does not automatically trace @Trace() on the method you want to time. Set the name of the current Transaction NewRelic.setTransactionName(...) Start the timer for the response time of the current Transaction and to cause a Transaction you create to be reported as a Web transaction, rather than as an Other transaction NewRelic.setRequestAndReponse(...) Add custom attributes to Transactions and TransactionEvents NewRelic.addCustomParameter(...) Prevent a Transaction from being reported to New Relic NewRelic.ignoreTransaction() Exclude a Transaction when calculating your app's Apdex score NewRelic.ignoreApdex() See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: getTraceMetadata getLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For detailed information, see Java agent API for asynchronous applications. If you want to... Use this Trace an asynchronous method if it is linked to an existing Transaction... @Trace(async = true) Link the Transaction associated with the Token on the current thread... Token.link() or Token.linkAndExpire() Expire a Token associated with the current Transaction... Token.expire() Stop timing a Segment and have it report as part of its parent Transaction Segment.end() Stop timing a Segment and not have it report as part of its parent Transaction Segment.ignore() Distributed tracing API usage These APIs require distributed tracing to be enabled. See Java agent configuration for all distributed tracing config options. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. To see these APIs in action, see Using Java agent distributing tracing API with Kafka. Important With agent version 6.4.0, the following distributed tracing APIs were introduced, with the exception of addCustomAttribute(), which was introduced in 6.1.0. We highly recommended using these APIs instead of the deprecated ones. If you want to... Use this Learn about the type-specific headers of an inbound or outbound message. Headers Copy For a provided implementation of Headers use ConcurrentHashMapHeaders. See an example of W3C trace context headers implementation in DT API usage with Kafka. Create and insert distributed tracing headers into a Headers data structure. This API will insert both newrelic and W3C Trace Context headers (traceparent & tracestate), unless the agent is explicitly configured to exclude newrelic headers. Transaction.insertDistributedTraceHeaders(Headers) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Accept the distributed tracing headers sent from the calling service and link these services together in a distributed trace. Transaction.acceptDistributedTraceHeaders(TransportType, Headers) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Understand a utility class that provides enum constants for defining the transport type when accepting distributed tracing headers. TransportType Copy Add custom attributes to SpanEvents in distributed traces NewRelic.getAgent().getTracedMethod().addCustomAttribute(...) Caution With agent version 6.4.0, the following distributed tracing APIs have been deprecated and replaced by the APIs in the above table. It's highly recommended to upgrade the agent and use the new APIs instead of these deprecated ones. If you want to... Use this Create a payload to be sent to a called service. Transaction.createDistributedTracePayload() Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Caution API deprecated as of agent 6.4.0 Accept a payload sent from the first service; this will link these services together in a trace. Transaction.acceptDistributedTracePayload(...) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Caution API deprecated as of agent 6.4.0 Payload used to connect services. The text() call returns a JSON string representation of the payload. DistributedTracePayload.text() Caution API deprecated as of agent 6.4.0 Payload used to connect services. The httpSafe() call returns a base64 encoded JSON string representation of the payload. DistributedTracePayload.httpSafe() Caution API deprecated as of agent 6.4.0 Cross application tracing (CAT) API usage Important Cross application tracing has been deprecated as of agent version 7.4.0 and will be removed in a future agent version. Instead of using cross application tracing, we recommend our distributed tracing features. Distributed tracing is an improvement on the cross application tracing feature and is recommended for large, distributed systems. To track external calls and add cross application tracing, use the following APIs: If you want to... Use this Trace across a custom transport channel that New Relic does not support by default, such as a proprietary RPC transport Transaction.getRequestMetadata(), .processRequestMetadata(...), .getResponseMetadata(), .processResponseMetadata(...) Copy Also refer to the information in this document about using Transaction to obtain references to New Relic API classes. View or change the metric name or a rollup metric name of a TracedMethod (A rollup metric name, such as OtherTransaction/all, is not scoped to a specific transaction. It represents all background transactions.) TracedMethod.getMetricName(), .setMetricName(...), .setRollupMetricName(...) Copy Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Report a call to an external HTTP service, database server, message queue, or other external resource that is being traced using the Java agent API's @Trace annotation TracedMethod.reportAsExternal(...) passing arguments constructed using ExternalParameters builder. Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Enable and add cross application tracing when communicating with an external HTTP or JMS service that is instrumented by New Relic TracedMethod.addOutboundRequestHeaders(...) along with TracedMethod.reportAsExternal(...) Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Add timing for an application server or dispatcher that is not supported automatically Transaction.setRequest(...), Transaction.setResponse(...), or NewRelic.setRequestAndResponse(...), and Transaction.markResponseSent() Also refer to the information in this document about using Transaction to obtain references to New Relic API classes. Obtain references to New Relic API classes Other tasks require the New Relic Agent object. The Agent object exposes multiple objects that give you the following functionality: If you want to... Use this Get a reference to the current Transaction NewRelic.getAgent().getTransaction() Get a Token to link asynchronous work NewRelic.getAgent().getTransaction().getToken() Copy Start and get a reference to a Segment NewRelic.getAgent().getTransaction().startSegment() Copy Get a reference to the method currently being traced NewRelic.getAgent().getTracedMethod() Get a reference to the Agent logger NewRelic.getAgent().getLogger() Get a reference to the Agent configuration NewRelic.getAgent().getConfig() Get a reference to an aggregator for custom metrics NewRelic.getAgent().getAggregator() Get a reference to Insights (our original name for the feature that governed custom events) in order to record custom events NewRelic.getAgent().getInsights() Additional API functionality The following APIs provide additional functionality, such as setting app server info, reporting errors, adding page load timing information, recording custom metrics, and sending custom events. If you want to... Use this Explicitly set port, name, and version information for an application server or dispatcher and the instance name for a JVM NewRelic.setAppServerPort(...), .setServerInfo(...), and .setInstanceName(...) Copy Report an error that New Relic does not report automatically NewRelic.noticeError(...) When inside a transaction, the last call to noticeError wins. Only 1 error will be reported per transaction. Add browser page load timing for Transactions that New Relic does not add to the header automatically NewRelic.getBrowserTimingHeader(), .getBrowserTimingFooter(), .setUserName(String name), .setAccountName(String name), and .setProductName(String name) Copy Create and accumulate custom metrics NewRelic.recordMetric(...), .recordResponseTimeMetric(...), or .incrementCounter(...) Record custom events Insights.recordCustomEvent(...) Or, use NewRelic.addCustomParameter(...) to add custom attributes to the New Relic-defined TransactionEvent type. Also refer to the information in this document about using Insights to obtain references to New Relic API classes. Additional API usage examples For detailed code examples about using the APIs, see New Relic's documentation about custom instrumentation for: External calls, cross application traces, messaging, datastores, and web frameworks Cross application tracing and external datastore calls Apps using custom instrumentation with annotation Custom framework instrumentation API Preventing unwanted instrumentation Inserting custom attributes Inserting custom events Collecting custom metrics",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.92747,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the Java <em>agent</em> <em>API</em> ",
        "sections": "<em>Guide</em> to using the Java <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic Java <em>agent</em> <em>API</em> lets you control, customize, and extend the functionality of the APM Java <em>agent</em>. This <em>API</em> consists of: Static methods on the com.newrelic.<em>api.agent</em>.NewRelic class A @Trace annotation for implementing custom instrumentation A hierarchy of <em>API</em> objects providing additional"
      },
      "id": "617e5b6fe7b9d248b3c06014"
    },
    {
      "sections": [
        "Guide to using the .NET agent API",
        "Requirements",
        "Important",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "See related logs",
        "Instrument asynchronous work",
        "View calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser monitoring agent"
      ],
      "title": "Guide to using the .NET agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "API guides"
      ],
      "external_id": "03f79d963725d4c950219143dedb6efa443be9f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/net-agent-api/guide-using-net-agent-api/",
      "published_at": "2021-12-05T06:04:13Z",
      "updated_at": "2021-11-26T07:39:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent includes an API that allows you to extend the agent's standard functionality. For example, you can use the .NET agent API for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET agent's default behavior by adjusting configuration settings or using custom instrumentation. Requirements Important As of September 2021, a small subset of APIs, configuration options, and installation options for .NET will be replaced by new methods. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. To use the .NET agent API: Make sure you have the latest .NET agent release. Add a reference to the agent in your project: Add a reference to NewRelic.Api.Agent.dll to your project. OR View and download the API package from the NuGet Package Library. Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Prevent a transaction from reporting to New Relic Use IgnoreTransaction() or an XML file to ignore the transaction. Create a transaction where none exists Use attributes or an XML file to create a new transaction. Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. When you want to instrument a method within an existing transaction, see Custom instrumentation via attributes or Add detail to transactions via XML. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in the New Relic UI, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them in dashboards. Use these methods when you want to change how New Relic instruments a transaction that's already visible in the New Relic UI: If you want to... Do this... Change the name of a transaction Use SetTransactionName() or an XML file. Prevent a transaction from affecting your Apdex score Use IgnoreApdex(). Add metadata (such as your customer's account name or subscription level) to your transactions Use custom attributes. See AddCustomAttribute(). See related logs To see logs directly within the context of your application's errors and traces, use these API calls to annotate your logs: TraceMetadata GetLinkingMetadata For more information about correlating log data with other telemetry data, see our logs in context documentation. Instrument asynchronous work For supported frameworks, the .NET agent usually detects async work and instruments it correctly. However, if your app uses another framework, or the default async instrumentation is inaccurate, you can explicitly connect async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. Trace an async method that New Relic is not instrumenting Use an XML file to instrument async methods in IIS apps. Also see the New Relic's troubleshooting tips for missing async metrics. View calls to external services For .NET agent version 8.9 or higher, you can use the following distributed tracing payload APIs to manually pass distributed tracing context between New Relic-monitored services that don't automatically connect to one another in a distributed trace. If you want to... Do this... Instrument an outgoing request to an external application or database Create a distributed trace payload to attach to an outgoing request using CreateDistributedTracePayload(). Connect incoming requests with the originator of the request to complete a span of the trace Receive a payload on an incoming request using AcceptDistributedTracePayload(). For .NET agent versions lower than 8.9, use cross application tracing. Collect or ignore errors Usually the .NET agent detects errors automatically. However, you can manually mark an error with the agent. You can also ignore errors . If you want to... Do this... Report an error the .NET agent does not report automatically Use NoticeError(). Capture errors or prevent the .NET agent from reporting an error at all Use your .NET agent configuration file. Send custom event and metric data from your app APM includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in dashboards Create a custom event. See RecordCustomEvent(). Tag your events with metadata to filter and facet them in dashboards or error analytics Add custom attributes. See .NET agent attributes and Enable and disable attributes. Report custom performance data Use RecordMetric() to create a custom metric. To view the data, use the query builder. Control the browser monitoring agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add apps to browser monitoring. However, you can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.76489,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the .NET <em>agent</em> <em>API</em>",
        "sections": "<em>Guide</em> to using the .NET <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "New Relic&#x27;s .NET <em>agent</em> includes an <em>API</em> that allows you to extend the <em>agent</em>&#x27;s standard functionality. For example, you can use the .NET <em>agent</em> <em>API</em> for: Customizing your app name Creating custom transaction parameters Reporting custom errors and metrics You can also customize some of the .NET <em>agent</em>"
      },
      "id": "61a08f1564441fd10c9840d0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_add_custom_parameter": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41168,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_add_custom_tracer": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41167,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_background_job": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41167,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_capture_params": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41167,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_disable_autorum": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41167,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_end_of_transaction": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41165,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_end_transaction": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41165,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_get_browser_timing_footer": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41165,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_get_browser_timing_header": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41165,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_ignore_apdex": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.4113,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_ignore_transaction": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41132,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.4113,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_name_transaction": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.4113,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_notice_error": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.4113,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_record_custom_event": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41162,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_record_datastore_segment": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41162,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_set_appname": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41162,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41162,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41162,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtraceheaders": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41162,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayload-php-agent-api": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.4116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_accept_distributed_trace_payload_httpsafe (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "92514f1c15e133e26b99f257f35448d78fe6227f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api/",
      "published_at": "2021-12-05T08:47:09Z",
      "updated_at": "2021-10-31T14:28:11Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires PHP agent version 8.4 or higher. Description Distributed tracing allows you to see the path that a request takes as it travels through a distributed system. This is useful, for example, when individual transactions occur in multiple services, and you want to examine them as a complete transaction trace. Important With PHP agent version 9.10 or higher, the following JSON functions are now considered deprecated and will be removed in a future release: newrelic_create_distributed_trace_payload()newrelic_accept_distributed_trace_payload($payload)newrelic_accept_distributed_trace_payload_httpsafe($payload) Copy Instead, use the API that is compatible with W3C Trace Context support, added in agent version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions to the following header array forms: newrelic_insert_distributed_trace_headers($outbound_headers)newrelic_accept_distributed_trace_headers($inbound_headers) Copy Parameters Parameter Description $httpsafe_payload string Required. An HTTPSafe (Base64 encoded) JSON string representation of the payload. $transport_type string Optional. A string overriding the default transport type. Default values: HTTP for web traffic Unknown for non-web traffic Additional accepted values: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Return values Returns true to indicate success, or false if an error occurs. Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_accept_distributed_trace_payload_httpsafe (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_accept_distributed_trace_payload_httpsafe(string $httpsafe_payload, string $transport_type) Copy Accepts a distributed trace payload that includes an HTTPSafe (Base64 encoded) JSON string. Requirements Requires <em>PHP</em> <em>agent</em> version 8.4 or higher. Description Distributed tracing allows"
      },
      "id": "617ea7fb64441f8ce6fbddf3"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api": [
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "751a7d577ed205d281ad41270c7c9f2457b073e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-12-05T06:34:49Z",
      "updated_at": "2021-10-31T14:28:57Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.4116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "617ea82964441fa10bfbdd6a"
    },
    {
      "sections": [
        "newrelic_start_transaction (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Stop a transaction, then start another",
        "Start a new transaction with a new license key"
      ],
      "title": "newrelic_start_transaction (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "8a0ead614f1a9f8bbf6bd245387cc5d59df6ab0d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_start_transaction/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:10Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_start_transaction(string $appname[, string $license]) Copy Starts a new transaction, usually after manually ending a transaction. Requirements Agent version 3.0.5.95 or higher. Description Start a new transaction manually. Usually used after manually ending a transaction with newrelic_end_transaction(), for example when separating tasks in a job queue manager. When instrumenting this new transaction, the agent performs the same operations as when the script first started. Parameters Parameter Description $appname string Required. The application name to associate with data from this transaction. Uses the same format as newrelic.appname and can set multiple application names by separating each with a semicolon ;. While this option is required, you can read the app name from newrelic.ini with ini_get(\"newrelic.appname\"). $license string Optional. Defaults to the license key set in the New Relic agent's newrelic.ini file. Provide a different license key if you want the transaction to report to a different New Relic account. If set, this license will supersede all per-directory and global default licenses configured in INI files. Return values This function will return true if the transaction was successfully started. Examples Stop a transaction, then start another For task queue managers, you can use newrelic_end_transaction() and newrelic_start_transaction() together to manually separate transactions. This example uses ini_get to read the application name from the config file. function example() { ... // queuing logic if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_end_transaction(); // stop recording the current transaction newrelic_start_transaction(ini_get(\"newrelic.appname\")); // start recording a new transaction } ... // more queuing logic } Copy Start a new transaction with a new license key This example manually specifies the app name and the license key: function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_start_transaction(\"App1\", \"01234567890abcde01234567890abcde01234567890\"); } ... } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_start_transaction (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " the config file. function example() { ... &#x2F;&#x2F; queuing logic if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_end_transaction(); &#x2F;&#x2F; stop recording the current transaction newrelic_start_transaction(ini_get(&quot;newrelic.appname&quot;)); &#x2F;&#x2F; start recording a new transaction"
      },
      "id": "617ea7fa64441f2522fbc57f"
    },
    {
      "sections": [
        "newrelic_set_user_attributes (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "newrelic_set_user_attributes (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "7f0ed196aa12e9a7937cd83acc89f1bd5bd1dfea",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/php-agent-api/newrelic_set_user_attributes/",
      "published_at": "2021-12-05T09:09:36Z",
      "updated_at": "2021-10-31T14:28:09Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_set_user_attributes(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. newrelic_add_custom_parameter is more flexible. Requirements Agent version 3.1.5.111 or higher. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use newrelic_add_custom_parameter. As of release 4.4, calling newrelic_set_user_attributes(\"a\", \"b\", \"c\"); is equivalent to calling newrelic_add_custom_parameter(\"user\", \"a\"); newrelic_add_custom_parameter(\"account\", \"b\"); newrelic_add_custom_parameter(\"product\", \"c\"); All three parameters are required, but they may be empty strings. Parameters Parameter Description $user_value string Required (can be empty string). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be empty string). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be empty string). Specify the name of a product to associate with this page view. This value is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); } } Copy Record two user attributes and one empty attribute function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_set_user_attributes(\"MyUserName\", \"\", \"MyProductName\"); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.41125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_set_user_attributes (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " is assigned to the product key. Return values This function will return true if the attributes were added successfully. Examples Record three user attributes function example() { if (extension_loaded(&#x27;newrelic&#x27;)) { &#x2F;&#x2F; Ensure <em>PHP</em> <em>agent</em> is available newrelic_set_user_attributes(&quot;MyUserName&quot;, &quot;MyAccountName"
      },
      "id": "617ea7fa28ccbc1c9c8001b0"
    }
  ]
}