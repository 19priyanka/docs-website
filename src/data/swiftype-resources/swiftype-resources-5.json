{
  "/docs/apm/agents/net-agent/troubleshooting/generate-logs-troubleshooting-net": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.62595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74257,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.58339,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/high-memory-usage-net": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.62595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74257,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.58339,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/missing-couchbase-metrics-net": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.62582,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.583305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/missing-net-async-metrics": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.62582,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.583305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/monitor-short-lived-net-processes": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.6257,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74236,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.58323,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/net-agent-reports-handled-errors": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.6257,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74236,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.58323,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/new-relic-net-status-monitor": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.6257,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74236,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.58323,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-browser-data-appears-net": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.62558,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.58315,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-data-appears-after-disabling-tls-10": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.62558,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.58315,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-data-appears-net": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.62544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.58308,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-data-registry-key-permission-issues": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.62544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.58308,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/no-stack-traces-dotnet": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.62532,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.583,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/profiler-conflicts": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.62532,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.583,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/resolve-net-scom-conflicts": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "c187ef0d5f90af35c965b398a0c98d87de0b0e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-10-23T18:23:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.6252,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "61745334e7b9d24fbe13bf4e"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74191,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.582924,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    }
  ],
  "/docs/apm/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower": [
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "a19f931fc6b91fa9a3ff3e1b73886901259ca8a9",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-10-23T18:00:24Z",
      "updated_at": "2021-10-23T17:58:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.74191,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>troubleshooting</em> procedures. one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the .<em>NET</em> <em>agent</em>, you will see a summary of your app&#x27;s performance on the Summary page. Configure"
      },
      "id": "61744d37e7b9d2d02813ddf8"
    },
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "34d576d70a4393eea903e46c6dc9297303f821eb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/service-maps/how-use-service-maps/",
      "published_at": "2021-10-24T13:02:13Z",
      "updated_at": "2021-10-24T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.582924,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". For best results, update existing <em>agents</em> to the latest version. The required minimum <em>agent</em> versions for maps are: Minimum versions when distributed tracing is enabled The required minimum <em>agent</em> versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go <em>agent</em> 2.1.0 or higher Java <em>agent</em>"
      },
      "id": "603ec23264441fb02c4e8893"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-10-24T12:20:11Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.68013,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    }
  ],
  "/docs/apm/agents/nodejs-agent/api-guides/guide-using-nodejs-agent-api": [
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-10-24T12:32:37Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.39972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " and the <em>Node.js</em> <em>agent</em> <em>API</em> documentation on Github. Request names The <em>Node.js</em> <em>agent</em> captures the HTTP method along with a potentially parameterized path (such as &#x2F;user&#x2F;:id) or a regular expression (such as &#x2F;^&#x2F;user&#x2F;([-0-9a-f]+)$&#x2F;). These pieces of information become part of the request name. If you have support"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " custom metrics via an <em>API</em> call. Use our <em>Node.js</em> <em>agent</em> <em>API</em> to control, customize, or extend the <em>agent</em>&#x27;s functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " want to use one or more of the tools New Relic provides with the <em>Node.js</em> transaction naming <em>API</em>. EOL NOTICE We&#x27;re discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our <em>Node.js</em> <em>agent</em>. For more details"
      },
      "id": "617480b564441f73505fe0c1"
    }
  ],
  "/docs/apm/agents/nodejs-agent/api-guides/nodejs-agent-api": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " custom metrics via an <em>API</em> call. Use our <em>Node.js</em> <em>agent</em> <em>API</em> to control, customize, or extend the <em>agent</em>&#x27;s functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " want to use one or more of the tools New Relic provides with the <em>Node.js</em> transaction naming <em>API</em>. EOL NOTICE We&#x27;re discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our <em>Node.js</em> <em>agent</em>. For more details"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-24T00:12:38Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.27441,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic Ruby <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    }
  ],
  "/docs/apm/agents/nodejs-agent/attributes/nodejs-agent-attributes": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.30081,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the <em>Node.js</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Pinpoint and solve issues down to the line of code with <em>Node.js</em> monitoring from New Relic. With features like service maps and error analytics, our <em>Node.js</em> <em>agent</em> helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.8842,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in infrastructure monitoring. New Relic dashboards The <em>Node.js</em> <em>agent</em> sends default events and <em>attributes</em> for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction."
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/apollo-server-plugin-nodejs": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 271.332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-10-24T12:56:06Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20348,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-10-24T22:41:09Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20345,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 271.3318,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-10-24T12:56:06Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20348,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-10-24T22:41:09Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20345,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/message-queues": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 271.3318,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-10-24T12:56:06Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20348,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-10-24T22:41:09Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20345,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 271.3318,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-10-24T12:56:06Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20348,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Browser monitoring and the Node.js agent",
        "Insert the JavaScript header",
        "Framework examples",
        "Express and jade",
        "Express and Swig",
        "Hapi.js and handlebars",
        "Disable header generation",
        "Caution"
      ],
      "title": "Browser monitoring and the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "8b8cba2d5ce2acdc55df2621d850329cf4796bbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent/",
      "published_at": "2021-10-24T12:45:27Z",
      "updated_at": "2021-03-16T09:02:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Node.js agent, you can add browser instrumentation to your web pages. To use browser monitoring with your Node.js agent, ensure you have the latest release of the Node.js agent. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Node.js agent. Insert the JavaScript header Instrumentation for the Node.js agent can continue beyond your application into end users' browsers. The newrelic module can generate script headers which, when inserted into your HTML templates, will capture the end users' page load times. The headers must be manually injected, but no extra configuration is necessary. At the beginning of your html page's head tag, insert the results of newrelic.getBrowserTimingHeader() after any CHARSET meta tags. Exception: For maximum Internet Explorer compatibility, insert the results of newrelic.getBrowserTimingHeader() after any X-UA-COMPATIBLE HTTP-EQUIV meta tags. Call the header once for every request. Do not cache the header. Generating headers is fast, and it does not require your application to make extra requests to New Relic. Framework examples Here are some examples of how to set up browser monitoring with different frameworks and templates. Express and jade This example uses Express, a web application framework, and jade, a template module. Although the specifics are different with other frameworks, this general approach should work in most cases. The simplest way to insert browser timing headings is to pass the newrelic module into your template, and then call newrelic.getBrowsertimingHeader() from within the template. In your app.js: var newrelic = require('newrelic'); var app = require('express')(); // in express, this lets you call newrelic from within a template app.locals.newrelic = newrelic; app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your layout.jade: doctype html html head != newrelic.getBrowserTimingHeader() title= title link(rel='stylesheet', href='stylesheets/style.css') body block content Copy Express and Swig This example uses Express with Swig. In your app.js: var newrelic = require('newrelic'); var http = require('http') var path = require('path') var swig = require('swig') var app = require('express')(); app.locals.newrelic = newrelic; //taken from http://paularmstrong.github.io/swig/docs/#express app.engine('html', swig.renderFile); app.set('view engine', 'html'); app.set('views', __dirname + '/views'); app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your views/user.html: <!DOCTYPE html> <html> <head> {{ newrelic.getBrowserTimingHeader() }} <title>Hello</title> </head> <body> <h1>Hello World</h1> </body> </html> Copy Hapi.js and handlebars This example uses hapi.js and handlebars. Other similar templating languages typically require triple brackets; for example, using mustache with hogan-express. This helps prevent escaping of the script content. Using hapi, in your app.js: var newrelic = require('newrelic'); var Hapi = require('hapi'); var server = new Hapi.Server(parseInt(PORT), '0.0.0.0', { views: { engines : {html: 'handlebars' }, path : __dirname + '/templates' } }); function homepage(request, reply) { var context = { // pass in the header each request nreum : newrelic.getBrowserTimingHeader(), content : ... }; reply.view('homepage', context); }; server.route({ method : 'GET', path : '/', handler : homepage }); server.start(); Copy In your templates/homepage.html: <!DOCTYPE html> <html> <head> {{{ nreum }}} <title>Hello</title> </head> <body> {{ content }} </body> </html> Copy Disable header generation By default, calls to newrelic.getBrowserTimingHeader() should return valid headers. To disable header generation without removing your template code: In your newrelic.js file, add: browser_monitoring : { enable : false } Copy You can also set the environment variable NEW_RELIC_BROWSER_MONITOR_ENABLE=false. Caution Always leave ssl between the agent and the New Relic collector when using browser monitoring. You can safely leave the API calls in place even if you are not using browser monitoring or the newrelic module. If browser monitoring is disabled, or if there is an error so that working headers cannot be generated, the newrelic module generates an innocuous HTML comment. If you disable the newrelic module completely, no content will be generated.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.19624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Node.js <em>agent</em>",
        "sections": "Browser monitoring and the Node.js <em>agent</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "With the <em>Node.js</em> <em>agent</em>, you can add browser <em>instrumentation</em> to <em>your</em> web pages. To use browser monitoring with <em>your</em> <em>Node.js</em> <em>agent</em>, ensure you have the latest release of the <em>Node.js</em> <em>agent</em>. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>"
      },
      "id": "603e8376e7b9d2b7472a07f7"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-metrics": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 271.33157,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-10-24T12:56:06Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20348,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-10-24T22:41:09Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20345,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-v1-custom-instrumentation-legacy": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 271.33157,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-10-24T12:56:06Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20348,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-10-24T22:41:09Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20345,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-vm-measurements": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 271.33136,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-10-24T12:56:06Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20348,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-10-24T22:41:09Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20345,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 271.33136,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-10-24T22:41:09Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20345,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    },
    {
      "sections": [
        "Browser monitoring and the Node.js agent",
        "Insert the JavaScript header",
        "Framework examples",
        "Express and jade",
        "Express and Swig",
        "Hapi.js and handlebars",
        "Disable header generation",
        "Caution"
      ],
      "title": "Browser monitoring and the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "8b8cba2d5ce2acdc55df2621d850329cf4796bbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent/",
      "published_at": "2021-10-24T12:45:27Z",
      "updated_at": "2021-03-16T09:02:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Node.js agent, you can add browser instrumentation to your web pages. To use browser monitoring with your Node.js agent, ensure you have the latest release of the Node.js agent. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Node.js agent. Insert the JavaScript header Instrumentation for the Node.js agent can continue beyond your application into end users' browsers. The newrelic module can generate script headers which, when inserted into your HTML templates, will capture the end users' page load times. The headers must be manually injected, but no extra configuration is necessary. At the beginning of your html page's head tag, insert the results of newrelic.getBrowserTimingHeader() after any CHARSET meta tags. Exception: For maximum Internet Explorer compatibility, insert the results of newrelic.getBrowserTimingHeader() after any X-UA-COMPATIBLE HTTP-EQUIV meta tags. Call the header once for every request. Do not cache the header. Generating headers is fast, and it does not require your application to make extra requests to New Relic. Framework examples Here are some examples of how to set up browser monitoring with different frameworks and templates. Express and jade This example uses Express, a web application framework, and jade, a template module. Although the specifics are different with other frameworks, this general approach should work in most cases. The simplest way to insert browser timing headings is to pass the newrelic module into your template, and then call newrelic.getBrowsertimingHeader() from within the template. In your app.js: var newrelic = require('newrelic'); var app = require('express')(); // in express, this lets you call newrelic from within a template app.locals.newrelic = newrelic; app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your layout.jade: doctype html html head != newrelic.getBrowserTimingHeader() title= title link(rel='stylesheet', href='stylesheets/style.css') body block content Copy Express and Swig This example uses Express with Swig. In your app.js: var newrelic = require('newrelic'); var http = require('http') var path = require('path') var swig = require('swig') var app = require('express')(); app.locals.newrelic = newrelic; //taken from http://paularmstrong.github.io/swig/docs/#express app.engine('html', swig.renderFile); app.set('view engine', 'html'); app.set('views', __dirname + '/views'); app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your views/user.html: <!DOCTYPE html> <html> <head> {{ newrelic.getBrowserTimingHeader() }} <title>Hello</title> </head> <body> <h1>Hello World</h1> </body> </html> Copy Hapi.js and handlebars This example uses hapi.js and handlebars. Other similar templating languages typically require triple brackets; for example, using mustache with hogan-express. This helps prevent escaping of the script content. Using hapi, in your app.js: var newrelic = require('newrelic'); var Hapi = require('hapi'); var server = new Hapi.Server(parseInt(PORT), '0.0.0.0', { views: { engines : {html: 'handlebars' }, path : __dirname + '/templates' } }); function homepage(request, reply) { var context = { // pass in the header each request nreum : newrelic.getBrowserTimingHeader(), content : ... }; reply.view('homepage', context); }; server.route({ method : 'GET', path : '/', handler : homepage }); server.start(); Copy In your templates/homepage.html: <!DOCTYPE html> <html> <head> {{{ nreum }}} <title>Hello</title> </head> <body> {{ content }} </body> </html> Copy Disable header generation By default, calls to newrelic.getBrowserTimingHeader() should return valid headers. To disable header generation without removing your template code: In your newrelic.js file, add: browser_monitoring : { enable : false } Copy You can also set the environment variable NEW_RELIC_BROWSER_MONITOR_ENABLE=false. Caution Always leave ssl between the agent and the New Relic collector when using browser monitoring. You can safely leave the API calls in place even if you are not using browser monitoring or the newrelic module. If browser monitoring is disabled, or if there is an error so that working headers cannot be generated, the newrelic module generates an innocuous HTML comment. If you disable the newrelic module completely, no content will be generated.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.19624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Node.js <em>agent</em>",
        "sections": "Browser monitoring and the Node.js <em>agent</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "With the <em>Node.js</em> <em>agent</em>, you can add browser <em>instrumentation</em> to <em>your</em> web pages. To use browser monitoring with <em>your</em> <em>Node.js</em> <em>agent</em>, ensure you have the latest release of the <em>Node.js</em> <em>agent</em>. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>"
      },
      "id": "603e8376e7b9d2b7472a07f7"
    }
  ],
  "/docs/apm/agents/nodejs-agent/getting-started/apm-agent-security-nodejs": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 216.16083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Pinpoint and solve issues down to the line of code with <em>Node.js</em> monitoring from New Relic. With features like service maps and error analytics, our <em>Node.js</em> <em>agent</em> helps you <em>get</em> the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 216.16083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " not replace the general <em>agent</em> and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. <em>Node.js</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Node.js</em> <em>agent</em> with support 18 October 2022 April-October 2022 16 October 2021"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.14938,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " not replace the general <em>agent</em> and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. <em>Node.js</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Node.js</em> <em>agent</em> with support 18 October 2022 April-October 2022 16 October 2021"
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 216.16083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Pinpoint and solve issues down to the line of code with <em>Node.js</em> monitoring from New Relic. With features like service maps and error analytics, our <em>Node.js</em> <em>agent</em> helps you <em>get</em> the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Introduction to New Relic integrations",
        "Choose what's right for you",
        "Create your own solutions"
      ],
      "title": "Introduction to New Relic integrations",
      "type": "docs",
      "tags": [
        "Instrument everything",
        "Get started"
      ],
      "external_id": "9a44613b8a5ec0a9c9570b22c7d2f3ea726f2671",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/introduction-new-relic-integrations/",
      "published_at": "2021-10-24T11:54:18Z",
      "updated_at": "2021-10-24T00:59:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "We provide hundreds of solutions to get your data into New Relic so you can analyze the data in one place. They give you a steady flow of useful data to fix problems quickly, maintain complex systems, improve your code, and accelerate your digital transformation. You can bring in data from hundreds of applications, frameworks, services, operating systems, and other technologies. Our integrations gather the data, and the agents send it to New Relic. The solution you need may require you to install both an integration and an agent. In some cases, you can just install our agents that contain integrations, such as our APM agents. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to get you started. Choose what's right for you We offer a wide range of solutions so you can easily collect data across your environment. You may only need one of our solutions to get the data you need, or you can choose a variety of options to capture a broader range of data types. Go to New Relic Integrations to find solutions that fit your environment. Here is a sample of what you’ll find there: Application performance monitoring (APM): C, Go, Java, Node, .NET, PHP, Python, and Ruby Mobile apps: Android and iOS Browser monitoring: Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and Apple Safari Host monitoring: Linux and Microsoft Windows Cloud platform monitoring: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP) Core infrastructure services: Kubernetes, NGINX, MySQL, and more Open source telemetry integrations: Prometheus, Micrometer, OpenTelemetry, and more Create your own solutions If you are looking for custom options, we have tools to help you create your own: Use New Relic Flex to create lightweight monitoring solutions using infrastructure monitoring. Use New Relic Telemetry SDKs to build custom solutions for sending metrics, traces, and more. Build your own New Relic One applications that you can share with your colleagues, or edit open source applications in our catalog.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.692,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " integrations, such as our APM <em>agents</em>. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to <em>get</em> you <em>started</em>. Choose what&#x27;s right for you We offer a wide range of solutions so you can easily collect"
      },
      "id": "603e817f28ccbc4857eba798"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-24T11:20:53Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.977104,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Install the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    }
  ],
  "/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 216.16066,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " not replace the general <em>agent</em> and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. <em>Node.js</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Node.js</em> <em>agent</em> with support 18 October 2022 April-October 2022 16 October 2021"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.14932,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " not replace the general <em>agent</em> and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. <em>Node.js</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Node.js</em> <em>agent</em> with support 18 October 2022 April-October 2022 16 October 2021"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Introduction to New Relic integrations",
        "Choose what's right for you",
        "Create your own solutions"
      ],
      "title": "Introduction to New Relic integrations",
      "type": "docs",
      "tags": [
        "Instrument everything",
        "Get started"
      ],
      "external_id": "9a44613b8a5ec0a9c9570b22c7d2f3ea726f2671",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/introduction-new-relic-integrations/",
      "published_at": "2021-10-24T11:54:18Z",
      "updated_at": "2021-10-24T00:59:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "We provide hundreds of solutions to get your data into New Relic so you can analyze the data in one place. They give you a steady flow of useful data to fix problems quickly, maintain complex systems, improve your code, and accelerate your digital transformation. You can bring in data from hundreds of applications, frameworks, services, operating systems, and other technologies. Our integrations gather the data, and the agents send it to New Relic. The solution you need may require you to install both an integration and an agent. In some cases, you can just install our agents that contain integrations, such as our APM agents. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to get you started. Choose what's right for you We offer a wide range of solutions so you can easily collect data across your environment. You may only need one of our solutions to get the data you need, or you can choose a variety of options to capture a broader range of data types. Go to New Relic Integrations to find solutions that fit your environment. Here is a sample of what you’ll find there: Application performance monitoring (APM): C, Go, Java, Node, .NET, PHP, Python, and Ruby Mobile apps: Android and iOS Browser monitoring: Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and Apple Safari Host monitoring: Linux and Microsoft Windows Cloud platform monitoring: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP) Core infrastructure services: Kubernetes, NGINX, MySQL, and more Open source telemetry integrations: Prometheus, Micrometer, OpenTelemetry, and more Create your own solutions If you are looking for custom options, we have tools to help you create your own: Use New Relic Flex to create lightweight monitoring solutions using infrastructure monitoring. Use New Relic Telemetry SDKs to build custom solutions for sending metrics, traces, and more. Build your own New Relic One applications that you can share with your colleagues, or edit open source applications in our catalog.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.6919,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " integrations, such as our APM <em>agents</em>. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to <em>get</em> you <em>started</em>. Choose what&#x27;s right for you We offer a wide range of solutions so you can easily collect"
      },
      "id": "603e817f28ccbc4857eba798"
    }
  ],
  "/docs/apm/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.8566,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "<em>Hosting</em> <em>services</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " instrumentation is only available with the New Relic <em>Node.js</em> <em>agent</em> v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. <em>Hosting</em> <em>services</em> Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.68019,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "<em>Hosting</em> <em>services</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " For other message queue libraries, use custom instrumentation. <em>Hosting</em> <em>services</em> Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of <em>Node.js</em> (like Forever) should be compatible"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06177,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Pinpoint and solve issues down to the line of code with <em>Node.js</em> monitoring from New Relic. With features like service maps and error analytics, our <em>Node.js</em> <em>agent</em> helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution"
      },
      "id": "617480b664441fdadc5fbef8"
    }
  ],
  "/docs/apm/agents/nodejs-agent/hosting-services/nodejs-agent-heroku": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.85648,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "<em>Hosting</em> <em>services</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " instrumentation is only available with the New Relic <em>Node.js</em> <em>agent</em> v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. <em>Hosting</em> <em>services</em> Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.68015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "<em>Hosting</em> <em>services</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " For other message queue libraries, use custom instrumentation. <em>Hosting</em> <em>services</em> Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of <em>Node.js</em> (like Forever) should be compatible"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-10-23T21:45:22Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.59741,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "6043d8da28ccbc08242c60a6"
    }
  ],
  "/docs/apm/agents/nodejs-agent/hosting-services/nodejs-agent-microsoft-azure": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.85648,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "<em>Hosting</em> <em>services</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " instrumentation is only available with the New Relic <em>Node.js</em> <em>agent</em> v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. <em>Hosting</em> <em>services</em> Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.68015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "<em>Hosting</em> <em>services</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " For other message queue libraries, use custom instrumentation. <em>Hosting</em> <em>services</em> Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of <em>Node.js</em> (like Forever) should be compatible"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-10-23T21:45:22Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.59741,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "6043d8da28ccbc08242c60a6"
    }
  ],
  "/docs/apm/agents/nodejs-agent/index": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Pinpoint and solve issues down to the line of code with <em>Node.js</em> monitoring from New Relic. With features like service maps and error analytics, our <em>Node.js</em> <em>agent</em> helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the <em>Node.js</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.37692,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the <em>Node.js</em> <em>agent</em>, make sure your application meets the following system requirements. If you haven&#x27;t already, create a New Relic account. It&#x27;s free, forever. <em>Node.js</em>"
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-10-24T20:58:43Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.37369,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Update the Node.js agent",
        "Upgrade to Node.js agent version 8",
        "Node version support",
        "Tip",
        "Upgrade to Node.js agent version 7",
        "Upgrade to Node.js agent version 6",
        "Upgrade to Node.js agent version 5",
        "Feature flags as of v5",
        "Upgrade to Node.js agent version 4",
        "Upgrade https-proxy-agent from v0 to v2",
        "Upgrade to Node.js agent version 3",
        "Major changes with Node.js v3 agent",
        "Feature flags as of v3",
        "Upgrade to Node.js agent version 2",
        "Major changes with Node.js v2 agent",
        "Updated configuration options as of v2",
        "Deprecated API methods as of v2",
        "newrelic.createWebTransaction()",
        "newrelic.createBackgroundTransaction()",
        "newrelic.addCustomParameter()",
        "newrelic.addCustomParameters()",
        "New v2 agent API methods",
        "newrelic.getTransaction()",
        "newrelic.startWebTransaction()newrelic.startBackgroundTransaction()",
        "newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages()",
        "newrelic.addCustomAttribute()",
        "newrelic.addCustomAttributes()",
        "Node version support for v2",
        "npm version support as of v2",
        "Feature flags as of v2",
        "Framework minimum versions as of v2"
      ],
      "title": "Update the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "7534966716b25d9a64d3b1fe24fe9e72cfd15530",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/update-nodejs-agent/",
      "published_at": "2021-10-24T11:47:49Z",
      "updated_at": "2021-08-02T07:54:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your Node.js agent to the latest version. For additional information about specific agent updates, refer to the Node.js agent release notes. The release notes include a download link when applicable, plus instructions to download and install the latest version. If the newrelic module is listed in your package.json, run npm install. If you want to target just the newrelic module, run npm update newrelic. Recommendation: Test your updated version before moving it into production. If you have problems, follow the Node.js agent troubleshooting procedures. Upgrade to Node.js agent version 8 Before upgrading to Node.js version 8, review this information for major changes. Major changes with Node.js agent v8 Comments Added official parity support for Node 16. BREAKING: Dropped Node v10.x support. For further information see our support policy. BREAKING: Removed serverless_mode as a feature flag. The standard serverless_mode configuration still exists. BREAKING: The agent no-longer includes the New Relic certificate bundle automatically when using the 'certificates' configuration (commonly with proxies). If you find this breaking your current environment, you may leverage a feature-flag to temporarily restore this functionality. Example configuration: feature_flag: { certificate_bundle: true }. In this case, we recommend getting a certificate bundle for your environment such as the one from Mozilla. The New Relic bundle and feature flag will be fully removed in next major release. Defaulted config.feature_flags.certificate_bundle to false. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v4.0.1 @newrelic/koa v6.0.1 @newrelic/native-metrics v7.0.1 @newrelic/superagent v5.0.1 @newrelic/test-utilities v6.0.0 Node version support Node v12 is the earliest version supported by the New Relic Node.js v8 agent. Node 10 and 11 are not supported by v8. Customers running Node 11 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v8 agent's new features. Remain on New Relic Node.js v7 agent without the ability to use new features only available with update agent versions. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 12. Upgrade to Node.js agent version 7 Before upgrading to Node.js version 7, review this information for major changes. Major changes with Node.js agent v7 Comments BREAKING Removed deprecated httpResponseCode, response.status and httpResponseMessage http response attributes v6.4.2-v6.14.0: Starting in agent v6.4.2, these attributes were marked as deprecated but left in to give a transition period for the new attributes. v7: When http response attribute reporting is enabled, http.statusCode and http.statusText will be reported. BREAKING Removed deprecated setIgnoreTransaction API method v5 - v6: Starting in agent v5.0.0, this method was marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API method transactionHandle.ignore(). BREAKING Removed the api.custom_parameters_enabled configuration item and associated environment variable NEW_RELIC_API_CUSTOM_PARAMETERS. Applications must use the configuration api.custom_attributes_enabled or the associated environment variable NEW_RELIC_API_CUSTOM_ATTRIBUTES to enable newrelic.addCustomAttribute and newrelic.addCustomAttributes. BREAKING Removed deprecated Distributed Tracing API methods, createDistributedTracePayload() and acceptDistributedTracePayload() v6.4.0-v6.14.0: Starting in agent v6.4.0, these method were marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API methods transactionHandle.insertDistributedTraceHeaders(headers) and transactionHandle.acceptDistributedTraceHeaders(transportType, headers) . With these methods, the Node agent will now accept W3C's traceparent and tracestate headers when calling transactionHandle.acceptDistributedTraceHeaders(headers) and include the W3C headers along with the New Relic distributed tracing header when calling transactionHandle.insertDistributedTraceHeaders(headers), unless the New Relic trace header format is disabled using distributed_tracing.exclude_newrelic_header:true. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v3.0.0 @newrelic/koa v5.0.0 @newrelic/native-metrics v6.0.0 @newrelic/superagent v4.0.0 @newrelic/test-utilities v5.0.0 Node version support Node v10 is the earliest version supported by the New Relic Node.js v7 agent. Node 8 and 9 are not supported by v7. Customers running Node 9 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v7 agent's new features. Remain on New Relic Node.js v6 agent without the ability to use new features only available with update agent versions. Node 10 does not receive updates. Upgrade to a newer version of Node as soon as possible. Support for Node 10 has been discontinued with the New Relic Node.js agent v8. Upgrade to Node.js agent version 6 Before upgrading to Node.js agent version 6, review this information for major changes. Major changes with Node.js agent v6 Comments Upgraded official Koa framework instrumentation module to v3.0.0 v6: Added support for @koa/router up to v8.0.2. @koa/router v8.0.3 and greater are currently unsupported. v6: Added support for Node v12 and removed support for Node v6, 7, and 9. The minimum supported version is Node v8. Also see New Relic's Koa Release Notes on Github.. Removed deprecated max_samples_per_minute configuration parameter, which is replaced by max_samples_stored behavior v1 - v5: max_samples_per_minute defined the maximum number of events the agent collects per minute. If your application previously used max_samples_per_minute as an upper bound, you may need to lower the threshold to a valid maximum to avoid data being dropped on the server. We recommend less than 10k. v5: In agent v5 and lower, max_samples_stored defined the maximum number of events the agent stores if it's unable to communicate with the New Relic collector. v6: The new behavior of max_samples_stored defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. This usage of the configuration is consistent with the other APM agents. Troubleshooting tips: If you're missing event data, increase the value of max_samples_stored or revert to the default value. The value of max_samples_stored should not be over 10,000. Node version support Node 8 is the earliest version supported by the New Relic Node.js v6 agent. Node 6, 7 and 9 are not supported by v6. Customers running Node 6, 7 and 9 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v6 agent's new features. Remain on New Relic Node.js v5 agent without the ability to use new features only available with update agent versions. Node 8 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 8. Upgrade to Node.js agent version 5 Before upgrading to Node.js agent v5, review this information for major changes. Also see New Relic's Node.js v5 migration guide on GitHub. Major changes with Node.js v5 agent Comments Removed deprecated addCustomParameter methods. v2 - v4: Starting in agent v2.7.0, these methods were marked as deprecated but left in to give a transition period for the new methods. v5: Applications must use the API methods newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). These are drop-in replacements for the old methods. Removed deprecated create*Transaction methods. v2 - v4: Starting in agent v2.0.2, these methods were marked as deprecated but left in to give a transition period to the new methods. v5: Applications must update to the API methods newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Troubleshooting tips: These new methods are not drop-in replacements for the old ones. Before moving to these new methods, review our custom instrumentation guide. Removed deprecated createTracer method. v3 - v4: Starting in agent v3.3.0, this method was marked as deprecated in favor of newrelic.startSegment(). v5: Applications must update to newrelic.startSegment(). Removed node-cassandra-cql instrumentation. v4: Applications using the npm package node-cassandra-cql would get datastore metrics for Cassandra. v5: Applications must migrate to the cassandra-driver package to get Cassandra datastore metrics. This module is actively maintained by the same developers. The node-cassandra-cql package was abandoned in February of 2014 in favor of the cassandra-driver package. Removed deprecated capture_params and ignored_params configurations. v2 - v4: Starting in agent v2.7.0, these configuration parameters caused a warning to be logged, and the values were automatically upgraded to the new attributes configurations. v5: A warning will still be logged but the configuration is ignored, and no automatic upgrading happens any more. Troubleshooting tips: If your application had parameters listed in the ignored_params configuration, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic Node.js v5 agent. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v5 agent's new features. Remain on New Relic Node.js v4 agent without the ability to use new features only available with update agent versions. Node 7 and 9 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 6 and 7. Feature flags as of v5 As of New Relic for Node.js v5: custom_instrumentation: This feature is no longer configurable. custom_metrics: This feature is no longer configurable. synthetics: This feature is no longer configurable. native_metrics: This feature is now controlled by the plugins.native_metrics.enabled configuration value. Upgrade to Node.js agent version 4 Before upgrading to Node.js agent v4, review this information for major changes. Also see New Relic's Node.js v4 migration guide on GitHub. Upgrade https-proxy-agent from v0 to v2 Major changes with Node.js v4 agent include an upgrade of the https-proxy-agent from v0 to v2. This dependency has been updated due to a security issue in the https-proxy-agent that the New Relic Node.js agent used. Because https-proxy v2 is incompatible with node v0.10 and v0.12, New Relic has deprecated those agent versions. There is no required action to migrate from v3 to v4 of New Relic's Node.js agent. Node version support Node 4 is the earliest version supported by the New Relic Node.js v4 agent. Node 0.10 and 0.12 are not supported by v4. Customers running Node 0.10 or 0.12 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v4 agent's new features. Remain on the New Relic Node.js v3 agent without the ability to use new features only available with updated agent versions. Node 4, 5, and 7 also no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 4 and 5. Upgrade to Node.js agent version 3 Before upgrading to Node.js agent agent v3, review this information for major changes. Also see New Relic's Node.js v3 migration guide on GitHub. Major changes with Node.js v3 agent Major changes with Node.js v3 agent Comments Removed SSL configuration v2: With the v2 agent, it was possible to configure the agent to connect to New Relic without encryption. v3: Node.js agent v3 always connects to New Relic servers using TLS encryption to protect communications. If the agent is configured to disable this, a warning is logged and the setting is ignored. Request parameters now prefixed with request.parameters. v2: The v2 agent collects request parameters, such as route parameters (/users/:userId) and query parameters (/users?userId=123), as the parameter name (userId). v3: The v3 agent prefixes all request parameters with the string request.parameters.. For example,userId appears as request.parameters.userId. Troubleshooting tips: If you have dashboards, alert policies, or other NRQL queries based on request parameters, update them with the new parameter names. Feature flags as of v3 As of New Relic Node.js agent v3, the send_request_uri_attribute feature is no longer configurable. Upgrade to Node.js agent version 2 Before upgrading to Node.js agent v2, review this information for major changes. Also see New Relic's Node.js v2 migration guide on GitHub. Major changes with Node.js v2 agent Major changes with Node.js v2 agent Comments Reversed naming and ignore rules v1: With the v1 agent, rules defined in the config properties rules.name and rules.ignore were applied in reverse order; the first rule in the list was applied last. v2: Node.js agent v2 applies rules in the order they are defined, so the first rule in the list is applied first. Troubleshooting tips: If you used naming rules in the v1 agent and notice problems, reverse the order of your rules in your configuration. De-duplicated HTTP request transactions v1: The v1 agent started a new transaction for each listener on an HTTP server's request event. In applications with multiple listeners on the request event, this resulted in extraneous transactions being created that almost always did not get named correctly. v2: The v2 agent only creates a single transaction for each request event emitted. Troubleshooting tips: If you used multiple request event listeners and added a call to newrelic.ignoreTransaction() to remove the extra transactions, remove those calls. Stopped swallowing outbound request errors v1: The v1 agent swallowed unhandled error events emitted by outbound HTTP request objects. v2: The v2 agent removes this behavior. Instead, the v2 agent does not change normal Node execution. This means the error event will always be emitted. Troubleshooting tips: If you are making outbound requests and currently do not listen for the error event, add a listener and handle the error as appropriate for your application. Updated configuration options as of v2 In newrelic.js, edit the Node.js agent configuration properties you use for compatiblity with the latest versions: Deprecated property New property capture_params attributes.enabled: false By default, request attributes are not sent to New Relic. Set attributes.enabled: true to include agent-defined or custom attributes in traces. The capture_params property has been deprecated. ignored_params attributes.exclude: [] Add any request attribute keys to the attributes.exclude list. Now, instead of having to be an exact match, wildcards (*) may be appended to each item for broader filtering. The ignored_params property has been deprecated. These Node.js agent configuration properties also have overrides for specific destinations, including: transaction_tracer transaction_events error_collector browser_monitoring For example, if the root attributes.enabled is true and you set transaction_tracer.attributes.enabled: false, this will restrict attributes from being collected in transaction traces, while still allowing them for all others. Deprecated API methods as of v2 The following methods from the Node.js agent have been deprecated, and New Relic has deleted them in v5 of the agent. Each has an easy replacement that accomplishes the same task in a more flexible and reliable way. newrelic.createWebTransaction() Replace with newrelic.startWebTransaction() and newrelic.getTransaction(). newrelic.createBackgroundTransaction() Replace with newrelic.startBackgroundTransaction() and newrelic.getTransaction(). newrelic.addCustomParameter() Replace with newrelic.addCustomAttribute(). newrelic.addCustomParameters() Replace with newrelic.addCustomAttributes(). New v2 agent API methods The following API methods are new with the New Relic Node.js v2 agent. newrelic.getTransaction() This method gets a reference to the currently running transaction. Use in conjunction with: newrelic.startWebTransaction newrelic.startBackgroundTransaction Callback-based message consumer services for troubleshooting message consumers newrelic.startWebTransaction()newrelic.startBackgroundTransaction() These new API methods replace the older create*Transaction methods. They are easier to use and seamlessly work with promises. Unlike the v1 method, the provided callback is invoked immediately. newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages() Use these methods to add custom instrumentation for third party modules, including those already instrumented by the New Relic Node.js agent. For more information, see New Relic's Node.js instrumentation tutorials on GitHub. newrelic.addCustomAttribute() Use this method to add a custom trace attribute. newrelic.addCustomAttributes() Use this method to add multiple custom trace attributes. Node version support for v2 The earliest version of Node supported by the New Relic Node.js v2 agent is 0.10. Node 0.8, which has not been updated since July of 2014, is not supported by v2. Customers running Node 0.8 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v2 agent's new features. Remain on New Relic Node.js v1 agent without the ability to use new features only available with updated agent versions. Node 0.10 also no longer receives updates, but New Relic will continue to support this version of Node for the time being. Recommendation: Upgrade to a newer version of Node as soon as possible. npm version support as of v2 The New Relic Node.js agent now requires npm version 2.0.0 or higher. This version of npm comes packaged with Node 0.10.44 or higher. If you are using an earlier version of Node 0.10 you will need to first install npm 2.0.0 or higher, or upgrade to a newer version of Node. To install npm version 2: $ npm install --global npm@2 Copy Feature flags as of v2 As of New Relic Node.js agent v2: express_segments: This feature is no longer configurable. cat: This feature is now controlled by the cross_application_tracer.enabled configuration value. Framework minimum versions as of v2 As of New Relic Node.js agent v2: Module V2 minimum Minimum before v2 express 4.6.0 2.0.0 mysql 2.0.0 0.9.0",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.05898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the Node.js <em>agent</em>",
        "sections": "Update the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " in the ignored_params <em>configuration</em>, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic <em>Node.js</em> v5 <em>agent</em>. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node"
      },
      "id": "6043d374e7b9d258435799e9"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-10-24T13:00:49Z",
      "updated_at": "2021-08-02T02:17:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.01332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Add <em>Node.js</em> data Install the <em>Node.js</em> <em>agent</em> Important If you&#x27;re using"
      },
      "id": "603e962e28ccbcf759eba75b"
    }
  ],
  "/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-10-24T20:58:43Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.37369,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Update the Node.js agent",
        "Upgrade to Node.js agent version 8",
        "Node version support",
        "Tip",
        "Upgrade to Node.js agent version 7",
        "Upgrade to Node.js agent version 6",
        "Upgrade to Node.js agent version 5",
        "Feature flags as of v5",
        "Upgrade to Node.js agent version 4",
        "Upgrade https-proxy-agent from v0 to v2",
        "Upgrade to Node.js agent version 3",
        "Major changes with Node.js v3 agent",
        "Feature flags as of v3",
        "Upgrade to Node.js agent version 2",
        "Major changes with Node.js v2 agent",
        "Updated configuration options as of v2",
        "Deprecated API methods as of v2",
        "newrelic.createWebTransaction()",
        "newrelic.createBackgroundTransaction()",
        "newrelic.addCustomParameter()",
        "newrelic.addCustomParameters()",
        "New v2 agent API methods",
        "newrelic.getTransaction()",
        "newrelic.startWebTransaction()newrelic.startBackgroundTransaction()",
        "newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages()",
        "newrelic.addCustomAttribute()",
        "newrelic.addCustomAttributes()",
        "Node version support for v2",
        "npm version support as of v2",
        "Feature flags as of v2",
        "Framework minimum versions as of v2"
      ],
      "title": "Update the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "7534966716b25d9a64d3b1fe24fe9e72cfd15530",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/update-nodejs-agent/",
      "published_at": "2021-10-24T11:47:49Z",
      "updated_at": "2021-08-02T07:54:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your Node.js agent to the latest version. For additional information about specific agent updates, refer to the Node.js agent release notes. The release notes include a download link when applicable, plus instructions to download and install the latest version. If the newrelic module is listed in your package.json, run npm install. If you want to target just the newrelic module, run npm update newrelic. Recommendation: Test your updated version before moving it into production. If you have problems, follow the Node.js agent troubleshooting procedures. Upgrade to Node.js agent version 8 Before upgrading to Node.js version 8, review this information for major changes. Major changes with Node.js agent v8 Comments Added official parity support for Node 16. BREAKING: Dropped Node v10.x support. For further information see our support policy. BREAKING: Removed serverless_mode as a feature flag. The standard serverless_mode configuration still exists. BREAKING: The agent no-longer includes the New Relic certificate bundle automatically when using the 'certificates' configuration (commonly with proxies). If you find this breaking your current environment, you may leverage a feature-flag to temporarily restore this functionality. Example configuration: feature_flag: { certificate_bundle: true }. In this case, we recommend getting a certificate bundle for your environment such as the one from Mozilla. The New Relic bundle and feature flag will be fully removed in next major release. Defaulted config.feature_flags.certificate_bundle to false. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v4.0.1 @newrelic/koa v6.0.1 @newrelic/native-metrics v7.0.1 @newrelic/superagent v5.0.1 @newrelic/test-utilities v6.0.0 Node version support Node v12 is the earliest version supported by the New Relic Node.js v8 agent. Node 10 and 11 are not supported by v8. Customers running Node 11 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v8 agent's new features. Remain on New Relic Node.js v7 agent without the ability to use new features only available with update agent versions. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 12. Upgrade to Node.js agent version 7 Before upgrading to Node.js version 7, review this information for major changes. Major changes with Node.js agent v7 Comments BREAKING Removed deprecated httpResponseCode, response.status and httpResponseMessage http response attributes v6.4.2-v6.14.0: Starting in agent v6.4.2, these attributes were marked as deprecated but left in to give a transition period for the new attributes. v7: When http response attribute reporting is enabled, http.statusCode and http.statusText will be reported. BREAKING Removed deprecated setIgnoreTransaction API method v5 - v6: Starting in agent v5.0.0, this method was marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API method transactionHandle.ignore(). BREAKING Removed the api.custom_parameters_enabled configuration item and associated environment variable NEW_RELIC_API_CUSTOM_PARAMETERS. Applications must use the configuration api.custom_attributes_enabled or the associated environment variable NEW_RELIC_API_CUSTOM_ATTRIBUTES to enable newrelic.addCustomAttribute and newrelic.addCustomAttributes. BREAKING Removed deprecated Distributed Tracing API methods, createDistributedTracePayload() and acceptDistributedTracePayload() v6.4.0-v6.14.0: Starting in agent v6.4.0, these method were marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API methods transactionHandle.insertDistributedTraceHeaders(headers) and transactionHandle.acceptDistributedTraceHeaders(transportType, headers) . With these methods, the Node agent will now accept W3C's traceparent and tracestate headers when calling transactionHandle.acceptDistributedTraceHeaders(headers) and include the W3C headers along with the New Relic distributed tracing header when calling transactionHandle.insertDistributedTraceHeaders(headers), unless the New Relic trace header format is disabled using distributed_tracing.exclude_newrelic_header:true. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v3.0.0 @newrelic/koa v5.0.0 @newrelic/native-metrics v6.0.0 @newrelic/superagent v4.0.0 @newrelic/test-utilities v5.0.0 Node version support Node v10 is the earliest version supported by the New Relic Node.js v7 agent. Node 8 and 9 are not supported by v7. Customers running Node 9 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v7 agent's new features. Remain on New Relic Node.js v6 agent without the ability to use new features only available with update agent versions. Node 10 does not receive updates. Upgrade to a newer version of Node as soon as possible. Support for Node 10 has been discontinued with the New Relic Node.js agent v8. Upgrade to Node.js agent version 6 Before upgrading to Node.js agent version 6, review this information for major changes. Major changes with Node.js agent v6 Comments Upgraded official Koa framework instrumentation module to v3.0.0 v6: Added support for @koa/router up to v8.0.2. @koa/router v8.0.3 and greater are currently unsupported. v6: Added support for Node v12 and removed support for Node v6, 7, and 9. The minimum supported version is Node v8. Also see New Relic's Koa Release Notes on Github.. Removed deprecated max_samples_per_minute configuration parameter, which is replaced by max_samples_stored behavior v1 - v5: max_samples_per_minute defined the maximum number of events the agent collects per minute. If your application previously used max_samples_per_minute as an upper bound, you may need to lower the threshold to a valid maximum to avoid data being dropped on the server. We recommend less than 10k. v5: In agent v5 and lower, max_samples_stored defined the maximum number of events the agent stores if it's unable to communicate with the New Relic collector. v6: The new behavior of max_samples_stored defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. This usage of the configuration is consistent with the other APM agents. Troubleshooting tips: If you're missing event data, increase the value of max_samples_stored or revert to the default value. The value of max_samples_stored should not be over 10,000. Node version support Node 8 is the earliest version supported by the New Relic Node.js v6 agent. Node 6, 7 and 9 are not supported by v6. Customers running Node 6, 7 and 9 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v6 agent's new features. Remain on New Relic Node.js v5 agent without the ability to use new features only available with update agent versions. Node 8 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 8. Upgrade to Node.js agent version 5 Before upgrading to Node.js agent v5, review this information for major changes. Also see New Relic's Node.js v5 migration guide on GitHub. Major changes with Node.js v5 agent Comments Removed deprecated addCustomParameter methods. v2 - v4: Starting in agent v2.7.0, these methods were marked as deprecated but left in to give a transition period for the new methods. v5: Applications must use the API methods newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). These are drop-in replacements for the old methods. Removed deprecated create*Transaction methods. v2 - v4: Starting in agent v2.0.2, these methods were marked as deprecated but left in to give a transition period to the new methods. v5: Applications must update to the API methods newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Troubleshooting tips: These new methods are not drop-in replacements for the old ones. Before moving to these new methods, review our custom instrumentation guide. Removed deprecated createTracer method. v3 - v4: Starting in agent v3.3.0, this method was marked as deprecated in favor of newrelic.startSegment(). v5: Applications must update to newrelic.startSegment(). Removed node-cassandra-cql instrumentation. v4: Applications using the npm package node-cassandra-cql would get datastore metrics for Cassandra. v5: Applications must migrate to the cassandra-driver package to get Cassandra datastore metrics. This module is actively maintained by the same developers. The node-cassandra-cql package was abandoned in February of 2014 in favor of the cassandra-driver package. Removed deprecated capture_params and ignored_params configurations. v2 - v4: Starting in agent v2.7.0, these configuration parameters caused a warning to be logged, and the values were automatically upgraded to the new attributes configurations. v5: A warning will still be logged but the configuration is ignored, and no automatic upgrading happens any more. Troubleshooting tips: If your application had parameters listed in the ignored_params configuration, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic Node.js v5 agent. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v5 agent's new features. Remain on New Relic Node.js v4 agent without the ability to use new features only available with update agent versions. Node 7 and 9 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 6 and 7. Feature flags as of v5 As of New Relic for Node.js v5: custom_instrumentation: This feature is no longer configurable. custom_metrics: This feature is no longer configurable. synthetics: This feature is no longer configurable. native_metrics: This feature is now controlled by the plugins.native_metrics.enabled configuration value. Upgrade to Node.js agent version 4 Before upgrading to Node.js agent v4, review this information for major changes. Also see New Relic's Node.js v4 migration guide on GitHub. Upgrade https-proxy-agent from v0 to v2 Major changes with Node.js v4 agent include an upgrade of the https-proxy-agent from v0 to v2. This dependency has been updated due to a security issue in the https-proxy-agent that the New Relic Node.js agent used. Because https-proxy v2 is incompatible with node v0.10 and v0.12, New Relic has deprecated those agent versions. There is no required action to migrate from v3 to v4 of New Relic's Node.js agent. Node version support Node 4 is the earliest version supported by the New Relic Node.js v4 agent. Node 0.10 and 0.12 are not supported by v4. Customers running Node 0.10 or 0.12 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v4 agent's new features. Remain on the New Relic Node.js v3 agent without the ability to use new features only available with updated agent versions. Node 4, 5, and 7 also no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 4 and 5. Upgrade to Node.js agent version 3 Before upgrading to Node.js agent agent v3, review this information for major changes. Also see New Relic's Node.js v3 migration guide on GitHub. Major changes with Node.js v3 agent Major changes with Node.js v3 agent Comments Removed SSL configuration v2: With the v2 agent, it was possible to configure the agent to connect to New Relic without encryption. v3: Node.js agent v3 always connects to New Relic servers using TLS encryption to protect communications. If the agent is configured to disable this, a warning is logged and the setting is ignored. Request parameters now prefixed with request.parameters. v2: The v2 agent collects request parameters, such as route parameters (/users/:userId) and query parameters (/users?userId=123), as the parameter name (userId). v3: The v3 agent prefixes all request parameters with the string request.parameters.. For example,userId appears as request.parameters.userId. Troubleshooting tips: If you have dashboards, alert policies, or other NRQL queries based on request parameters, update them with the new parameter names. Feature flags as of v3 As of New Relic Node.js agent v3, the send_request_uri_attribute feature is no longer configurable. Upgrade to Node.js agent version 2 Before upgrading to Node.js agent v2, review this information for major changes. Also see New Relic's Node.js v2 migration guide on GitHub. Major changes with Node.js v2 agent Major changes with Node.js v2 agent Comments Reversed naming and ignore rules v1: With the v1 agent, rules defined in the config properties rules.name and rules.ignore were applied in reverse order; the first rule in the list was applied last. v2: Node.js agent v2 applies rules in the order they are defined, so the first rule in the list is applied first. Troubleshooting tips: If you used naming rules in the v1 agent and notice problems, reverse the order of your rules in your configuration. De-duplicated HTTP request transactions v1: The v1 agent started a new transaction for each listener on an HTTP server's request event. In applications with multiple listeners on the request event, this resulted in extraneous transactions being created that almost always did not get named correctly. v2: The v2 agent only creates a single transaction for each request event emitted. Troubleshooting tips: If you used multiple request event listeners and added a call to newrelic.ignoreTransaction() to remove the extra transactions, remove those calls. Stopped swallowing outbound request errors v1: The v1 agent swallowed unhandled error events emitted by outbound HTTP request objects. v2: The v2 agent removes this behavior. Instead, the v2 agent does not change normal Node execution. This means the error event will always be emitted. Troubleshooting tips: If you are making outbound requests and currently do not listen for the error event, add a listener and handle the error as appropriate for your application. Updated configuration options as of v2 In newrelic.js, edit the Node.js agent configuration properties you use for compatiblity with the latest versions: Deprecated property New property capture_params attributes.enabled: false By default, request attributes are not sent to New Relic. Set attributes.enabled: true to include agent-defined or custom attributes in traces. The capture_params property has been deprecated. ignored_params attributes.exclude: [] Add any request attribute keys to the attributes.exclude list. Now, instead of having to be an exact match, wildcards (*) may be appended to each item for broader filtering. The ignored_params property has been deprecated. These Node.js agent configuration properties also have overrides for specific destinations, including: transaction_tracer transaction_events error_collector browser_monitoring For example, if the root attributes.enabled is true and you set transaction_tracer.attributes.enabled: false, this will restrict attributes from being collected in transaction traces, while still allowing them for all others. Deprecated API methods as of v2 The following methods from the Node.js agent have been deprecated, and New Relic has deleted them in v5 of the agent. Each has an easy replacement that accomplishes the same task in a more flexible and reliable way. newrelic.createWebTransaction() Replace with newrelic.startWebTransaction() and newrelic.getTransaction(). newrelic.createBackgroundTransaction() Replace with newrelic.startBackgroundTransaction() and newrelic.getTransaction(). newrelic.addCustomParameter() Replace with newrelic.addCustomAttribute(). newrelic.addCustomParameters() Replace with newrelic.addCustomAttributes(). New v2 agent API methods The following API methods are new with the New Relic Node.js v2 agent. newrelic.getTransaction() This method gets a reference to the currently running transaction. Use in conjunction with: newrelic.startWebTransaction newrelic.startBackgroundTransaction Callback-based message consumer services for troubleshooting message consumers newrelic.startWebTransaction()newrelic.startBackgroundTransaction() These new API methods replace the older create*Transaction methods. They are easier to use and seamlessly work with promises. Unlike the v1 method, the provided callback is invoked immediately. newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages() Use these methods to add custom instrumentation for third party modules, including those already instrumented by the New Relic Node.js agent. For more information, see New Relic's Node.js instrumentation tutorials on GitHub. newrelic.addCustomAttribute() Use this method to add a custom trace attribute. newrelic.addCustomAttributes() Use this method to add multiple custom trace attributes. Node version support for v2 The earliest version of Node supported by the New Relic Node.js v2 agent is 0.10. Node 0.8, which has not been updated since July of 2014, is not supported by v2. Customers running Node 0.8 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v2 agent's new features. Remain on New Relic Node.js v1 agent without the ability to use new features only available with updated agent versions. Node 0.10 also no longer receives updates, but New Relic will continue to support this version of Node for the time being. Recommendation: Upgrade to a newer version of Node as soon as possible. npm version support as of v2 The New Relic Node.js agent now requires npm version 2.0.0 or higher. This version of npm comes packaged with Node 0.10.44 or higher. If you are using an earlier version of Node 0.10 you will need to first install npm 2.0.0 or higher, or upgrade to a newer version of Node. To install npm version 2: $ npm install --global npm@2 Copy Feature flags as of v2 As of New Relic Node.js agent v2: express_segments: This feature is no longer configurable. cat: This feature is now controlled by the cross_application_tracer.enabled configuration value. Framework minimum versions as of v2 As of New Relic Node.js agent v2: Module V2 minimum Minimum before v2 express 4.6.0 2.0.0 mysql 2.0.0 0.9.0",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.05898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the Node.js <em>agent</em>",
        "sections": "Update the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " in the ignored_params <em>configuration</em>, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic <em>Node.js</em> v5 <em>agent</em>. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node"
      },
      "id": "6043d374e7b9d258435799e9"
    },
    {
      "sections": [
        "Install the Node.js agent for Docker",
        "Instrument your container",
        "Other configuration options",
        "Caution"
      ],
      "title": "Install the Node.js agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "e8c8820b46d5d7ed0983a5001f83235f3bbd09b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-07-27T04:57:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use our Node.js agent to instrument Node.js applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized Node.js application that has been instrumented with New Relic. Instrument your container With just a few additions your existing Dockerfile can be used with our Node.js agent. You'll configure the agent by running your new Docker image with environment variables set. Add newrelic to your package.json: \"newrelic\": \"latest\", Copy Install a specific version, or use any of the other options provided by the package.json format. Check the Node.js agent release notes for information about past agent versions. In the first line of your app's main module, add require('newrelic');. Add this line to your Dockerfile so the agent can run without a configuration file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image the way you normally do. To run your Docker app with the agent enabled, add your license key and app name to your docker run command as environment variables: docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ your_image_name:latest Copy Other configuration options Caution Do not include your license key in your Dockerfile or Docker image. For more information, see our documentation on license key security. In addition to setting your application name or license key, you can set other configuration options by starting your container with the -e option. For example, to enable distributed tracing, use: $ docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ -e NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ your_image_name:latest Copy You can also set configuration options in your Dockerfile using ENV directives: ENV NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ NEW_RELIC_LOG=stdout # etc. Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.93774,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "sections": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": ". Check the <em>Node.js</em> <em>agent</em> release notes for information about past <em>agent</em> versions. In the first line of your app&#x27;s main module, add require(&#x27;newrelic&#x27;);. Add this line to your Dockerfile so the <em>agent</em> can run without a <em>configuration</em> file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image"
      },
      "id": "6043d3b728ccbcd4b82c60ce"
    }
  ],
  "/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration": [
    {
      "sections": [
        "Update the Node.js agent",
        "Upgrade to Node.js agent version 8",
        "Node version support",
        "Tip",
        "Upgrade to Node.js agent version 7",
        "Upgrade to Node.js agent version 6",
        "Upgrade to Node.js agent version 5",
        "Feature flags as of v5",
        "Upgrade to Node.js agent version 4",
        "Upgrade https-proxy-agent from v0 to v2",
        "Upgrade to Node.js agent version 3",
        "Major changes with Node.js v3 agent",
        "Feature flags as of v3",
        "Upgrade to Node.js agent version 2",
        "Major changes with Node.js v2 agent",
        "Updated configuration options as of v2",
        "Deprecated API methods as of v2",
        "newrelic.createWebTransaction()",
        "newrelic.createBackgroundTransaction()",
        "newrelic.addCustomParameter()",
        "newrelic.addCustomParameters()",
        "New v2 agent API methods",
        "newrelic.getTransaction()",
        "newrelic.startWebTransaction()newrelic.startBackgroundTransaction()",
        "newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages()",
        "newrelic.addCustomAttribute()",
        "newrelic.addCustomAttributes()",
        "Node version support for v2",
        "npm version support as of v2",
        "Feature flags as of v2",
        "Framework minimum versions as of v2"
      ],
      "title": "Update the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "7534966716b25d9a64d3b1fe24fe9e72cfd15530",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/update-nodejs-agent/",
      "published_at": "2021-10-24T11:47:49Z",
      "updated_at": "2021-08-02T07:54:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your Node.js agent to the latest version. For additional information about specific agent updates, refer to the Node.js agent release notes. The release notes include a download link when applicable, plus instructions to download and install the latest version. If the newrelic module is listed in your package.json, run npm install. If you want to target just the newrelic module, run npm update newrelic. Recommendation: Test your updated version before moving it into production. If you have problems, follow the Node.js agent troubleshooting procedures. Upgrade to Node.js agent version 8 Before upgrading to Node.js version 8, review this information for major changes. Major changes with Node.js agent v8 Comments Added official parity support for Node 16. BREAKING: Dropped Node v10.x support. For further information see our support policy. BREAKING: Removed serverless_mode as a feature flag. The standard serverless_mode configuration still exists. BREAKING: The agent no-longer includes the New Relic certificate bundle automatically when using the 'certificates' configuration (commonly with proxies). If you find this breaking your current environment, you may leverage a feature-flag to temporarily restore this functionality. Example configuration: feature_flag: { certificate_bundle: true }. In this case, we recommend getting a certificate bundle for your environment such as the one from Mozilla. The New Relic bundle and feature flag will be fully removed in next major release. Defaulted config.feature_flags.certificate_bundle to false. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v4.0.1 @newrelic/koa v6.0.1 @newrelic/native-metrics v7.0.1 @newrelic/superagent v5.0.1 @newrelic/test-utilities v6.0.0 Node version support Node v12 is the earliest version supported by the New Relic Node.js v8 agent. Node 10 and 11 are not supported by v8. Customers running Node 11 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v8 agent's new features. Remain on New Relic Node.js v7 agent without the ability to use new features only available with update agent versions. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 12. Upgrade to Node.js agent version 7 Before upgrading to Node.js version 7, review this information for major changes. Major changes with Node.js agent v7 Comments BREAKING Removed deprecated httpResponseCode, response.status and httpResponseMessage http response attributes v6.4.2-v6.14.0: Starting in agent v6.4.2, these attributes were marked as deprecated but left in to give a transition period for the new attributes. v7: When http response attribute reporting is enabled, http.statusCode and http.statusText will be reported. BREAKING Removed deprecated setIgnoreTransaction API method v5 - v6: Starting in agent v5.0.0, this method was marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API method transactionHandle.ignore(). BREAKING Removed the api.custom_parameters_enabled configuration item and associated environment variable NEW_RELIC_API_CUSTOM_PARAMETERS. Applications must use the configuration api.custom_attributes_enabled or the associated environment variable NEW_RELIC_API_CUSTOM_ATTRIBUTES to enable newrelic.addCustomAttribute and newrelic.addCustomAttributes. BREAKING Removed deprecated Distributed Tracing API methods, createDistributedTracePayload() and acceptDistributedTracePayload() v6.4.0-v6.14.0: Starting in agent v6.4.0, these method were marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API methods transactionHandle.insertDistributedTraceHeaders(headers) and transactionHandle.acceptDistributedTraceHeaders(transportType, headers) . With these methods, the Node agent will now accept W3C's traceparent and tracestate headers when calling transactionHandle.acceptDistributedTraceHeaders(headers) and include the W3C headers along with the New Relic distributed tracing header when calling transactionHandle.insertDistributedTraceHeaders(headers), unless the New Relic trace header format is disabled using distributed_tracing.exclude_newrelic_header:true. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v3.0.0 @newrelic/koa v5.0.0 @newrelic/native-metrics v6.0.0 @newrelic/superagent v4.0.0 @newrelic/test-utilities v5.0.0 Node version support Node v10 is the earliest version supported by the New Relic Node.js v7 agent. Node 8 and 9 are not supported by v7. Customers running Node 9 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v7 agent's new features. Remain on New Relic Node.js v6 agent without the ability to use new features only available with update agent versions. Node 10 does not receive updates. Upgrade to a newer version of Node as soon as possible. Support for Node 10 has been discontinued with the New Relic Node.js agent v8. Upgrade to Node.js agent version 6 Before upgrading to Node.js agent version 6, review this information for major changes. Major changes with Node.js agent v6 Comments Upgraded official Koa framework instrumentation module to v3.0.0 v6: Added support for @koa/router up to v8.0.2. @koa/router v8.0.3 and greater are currently unsupported. v6: Added support for Node v12 and removed support for Node v6, 7, and 9. The minimum supported version is Node v8. Also see New Relic's Koa Release Notes on Github.. Removed deprecated max_samples_per_minute configuration parameter, which is replaced by max_samples_stored behavior v1 - v5: max_samples_per_minute defined the maximum number of events the agent collects per minute. If your application previously used max_samples_per_minute as an upper bound, you may need to lower the threshold to a valid maximum to avoid data being dropped on the server. We recommend less than 10k. v5: In agent v5 and lower, max_samples_stored defined the maximum number of events the agent stores if it's unable to communicate with the New Relic collector. v6: The new behavior of max_samples_stored defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. This usage of the configuration is consistent with the other APM agents. Troubleshooting tips: If you're missing event data, increase the value of max_samples_stored or revert to the default value. The value of max_samples_stored should not be over 10,000. Node version support Node 8 is the earliest version supported by the New Relic Node.js v6 agent. Node 6, 7 and 9 are not supported by v6. Customers running Node 6, 7 and 9 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v6 agent's new features. Remain on New Relic Node.js v5 agent without the ability to use new features only available with update agent versions. Node 8 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 8. Upgrade to Node.js agent version 5 Before upgrading to Node.js agent v5, review this information for major changes. Also see New Relic's Node.js v5 migration guide on GitHub. Major changes with Node.js v5 agent Comments Removed deprecated addCustomParameter methods. v2 - v4: Starting in agent v2.7.0, these methods were marked as deprecated but left in to give a transition period for the new methods. v5: Applications must use the API methods newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). These are drop-in replacements for the old methods. Removed deprecated create*Transaction methods. v2 - v4: Starting in agent v2.0.2, these methods were marked as deprecated but left in to give a transition period to the new methods. v5: Applications must update to the API methods newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Troubleshooting tips: These new methods are not drop-in replacements for the old ones. Before moving to these new methods, review our custom instrumentation guide. Removed deprecated createTracer method. v3 - v4: Starting in agent v3.3.0, this method was marked as deprecated in favor of newrelic.startSegment(). v5: Applications must update to newrelic.startSegment(). Removed node-cassandra-cql instrumentation. v4: Applications using the npm package node-cassandra-cql would get datastore metrics for Cassandra. v5: Applications must migrate to the cassandra-driver package to get Cassandra datastore metrics. This module is actively maintained by the same developers. The node-cassandra-cql package was abandoned in February of 2014 in favor of the cassandra-driver package. Removed deprecated capture_params and ignored_params configurations. v2 - v4: Starting in agent v2.7.0, these configuration parameters caused a warning to be logged, and the values were automatically upgraded to the new attributes configurations. v5: A warning will still be logged but the configuration is ignored, and no automatic upgrading happens any more. Troubleshooting tips: If your application had parameters listed in the ignored_params configuration, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic Node.js v5 agent. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v5 agent's new features. Remain on New Relic Node.js v4 agent without the ability to use new features only available with update agent versions. Node 7 and 9 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 6 and 7. Feature flags as of v5 As of New Relic for Node.js v5: custom_instrumentation: This feature is no longer configurable. custom_metrics: This feature is no longer configurable. synthetics: This feature is no longer configurable. native_metrics: This feature is now controlled by the plugins.native_metrics.enabled configuration value. Upgrade to Node.js agent version 4 Before upgrading to Node.js agent v4, review this information for major changes. Also see New Relic's Node.js v4 migration guide on GitHub. Upgrade https-proxy-agent from v0 to v2 Major changes with Node.js v4 agent include an upgrade of the https-proxy-agent from v0 to v2. This dependency has been updated due to a security issue in the https-proxy-agent that the New Relic Node.js agent used. Because https-proxy v2 is incompatible with node v0.10 and v0.12, New Relic has deprecated those agent versions. There is no required action to migrate from v3 to v4 of New Relic's Node.js agent. Node version support Node 4 is the earliest version supported by the New Relic Node.js v4 agent. Node 0.10 and 0.12 are not supported by v4. Customers running Node 0.10 or 0.12 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v4 agent's new features. Remain on the New Relic Node.js v3 agent without the ability to use new features only available with updated agent versions. Node 4, 5, and 7 also no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 4 and 5. Upgrade to Node.js agent version 3 Before upgrading to Node.js agent agent v3, review this information for major changes. Also see New Relic's Node.js v3 migration guide on GitHub. Major changes with Node.js v3 agent Major changes with Node.js v3 agent Comments Removed SSL configuration v2: With the v2 agent, it was possible to configure the agent to connect to New Relic without encryption. v3: Node.js agent v3 always connects to New Relic servers using TLS encryption to protect communications. If the agent is configured to disable this, a warning is logged and the setting is ignored. Request parameters now prefixed with request.parameters. v2: The v2 agent collects request parameters, such as route parameters (/users/:userId) and query parameters (/users?userId=123), as the parameter name (userId). v3: The v3 agent prefixes all request parameters with the string request.parameters.. For example,userId appears as request.parameters.userId. Troubleshooting tips: If you have dashboards, alert policies, or other NRQL queries based on request parameters, update them with the new parameter names. Feature flags as of v3 As of New Relic Node.js agent v3, the send_request_uri_attribute feature is no longer configurable. Upgrade to Node.js agent version 2 Before upgrading to Node.js agent v2, review this information for major changes. Also see New Relic's Node.js v2 migration guide on GitHub. Major changes with Node.js v2 agent Major changes with Node.js v2 agent Comments Reversed naming and ignore rules v1: With the v1 agent, rules defined in the config properties rules.name and rules.ignore were applied in reverse order; the first rule in the list was applied last. v2: Node.js agent v2 applies rules in the order they are defined, so the first rule in the list is applied first. Troubleshooting tips: If you used naming rules in the v1 agent and notice problems, reverse the order of your rules in your configuration. De-duplicated HTTP request transactions v1: The v1 agent started a new transaction for each listener on an HTTP server's request event. In applications with multiple listeners on the request event, this resulted in extraneous transactions being created that almost always did not get named correctly. v2: The v2 agent only creates a single transaction for each request event emitted. Troubleshooting tips: If you used multiple request event listeners and added a call to newrelic.ignoreTransaction() to remove the extra transactions, remove those calls. Stopped swallowing outbound request errors v1: The v1 agent swallowed unhandled error events emitted by outbound HTTP request objects. v2: The v2 agent removes this behavior. Instead, the v2 agent does not change normal Node execution. This means the error event will always be emitted. Troubleshooting tips: If you are making outbound requests and currently do not listen for the error event, add a listener and handle the error as appropriate for your application. Updated configuration options as of v2 In newrelic.js, edit the Node.js agent configuration properties you use for compatiblity with the latest versions: Deprecated property New property capture_params attributes.enabled: false By default, request attributes are not sent to New Relic. Set attributes.enabled: true to include agent-defined or custom attributes in traces. The capture_params property has been deprecated. ignored_params attributes.exclude: [] Add any request attribute keys to the attributes.exclude list. Now, instead of having to be an exact match, wildcards (*) may be appended to each item for broader filtering. The ignored_params property has been deprecated. These Node.js agent configuration properties also have overrides for specific destinations, including: transaction_tracer transaction_events error_collector browser_monitoring For example, if the root attributes.enabled is true and you set transaction_tracer.attributes.enabled: false, this will restrict attributes from being collected in transaction traces, while still allowing them for all others. Deprecated API methods as of v2 The following methods from the Node.js agent have been deprecated, and New Relic has deleted them in v5 of the agent. Each has an easy replacement that accomplishes the same task in a more flexible and reliable way. newrelic.createWebTransaction() Replace with newrelic.startWebTransaction() and newrelic.getTransaction(). newrelic.createBackgroundTransaction() Replace with newrelic.startBackgroundTransaction() and newrelic.getTransaction(). newrelic.addCustomParameter() Replace with newrelic.addCustomAttribute(). newrelic.addCustomParameters() Replace with newrelic.addCustomAttributes(). New v2 agent API methods The following API methods are new with the New Relic Node.js v2 agent. newrelic.getTransaction() This method gets a reference to the currently running transaction. Use in conjunction with: newrelic.startWebTransaction newrelic.startBackgroundTransaction Callback-based message consumer services for troubleshooting message consumers newrelic.startWebTransaction()newrelic.startBackgroundTransaction() These new API methods replace the older create*Transaction methods. They are easier to use and seamlessly work with promises. Unlike the v1 method, the provided callback is invoked immediately. newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages() Use these methods to add custom instrumentation for third party modules, including those already instrumented by the New Relic Node.js agent. For more information, see New Relic's Node.js instrumentation tutorials on GitHub. newrelic.addCustomAttribute() Use this method to add a custom trace attribute. newrelic.addCustomAttributes() Use this method to add multiple custom trace attributes. Node version support for v2 The earliest version of Node supported by the New Relic Node.js v2 agent is 0.10. Node 0.8, which has not been updated since July of 2014, is not supported by v2. Customers running Node 0.8 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v2 agent's new features. Remain on New Relic Node.js v1 agent without the ability to use new features only available with updated agent versions. Node 0.10 also no longer receives updates, but New Relic will continue to support this version of Node for the time being. Recommendation: Upgrade to a newer version of Node as soon as possible. npm version support as of v2 The New Relic Node.js agent now requires npm version 2.0.0 or higher. This version of npm comes packaged with Node 0.10.44 or higher. If you are using an earlier version of Node 0.10 you will need to first install npm 2.0.0 or higher, or upgrade to a newer version of Node. To install npm version 2: $ npm install --global npm@2 Copy Feature flags as of v2 As of New Relic Node.js agent v2: express_segments: This feature is no longer configurable. cat: This feature is now controlled by the cross_application_tracer.enabled configuration value. Framework minimum versions as of v2 As of New Relic Node.js agent v2: Module V2 minimum Minimum before v2 express 4.6.0 2.0.0 mysql 2.0.0 0.9.0",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.05896,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the Node.js <em>agent</em>",
        "sections": "Update the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " in the ignored_params <em>configuration</em>, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic <em>Node.js</em> v5 <em>agent</em>. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node"
      },
      "id": "6043d374e7b9d258435799e9"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-10-24T13:00:49Z",
      "updated_at": "2021-08-02T02:17:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.01332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Add <em>Node.js</em> data Install the <em>Node.js</em> <em>agent</em> Important If you&#x27;re using"
      },
      "id": "603e962e28ccbcf759eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent for Docker",
        "Instrument your container",
        "Other configuration options",
        "Caution"
      ],
      "title": "Install the Node.js agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "e8c8820b46d5d7ed0983a5001f83235f3bbd09b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-07-27T04:57:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use our Node.js agent to instrument Node.js applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized Node.js application that has been instrumented with New Relic. Instrument your container With just a few additions your existing Dockerfile can be used with our Node.js agent. You'll configure the agent by running your new Docker image with environment variables set. Add newrelic to your package.json: \"newrelic\": \"latest\", Copy Install a specific version, or use any of the other options provided by the package.json format. Check the Node.js agent release notes for information about past agent versions. In the first line of your app's main module, add require('newrelic');. Add this line to your Dockerfile so the agent can run without a configuration file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image the way you normally do. To run your Docker app with the agent enabled, add your license key and app name to your docker run command as environment variables: docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ your_image_name:latest Copy Other configuration options Caution Do not include your license key in your Dockerfile or Docker image. For more information, see our documentation on license key security. In addition to setting your application name or license key, you can set other configuration options by starting your container with the -e option. For example, to enable distributed tracing, use: $ docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ -e NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ your_image_name:latest Copy You can also set configuration options in your Dockerfile using ENV directives: ENV NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ NEW_RELIC_LOG=stdout # etc. Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.93774,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "sections": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": ". Check the <em>Node.js</em> <em>agent</em> release notes for information about past <em>agent</em> versions. In the first line of your app&#x27;s main module, add require(&#x27;newrelic&#x27;);. Add this line to your Dockerfile so the <em>agent</em> can run without a <em>configuration</em> file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image"
      },
      "id": "6043d3b728ccbcd4b82c60ce"
    }
  ],
  "/docs/apm/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-10-24T20:58:43Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.37369,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Update the Node.js agent",
        "Upgrade to Node.js agent version 8",
        "Node version support",
        "Tip",
        "Upgrade to Node.js agent version 7",
        "Upgrade to Node.js agent version 6",
        "Upgrade to Node.js agent version 5",
        "Feature flags as of v5",
        "Upgrade to Node.js agent version 4",
        "Upgrade https-proxy-agent from v0 to v2",
        "Upgrade to Node.js agent version 3",
        "Major changes with Node.js v3 agent",
        "Feature flags as of v3",
        "Upgrade to Node.js agent version 2",
        "Major changes with Node.js v2 agent",
        "Updated configuration options as of v2",
        "Deprecated API methods as of v2",
        "newrelic.createWebTransaction()",
        "newrelic.createBackgroundTransaction()",
        "newrelic.addCustomParameter()",
        "newrelic.addCustomParameters()",
        "New v2 agent API methods",
        "newrelic.getTransaction()",
        "newrelic.startWebTransaction()newrelic.startBackgroundTransaction()",
        "newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages()",
        "newrelic.addCustomAttribute()",
        "newrelic.addCustomAttributes()",
        "Node version support for v2",
        "npm version support as of v2",
        "Feature flags as of v2",
        "Framework minimum versions as of v2"
      ],
      "title": "Update the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "7534966716b25d9a64d3b1fe24fe9e72cfd15530",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/update-nodejs-agent/",
      "published_at": "2021-10-24T11:47:49Z",
      "updated_at": "2021-08-02T07:54:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your Node.js agent to the latest version. For additional information about specific agent updates, refer to the Node.js agent release notes. The release notes include a download link when applicable, plus instructions to download and install the latest version. If the newrelic module is listed in your package.json, run npm install. If you want to target just the newrelic module, run npm update newrelic. Recommendation: Test your updated version before moving it into production. If you have problems, follow the Node.js agent troubleshooting procedures. Upgrade to Node.js agent version 8 Before upgrading to Node.js version 8, review this information for major changes. Major changes with Node.js agent v8 Comments Added official parity support for Node 16. BREAKING: Dropped Node v10.x support. For further information see our support policy. BREAKING: Removed serverless_mode as a feature flag. The standard serverless_mode configuration still exists. BREAKING: The agent no-longer includes the New Relic certificate bundle automatically when using the 'certificates' configuration (commonly with proxies). If you find this breaking your current environment, you may leverage a feature-flag to temporarily restore this functionality. Example configuration: feature_flag: { certificate_bundle: true }. In this case, we recommend getting a certificate bundle for your environment such as the one from Mozilla. The New Relic bundle and feature flag will be fully removed in next major release. Defaulted config.feature_flags.certificate_bundle to false. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v4.0.1 @newrelic/koa v6.0.1 @newrelic/native-metrics v7.0.1 @newrelic/superagent v5.0.1 @newrelic/test-utilities v6.0.0 Node version support Node v12 is the earliest version supported by the New Relic Node.js v8 agent. Node 10 and 11 are not supported by v8. Customers running Node 11 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v8 agent's new features. Remain on New Relic Node.js v7 agent without the ability to use new features only available with update agent versions. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 12. Upgrade to Node.js agent version 7 Before upgrading to Node.js version 7, review this information for major changes. Major changes with Node.js agent v7 Comments BREAKING Removed deprecated httpResponseCode, response.status and httpResponseMessage http response attributes v6.4.2-v6.14.0: Starting in agent v6.4.2, these attributes were marked as deprecated but left in to give a transition period for the new attributes. v7: When http response attribute reporting is enabled, http.statusCode and http.statusText will be reported. BREAKING Removed deprecated setIgnoreTransaction API method v5 - v6: Starting in agent v5.0.0, this method was marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API method transactionHandle.ignore(). BREAKING Removed the api.custom_parameters_enabled configuration item and associated environment variable NEW_RELIC_API_CUSTOM_PARAMETERS. Applications must use the configuration api.custom_attributes_enabled or the associated environment variable NEW_RELIC_API_CUSTOM_ATTRIBUTES to enable newrelic.addCustomAttribute and newrelic.addCustomAttributes. BREAKING Removed deprecated Distributed Tracing API methods, createDistributedTracePayload() and acceptDistributedTracePayload() v6.4.0-v6.14.0: Starting in agent v6.4.0, these method were marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API methods transactionHandle.insertDistributedTraceHeaders(headers) and transactionHandle.acceptDistributedTraceHeaders(transportType, headers) . With these methods, the Node agent will now accept W3C's traceparent and tracestate headers when calling transactionHandle.acceptDistributedTraceHeaders(headers) and include the W3C headers along with the New Relic distributed tracing header when calling transactionHandle.insertDistributedTraceHeaders(headers), unless the New Relic trace header format is disabled using distributed_tracing.exclude_newrelic_header:true. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v3.0.0 @newrelic/koa v5.0.0 @newrelic/native-metrics v6.0.0 @newrelic/superagent v4.0.0 @newrelic/test-utilities v5.0.0 Node version support Node v10 is the earliest version supported by the New Relic Node.js v7 agent. Node 8 and 9 are not supported by v7. Customers running Node 9 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v7 agent's new features. Remain on New Relic Node.js v6 agent without the ability to use new features only available with update agent versions. Node 10 does not receive updates. Upgrade to a newer version of Node as soon as possible. Support for Node 10 has been discontinued with the New Relic Node.js agent v8. Upgrade to Node.js agent version 6 Before upgrading to Node.js agent version 6, review this information for major changes. Major changes with Node.js agent v6 Comments Upgraded official Koa framework instrumentation module to v3.0.0 v6: Added support for @koa/router up to v8.0.2. @koa/router v8.0.3 and greater are currently unsupported. v6: Added support for Node v12 and removed support for Node v6, 7, and 9. The minimum supported version is Node v8. Also see New Relic's Koa Release Notes on Github.. Removed deprecated max_samples_per_minute configuration parameter, which is replaced by max_samples_stored behavior v1 - v5: max_samples_per_minute defined the maximum number of events the agent collects per minute. If your application previously used max_samples_per_minute as an upper bound, you may need to lower the threshold to a valid maximum to avoid data being dropped on the server. We recommend less than 10k. v5: In agent v5 and lower, max_samples_stored defined the maximum number of events the agent stores if it's unable to communicate with the New Relic collector. v6: The new behavior of max_samples_stored defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. This usage of the configuration is consistent with the other APM agents. Troubleshooting tips: If you're missing event data, increase the value of max_samples_stored or revert to the default value. The value of max_samples_stored should not be over 10,000. Node version support Node 8 is the earliest version supported by the New Relic Node.js v6 agent. Node 6, 7 and 9 are not supported by v6. Customers running Node 6, 7 and 9 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v6 agent's new features. Remain on New Relic Node.js v5 agent without the ability to use new features only available with update agent versions. Node 8 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 8. Upgrade to Node.js agent version 5 Before upgrading to Node.js agent v5, review this information for major changes. Also see New Relic's Node.js v5 migration guide on GitHub. Major changes with Node.js v5 agent Comments Removed deprecated addCustomParameter methods. v2 - v4: Starting in agent v2.7.0, these methods were marked as deprecated but left in to give a transition period for the new methods. v5: Applications must use the API methods newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). These are drop-in replacements for the old methods. Removed deprecated create*Transaction methods. v2 - v4: Starting in agent v2.0.2, these methods were marked as deprecated but left in to give a transition period to the new methods. v5: Applications must update to the API methods newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Troubleshooting tips: These new methods are not drop-in replacements for the old ones. Before moving to these new methods, review our custom instrumentation guide. Removed deprecated createTracer method. v3 - v4: Starting in agent v3.3.0, this method was marked as deprecated in favor of newrelic.startSegment(). v5: Applications must update to newrelic.startSegment(). Removed node-cassandra-cql instrumentation. v4: Applications using the npm package node-cassandra-cql would get datastore metrics for Cassandra. v5: Applications must migrate to the cassandra-driver package to get Cassandra datastore metrics. This module is actively maintained by the same developers. The node-cassandra-cql package was abandoned in February of 2014 in favor of the cassandra-driver package. Removed deprecated capture_params and ignored_params configurations. v2 - v4: Starting in agent v2.7.0, these configuration parameters caused a warning to be logged, and the values were automatically upgraded to the new attributes configurations. v5: A warning will still be logged but the configuration is ignored, and no automatic upgrading happens any more. Troubleshooting tips: If your application had parameters listed in the ignored_params configuration, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic Node.js v5 agent. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v5 agent's new features. Remain on New Relic Node.js v4 agent without the ability to use new features only available with update agent versions. Node 7 and 9 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 6 and 7. Feature flags as of v5 As of New Relic for Node.js v5: custom_instrumentation: This feature is no longer configurable. custom_metrics: This feature is no longer configurable. synthetics: This feature is no longer configurable. native_metrics: This feature is now controlled by the plugins.native_metrics.enabled configuration value. Upgrade to Node.js agent version 4 Before upgrading to Node.js agent v4, review this information for major changes. Also see New Relic's Node.js v4 migration guide on GitHub. Upgrade https-proxy-agent from v0 to v2 Major changes with Node.js v4 agent include an upgrade of the https-proxy-agent from v0 to v2. This dependency has been updated due to a security issue in the https-proxy-agent that the New Relic Node.js agent used. Because https-proxy v2 is incompatible with node v0.10 and v0.12, New Relic has deprecated those agent versions. There is no required action to migrate from v3 to v4 of New Relic's Node.js agent. Node version support Node 4 is the earliest version supported by the New Relic Node.js v4 agent. Node 0.10 and 0.12 are not supported by v4. Customers running Node 0.10 or 0.12 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v4 agent's new features. Remain on the New Relic Node.js v3 agent without the ability to use new features only available with updated agent versions. Node 4, 5, and 7 also no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 4 and 5. Upgrade to Node.js agent version 3 Before upgrading to Node.js agent agent v3, review this information for major changes. Also see New Relic's Node.js v3 migration guide on GitHub. Major changes with Node.js v3 agent Major changes with Node.js v3 agent Comments Removed SSL configuration v2: With the v2 agent, it was possible to configure the agent to connect to New Relic without encryption. v3: Node.js agent v3 always connects to New Relic servers using TLS encryption to protect communications. If the agent is configured to disable this, a warning is logged and the setting is ignored. Request parameters now prefixed with request.parameters. v2: The v2 agent collects request parameters, such as route parameters (/users/:userId) and query parameters (/users?userId=123), as the parameter name (userId). v3: The v3 agent prefixes all request parameters with the string request.parameters.. For example,userId appears as request.parameters.userId. Troubleshooting tips: If you have dashboards, alert policies, or other NRQL queries based on request parameters, update them with the new parameter names. Feature flags as of v3 As of New Relic Node.js agent v3, the send_request_uri_attribute feature is no longer configurable. Upgrade to Node.js agent version 2 Before upgrading to Node.js agent v2, review this information for major changes. Also see New Relic's Node.js v2 migration guide on GitHub. Major changes with Node.js v2 agent Major changes with Node.js v2 agent Comments Reversed naming and ignore rules v1: With the v1 agent, rules defined in the config properties rules.name and rules.ignore were applied in reverse order; the first rule in the list was applied last. v2: Node.js agent v2 applies rules in the order they are defined, so the first rule in the list is applied first. Troubleshooting tips: If you used naming rules in the v1 agent and notice problems, reverse the order of your rules in your configuration. De-duplicated HTTP request transactions v1: The v1 agent started a new transaction for each listener on an HTTP server's request event. In applications with multiple listeners on the request event, this resulted in extraneous transactions being created that almost always did not get named correctly. v2: The v2 agent only creates a single transaction for each request event emitted. Troubleshooting tips: If you used multiple request event listeners and added a call to newrelic.ignoreTransaction() to remove the extra transactions, remove those calls. Stopped swallowing outbound request errors v1: The v1 agent swallowed unhandled error events emitted by outbound HTTP request objects. v2: The v2 agent removes this behavior. Instead, the v2 agent does not change normal Node execution. This means the error event will always be emitted. Troubleshooting tips: If you are making outbound requests and currently do not listen for the error event, add a listener and handle the error as appropriate for your application. Updated configuration options as of v2 In newrelic.js, edit the Node.js agent configuration properties you use for compatiblity with the latest versions: Deprecated property New property capture_params attributes.enabled: false By default, request attributes are not sent to New Relic. Set attributes.enabled: true to include agent-defined or custom attributes in traces. The capture_params property has been deprecated. ignored_params attributes.exclude: [] Add any request attribute keys to the attributes.exclude list. Now, instead of having to be an exact match, wildcards (*) may be appended to each item for broader filtering. The ignored_params property has been deprecated. These Node.js agent configuration properties also have overrides for specific destinations, including: transaction_tracer transaction_events error_collector browser_monitoring For example, if the root attributes.enabled is true and you set transaction_tracer.attributes.enabled: false, this will restrict attributes from being collected in transaction traces, while still allowing them for all others. Deprecated API methods as of v2 The following methods from the Node.js agent have been deprecated, and New Relic has deleted them in v5 of the agent. Each has an easy replacement that accomplishes the same task in a more flexible and reliable way. newrelic.createWebTransaction() Replace with newrelic.startWebTransaction() and newrelic.getTransaction(). newrelic.createBackgroundTransaction() Replace with newrelic.startBackgroundTransaction() and newrelic.getTransaction(). newrelic.addCustomParameter() Replace with newrelic.addCustomAttribute(). newrelic.addCustomParameters() Replace with newrelic.addCustomAttributes(). New v2 agent API methods The following API methods are new with the New Relic Node.js v2 agent. newrelic.getTransaction() This method gets a reference to the currently running transaction. Use in conjunction with: newrelic.startWebTransaction newrelic.startBackgroundTransaction Callback-based message consumer services for troubleshooting message consumers newrelic.startWebTransaction()newrelic.startBackgroundTransaction() These new API methods replace the older create*Transaction methods. They are easier to use and seamlessly work with promises. Unlike the v1 method, the provided callback is invoked immediately. newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages() Use these methods to add custom instrumentation for third party modules, including those already instrumented by the New Relic Node.js agent. For more information, see New Relic's Node.js instrumentation tutorials on GitHub. newrelic.addCustomAttribute() Use this method to add a custom trace attribute. newrelic.addCustomAttributes() Use this method to add multiple custom trace attributes. Node version support for v2 The earliest version of Node supported by the New Relic Node.js v2 agent is 0.10. Node 0.8, which has not been updated since July of 2014, is not supported by v2. Customers running Node 0.8 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v2 agent's new features. Remain on New Relic Node.js v1 agent without the ability to use new features only available with updated agent versions. Node 0.10 also no longer receives updates, but New Relic will continue to support this version of Node for the time being. Recommendation: Upgrade to a newer version of Node as soon as possible. npm version support as of v2 The New Relic Node.js agent now requires npm version 2.0.0 or higher. This version of npm comes packaged with Node 0.10.44 or higher. If you are using an earlier version of Node 0.10 you will need to first install npm 2.0.0 or higher, or upgrade to a newer version of Node. To install npm version 2: $ npm install --global npm@2 Copy Feature flags as of v2 As of New Relic Node.js agent v2: express_segments: This feature is no longer configurable. cat: This feature is now controlled by the cross_application_tracer.enabled configuration value. Framework minimum versions as of v2 As of New Relic Node.js agent v2: Module V2 minimum Minimum before v2 express 4.6.0 2.0.0 mysql 2.0.0 0.9.0",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.05896,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the Node.js <em>agent</em>",
        "sections": "Update the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " in the ignored_params <em>configuration</em>, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic <em>Node.js</em> v5 <em>agent</em>. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node"
      },
      "id": "6043d374e7b9d258435799e9"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-10-24T13:00:49Z",
      "updated_at": "2021-08-02T02:17:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.01332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Add <em>Node.js</em> data Install the <em>Node.js</em> <em>agent</em> Important If you&#x27;re using"
      },
      "id": "603e962e28ccbcf759eba75b"
    }
  ],
  "/docs/apm/agents/nodejs-agent/installation-configuration/update-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-10-24T20:58:43Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.37369,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-10-24T13:00:49Z",
      "updated_at": "2021-08-02T02:17:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.01332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Add <em>Node.js</em> data Install the <em>Node.js</em> <em>agent</em> Important If you&#x27;re using"
      },
      "id": "603e962e28ccbcf759eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent for Docker",
        "Instrument your container",
        "Other configuration options",
        "Caution"
      ],
      "title": "Install the Node.js agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "e8c8820b46d5d7ed0983a5001f83235f3bbd09b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker/",
      "published_at": "2021-10-24T12:53:15Z",
      "updated_at": "2021-07-27T04:57:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use our Node.js agent to instrument Node.js applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized Node.js application that has been instrumented with New Relic. Instrument your container With just a few additions your existing Dockerfile can be used with our Node.js agent. You'll configure the agent by running your new Docker image with environment variables set. Add newrelic to your package.json: \"newrelic\": \"latest\", Copy Install a specific version, or use any of the other options provided by the package.json format. Check the Node.js agent release notes for information about past agent versions. In the first line of your app's main module, add require('newrelic');. Add this line to your Dockerfile so the agent can run without a configuration file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image the way you normally do. To run your Docker app with the agent enabled, add your license key and app name to your docker run command as environment variables: docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ your_image_name:latest Copy Other configuration options Caution Do not include your license key in your Dockerfile or Docker image. For more information, see our documentation on license key security. In addition to setting your application name or license key, you can set other configuration options by starting your container with the -e option. For example, to enable distributed tracing, use: $ docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ -e NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ your_image_name:latest Copy You can also set configuration options in your Dockerfile using ENV directives: ENV NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ NEW_RELIC_LOG=stdout # etc. Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.93774,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "sections": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": ". Check the <em>Node.js</em> <em>agent</em> release notes for information about past <em>agent</em> versions. In the first line of your app&#x27;s main module, add require(&#x27;newrelic&#x27;);. Add this line to your Dockerfile so the <em>agent</em> can run without a <em>configuration</em> file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image"
      },
      "id": "6043d3b728ccbcd4b82c60ce"
    }
  ],
  "/docs/apm/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.62503,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshoot</em> your installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ". <em>Troubleshoot</em> your installation If you encounter issues with your <em>Node.js</em> <em>agent</em>, see our <em>troubleshooting</em> information: Large memory usage: If you&#x27;ve installed the <em>Node.js</em> <em>agent</em> and your memory usage has increased, check out these possible solutions. <em>Troubleshooting</em> your <em>Node.js</em> installation: Try"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06136,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the <em>Node.js</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.3768,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the <em>Node.js</em> <em>agent</em>, make sure your application meets the following system requirements. If you haven&#x27;t already, create a New Relic account. It&#x27;s free, forever. <em>Node.js</em>"
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/apm/agents/nodejs-agent/troubleshooting/troubleshoot-browser-instrumentation-nodejs": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.62488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshoot</em> your installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ". <em>Troubleshoot</em> your installation If you encounter issues with your <em>Node.js</em> <em>agent</em>, see our <em>troubleshooting</em> information: Large memory usage: If you&#x27;ve installed the <em>Node.js</em> <em>agent</em> and your memory usage has increased, check out these possible solutions. <em>Troubleshooting</em> your <em>Node.js</em> installation: Try"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the <em>Node.js</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.376755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the <em>Node.js</em> <em>agent</em>, make sure your application meets the following system requirements. If you haven&#x27;t already, create a New Relic account. It&#x27;s free, forever. <em>Node.js</em>"
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/apm/agents/nodejs-agent/troubleshooting/troubleshoot-message-consumers": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.6246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshoot</em> your installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ". <em>Troubleshoot</em> your installation If you encounter issues with your <em>Node.js</em> <em>agent</em>, see our <em>troubleshooting</em> information: Large memory usage: If you&#x27;ve installed the <em>Node.js</em> <em>agent</em> and your memory usage has increased, check out these possible solutions. <em>Troubleshooting</em> your <em>Node.js</em> installation: Try"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the <em>Node.js</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.376755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the <em>Node.js</em> <em>agent</em>, make sure your application meets the following system requirements. If you haven&#x27;t already, create a New Relic account. It&#x27;s free, forever. <em>Node.js</em>"
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/apm/agents/nodejs-agent/troubleshooting/troubleshoot-your-nodejs-installation": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.62445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshoot</em> your installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ". <em>Troubleshoot</em> your installation If you encounter issues with your <em>Node.js</em> <em>agent</em>, see our <em>troubleshooting</em> information: Large memory usage: If you&#x27;ve installed the <em>Node.js</em> <em>agent</em> and your memory usage has increased, check out these possible solutions. <em>Troubleshooting</em> your <em>Node.js</em> installation: Try"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the <em>Node.js</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.37671,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the <em>Node.js</em> <em>agent</em>, make sure your application meets the following system requirements. If you haven&#x27;t already, create a New Relic account. It&#x27;s free, forever. <em>Node.js</em>"
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/apm/agents/nodejs-agent/troubleshooting/troubleshooting-large-memory-usage-nodejs": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "ed1db81e3ecf2a097db43baa318c847ec2e1ad7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-10-24T11:48:32Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.62445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Troubleshoot</em> your installation",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": ". <em>Troubleshoot</em> your installation If you encounter issues with your <em>Node.js</em> <em>agent</em>, see our <em>troubleshooting</em> information: Large memory usage: If you&#x27;ve installed the <em>Node.js</em> <em>agent</em> and your memory usage has increased, check out these possible solutions. <em>Troubleshooting</em> your <em>Node.js</em> installation: Try"
      },
      "id": "617480b664441fdadc5fbef8"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Processors",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "9d7f57033ce71bd983a3859e8dc431c544a3d198",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-24T13:11:06Z",
      "updated_at": "2021-10-23T21:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) Fastify If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Processors The New Relic Node Agent is built to run on most processors including being tested and validated to work on AWS Graviton2 Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.06116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the <em>Node.js</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "617480b564441f73505fe0c1"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "EOL NOTICE",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-10-19T03:58:30Z",
      "updated_at": "2021-10-19T03:58:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. EOL NOTICE We're discontinuing support for several capabilities in November 2021. This includes the Oracle Driver Package and Hapi versions prior to Hapi 19.2 for our Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you observability across your entire stack: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.37671,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the <em>Node.js</em> <em>agent</em>, make sure your application meets the following system requirements. If you haven&#x27;t already, create a New Relic account. It&#x27;s free, forever. <em>Node.js</em>"
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.94221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-24T22:42:37Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.917046,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.65596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/install-new-relic-php-agent-gae-flexible-environment": [
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-24T11:30:35Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 543.5162,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>New</em> <em>Relic</em> Ruby <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "sections": "<em>Install</em> <em>New</em> <em>Relic</em> Ruby <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "tags": "<em>Installation</em>",
        "body": " about deploying and configuring your Ruby app in the <em>GAE</em> <em>flexible</em> <em>environment</em>, see: Google App Engine&#x27;s documentation for Ruby Google App Engine&#x27;s tutorials for Ruby 1. Set up the <em>GAE</em> project and <em>install</em> dependencies Follow standard procedures to <em>install</em> <em>New</em> <em>Relic</em>&#x27;s Ruby <em>agent</em>, including your license"
      },
      "id": "61744bdb64441f12775fc7ea"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 476.592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> for <em>PHP</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and advanced installation topics, see: <em>PHP</em> <em>agent</em> installation: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard <em>New</em> <em>Relic</em> installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the <em>install</em> script Google App Engine (<em>GAE</em>) flex <em>environment</em>"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-24T11:20:53Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 364.55005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> for Python",
        "sections": "<em>Install</em> the Python <em>agent</em>",
        "tags": "<em>Agents</em>",
        "body": " <em>agent</em> in a Google App Engine <em>flexible</em> <em>environment</em>. Monitor app performance After you <em>install</em> the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in <em>New</em> <em>Relic</em> One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). Get"
      },
      "id": "61749d4d196a6727702f1368"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/php-agent-heroku": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.94264,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-24T12:07:41Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.198654,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-24T22:42:37Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.91713,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.94264,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-24T12:07:41Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.198654,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-24T22:42:37Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.91713,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/silent-mode-install-script-advanced": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.9425,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-24T12:07:41Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.198654,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-24T22:42:37Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.91713,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/starting-php-daemon-advanced": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.9425,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-24T12:07:41Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.198654,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-24T22:42:37Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.91713,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/uninstalling-php-agent": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.94238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-24T12:07:41Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.198654,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-10-24T22:42:37Z",
      "updated_at": "2021-07-27T05:14:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.91712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " option. This is useful if the daemon runs on a different host or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. Troubleshoot your <em>PHP</em> <em>installation</em> If there were problems with the <em>installation</em> process, or if no data appears in the UI"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/apm/agents/php-agent/advanced-installation/use-newrelic-install-script-php": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.94238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and <em>advanced</em> <em>installation</em> topics, see: <em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> Starting the <em>PHP</em> daemon (a standard New Relic <em>installation</em> starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-10-24T12:07:41Z",
      "updated_at": "2021-07-27T05:10:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.198654,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ") and a daemon, which aggregates data sent from one or more <em>agents</em> and sends it to New Relic. For this reason, there are two options for enabling the <em>PHP</em> <em>agent</em> for container environments: Install <em>agent</em> and daemon on different containers. This is the recommended setup. Install <em>agent</em> and daemon on the same"
      },
      "id": "60441c1ee7b9d23165579a29"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.65588,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/php-agent/api-guides/guide-using-php-agent-api": [
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "4e40146267875d20558ba64197b3f2d30c430ed1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-10-24T00:12:38Z",
      "updated_at": "2021-10-24T00:10:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use module prepending to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see trace_execution_scoped in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.272705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic Ruby <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "6174a48c28ccbc24abc6b5e5"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69791,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/attributes/attribute-examples": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.0159,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>attributes</em> or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.0071,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.14142,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    }
  ],
  "/docs/apm/agents/php-agent/attributes/enable-or-disable-attributes": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.0159,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>attributes</em> or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.0071,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.14142,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    }
  ],
  "/docs/apm/agents/php-agent/attributes/php-agent-attributes": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.01575,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>attributes</em> or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and API instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.00699,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.14133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    }
  ],
  "/docs/apm/agents/php-agent/configuration/name-your-php-application": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.35645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Configure</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " installation for New Relic&#x27;s <em>PHP</em> <em>agent</em> Configure the <em>agent</em> The <em>agent</em> includes a variety of <em>configuration</em> options to further customize and fine-tune your installation. Tip The most important part of <em>agent</em> <em>configuration</em> is to give your app a descriptive name. New Relic uses this app name to aggregate metrics"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.90158,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.84505,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    }
  ],
  "/docs/apm/agents/php-agent/configuration/php-agent-configuration": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.35632,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Configure</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " installation for New Relic&#x27;s <em>PHP</em> <em>agent</em> Configure the <em>agent</em> The <em>agent</em> includes a variety of <em>configuration</em> options to further customize and fine-tune your installation. Tip The most important part of <em>agent</em> <em>configuration</em> is to give your app a descriptive name. New Relic uses this app name to aggregate metrics"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.90146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.844955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    }
  ],
  "/docs/apm/agents/php-agent/configuration/php-directory-ini-settings": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.35632,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Configure</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " installation for New Relic&#x27;s <em>PHP</em> <em>agent</em> Configure the <em>agent</em> The <em>agent</em> includes a variety of <em>configuration</em> options to further customize and fine-tune your installation. Tip The most important part of <em>agent</em> <em>configuration</em> is to give your app a descriptive name. New Relic uses this app name to aggregate metrics"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.90146,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.844955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    }
  ],
  "/docs/apm/agents/php-agent/configuration/proxy-daemon-newreliccfg-settings": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.3562,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Configure</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " installation for New Relic&#x27;s <em>PHP</em> <em>agent</em> Configure the <em>agent</em> The <em>agent</em> includes a variety of <em>configuration</em> options to further customize and fine-tune your installation. Tip The most important part of <em>agent</em> <em>configuration</em> is to give your app a descriptive name. New Relic uses this app name to aggregate metrics"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.90137,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.844864,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    }
  ],
  "/docs/apm/agents/php-agent/features/browser-monitoring-php-agent": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.70224,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "Connect the <em>agent</em> to other New Relic <em>features</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> to other New Relic <em>features</em> The <em>PHP</em> <em>agent</em> integrates with other New Relic <em>features</em> to give you end-to-end visibility: Product Integration Browser monitoring The <em>PHP</em> <em>agent</em> automatically injects the browser <em>agent</em>&#x27;s JS code when you enable auto-instrumentation. After enabling browser injection, you"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.79103,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest <em>features</em>, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.425644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Our <em>PHP</em> <em>agent</em> monitors your application to help you identify and solve performance issues. You can also extend the <em>agent</em>&#x27;s performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/features/distributed-tracing-php-agent": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.70212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "Connect the <em>agent</em> to other New Relic <em>features</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> to other New Relic <em>features</em> The <em>PHP</em> <em>agent</em> integrates with other New Relic <em>features</em> to give you end-to-end visibility: Product Integration Browser monitoring The <em>PHP</em> <em>agent</em> automatically injects the browser <em>agent</em>&#x27;s JS code when you enable auto-instrumentation. After enabling browser injection, you"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.79092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest <em>features</em>, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Our <em>PHP</em> <em>agent</em> monitors your application to help you identify and solve performance issues. You can also extend the <em>agent</em>&#x27;s performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/features/multiple-accounts": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.70212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "Connect the <em>agent</em> to other New Relic <em>features</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> to other New Relic <em>features</em> The <em>PHP</em> <em>agent</em> integrates with other New Relic <em>features</em> to give you end-to-end visibility: Product Integration Browser monitoring The <em>PHP</em> <em>agent</em> automatically injects the browser <em>agent</em>&#x27;s JS code when you enable auto-instrumentation. After enabling browser injection, you"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.79092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest <em>features</em>, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Our <em>PHP</em> <em>agent</em> monitors your application to help you identify and solve performance issues. You can also extend the <em>agent</em>&#x27;s performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/features/php-custom-instrumentation": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.702,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "Connect the <em>agent</em> to other New Relic <em>features</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> to other New Relic <em>features</em> The <em>PHP</em> <em>agent</em> integrates with other New Relic <em>features</em> to give you end-to-end visibility: Product Integration Browser monitoring The <em>PHP</em> <em>agent</em> automatically injects the browser <em>agent</em>&#x27;s JS code when you enable auto-instrumentation. After enabling browser injection, you"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.7908,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest <em>features</em>, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Our <em>PHP</em> <em>agent</em> monitors your application to help you identify and solve performance issues. You can also extend the <em>agent</em>&#x27;s performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/features/recording-deployments-using-php-script": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.702,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "Connect the <em>agent</em> to other New Relic <em>features</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> to other New Relic <em>features</em> The <em>PHP</em> <em>agent</em> integrates with other New Relic <em>features</em> to give you end-to-end visibility: Product Integration Browser monitoring The <em>PHP</em> <em>agent</em> automatically injects the browser <em>agent</em>&#x27;s JS code when you enable auto-instrumentation. After enabling browser injection, you"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.7908,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest <em>features</em>, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Our <em>PHP</em> <em>agent</em> monitors your application to help you identify and solve performance issues. You can also extend the <em>agent</em>&#x27;s performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/analyze-phpunit-test-data-new-relic": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.05255,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". To avoid losing reported data, make sure your instrumented application doesn&#x27;t send transactions before both connections are established. Install the <em>agent</em> Before you install the <em>PHP</em> <em>agent</em>, ensure your system meets the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-24T13:37:31Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.35625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-24T12:13:51Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.32635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/aws-elastic-beanstalk-installation-php": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.05255,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". To avoid losing reported data, make sure your instrumented application doesn&#x27;t send transactions before both connections are established. Install the <em>agent</em> Before you install the <em>PHP</em> <em>agent</em>, ensure your system meets the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-24T13:37:31Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.35625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-24T12:13:51Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.32635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/drupal-specific-functionality": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.05241,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". To avoid losing reported data, make sure your instrumented application doesn&#x27;t send transactions before both connections are established. Install the <em>agent</em> Before you install the <em>PHP</em> <em>agent</em>, ensure your system meets the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-24T12:13:51Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.32635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-10-24T22:44:56Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.23665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/guzzle": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.05241,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". To avoid losing reported data, make sure your instrumented application doesn&#x27;t send transactions before both connections are established. Install the <em>agent</em> Before you install the <em>PHP</em> <em>agent</em>, ensure your system meets the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-24T13:37:31Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.35625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-24T12:13:51Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.32635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/magento-specific-functionality": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.05229,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". To avoid losing reported data, make sure your instrumented application doesn&#x27;t send transactions before both connections are established. Install the <em>agent</em> Before you install the <em>PHP</em> <em>agent</em>, ensure your system meets the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-24T13:37:31Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.35625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-10-24T22:44:56Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.23665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/php-frameworks-integrate-support-new-relic": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.05229,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". To avoid losing reported data, make sure your instrumented application doesn&#x27;t send transactions before both connections are established. Install the <em>agent</em> Before you install the <em>PHP</em> <em>agent</em>, ensure your system meets the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-24T13:37:31Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.35625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-24T12:13:51Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.32635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/predis-library-php": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.05215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". To avoid losing reported data, make sure your instrumented application doesn&#x27;t send transactions before both connections are established. Install the <em>agent</em> Before you install the <em>PHP</em> <em>agent</em>, ensure your system meets the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-24T13:37:31Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.35623,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-24T12:13:51Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.32635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/apm/agents/php-agent/frameworks-libraries/wordpress-specific-functionality": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.05215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". To avoid losing reported data, make sure your instrumented application doesn&#x27;t send transactions before both connections are established. Install the <em>agent</em> Before you install the <em>PHP</em> <em>agent</em>, ensure your system meets the system requirements. The <em>PHP</em> <em>agent</em> supports many of the most common <em>PHP</em> <em>frameworks</em>"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-10-24T13:37:31Z",
      "updated_at": "2021-07-09T12:35:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the browser monitoring JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.35623,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-10-24T12:13:51Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.32635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    }
  ],
  "/docs/apm/agents/php-agent/getting-started/apm-agent-security-php": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.61258,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.4826,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the <em>PHP</em> <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Introduction to New Relic integrations",
        "Choose what's right for you",
        "Create your own solutions"
      ],
      "title": "Introduction to New Relic integrations",
      "type": "docs",
      "tags": [
        "Instrument everything",
        "Get started"
      ],
      "external_id": "9a44613b8a5ec0a9c9570b22c7d2f3ea726f2671",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/introduction-new-relic-integrations/",
      "published_at": "2021-10-24T11:54:18Z",
      "updated_at": "2021-10-24T00:59:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "We provide hundreds of solutions to get your data into New Relic so you can analyze the data in one place. They give you a steady flow of useful data to fix problems quickly, maintain complex systems, improve your code, and accelerate your digital transformation. You can bring in data from hundreds of applications, frameworks, services, operating systems, and other technologies. Our integrations gather the data, and the agents send it to New Relic. The solution you need may require you to install both an integration and an agent. In some cases, you can just install our agents that contain integrations, such as our APM agents. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to get you started. Choose what's right for you We offer a wide range of solutions so you can easily collect data across your environment. You may only need one of our solutions to get the data you need, or you can choose a variety of options to capture a broader range of data types. Go to New Relic Integrations to find solutions that fit your environment. Here is a sample of what you’ll find there: Application performance monitoring (APM): C, Go, Java, Node, .NET, PHP, Python, and Ruby Mobile apps: Android and iOS Browser monitoring: Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and Apple Safari Host monitoring: Linux and Microsoft Windows Cloud platform monitoring: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP) Core infrastructure services: Kubernetes, NGINX, MySQL, and more Open source telemetry integrations: Prometheus, Micrometer, OpenTelemetry, and more Create your own solutions If you are looking for custom options, we have tools to help you create your own: Use New Relic Flex to create lightweight monitoring solutions using infrastructure monitoring. Use New Relic Telemetry SDKs to build custom solutions for sending metrics, traces, and more. Build your own New Relic One applications that you can share with your colleagues, or edit open source applications in our catalog.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.68968,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " integrations, such as our APM <em>agents</em>. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to <em>get</em> you <em>started</em>. Choose what&#x27;s right for you We offer a wide range of solutions so you can easily collect"
      },
      "id": "603e817f28ccbc4857eba798"
    }
  ],
  "/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.61243,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic integrations",
        "Choose what's right for you",
        "Create your own solutions"
      ],
      "title": "Introduction to New Relic integrations",
      "type": "docs",
      "tags": [
        "Instrument everything",
        "Get started"
      ],
      "external_id": "9a44613b8a5ec0a9c9570b22c7d2f3ea726f2671",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/introduction-new-relic-integrations/",
      "published_at": "2021-10-24T11:54:18Z",
      "updated_at": "2021-10-24T00:59:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "We provide hundreds of solutions to get your data into New Relic so you can analyze the data in one place. They give you a steady flow of useful data to fix problems quickly, maintain complex systems, improve your code, and accelerate your digital transformation. You can bring in data from hundreds of applications, frameworks, services, operating systems, and other technologies. Our integrations gather the data, and the agents send it to New Relic. The solution you need may require you to install both an integration and an agent. In some cases, you can just install our agents that contain integrations, such as our APM agents. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to get you started. Choose what's right for you We offer a wide range of solutions so you can easily collect data across your environment. You may only need one of our solutions to get the data you need, or you can choose a variety of options to capture a broader range of data types. Go to New Relic Integrations to find solutions that fit your environment. Here is a sample of what you’ll find there: Application performance monitoring (APM): C, Go, Java, Node, .NET, PHP, Python, and Ruby Mobile apps: Android and iOS Browser monitoring: Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and Apple Safari Host monitoring: Linux and Microsoft Windows Cloud platform monitoring: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP) Core infrastructure services: Kubernetes, NGINX, MySQL, and more Open source telemetry integrations: Prometheus, Micrometer, OpenTelemetry, and more Create your own solutions If you are looking for custom options, we have tools to help you create your own: Use New Relic Flex to create lightweight monitoring solutions using infrastructure monitoring. Use New Relic Telemetry SDKs to build custom solutions for sending metrics, traces, and more. Build your own New Relic One applications that you can share with your colleagues, or edit open source applications in our catalog.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.68958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " integrations, such as our APM <em>agents</em>. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to <em>get</em> you <em>started</em>. Choose what&#x27;s right for you We offer a wide range of solutions so you can easily collect"
      },
      "id": "603e817f28ccbc4857eba798"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-24T11:20:53Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.975006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Install the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    }
  ],
  "/docs/apm/agents/php-agent/getting-started/new-relic-daemon-processes": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.61243,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.48244,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the <em>PHP</em> <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Introduction to New Relic integrations",
        "Choose what's right for you",
        "Create your own solutions"
      ],
      "title": "Introduction to New Relic integrations",
      "type": "docs",
      "tags": [
        "Instrument everything",
        "Get started"
      ],
      "external_id": "9a44613b8a5ec0a9c9570b22c7d2f3ea726f2671",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/introduction-new-relic-integrations/",
      "published_at": "2021-10-24T11:54:18Z",
      "updated_at": "2021-10-24T00:59:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "We provide hundreds of solutions to get your data into New Relic so you can analyze the data in one place. They give you a steady flow of useful data to fix problems quickly, maintain complex systems, improve your code, and accelerate your digital transformation. You can bring in data from hundreds of applications, frameworks, services, operating systems, and other technologies. Our integrations gather the data, and the agents send it to New Relic. The solution you need may require you to install both an integration and an agent. In some cases, you can just install our agents that contain integrations, such as our APM agents. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to get you started. Choose what's right for you We offer a wide range of solutions so you can easily collect data across your environment. You may only need one of our solutions to get the data you need, or you can choose a variety of options to capture a broader range of data types. Go to New Relic Integrations to find solutions that fit your environment. Here is a sample of what you’ll find there: Application performance monitoring (APM): C, Go, Java, Node, .NET, PHP, Python, and Ruby Mobile apps: Android and iOS Browser monitoring: Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and Apple Safari Host monitoring: Linux and Microsoft Windows Cloud platform monitoring: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP) Core infrastructure services: Kubernetes, NGINX, MySQL, and more Open source telemetry integrations: Prometheus, Micrometer, OpenTelemetry, and more Create your own solutions If you are looking for custom options, we have tools to help you create your own: Use New Relic Flex to create lightweight monitoring solutions using infrastructure monitoring. Use New Relic Telemetry SDKs to build custom solutions for sending metrics, traces, and more. Build your own New Relic One applications that you can share with your colleagues, or edit open source applications in our catalog.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.68958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " integrations, such as our APM <em>agents</em>. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to <em>get</em> you <em>started</em>. Choose what&#x27;s right for you We offer a wide range of solutions so you can easily collect"
      },
      "id": "603e817f28ccbc4857eba798"
    }
  ],
  "/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.48227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " one.newrelic.com &gt; APM &gt; (select an app) &gt; Summary: After installing the <em>PHP</em> <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Introduction to New Relic integrations",
        "Choose what's right for you",
        "Create your own solutions"
      ],
      "title": "Introduction to New Relic integrations",
      "type": "docs",
      "tags": [
        "Instrument everything",
        "Get started"
      ],
      "external_id": "9a44613b8a5ec0a9c9570b22c7d2f3ea726f2671",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/introduction-new-relic-integrations/",
      "published_at": "2021-10-24T11:54:18Z",
      "updated_at": "2021-10-24T00:59:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "We provide hundreds of solutions to get your data into New Relic so you can analyze the data in one place. They give you a steady flow of useful data to fix problems quickly, maintain complex systems, improve your code, and accelerate your digital transformation. You can bring in data from hundreds of applications, frameworks, services, operating systems, and other technologies. Our integrations gather the data, and the agents send it to New Relic. The solution you need may require you to install both an integration and an agent. In some cases, you can just install our agents that contain integrations, such as our APM agents. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to get you started. Choose what's right for you We offer a wide range of solutions so you can easily collect data across your environment. You may only need one of our solutions to get the data you need, or you can choose a variety of options to capture a broader range of data types. Go to New Relic Integrations to find solutions that fit your environment. Here is a sample of what you’ll find there: Application performance monitoring (APM): C, Go, Java, Node, .NET, PHP, Python, and Ruby Mobile apps: Android and iOS Browser monitoring: Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and Apple Safari Host monitoring: Linux and Microsoft Windows Cloud platform monitoring: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP) Core infrastructure services: Kubernetes, NGINX, MySQL, and more Open source telemetry integrations: Prometheus, Micrometer, OpenTelemetry, and more Create your own solutions If you are looking for custom options, we have tools to help you create your own: Use New Relic Flex to create lightweight monitoring solutions using infrastructure monitoring. Use New Relic Telemetry SDKs to build custom solutions for sending metrics, traces, and more. Build your own New Relic One applications that you can share with your colleagues, or edit open source applications in our catalog.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.68948,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " integrations, such as our APM <em>agents</em>. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to <em>get</em> you <em>started</em>. Choose what&#x27;s right for you We offer a wide range of solutions so you can easily collect"
      },
      "id": "603e817f28ccbc4857eba798"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "e3621b5589469c2b3b20d5d140027e5c105e1dd3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-10-24T11:20:53Z",
      "updated_at": "2021-10-23T23:39:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read our docs on our other observability solutions and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.97491,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Install the Python <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " <em>agent</em> in a Google App Engine flexible environment. Monitor app performance After you install the Python <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em>"
      },
      "id": "61749d4d196a6727702f1368"
    }
  ],
  "/docs/apm/agents/php-agent/index": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69686,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42491,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Our <em>PHP</em> <em>agent</em> monitors your application to help you identify and solve performance issues. You can also extend the <em>agent</em>&#x27;s performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.14041,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    }
  ],
  "/docs/apm/agents/php-agent/installation/install-php-agent-shared-hosting-service": [
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.25209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive <em>installation</em> procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-<em>php</em>5 package The package name for the New Relic for <em>PHP</em> <em>agent</em> is newrelic-<em>php</em>5. Tip"
      },
      "id": "6174913528ccbc853bc6c0a0"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.79352,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em>, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add <em>PHP</em> data For standard installations, see: <em>PHP</em> <em>agent</em> <em>installation</em> overview (the basic <em>installation</em> steps for the most common setups). Installing on RedHat or CentOS Installing"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.04207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/php-agent/installation/php-agent-installation-aws-linux-redhat-centos": [
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.25209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive <em>installation</em> procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-<em>php</em>5 package The package name for the New Relic for <em>PHP</em> <em>agent</em> is newrelic-<em>php</em>5. Tip"
      },
      "id": "6174913528ccbc853bc6c0a0"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.79352,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em>, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add <em>PHP</em> data For standard installations, see: <em>PHP</em> <em>agent</em> <em>installation</em> overview (the basic <em>installation</em> steps for the most common setups). Installing on RedHat or CentOS Installing"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.04207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/php-agent/installation/php-agent-installation-overview": [
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.25195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive <em>installation</em> procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-<em>php</em>5 package The package name for the New Relic for <em>PHP</em> <em>agent</em> is newrelic-<em>php</em>5. Tip"
      },
      "id": "6174913528ccbc853bc6c0a0"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.79337,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em>, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add <em>PHP</em> data For standard installations, see: <em>PHP</em> <em>agent</em> <em>installation</em> overview (the basic <em>installation</em> steps for the most common setups). Installing on RedHat or CentOS Installing"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.04195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/php-agent/installation/php-agent-installation-tar-file": [
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.25195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive <em>installation</em> procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-<em>php</em>5 package The package name for the New Relic for <em>PHP</em> <em>agent</em> is newrelic-<em>php</em>5. Tip"
      },
      "id": "6174913528ccbc853bc6c0a0"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.79337,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em>, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add <em>PHP</em> data For standard installations, see: <em>PHP</em> <em>agent</em> <em>installation</em> overview (the basic <em>installation</em> steps for the most common setups). Installing on RedHat or CentOS Installing"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.04195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/php-agent/installation/php-agent-installation-ubuntu-debian": [
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.2518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em> for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive <em>installation</em> procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-<em>php</em>5 package The package name for the New Relic for <em>PHP</em> <em>agent</em> is newrelic-<em>php</em>5. Tip"
      },
      "id": "6174913528ccbc853bc6c0a0"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.79324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em>, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add <em>PHP</em> data For standard installations, see: <em>PHP</em> <em>agent</em> <em>installation</em> overview (the basic <em>installation</em> steps for the most common setups). Installing on RedHat or CentOS Installing"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.04182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "6174902e196a674f042f1856"
    }
  ],
  "/docs/apm/agents/php-agent/installation/update-php-agent": [
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.79324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "<em>Install</em> the <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " the <em>agent</em>, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add <em>PHP</em> data For standard installations, see: <em>PHP</em> <em>agent</em> <em>installation</em> overview (the basic <em>installation</em> steps for the most common setups). Installing on RedHat or CentOS Installing"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.04182,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", and removed in release 7.0. <em>PHP</em> 5.3 and <em>PHP</em> 5.4 support was deprecated in release 9.15 of the <em>agent</em>, and removed in release 9.17. Permissions <em>Installation</em>: Root access is required for most installations. Running: Root access is not required. License key For any <em>installation</em>, you will need your New"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "df6c4f9168670f93a4d3fa81b9481715068960c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-10-24T11:30:35Z",
      "updated_at": "2021-10-23T17:52:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.3333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic Ruby <em>agent</em> in GAE flexible environment",
        "sections": "<em>Install</em> New Relic Ruby <em>agent</em> in GAE flexible environment",
        "tags": "<em>Agents</em>",
        "body": "With APM&#x27;s Ruby <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using solutions like APM and browser"
      },
      "id": "61744bdb64441f12775fc7ea"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/index": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 621.0161,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-10-24T12:10:11Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 540.92816,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-10-24T12:52:17Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 532.2496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_add_custom_parameter": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.91661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69648,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42453,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_add_custom_tracer": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.91661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_background_job": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.91661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42444,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_capture_params": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.9166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69629,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42435,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_disable_autorum": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.9166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69629,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42435,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_end_of_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.916595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69619,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.424255,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_end_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.916595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69619,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.424255,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_get_browser_timing_footer": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.91659,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.6961,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.424164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_get_browser_timing_header": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.91659,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.6961,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.424164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_ignore_apdex": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.91658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.696,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42407,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_ignore_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.91658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.696,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42407,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_name_transaction": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.91658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69591,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42398,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_notice_error": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69591,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42398,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    },
    {
      "sections": [
        "Update the PHP agent",
        "Use the newrelic-php5 package",
        "Tip",
        "Update using your package manager",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Update unsupported agent versions",
        "Important",
        "Troubleshooting after update",
        "For more help"
      ],
      "title": "Update the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "baf6b18412229bab77695136999a7dd8c6a35a71",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/installation/update-php-agent/",
      "published_at": "2021-10-23T22:50:59Z",
      "updated_at": "2021-10-23T22:48:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your PHP agent to the latest version. For additional information about specific agent updates, refer to the PHP agent release notes. This document explains how to update the agent for: RedHat and CentOS Ubuntu and Debian To update via tar archive, follow the tar archive installation procedures. (Procedures to install and update with the tar archive are the same.) Use the newrelic-php5 package The package name for the New Relic for PHP agent is newrelic-php5. Tip Although the name references PHP 5, this package works for all supported PHP versions, including PHP 7 versions. Update using your package manager To update the PHP agent: Replace the agent files using your preferred package manager for your system: RedHat or CentOS Manager Procedures yum If you are using the New Relic repositories directly, update to the latest agent using the following command: sudo yum update newrelic-php5 Copy 32-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.i386.rpm newrelic-php5-X.X.X.X-1.i386.rpm Copy 64-bit rpm Download the newest version of the .rpm files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. rpm -i newrelic-php5-common-X.X.X.X-1.noarch.rpm newrelic-daemon-X.X.X.X-1.x86_64.rpm newrelic-php5-X.X.X.X-1.x86_64.rpm Copy Ubuntu or Debian Manager Procedures apt-get If you are using the New Relic repositories directly, update to the latest agent using the following command: apt-get update apt-get install newrelic-php5 Copy 32-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_i386.deb newrelic-php5_X.X.X.X_i386.deb Copy 64-bit dpkg Download the newest version of the .deb files from the New Relic downloads page, and run the following command. Make sure to replace X.X.X.X with the latest New Relic for PHP version number. dpkg -i newrelic-php5-common_X.X.X.X_all.deb newrelic-daemon_X.X.X.X_amd64.deb newrelic-php5_X.X.X.X_amd64.deb Copy RedHat or CentOS: Run the newrelic-install script, and follow the install script's confirmation prompt before overwriting an old installation. sudo newrelic-install install Copy Ubuntu or Debian: Follow the package manager's prompts to run the newrelic-install script as part of its installation process. Stop any residual newrelic-daemon processes by running kill $(pgrep newrelic-daemon) Copy If the newrelic-daemon is configured to start in external mode, use your operating system's service manager to restart it. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Wait a few minutes for your application to send data to New Relic. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 8.0.0.204 Release notes: PHP agent 8.0.0.204 TLS replaces the newrelic.daemon.ssl ini setting. To increase security, the newrelic.daemon.ssl ini setting has been removed. Transport Layer Security (TLS) will now always be used in communication with the New Relic collector. 7.0.0.186 Release notes: PHP agent 7.0.0.186 PHP 5.2 is no longer supported. New Relic highly encourages you to use a supported version of PHP (5.6 or higher). If you want to continue running the New Relic PHP agent with PHP 5.2, we recommend using agent version 6.9. However, in this case, we can only offer limited support. 5.0.0.115 Release notes: PHP agent 5.0.0.115 Daemon command line flags have been renamed. For customers who start the daemon manually, you can find the newly renamed command line flags with the -h or --help flags. The following old flags will be removed in a future release: [ -p pidfile] [ -d level] [ -c config] [ -l logfile] [ -P port] [ -s] [ -n] [ -b SSL-certificate-bundle] [ -S SSL-certificate-path] [ -H host] [ -x proxy] [ -a auditlog] Troubleshooting after update If you updated PHP and the agent stopped working or reporting data, follow the troubleshooting procedures. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.13949,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>PHP</em> <em>agent</em>",
        "sections": "Update the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, we recommend you update your <em>PHP</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>PHP</em> <em>agent</em> release notes. This document explains how to update"
      },
      "id": "6174913528ccbc853bc6c0a0"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_record_custom_event": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.91657,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69581,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42389,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_record_datastore_segment": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.91657,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69581,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.42389,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ],
  "/docs/apm/agents/php-agent/php-agent-api/newrelic_set_appname": [
    {
      "sections": [
        "newrelic_notice_error (PHP agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Collect errors that are not handled automatically",
        "Important",
        "Set the callback for your own error and exception handler",
        "set_exception_handler()",
        "set_error_handler()",
        "Parameters",
        "Return values",
        "Examples",
        "Report exceptions from your own exception handler",
        "Report errors from your own error handler (PHP version 5.6 or higher)",
        "Report errors from your own error handler (PHP version 5.5 or lower)",
        "For more help"
      ],
      "title": "newrelic_notice_error (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "3cb5b4c27c6ba8a076d00125bfc0516696bc5ae7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelic_notice_error/",
      "published_at": "2021-10-24T22:46:39Z",
      "updated_at": "2021-09-14T19:13:53Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_notice_error(string $message) newrelic_notice_error(Throwable|Exception $e) newrelic_notice_error(string $errstr, Throwable|Exception $e) newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Use these calls to collect errors that the PHP agent does not collect automatically and to set the callback for your own error and exception handler. Requirements Agent version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the PHP version you are using: PHP version 5 or lower: You must pass a valid PHP Exception class. PHP version 7 or higher: You must pass a valid PHP Throwable interface. Description The PHP agent handles PHP errors and exceptions automatically for supported frameworks. If you want to collect errors that are not handled automatically so that you can query for those errors in New Relic and view error traces, you can use newrelic_notice_error. If you want to use your own error and exception handlers, you can set newrelic_notice_error as the callback. Collect errors that are not handled automatically To collect errors that the PHP agent does not handle automatically, such as non-PHP errors, add this call to the function that you want to report on: newrelic_notice_error(Throwable|Exception $e) Copy Important When there are multiple calls to this function in a single transaction, the PHP agent retains the exception from the last call only. Set the callback for your own error and exception handler To use your own handler, use these calls to make sure that the PHP agent notices the errors and exceptions from within your handler. set_exception_handler() To provide newrelic_notice_error as the callback for set_exception_handler(), use the following: newrelic_notice_error(Throwable|Exception $e) Copy set_error_handler() To provide newrelic_notice_error as the callback for set_error_handler(), use the following: newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameters This function can handle a variable number of parameters. You can pass-in 1 or 5 parameters, depending on your use case. newrelic_notice_error(string $message) Copy Parameter Description $message string Required. Provide an error message that will be meaningful to you when it displays in error traces. newrelic_notice_error(Throwable|Exception $e) Copy Parameter Description $e exception Required. Defaults to null. The agent uses Exception or Throwable to capture the stack frame and set the error class to the exception class name. If null or omitted, the agent reports an \"exception\" in the same format created by Exception::__toString. newrelic_notice_error(int $errno, string $errstr, string $errfile, int $errline, string $errcontext) Copy Parameter Description $errno integer Required. The predefined level of the error, expressed as an integer. $errstr string Required. Provide an error message that will be meaningful to you when it displays in error traces. $errfile string Optional. The name of the file that the error occurred in. $errline integer Optional. The line number where the error occurred. $errcontext string Optional. An array that points to the symbol table that was active when the error occurred. Return values Returns null regardless of result. Examples Collect errors that are not handled automatically Track errors that aren't reported automatically or that aren't PHP errors. In this example, an error is sent to the PHP agent if an unknown user accesses your app. try { //Add your code that may throw an error here. } catch (UserNotFoundException $e) { newrelic_notice_error($e); //Handle normally. } Copy Report exceptions from your own exception handler Make the PHP agent notice exceptions from within your own exception handler. function example_exception_handler($ex) { if (extension_loaded('newrelic')) { newrelic_notice_error($ex); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.6 or higher) PHP version 5.6 or higher: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { newrelic_notice_error(...func_get_args()); } //Add your code here. } Copy Report errors from your own error handler (PHP version 5.5 or lower) PHP version 5.5 or lower: Make the PHP agent notice errors from within your own error handler. function example_error_handler($errno, $errstr, $errfile = null, $errline = null, $errcontext = null) { if (extension_loaded('newrelic')) { call_user_func_array('newrelic_notice_error', func_get_args()); } //Add your code here. } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.916565,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_notice_error (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": " that the <em>PHP</em> <em>agent</em> does not collect automatically and to set the callback for your own error and exception handler. Requirements <em>Agent</em> version 2.6 or higher. Caution If you include an exception ($e), there are differences depending on the <em>PHP</em> version you are using: <em>PHP</em> version 5 or lower: You must pass"
      },
      "id": "6043ca25e7b9d202dc5799bb"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "768d979d777c65da2940c078e176de86904259a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-10-24T13:20:47Z",
      "updated_at": "2021-10-23T22:43:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. If you don't have one already, create a New Relic account. It's free, forever. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 6 or higher Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 7.0 (\"wheezy\") or higher Ubuntu LTS 14.04 (\"Trusty Tahr\") or higher or Ubuntu non-LTS 19.04 (\"Disco Dingo\") or higher. Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Joomla 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.69572,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host"
      },
      "id": "6174902e196a674f042f1856"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Monitor app performance",
        "Architecture",
        "Tip",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "0a6a630fe7b32cde81bef63e2e2ca6aeec9de174",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-10-24T13:34:29Z",
      "updated_at": "2021-10-23T22:44:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.4238,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The <em>PHP</em> <em>agent</em> has two binaries that work together to forward data to New Relic: The <em>agent</em> handles automatic and <em>API</em> instrumentation of your <em>PHP</em> code"
      },
      "id": "61749062e7b9d2458313ca07"
    }
  ]
}